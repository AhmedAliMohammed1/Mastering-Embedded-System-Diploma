
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000508  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00010508  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00010508  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000508  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000508  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000508  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000867  00000000  00000000  00010531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000233  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003fc  00000000  00000000  00010fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  000113c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00011480  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000be0  00000000  00000000  00011510  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000378  00000000  00000000  000120f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003220  00000000  00000000  00012468  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00015688  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000218  00000000  00000000  00015704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004e8 	.word	0x080004e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004e8 	.word	0x080004e8

08000170 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b07      	cmp	r3, #7
 800017e:	d803      	bhi.n	8000188 <Get_PIN_Positon+0x18>
 8000180:	88fb      	ldrh	r3, [r7, #6]
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	b29b      	uxth	r3, r3
 8000186:	e006      	b.n	8000196 <Get_PIN_Positon+0x26>
 8000188:	88fb      	ldrh	r3, [r7, #6]
 800018a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800018e:	3338      	adds	r3, #56	; 0x38
 8000190:	b29b      	uxth	r3, r3
 8000192:	009b      	lsls	r3, r3, #2
 8000194:	b29b      	uxth	r3, r3
 8000196:	81fb      	strh	r3, [r7, #14]
return positon;
 8000198:	89fb      	ldrh	r3, [r7, #14]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80001a4:	b590      	push	{r4, r7, lr}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	6039      	str	r1, [r7, #0]
	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	2b07      	cmp	r3, #7
 80001b6:	d801      	bhi.n	80001bc <MCAL_GPIO_init+0x18>
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	e001      	b.n	80001c0 <MCAL_GPIO_init+0x1c>
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3304      	adds	r3, #4
 80001c0:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	4618      	mov	r0, r3
 80001ca:	f7ff ffd1 	bl	8000170 <Get_PIN_Positon>
 80001ce:	4603      	mov	r3, r0
 80001d0:	461a      	mov	r2, r3
 80001d2:	230f      	movs	r3, #15
 80001d4:	4093      	lsls	r3, r2
 80001d6:	43da      	mvns	r2, r3
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	401a      	ands	r2, r3
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d00e      	beq.n	800020a <MCAL_GPIO_init+0x66>
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	789b      	ldrb	r3, [r3, #2]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d009      	beq.n	800020a <MCAL_GPIO_init+0x66>
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	789b      	ldrb	r3, [r3, #2]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	2b02      	cmp	r3, #2
 80001fe:	d004      	beq.n	800020a <MCAL_GPIO_init+0x66>
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	789b      	ldrb	r3, [r3, #2]
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b03      	cmp	r3, #3
 8000208:	d156      	bne.n	80002b8 <MCAL_GPIO_init+0x114>
		if(PINx->MODE == INPUT_PD){
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	789b      	ldrb	r3, [r3, #2]
 800020e:	b2db      	uxtb	r3, r3
 8000210:	2b03      	cmp	r3, #3
 8000212:	d11c      	bne.n	800024e <MCAL_GPIO_init+0xaa>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	b29b      	uxth	r3, r3
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ffa8 	bl	8000170 <Get_PIN_Positon>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	2308      	movs	r3, #8
 8000226:	fa03 f202 	lsl.w	r2, r3, r2
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	431a      	orrs	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	2301      	movs	r3, #1
 800023e:	4093      	lsls	r3, r2
 8000240:	43da      	mvns	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	401a      	ands	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 800024c:	e04c      	b.n	80002e8 <MCAL_GPIO_init+0x144>
		}

		else if(PINx->MODE == INPUT_PU){
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2b02      	cmp	r3, #2
 8000256:	d11c      	bne.n	8000292 <MCAL_GPIO_init+0xee>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	b29b      	uxth	r3, r3
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_PIN_Positon>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	2308      	movs	r3, #8
 800026a:	fa03 f202 	lsl.w	r2, r3, r2
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	431a      	orrs	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	b29b      	uxth	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	2301      	movs	r3, #1
 8000282:	fa03 f202 	lsl.w	r2, r3, r2
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000290:	e02a      	b.n	80002e8 <MCAL_GPIO_init+0x144>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	789b      	ldrb	r3, [r3, #2]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	009c      	lsls	r4, r3, #2
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	b29b      	uxth	r3, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff65 	bl	8000170 <Get_PIN_Positon>
 80002a6:	4603      	mov	r3, r0
 80002a8:	fa04 f203 	lsl.w	r2, r4, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	431a      	orrs	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80002b6:	e017      	b.n	80002e8 <MCAL_GPIO_init+0x144>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	3b04      	subs	r3, #4
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	78d2      	ldrb	r2, [r2, #3]
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	ea43 0402 	orr.w	r4, r3, r2
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff4c 	bl	8000170 <Get_PIN_Positon>
 80002d8:	4603      	mov	r3, r0
 80002da:	fa04 f203 	lsl.w	r2, r4, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	431a      	orrs	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]

	}

}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]

	return (GPIOx->IDR & 1<<PIN_Number);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	b29a      	uxth	r2, r3
 8000302:	887b      	ldrh	r3, [r7, #2]
 8000304:	b29b      	uxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	2301      	movs	r3, #1
 800030a:	408b      	lsls	r3, r1
 800030c:	b29b      	uxth	r3, r3
 800030e:	4013      	ands	r3, r2
 8000310:	b29b      	uxth	r3, r3

}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <MCAL_TOGGLE_PIN>:
usint16_t MCAL_Read_PORT(GPIOx_REG* GPIOx){
	return (GPIOx->IDR);
}
void MCAL_TOGGLE_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=(1<<PIN_Number);
 8000328:	887b      	ldrh	r3, [r7, #2]
 800032a:	b29b      	uxth	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	2301      	movs	r3, #1
 8000330:	fa03 f202 	lsl.w	r2, r3, r2
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	405a      	eors	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	60da      	str	r2, [r3, #12]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <clock_init>:
#include "GPIO_Driver.h"
/*RCC REG*/



void clock_init(){
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

	RCC->APB2ENR|=(1<<2) |(1<<3);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <clock_init+0x18>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a03      	ldr	r2, [pc, #12]	; (8000360 <clock_init+0x18>)
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	6193      	str	r3, [r2, #24]

}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <GPIO_init>:
void GPIO_init(){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	// GPIOA PIN 1 Floating input
	PIN_config PIN_C ={PIN_1,INPUT_FI};
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	80bb      	strh	r3, [r7, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA,&PIN_C);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4619      	mov	r1, r3
 800037a:	4813      	ldr	r0, [pc, #76]	; (80003c8 <GPIO_init+0x64>)
 800037c:	f7ff ff12 	bl	80001a4 <MCAL_GPIO_init>
	// GPIOA PIN 13 Floating input

	PIN_C.PIN_number=PIN_13;
 8000380:	230d      	movs	r3, #13
 8000382:	80bb      	strh	r3, [r7, #4]
	PIN_C.MODE=INPUT_FI;
 8000384:	2301      	movs	r3, #1
 8000386:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA,&PIN_C);
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4619      	mov	r1, r3
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <GPIO_init+0x64>)
 800038e:	f7ff ff09 	bl	80001a4 <MCAL_GPIO_init>
	/*PORTB PIN 1 AS OUTPUT PUSH PULL*/
	PIN_C.PIN_number=PIN_1;
 8000392:	2301      	movs	r3, #1
 8000394:	80bb      	strh	r3, [r7, #4]
		PIN_C.MODE=OUTPUT_PP;
 8000396:	2304      	movs	r3, #4
 8000398:	71bb      	strb	r3, [r7, #6]
		PIN_C.SPEED=SPEED_2;
 800039a:	2302      	movs	r3, #2
 800039c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB,&PIN_C);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	480a      	ldr	r0, [pc, #40]	; (80003cc <GPIO_init+0x68>)
 80003a4:	f7ff fefe 	bl	80001a4 <MCAL_GPIO_init>


	/*PORTB PIN 13 AS OUTPUT PUSH PULL*/
	PIN_C.PIN_number=PIN_13;
 80003a8:	230d      	movs	r3, #13
 80003aa:	80bb      	strh	r3, [r7, #4]
		PIN_C.MODE=OUTPUT_PP;
 80003ac:	2304      	movs	r3, #4
 80003ae:	71bb      	strb	r3, [r7, #6]
		PIN_C.SPEED=SPEED_2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_init(GPIOB,&PIN_C);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <GPIO_init+0x68>)
 80003ba:	f7ff fef3 	bl	80001a4 <MCAL_GPIO_init>

}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <main>:

int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

	clock_init();
 80003d6:	f7ff ffb7 	bl	8000348 <clock_init>
	GPIO_init();
 80003da:	f7ff ffc3 	bl	8000364 <GPIO_init>
	for(;;){
		if(!MCAL_Read_PIN(GPIOA,PIN_1)){
 80003de:	2101      	movs	r1, #1
 80003e0:	4818      	ldr	r0, [pc, #96]	; (8000444 <main+0x74>)
 80003e2:	f7ff ff85 	bl	80002f0 <MCAL_Read_PIN>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10c      	bne.n	8000406 <main+0x36>
			MCAL_TOGGLE_PIN(GPIOB, PIN_1);
 80003ec:	2101      	movs	r1, #1
 80003ee:	4816      	ldr	r0, [pc, #88]	; (8000448 <main+0x78>)
 80003f0:	f7ff ff94 	bl	800031c <MCAL_TOGGLE_PIN>
			while(!MCAL_Read_PIN(GPIOA,PIN_1));
 80003f4:	bf00      	nop
 80003f6:	2101      	movs	r1, #1
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <main+0x74>)
 80003fa:	f7ff ff79 	bl	80002f0 <MCAL_Read_PIN>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f8      	beq.n	80003f6 <main+0x26>
 8000404:	e7eb      	b.n	80003de <main+0xe>
		}else if(MCAL_Read_PIN(GPIOA,PIN_13)){
 8000406:	210d      	movs	r1, #13
 8000408:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0x74>)
 800040a:	f7ff ff71 	bl	80002f0 <MCAL_Read_PIN>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0e4      	beq.n	80003de <main+0xe>
			MCAL_TOGGLE_PIN(GPIOB, PIN_13);
 8000414:	210d      	movs	r1, #13
 8000416:	480c      	ldr	r0, [pc, #48]	; (8000448 <main+0x78>)
 8000418:	f7ff ff80 	bl	800031c <MCAL_TOGGLE_PIN>
			for(int i=0;i<255;i++)
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e00b      	b.n	800043a <main+0x6a>
				for(int j=0;j<255;j++);
 8000422:	2300      	movs	r3, #0
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	e002      	b.n	800042e <main+0x5e>
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	2bfe      	cmp	r3, #254	; 0xfe
 8000432:	ddf9      	ble.n	8000428 <main+0x58>
			for(int i=0;i<255;i++)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2bfe      	cmp	r3, #254	; 0xfe
 800043e:	ddf0      	ble.n	8000422 <main+0x52>
		if(!MCAL_Read_PIN(GPIOA,PIN_1)){
 8000440:	e7cd      	b.n	80003de <main+0xe>
 8000442:	bf00      	nop
 8000444:	40010800 	.word	0x40010800
 8000448:	40010c00 	.word	0x40010c00

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	; (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	; (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 f811 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ffa7 	bl	80003d0 <main>

08000482 <LoopForever>:

LoopForever:
    b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000490:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 8000494:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000498:	2000001c 	.word	0x2000001c

0800049c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_2_IRQHandler>
	...

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2500      	movs	r5, #0
 80004a4:	4e0c      	ldr	r6, [pc, #48]	; (80004d8 <__libc_init_array+0x38>)
 80004a6:	4c0d      	ldr	r4, [pc, #52]	; (80004dc <__libc_init_array+0x3c>)
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	10a4      	asrs	r4, r4, #2
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	f000 f81a 	bl	80004e8 <_init>
 80004b4:	2500      	movs	r5, #0
 80004b6:	4e0a      	ldr	r6, [pc, #40]	; (80004e0 <__libc_init_array+0x40>)
 80004b8:	4c0a      	ldr	r4, [pc, #40]	; (80004e4 <__libc_init_array+0x44>)
 80004ba:	1ba4      	subs	r4, r4, r6
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	42a5      	cmp	r5, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004c8:	4798      	blx	r3
 80004ca:	3501      	adds	r5, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d2:	4798      	blx	r3
 80004d4:	3501      	adds	r5, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
