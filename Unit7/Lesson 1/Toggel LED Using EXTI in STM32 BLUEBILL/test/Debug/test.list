
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800041c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800041c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001b2  00000000  00000000  00010445  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b2  00000000  00000000  000105f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001bc  00000000  00000000  000106a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000070  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000058  00000000  00000000  000108d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b0e  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000190  00000000  00000000  0001143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003126  00000000  00000000  000115ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000146f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000010c  00000000  00000000  00014770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003fc 	.word	0x080003fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003fc 	.word	0x080003fc

08000170 <clock_init>:


#define BIT_IS_SET(REG,num) (REG &(1<<num))


void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR|=(1<<2);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	/*Bit 0 AFIOEN: Alternate function IO clock enable
	Set and cleared by software.
	0: Alternate Function IO clock disabled
	1: Alternate Function IO clock enabled*/
	RCC_APB2ENR|=(1<<0);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR|=(1<<3);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0308 	orr.w	r3, r3, #8
 8000196:	6013      	str	r3, [r2, #0]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021018 	.word	0x40021018

080001a4 <GPIO_init>:
void GPIO_init(){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	GPIOA_CRL &=0xFFFFFF00;
 80001a8:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <GPIO_init+0x54>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a12      	ldr	r2, [pc, #72]	; (80001f8 <GPIO_init+0x54>)
 80001ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |=(0b01000100);
 80001b4:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <GPIO_init+0x54>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0f      	ldr	r2, [pc, #60]	; (80001f8 <GPIO_init+0x54>)
 80001ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80001be:	6013      	str	r3, [r2, #0]
	/*PORTB PIN 1 AS OUTPUT PUSH PULL*/
	GPIOB_CRL&=0xFFFFFF0F; // PORT A PIN 1 AS FLOATING INPUT
 80001c0:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <GPIO_init+0x58>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <GPIO_init+0x58>)
 80001c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOB_CRL|=0x20;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <GPIO_init+0x58>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <GPIO_init+0x58>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6013      	str	r3, [r2, #0]
	/*PORTB PIN 13 AS OUTPUT PUSH PULL*/
	GPIOB_CRH&=0xFF0FFFFF; // PORT A PIN 13 AS OUTPUT
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <GPIO_init+0x5c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a08      	ldr	r2, [pc, #32]	; (8000200 <GPIO_init+0x5c>)
 80001de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB_CRH|=0x00200000;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <GPIO_init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <GPIO_init+0x5c>)
 80001ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40010800 	.word	0x40010800
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	40010c04 	.word	0x40010c04

08000204 <EXTI_init>:
void EXTI_init(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Bits 19:0 MRx: Interrupt Mask on line x
	0: Interrupt request from Line x is masked
	1: Interrupt request from Line x is not masked
	Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.*/
	EXTI_IMR|=(0b11<<0);
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <EXTI_init+0x3c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <EXTI_init+0x3c>)
 800020e:	f043 0303 	orr.w	r3, r3, #3
 8000212:	6013      	str	r3, [r2, #0]
	/*Bits 19:0 TRx: Rising trigger event configuration bit of line x
	0: Rising trigger disabled (for Event and Interrupt) for input line
	1: Rising trigger enabled (for Event and Interrupt) for input line.
	Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.*/
	EXTI_RTSR|=(1<<0);
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <EXTI_init+0x40>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <EXTI_init+0x40>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	EXTI_RTSR|=(1<<1);
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <EXTI_init+0x40>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <EXTI_init+0x40>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6013      	str	r3, [r2, #0]

	EXTI_FTSR|=(1<<1);
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <EXTI_init+0x44>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a05      	ldr	r2, [pc, #20]	; (8000248 <EXTI_init+0x44>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6013      	str	r3, [r2, #0]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40010400 	.word	0x40010400
 8000244:	40010408 	.word	0x40010408
 8000248:	4001040c 	.word	0x4001040c

0800024c <main>:

int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	NVIC|=(1<<6)|(1<<7);
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <main+0x60>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a15      	ldr	r2, [pc, #84]	; (80002ac <main+0x60>)
 8000258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800025c:	6013      	str	r3, [r2, #0]

	EXTI_init();
 800025e:	f7ff ffd1 	bl	8000204 <EXTI_init>
	clock_init();
 8000262:	f7ff ff85 	bl	8000170 <clock_init>
	GPIO_init();
 8000266:	f7ff ff9d 	bl	80001a4 <GPIO_init>
	AFIO_EXTICR1 &=0xFF00;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0x64>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <main+0x64>)
 8000270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000274:	6013      	str	r3, [r2, #0]
	for(;;){

		GPIOB_ODR |=(1<<1) |(1<<13);
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0x68>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <main+0x68>)
 800027c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000280:	f043 0302 	orr.w	r3, r3, #2
 8000284:	6013      	str	r3, [r2, #0]
		for(int i=0;i<255;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e00b      	b.n	80002a4 <main+0x58>
			for(int j=0;j<255;j++);
 800028c:	2300      	movs	r3, #0
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	e002      	b.n	8000298 <main+0x4c>
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	2bfe      	cmp	r3, #254	; 0xfe
 800029c:	ddf9      	ble.n	8000292 <main+0x46>
		for(int i=0;i<255;i++)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3301      	adds	r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2bfe      	cmp	r3, #254	; 0xfe
 80002a8:	ddf0      	ble.n	800028c <main+0x40>
		GPIOB_ODR |=(1<<1) |(1<<13);
 80002aa:	e7e4      	b.n	8000276 <main+0x2a>
 80002ac:	e000e100 	.word	0xe000e100
 80002b0:	40010008 	.word	0x40010008
 80002b4:	40010c0c 	.word	0x40010c0c

080002b8 <EXTI0_IRQHandler>:


	}
}
void EXTI0_IRQHandler(void){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	GPIOB_ODR ^=(1<<1);
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <EXTI0_IRQHandler+0x4c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <EXTI0_IRQHandler+0x4c>)
 80002c4:	f083 0302 	eor.w	r3, r3, #2
 80002c8:	6013      	str	r3, [r2, #0]
	1: selected trigger request occurred
	This bit is set when the selected edge event arrives on the external interrupt line. This bit is
	cleared by writing a ‘1’ into the bit.
	Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	for(int i=0;i<255;i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e00b      	b.n	80002e8 <EXTI0_IRQHandler+0x30>
		for(int j=0;j<255;j++);
 80002d0:	2300      	movs	r3, #0
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	e002      	b.n	80002dc <EXTI0_IRQHandler+0x24>
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	2bfe      	cmp	r3, #254	; 0xfe
 80002e0:	ddf9      	ble.n	80002d6 <EXTI0_IRQHandler+0x1e>
	for(int i=0;i<255;i++)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2bfe      	cmp	r3, #254	; 0xfe
 80002ec:	ddf0      	ble.n	80002d0 <EXTI0_IRQHandler+0x18>
	EXTI_PR|=(1<<0);
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <EXTI0_IRQHandler+0x50>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <EXTI0_IRQHandler+0x50>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6013      	str	r3, [r2, #0]
//	for(int i=0;i<5000;i++);

}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40010c0c 	.word	0x40010c0c
 8000308:	40010414 	.word	0x40010414

0800030c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0

		GPIOB_ODR ^=(1<<13);
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <EXTI1_IRQHandler+0x4c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a10      	ldr	r2, [pc, #64]	; (8000358 <EXTI1_IRQHandler+0x4c>)
 8000318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800031c:	6013      	str	r3, [r2, #0]

		for(int i=0;i<255;i++)
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e00b      	b.n	800033c <EXTI1_IRQHandler+0x30>
			for(int j=0;j<255;j++);
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	e002      	b.n	8000330 <EXTI1_IRQHandler+0x24>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	2bfe      	cmp	r3, #254	; 0xfe
 8000334:	ddf9      	ble.n	800032a <EXTI1_IRQHandler+0x1e>
		for(int i=0;i<255;i++)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2bfe      	cmp	r3, #254	; 0xfe
 8000340:	ddf0      	ble.n	8000324 <EXTI1_IRQHandler+0x18>
	EXTI_PR|=(1<<1);
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <EXTI1_IRQHandler+0x50>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <EXTI1_IRQHandler+0x50>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	6013      	str	r3, [r2, #0]

}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40010c0c 	.word	0x40010c0c
 800035c:	40010414 	.word	0x40010414

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff5b 	bl	800024c <main>

08000396 <LoopForever>:

LoopForever:
    b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC1_2_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	2500      	movs	r5, #0
 80003b8:	4e0c      	ldr	r6, [pc, #48]	; (80003ec <__libc_init_array+0x38>)
 80003ba:	4c0d      	ldr	r4, [pc, #52]	; (80003f0 <__libc_init_array+0x3c>)
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	f000 f81a 	bl	80003fc <_init>
 80003c8:	2500      	movs	r5, #0
 80003ca:	4e0a      	ldr	r6, [pc, #40]	; (80003f4 <__libc_init_array+0x40>)
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <__libc_init_array+0x44>)
 80003ce:	1ba4      	subs	r4, r4, r6
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003dc:	4798      	blx	r3
 80003de:	3501      	adds	r5, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003e6:	4798      	blx	r3
 80003e8:	3501      	adds	r5, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
