
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000394  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000394  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000013a  00000000  00000000  000103bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b0  00000000  00000000  000104f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000148  00000000  00000000  000105a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000068  00000000  00000000  000106f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000050  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b0e  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000155  00000000  00000000  000112b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003115  00000000  00000000  0001140b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00014520  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000dc  00000000  00000000  0001459c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000374 	.word	0x08000374

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000374 	.word	0x08000374

08000170 <clock_init>:


#define BIT_IS_SET(REG,num) (REG &(1<<num))


void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR|=(1<<2);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	/*Bit 0 AFIOEN: Alternate function IO clock enable
	Set and cleared by software.
	0: Alternate Function IO clock disabled
	1: Alternate Function IO clock enabled*/
	RCC_APB2ENR|=(1<<0);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR|=(1<<3);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0308 	orr.w	r3, r3, #8
 8000196:	6013      	str	r3, [r2, #0]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021018 	.word	0x40021018

080001a4 <GPIO_init>:
void GPIO_init(){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	GPIOA_CRH&=0xFF0FFFFF; // PORT A PIN 13 AS OUTPUT
 80001a8:	4b19      	ldr	r3, [pc, #100]	; (8000210 <GPIO_init+0x6c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a18      	ldr	r2, [pc, #96]	; (8000210 <GPIO_init+0x6c>)
 80001ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA_CRH|=0x00400000;
 80001b4:	4b16      	ldr	r3, [pc, #88]	; (8000210 <GPIO_init+0x6c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <GPIO_init+0x6c>)
 80001ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001be:	6013      	str	r3, [r2, #0]
	/*In input mode (MODE[1:0]=00):
	00: Analog mode
	01: Floating input (reset state)
	10: Input with pull-up / pull-down
	11: Reserved*/
	GPIOA_CRL&=0xFFFFFF0F; // PORT A PIN 1 AS FLOATING INPUT
 80001c0:	4b14      	ldr	r3, [pc, #80]	; (8000214 <GPIO_init+0x70>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a13      	ldr	r2, [pc, #76]	; (8000214 <GPIO_init+0x70>)
 80001c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOA_CRL|=(0b0100<<4);
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <GPIO_init+0x70>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a10      	ldr	r2, [pc, #64]	; (8000214 <GPIO_init+0x70>)
 80001d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d6:	6013      	str	r3, [r2, #0]
	/*PORTB PIN 1 AS OUTPUT PUSH PULL*/
	GPIOB_CRL&=0xFFFFFF0F; // PORT A PIN 1 AS FLOATING INPUT
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <GPIO_init+0x74>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <GPIO_init+0x74>)
 80001de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB_CRL|=0x20;
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <GPIO_init+0x74>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <GPIO_init+0x74>)
 80001ea:	f043 0320 	orr.w	r3, r3, #32
 80001ee:	6013      	str	r3, [r2, #0]
	/*PORTB PIN 13 AS OUTPUT PUSH PULL*/
	GPIOB_CRH&=0xFF0FFFFF; // PORT A PIN 13 AS OUTPUT
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <GPIO_init+0x78>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <GPIO_init+0x78>)
 80001f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOB_CRH|=0x00200000;
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <GPIO_init+0x78>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <GPIO_init+0x78>)
 8000202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000206:	6013      	str	r3, [r2, #0]

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40010804 	.word	0x40010804
 8000214:	40010800 	.word	0x40010800
 8000218:	40010c00 	.word	0x40010c00
 800021c:	40010c04 	.word	0x40010c04

08000220 <main>:
	EXTI_RTSR|=(1<<0);
	EXTI_FTSR=0;
}

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	clock_init();
 8000226:	f7ff ffa3 	bl	8000170 <clock_init>
	GPIO_init();
 800022a:	f7ff ffbb 	bl	80001a4 <GPIO_init>
	GPIOB_ODR |=(1<<1) |(1<<13);
 800022e:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <main+0x84>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <main+0x84>)
 8000234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	6013      	str	r3, [r2, #0]
	for(;;){
		if(!BIT_IS_SET(GPIOA_IDR,1)){
 800023e:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <main+0x88>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	2b00      	cmp	r3, #0
 8000248:	d10c      	bne.n	8000264 <main+0x44>
			GPIOB_ODR ^=(1<<1);
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <main+0x84>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <main+0x84>)
 8000250:	f083 0302 	eor.w	r3, r3, #2
 8000254:	6013      	str	r3, [r2, #0]
			while(!BIT_IS_SET(GPIOA_IDR,1));
 8000256:	bf00      	nop
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <main+0x88>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <main+0x38>
		}

		if(BIT_IS_SET(GPIOA_IDR,13)){
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <main+0x88>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0e6      	beq.n	800023e <main+0x1e>
			GPIOB_ODR ^=(1<<13);
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <main+0x84>)
 8000276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800027a:	6013      	str	r3, [r2, #0]
			for(int i=0;i<255;i++)
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e00b      	b.n	800029a <main+0x7a>
				for(int j=0;j<255;j++);
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	e002      	b.n	800028e <main+0x6e>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	2bfe      	cmp	r3, #254	; 0xfe
 8000292:	ddf9      	ble.n	8000288 <main+0x68>
			for(int i=0;i<255;i++)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2bfe      	cmp	r3, #254	; 0xfe
 800029e:	ddf0      	ble.n	8000282 <main+0x62>
		if(!BIT_IS_SET(GPIOA_IDR,1)){
 80002a0:	e7cd      	b.n	800023e <main+0x1e>
 80002a2:	bf00      	nop
 80002a4:	40010c0c 	.word	0x40010c0c
 80002a8:	40010808 	.word	0x40010808

080002ac <EXTI0_IRQHandler>:
		//		for(int i=0;i<5000;i++);


	}
}
void EXTI0_IRQHandler(void){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	GPIOA_ODR^=(1<<13);
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <EXTI0_IRQHandler+0x24>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <EXTI0_IRQHandler+0x24>)
 80002b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002ba:	6013      	str	r3, [r2, #0]
	1: selected trigger request occurred
	This bit is set when the selected edge event arrives on the external interrupt line. This bit is
	cleared by writing a ‘1’ into the bit.
	Note: Bit 19 is used in connectivity line devices only and is reserved otherwise.
	 */
	EXTI_PR|=(1<<0);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <EXTI0_IRQHandler+0x28>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <EXTI0_IRQHandler+0x28>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6013      	str	r3, [r2, #0]
//	for(int i=0;i<5000;i++);

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	4001080c 	.word	0x4001080c
 80002d4:	40010414 	.word	0x40010414

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ff89 	bl	8000220 <main>

0800030e <LoopForever>:

LoopForever:
    b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC1_2_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	2500      	movs	r5, #0
 8000330:	4e0c      	ldr	r6, [pc, #48]	; (8000364 <__libc_init_array+0x38>)
 8000332:	4c0d      	ldr	r4, [pc, #52]	; (8000368 <__libc_init_array+0x3c>)
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	42a5      	cmp	r5, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	f000 f81a 	bl	8000374 <_init>
 8000340:	2500      	movs	r5, #0
 8000342:	4e0a      	ldr	r6, [pc, #40]	; (800036c <__libc_init_array+0x40>)
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <__libc_init_array+0x44>)
 8000346:	1ba4      	subs	r4, r4, r6
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	42a5      	cmp	r5, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000354:	4798      	blx	r3
 8000356:	3501      	adds	r5, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800035e:	4798      	blx	r3
 8000360:	3501      	adds	r5, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
