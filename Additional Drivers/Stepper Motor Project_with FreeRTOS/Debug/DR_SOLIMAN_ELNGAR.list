
DR_SOLIMAN_ELNGAR.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc0  08003cc0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc0  08003cc0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  20000024  08003cec  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08003cec  00024258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd13  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f0e  00000000  00000000  0002dda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00003434  00000000  00000000  0002fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000640  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000158f  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000933c  00000000  00000000  000353ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0001369f  00000000  00000000  0003e72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a8c  00000000  00000000  00051dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08003b90 	.word	0x08003b90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08003b90 	.word	0x08003b90

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6892      	ldr	r2, [r2, #8]
 8000222:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6852      	ldr	r2, [r2, #4]
 800022c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	d103      	bne.n	8000240 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800025e:	b580      	push	{r7, lr}
 8000260:	b08c      	sub	sp, #48	; 0x30
 8000262:	af04      	add	r7, sp, #16
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	4613      	mov	r3, r2
 800026c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f000 feb4 	bl	8000fe0 <pvPortMalloc>
 8000278:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d013      	beq.n	80002a8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000280:	2054      	movs	r0, #84	; 0x54
 8000282:	f000 fead 	bl	8000fe0 <pvPortMalloc>
 8000286:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800028e:	2254      	movs	r2, #84	; 0x54
 8000290:	2100      	movs	r1, #0
 8000292:	69f8      	ldr	r0, [r7, #28]
 8000294:	f003 fc50 	bl	8003b38 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	631a      	str	r2, [r3, #48]	; 0x30
 800029e:	e005      	b.n	80002ac <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80002a0:	6978      	ldr	r0, [r7, #20]
 80002a2:	f000 feef 	bl	8001084 <vPortFree>
 80002a6:	e001      	b.n	80002ac <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d013      	beq.n	80002da <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	2300      	movs	r3, #0
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f000 f80e 	bl	80002ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ce:	69f8      	ldr	r0, [r7, #28]
 80002d0:	f000 f874 	bl	80003bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e002      	b.n	80002e0 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80002e0:	69bb      	ldr	r3, [r7, #24]
    }
 80002e2:	4618      	mov	r0, r3
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80002f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000302:	3b01      	subs	r3, #1
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f023 0307 	bic.w	r3, r3, #7
 8000310:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d01e      	beq.n	8000356 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e012      	b.n	8000344 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	7819      	ldrb	r1, [r3, #0]
 8000326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	4413      	add	r3, r2
 800032c:	3334      	adds	r3, #52	; 0x34
 800032e:	460a      	mov	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d006      	beq.n	800034c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d9e9      	bls.n	800031e <prvInitialiseNewTask+0x34>
 800034a:	e000      	b.n	800034e <prvInitialiseNewTask+0x64>
            {
                break;
 800034c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d901      	bls.n	8000360 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800035c:	2304      	movs	r3, #4
 800035e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000362:	6a3a      	ldr	r2, [r7, #32]
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000368:	6a3a      	ldr	r2, [r7, #32]
 800036a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	3304      	adds	r3, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff1c 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	3318      	adds	r3, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff17 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000384:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000386:	6a3b      	ldr	r3, [r7, #32]
 8000388:	f1c3 0205 	rsb	r2, r3, #5
 800038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	6938      	ldr	r0, [r7, #16]
 800039c:	f000 fcfa 	bl	8000d94 <pxPortInitialiseStack>
 80003a0:	4602      	mov	r2, r0
 80003a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80003c4:	f000 fd72 	bl	8000eac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80003c8:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a3d      	ldr	r2, [pc, #244]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80003d2:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80003da:	4a3b      	ldr	r2, [pc, #236]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80003e0:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d110      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80003e8:	f000 fc3c 	bl	8000c64 <prvInitialiseTaskLists>
 80003ec:	e00d      	b.n	800040a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d109      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000400:	429a      	cmp	r2, r3
 8000402:	d802      	bhi.n	800040a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000404:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3301      	adds	r3, #1
 8000410:	4a2f      	ldr	r2, [pc, #188]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 8000412:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042a:	492b      	ldr	r1, [pc, #172]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800042c:	4613      	mov	r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	4413      	add	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	3204      	adds	r2, #4
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1d1a      	adds	r2, r3, #4
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800046a:	441a      	add	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000474:	4918      	ldr	r1, [pc, #96]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	440b      	add	r3, r1
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1c59      	adds	r1, r3, #1
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4403      	add	r3, r0
 8000490:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000492:	f000 fd25 	bl	8000ee0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00e      	beq.n	80004bc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <prvAddNewTaskToReadyList+0x120>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000118 	.word	0x20000118
 80004c8:	20000040 	.word	0x20000040
 80004cc:	20000124 	.word	0x20000124
 80004d0:	20000134 	.word	0x20000134
 80004d4:	20000120 	.word	0x20000120
 80004d8:	20000044 	.word	0x20000044
 80004dc:	e000ed04 	.word	0xe000ed04

080004e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80004e8:	f000 fce0 	bl	8000eac <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <vTaskSuspend+0x18>
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <vTaskSuspend+0x100>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	e000      	b.n	80004fa <vTaskSuspend+0x1a>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3304      	adds	r3, #4
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe83 	bl	800020c <uxListRemove>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000510:	4934      	ldr	r1, [pc, #208]	; (80005e4 <vTaskSuspend+0x104>)
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	440b      	add	r3, r1
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10a      	bne.n	8000538 <vTaskSuspend+0x58>
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	2201      	movs	r2, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43da      	mvns	r2, r3
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <vTaskSuspend+0x108>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4013      	ands	r3, r2
 8000534:	4a2c      	ldr	r2, [pc, #176]	; (80005e8 <vTaskSuspend+0x108>)
 8000536:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053c:	2b00      	cmp	r3, #0
 800053e:	d004      	beq.n	800054a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3318      	adds	r3, #24
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe61 	bl	800020c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	3304      	adds	r3, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4826      	ldr	r0, [pc, #152]	; (80005ec <vTaskSuspend+0x10c>)
 8000552:	f7ff fe38 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e010      	b.n	800057e <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	3350      	adds	r3, #80	; 0x50
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b01      	cmp	r3, #1
 800056a:	d105      	bne.n	8000578 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	3350      	adds	r3, #80	; 0x50
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b00      	cmp	r3, #0
 8000582:	ddeb      	ble.n	800055c <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000584:	f000 fcac 	bl	8000ee0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <vTaskSuspend+0x110>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000590:	f000 fc8c 	bl	8000eac <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000594:	f000 fbe4 	bl	8000d60 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000598:	f000 fca2 	bl	8000ee0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <vTaskSuspend+0x100>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d118      	bne.n	80005d8 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <vTaskSuspend+0x110>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d008      	beq.n	80005c0 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <vTaskSuspend+0x114>)
 80005b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80005be:	e00b      	b.n	80005d8 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <vTaskSuspend+0x10c>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <vTaskSuspend+0x118>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d103      	bne.n	80005d4 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <vTaskSuspend+0x100>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
    }
 80005d2:	e001      	b.n	80005d8 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 80005d4:	f000 fae8 	bl	8000ba8 <vTaskSwitchContext>
    }
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000040 	.word	0x20000040
 80005e4:	20000044 	.word	0x20000044
 80005e8:	20000120 	.word	0x20000120
 80005ec:	20000104 	.word	0x20000104
 80005f0:	20000124 	.word	0x20000124
 80005f4:	e000ed04 	.word	0xe000ed04
 80005f8:	20000118 	.word	0x20000118

080005fc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <prvTaskIsTaskSuspended+0x3c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d10a      	bne.n	800062c <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <prvTaskIsTaskSuspended+0x40>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d005      	beq.n	800062c <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8000628:	2301      	movs	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800062c:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000104 	.word	0x20000104
 800063c:	200000d8 	.word	0x200000d8

08000640 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <vTaskResume+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	429a      	cmp	r2, r3
 8000654:	d05f      	beq.n	8000716 <vTaskResume+0xd6>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d05c      	beq.n	8000716 <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 800065c:	f000 fc26 	bl	8000eac <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ffcb 	bl	80005fc <prvTaskIsTaskSuspended>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d052      	beq.n	8000712 <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3304      	adds	r3, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdcb 	bl	800020c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	2201      	movs	r2, #1
 800067c:	409a      	lsls	r2, r3
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <vTaskResume+0xe4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4313      	orrs	r3, r2
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <vTaskResume+0xe4>)
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068c:	4926      	ldr	r1, [pc, #152]	; (8000728 <vTaskResume+0xe8>)
 800068e:	4613      	mov	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	3304      	adds	r3, #4
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	3204      	adds	r2, #4
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	1d1a      	adds	r2, r3, #4
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <vTaskResume+0xe8>)
 80006cc:	441a      	add	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4914      	ldr	r1, [pc, #80]	; (8000728 <vTaskResume+0xe8>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1c59      	adds	r1, r3, #1
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <vTaskResume+0xe8>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4403      	add	r3, r0
 80006f2:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <vTaskResume+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	429a      	cmp	r2, r3
 8000700:	d307      	bcc.n	8000712 <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <vTaskResume+0xec>)
 8000704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000712:	f000 fbe5 	bl	8000ee0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000040 	.word	0x20000040
 8000724:	20000120 	.word	0x20000120
 8000728:	20000044 	.word	0x20000044
 800072c:	e000ed04 	.word	0xe000ed04

08000730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <vTaskStartScheduler+0x5c>)
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2300      	movs	r3, #0
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000744:	4912      	ldr	r1, [pc, #72]	; (8000790 <vTaskStartScheduler+0x60>)
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <vTaskStartScheduler+0x64>)
 8000748:	f7ff fd89 	bl	800025e <xTaskCreate>
 800074c:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d115      	bne.n	8000780 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000754:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000766:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <vTaskStartScheduler+0x68>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <vTaskStartScheduler+0x6c>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <vTaskStartScheduler+0x70>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800077c:	f000 fb76 	bl	8000e6c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <vTaskStartScheduler+0x74>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000013c 	.word	0x2000013c
 8000790:	08003ba8 	.word	0x08003ba8
 8000794:	08000c35 	.word	0x08000c35
 8000798:	20000138 	.word	0x20000138
 800079c:	20000124 	.word	0x20000124
 80007a0:	2000011c 	.word	0x2000011c
 80007a4:	20000000 	.word	0x20000000

080007a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <vTaskSuspendAll+0x18>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <vTaskSuspendAll+0x18>)
 80007b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000140 	.word	0x20000140

080007c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80007d2:	f000 fb6b 	bl	8000eac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80007d6:	4b68      	ldr	r3, [pc, #416]	; (8000978 <xTaskResumeAll+0x1b4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a66      	ldr	r2, [pc, #408]	; (8000978 <xTaskResumeAll+0x1b4>)
 80007de:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007e0:	4b65      	ldr	r3, [pc, #404]	; (8000978 <xTaskResumeAll+0x1b4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f040 80c0 	bne.w	800096a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <xTaskResumeAll+0x1b8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 80bb 	beq.w	800096a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80007f4:	e08a      	b.n	800090c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <xTaskResumeAll+0x1bc>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	6a12      	ldr	r2, [r2, #32]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	69d2      	ldr	r2, [r2, #28]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3318      	adds	r3, #24
 8000820:	429a      	cmp	r2, r3
 8000822:	d103      	bne.n	800082c <xTaskResumeAll+0x68>
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	6a1a      	ldr	r2, [r3, #32]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	68d2      	ldr	r2, [r2, #12]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	6892      	ldr	r2, [r2, #8]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3304      	adds	r3, #4
 800085e:	429a      	cmp	r2, r3
 8000860:	d103      	bne.n	800086a <xTaskResumeAll+0xa6>
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	2201      	movs	r2, #1
 8000880:	409a      	lsls	r2, r3
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <xTaskResumeAll+0x1c0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4313      	orrs	r3, r2
 8000888:	4a3e      	ldr	r2, [pc, #248]	; (8000984 <xTaskResumeAll+0x1c0>)
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000890:	493d      	ldr	r1, [pc, #244]	; (8000988 <xTaskResumeAll+0x1c4>)
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	3304      	adds	r3, #4
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	3204      	adds	r2, #4
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	1d1a      	adds	r2, r3, #4
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4a2e      	ldr	r2, [pc, #184]	; (8000988 <xTaskResumeAll+0x1c4>)
 80008d0:	441a      	add	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	492b      	ldr	r1, [pc, #172]	; (8000988 <xTaskResumeAll+0x1c4>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1c59      	adds	r1, r3, #1
 80008ea:	4827      	ldr	r0, [pc, #156]	; (8000988 <xTaskResumeAll+0x1c4>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4403      	add	r3, r0
 80008f6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <xTaskResumeAll+0x1c8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	429a      	cmp	r2, r3
 8000904:	d302      	bcc.n	800090c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <xTaskResumeAll+0x1cc>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <xTaskResumeAll+0x1bc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	f47f af70 	bne.w	80007f6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800091c:	f000 fa20 	bl	8000d60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <xTaskResumeAll+0x1d0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d010      	beq.n	800094e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800092c:	f000 f836 	bl	800099c <xTaskIncrementTick>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <xTaskResumeAll+0x1cc>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <xTaskResumeAll+0x1d0>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <xTaskResumeAll+0x1cc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d009      	beq.n	800096a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <xTaskResumeAll+0x1d4>)
 800095c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800096a:	f000 fab9 	bl	8000ee0 <vPortExitCritical>

    return xAlreadyYielded;
 800096e:	693b      	ldr	r3, [r7, #16]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000140 	.word	0x20000140
 800097c:	20000118 	.word	0x20000118
 8000980:	200000d8 	.word	0x200000d8
 8000984:	20000120 	.word	0x20000120
 8000988:	20000044 	.word	0x20000044
 800098c:	20000040 	.word	0x20000040
 8000990:	2000012c 	.word	0x2000012c
 8000994:	20000128 	.word	0x20000128
 8000998:	e000ed04 	.word	0xe000ed04

0800099c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009a6:	4b75      	ldr	r3, [pc, #468]	; (8000b7c <xTaskIncrementTick+0x1e0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f040 80dc 	bne.w	8000b68 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80009b0:	4b73      	ldr	r3, [pc, #460]	; (8000b80 <xTaskIncrementTick+0x1e4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80009b8:	4a71      	ldr	r2, [pc, #452]	; (8000b80 <xTaskIncrementTick+0x1e4>)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d110      	bne.n	80009e6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80009c4:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <xTaskIncrementTick+0x1e8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	4b6f      	ldr	r3, [pc, #444]	; (8000b88 <xTaskIncrementTick+0x1ec>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a6d      	ldr	r2, [pc, #436]	; (8000b84 <xTaskIncrementTick+0x1e8>)
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4a6d      	ldr	r2, [pc, #436]	; (8000b88 <xTaskIncrementTick+0x1ec>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <xTaskIncrementTick+0x1f0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a6b      	ldr	r2, [pc, #428]	; (8000b8c <xTaskIncrementTick+0x1f0>)
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	f000 f9bd 	bl	8000d60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80009e6:	4b6a      	ldr	r3, [pc, #424]	; (8000b90 <xTaskIncrementTick+0x1f4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	f0c0 80a6 	bcc.w	8000b3e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80009f2:	4b64      	ldr	r3, [pc, #400]	; (8000b84 <xTaskIncrementTick+0x1e8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009fc:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <xTaskIncrementTick+0x1f4>)
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	601a      	str	r2, [r3, #0]
                    break;
 8000a04:	e09b      	b.n	8000b3e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a06:	4b5f      	ldr	r3, [pc, #380]	; (8000b84 <xTaskIncrementTick+0x1e8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d203      	bcs.n	8000a26 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000a1e:	4a5c      	ldr	r2, [pc, #368]	; (8000b90 <xTaskIncrementTick+0x1f4>)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000a24:	e08b      	b.n	8000b3e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	68d2      	ldr	r2, [r2, #12]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	6892      	ldr	r2, [r2, #8]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	3304      	adds	r3, #4
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d103      	bne.n	8000a54 <xTaskIncrementTick+0xb8>
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01e      	beq.n	8000aaa <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	6a12      	ldr	r2, [r2, #32]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	69d2      	ldr	r2, [r2, #28]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	3318      	adds	r3, #24
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d103      	bne.n	8000a9a <xTaskIncrementTick+0xfe>
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	6a1a      	ldr	r2, [r3, #32]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	2201      	movs	r2, #1
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <xTaskIncrementTick+0x1f8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <xTaskIncrementTick+0x1f8>)
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	4935      	ldr	r1, [pc, #212]	; (8000b98 <xTaskIncrementTick+0x1fc>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	440b      	add	r3, r1
 8000acc:	3304      	adds	r3, #4
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	3204      	adds	r2, #4
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1d1a      	adds	r2, r3, #4
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af6:	4613      	mov	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <xTaskIncrementTick+0x1fc>)
 8000b00:	441a      	add	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0a:	4923      	ldr	r1, [pc, #140]	; (8000b98 <xTaskIncrementTick+0x1fc>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1c59      	adds	r1, r3, #1
 8000b1a:	481f      	ldr	r0, [pc, #124]	; (8000b98 <xTaskIncrementTick+0x1fc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4403      	add	r3, r0
 8000b26:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <xTaskIncrementTick+0x200>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	429a      	cmp	r2, r3
 8000b34:	f67f af5d 	bls.w	80009f2 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b3c:	e759      	b.n	80009f2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <xTaskIncrementTick+0x200>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b44:	4914      	ldr	r1, [pc, #80]	; (8000b98 <xTaskIncrementTick+0x1fc>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d901      	bls.n	8000b5a <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <xTaskIncrementTick+0x204>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d007      	beq.n	8000b72 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e004      	b.n	8000b72 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <xTaskIncrementTick+0x208>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <xTaskIncrementTick+0x208>)
 8000b70:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000b72:	69fb      	ldr	r3, [r7, #28]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000140 	.word	0x20000140
 8000b80:	2000011c 	.word	0x2000011c
 8000b84:	200000d0 	.word	0x200000d0
 8000b88:	200000d4 	.word	0x200000d4
 8000b8c:	20000130 	.word	0x20000130
 8000b90:	20000138 	.word	0x20000138
 8000b94:	20000120 	.word	0x20000120
 8000b98:	20000044 	.word	0x20000044
 8000b9c:	20000040 	.word	0x20000040
 8000ba0:	2000012c 	.word	0x2000012c
 8000ba4:	20000128 	.word	0x20000128

08000ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <vTaskSwitchContext+0x78>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <vTaskSwitchContext+0x7c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000bbc:	e02a      	b.n	8000c14 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <vTaskSwitchContext+0x7c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <vTaskSwitchContext+0x80>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	fab3 f383 	clz	r3, r3
 8000bd0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	f1c3 031f 	rsb	r3, r3, #31
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <vTaskSwitchContext+0x84>)
 8000be6:	4413      	add	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d104      	bne.n	8000c0a <vTaskSwitchContext+0x62>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <vTaskSwitchContext+0x88>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000140 	.word	0x20000140
 8000c24:	2000012c 	.word	0x2000012c
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	20000044 	.word	0x20000044
 8000c30:	20000040 	.word	0x20000040

08000c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000c3c:	f000 f852 	bl	8000ce4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <prvIdleTask+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d9f9      	bls.n	8000c3c <prvIdleTask+0x8>
            {
                taskYIELD();
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <prvIdleTask+0x2c>)
 8000c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000c58:	e7f0      	b.n	8000c3c <prvIdleTask+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	20000044 	.word	0x20000044
 8000c60:	e000ed04 	.word	0xe000ed04

08000c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e00c      	b.n	8000c8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <prvInitialiseTaskLists+0x60>)
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa76 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d9ef      	bls.n	8000c70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <prvInitialiseTaskLists+0x64>)
 8000c92:	f7ff fa6d 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <prvInitialiseTaskLists+0x68>)
 8000c98:	f7ff fa6a 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <prvInitialiseTaskLists+0x6c>)
 8000c9e:	f7ff fa67 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <prvInitialiseTaskLists+0x70>)
 8000ca4:	f7ff fa64 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <prvInitialiseTaskLists+0x74>)
 8000caa:	f7ff fa61 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <prvInitialiseTaskLists+0x78>)
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <prvInitialiseTaskLists+0x64>)
 8000cb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <prvInitialiseTaskLists+0x7c>)
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <prvInitialiseTaskLists+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000044 	.word	0x20000044
 8000cc8:	200000a8 	.word	0x200000a8
 8000ccc:	200000bc 	.word	0x200000bc
 8000cd0:	200000d8 	.word	0x200000d8
 8000cd4:	200000ec 	.word	0x200000ec
 8000cd8:	20000104 	.word	0x20000104
 8000cdc:	200000d0 	.word	0x200000d0
 8000ce0:	200000d4 	.word	0x200000d4

08000ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cea:	e019      	b.n	8000d20 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000cec:	f000 f8de 	bl	8000eac <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <prvCheckTasksWaitingTermination+0x50>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fa85 	bl	800020c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <prvCheckTasksWaitingTermination+0x54>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <prvCheckTasksWaitingTermination+0x54>)
 8000d0a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <prvCheckTasksWaitingTermination+0x58>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <prvCheckTasksWaitingTermination+0x58>)
 8000d14:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000d16:	f000 f8e3 	bl	8000ee0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f810 	bl	8000d40 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <prvCheckTasksWaitingTermination+0x58>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e1      	bne.n	8000cec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000ec 	.word	0x200000ec
 8000d38:	20000118 	.word	0x20000118
 8000d3c:	20000100 	.word	0x20000100

08000d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f999 	bl	8001084 <vPortFree>
            vPortFree( pxTCB );
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f996 	bl	8001084 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <prvResetNextTaskUnblockTime+0x2c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <prvResetNextTaskUnblockTime+0x30>)
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d76:	e005      	b.n	8000d84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <prvResetNextTaskUnblockTime+0x2c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <prvResetNextTaskUnblockTime+0x30>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200000d0 	.word	0x200000d0
 8000d90:	20000138 	.word	0x20000138

08000d94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3b04      	subs	r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3b04      	subs	r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	f023 0201 	bic.w	r2, r3, #1
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3b04      	subs	r3, #4
 8000dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <pxPortInitialiseStack+0x54>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3b14      	subs	r3, #20
 8000dce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b20      	subs	r3, #32
 8000dda:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	08000ded 	.word	0x08000ded

08000dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000df6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000dfa:	f383 8811 	msr	BASEPRI, r3
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f3bf 8f4f 	dsb	sy
 8000e06:	607b      	str	r3, [r7, #4]
    }
 8000e08:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000e0a:	bf00      	nop
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0fc      	beq.n	8000e0c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
	...

08000e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <pxCurrentTCBConst2>)
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	6808      	ldr	r0, [r1, #0]
 8000e26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e2a:	f380 8809 	msr	PSP, r0
 8000e2e:	f3bf 8f6f 	isb	sy
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	f380 8811 	msr	BASEPRI, r0
 8000e3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000e3e:	4770      	bx	lr

08000e40 <pxCurrentTCBConst2>:
 8000e40:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop

08000e48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <prvPortStartFirstTask+0x1c>)
 8000e4a:	6800      	ldr	r0, [r0, #0]
 8000e4c:	6800      	ldr	r0, [r0, #0]
 8000e4e:	f380 8808 	msr	MSP, r0
 8000e52:	b662      	cpsie	i
 8000e54:	b661      	cpsie	f
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	df00      	svc	0
 8000e60:	bf00      	nop
 8000e62:	0000      	.short	0x0000
 8000e64:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop

08000e6c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <xPortStartScheduler+0x38>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <xPortStartScheduler+0x38>)
 8000e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000e7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <xPortStartScheduler+0x38>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <xPortStartScheduler+0x38>)
 8000e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000e88:	f000 f890 	bl	8000fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <xPortStartScheduler+0x3c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000e92:	f7ff ffd9 	bl	8000e48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000e96:	f7ff fe87 	bl	8000ba8 <vTaskSwitchContext>
    prvTaskExitError();
 8000e9a:	f7ff ffa7 	bl	8000dec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	e000ed20 	.word	0xe000ed20
 8000ea8:	20000004 	.word	0x20000004

08000eac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
        __asm volatile
 8000eb2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000eb6:	f383 8811 	msr	BASEPRI, r3
 8000eba:	f3bf 8f6f 	isb	sy
 8000ebe:	f3bf 8f4f 	dsb	sy
 8000ec2:	607b      	str	r3, [r7, #4]
    }
 8000ec4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <vPortEnterCritical+0x30>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <vPortEnterCritical+0x30>)
 8000ece:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000004 	.word	0x20000004

08000ee0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <vPortExitCritical+0x30>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <vPortExitCritical+0x30>)
 8000eee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <vPortExitCritical+0x30>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <vPortExitCritical+0x24>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000f02:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000004 	.word	0x20000004
	...

08000f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000f20:	f3ef 8009 	mrs	r0, PSP
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <pxCurrentTCBConst>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f30:	6010      	str	r0, [r2, #0]
 8000f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000f36:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000f3a:	f380 8811 	msr	BASEPRI, r0
 8000f3e:	f7ff fe33 	bl	8000ba8 <vTaskSwitchContext>
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	f380 8811 	msr	BASEPRI, r0
 8000f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	6808      	ldr	r0, [r1, #0]
 8000f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f56:	f380 8809 	msr	PSP, r0
 8000f5a:	f3bf 8f6f 	isb	sy
 8000f5e:	4770      	bx	lr

08000f60 <pxCurrentTCBConst>:
 8000f60:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop

08000f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8000f6e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f72:	f383 8811 	msr	BASEPRI, r3
 8000f76:	f3bf 8f6f 	isb	sy
 8000f7a:	f3bf 8f4f 	dsb	sy
 8000f7e:	607b      	str	r3, [r7, #4]
    }
 8000f80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000f82:	f7ff fd0b 	bl	800099c <xTaskIncrementTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SysTick_Handler+0x40>)
 8000f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f383 8811 	msr	BASEPRI, r3
    }
 8000f9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	e000ed04 	.word	0xe000ed04

08000fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <vPortSetupTimerInterrupt+0x28>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <vPortSetupTimerInterrupt+0x2c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <vPortSetupTimerInterrupt+0x30>)
 8000fbe:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8000fc2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <vPortSetupTimerInterrupt+0x28>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010
 8000fd8:	e000e018 	.word	0xe000e018
 8000fdc:	e000e014 	.word	0xe000e014

08000fe0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00e      	beq.n	8001014 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f023 0307 	bic.w	r3, r3, #7
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d205      	bcs.n	8001010 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	3308      	adds	r3, #8
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e001      	b.n	8001014 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001014:	f7ff fbc8 	bl	80007a8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <pvPortMalloc+0x98>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <pvPortMalloc+0x9c>)
 8001022:	f023 0307 	bic.w	r3, r3, #7
 8001026:	461a      	mov	r2, r3
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <pvPortMalloc+0x98>)
 800102a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01b      	beq.n	800106a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <pvPortMalloc+0xa0>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800103a:	f643 6277 	movw	r2, #15991	; 0x3e77
 800103e:	4293      	cmp	r3, r2
 8001040:	d813      	bhi.n	800106a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <pvPortMalloc+0xa0>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	441a      	add	r2, r3
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <pvPortMalloc+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800104e:	429a      	cmp	r2, r3
 8001050:	d90b      	bls.n	800106a <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <pvPortMalloc+0x98>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <pvPortMalloc+0xa0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <pvPortMalloc+0xa0>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <pvPortMalloc+0xa0>)
 8001068:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800106a:	f7ff fbab 	bl	80007c4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20003fc8 	.word	0x20003fc8
 800107c:	2000014b 	.word	0x2000014b
 8001080:	20003fc4 	.word	0x20003fc4

08001084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
	...

08001098 <EN_PULS>:
#include "LCD.h"
	PIN_config PIN_C;

void EN_PULS(){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 800109c:	2201      	movs	r2, #1
 800109e:	210f      	movs	r1, #15
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <EN_PULS+0x28>)
 80010a2:	f001 fa59 	bl	8002558 <MCAL_write_PIN>
_TIM1_delay_ms(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f002 f8fa 	bl	80032a0 <_TIM1_delay_ms>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 80010ac:	2200      	movs	r2, #0
 80010ae:	210f      	movs	r1, #15
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <EN_PULS+0x28>)
 80010b2:	f001 fa51 	bl	8002558 <MCAL_write_PIN>
	_TIM1_delay_ms(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f002 f8f2 	bl	80032a0 <_TIM1_delay_ms>


}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <LCD_sendCommand>:

void LCD_sendCommand(usint8_t command){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 80010ce:	2200      	movs	r2, #0
 80010d0:	210e      	movs	r1, #14
 80010d2:	4830      	ldr	r0, [pc, #192]	; (8001194 <LCD_sendCommand+0xd0>)
 80010d4:	f001 fa40 	bl	8002558 <MCAL_write_PIN>
_TIM1_delay_ms(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f002 f8e1 	bl	80032a0 <_TIM1_delay_ms>
	_TIM1_delay_ms(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	2109      	movs	r1, #9
 80010ee:	482a      	ldr	r0, [pc, #168]	; (8001198 <LCD_sendCommand+0xd4>)
 80010f0:	f001 fa32 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	210a      	movs	r1, #10
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <LCD_sendCommand+0xd4>)
 8001106:	f001 fa27 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	210b      	movs	r1, #11
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <LCD_sendCommand+0xd4>)
 800111c:	f001 fa1c 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	09db      	lsrs	r3, r3, #7
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	210c      	movs	r1, #12
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <LCD_sendCommand+0xd4>)
 800112c:	f001 fa14 	bl	8002558 <MCAL_write_PIN>
	EN_PULS();
 8001130:	f7ff ffb2 	bl	8001098 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	2109      	movs	r1, #9
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <LCD_sendCommand+0xd4>)
 8001142:	f001 fa09 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	210a      	movs	r1, #10
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <LCD_sendCommand+0xd4>)
 8001158:	f001 f9fe 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	210b      	movs	r1, #11
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <LCD_sendCommand+0xd4>)
 800116e:	f001 f9f3 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	210c      	movs	r1, #12
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <LCD_sendCommand+0xd4>)
 8001184:	f001 f9e8 	bl	8002558 <MCAL_write_PIN>
	EN_PULS();
 8001188:	f7ff ff86 	bl	8001098 <EN_PULS>

#endif

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40010800 	.word	0x40010800

0800119c <LCD_init>:

void LCD_init(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
_TIM1_delay_ms(20); // wait until power
 80011a0:	2014      	movs	r0, #20
 80011a2:	f002 f87d 	bl	80032a0 <_TIM1_delay_ms>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <LCD_init+0xb0>)
 80011a8:	220e      	movs	r2, #14
 80011aa:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <LCD_init+0xb0>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <LCD_init+0xb0>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80011b8:	4924      	ldr	r1, [pc, #144]	; (800124c <LCD_init+0xb0>)
 80011ba:	4825      	ldr	r0, [pc, #148]	; (8001250 <LCD_init+0xb4>)
 80011bc:	f001 f8e2 	bl	8002384 <MCAL_GPIO_init>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	_delay_us(1);

		PIN_C.PIN_number=EN;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <LCD_init+0xb0>)
 80011c2:	220f      	movs	r2, #15
 80011c4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80011c6:	4921      	ldr	r1, [pc, #132]	; (800124c <LCD_init+0xb0>)
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <LCD_init+0xb4>)
 80011ca:	f001 f8db 	bl	8002384 <MCAL_GPIO_init>
	_TIM1_delay_ms(15); // wait until power
 80011ce:	200f      	movs	r0, #15
 80011d0:	f002 f866 	bl	80032a0 <_TIM1_delay_ms>
	_TIM1_delay_ms(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <LCD_init+0xb0>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <LCD_init+0xb0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <LCD_init+0xb0>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80011e6:	4919      	ldr	r1, [pc, #100]	; (800124c <LCD_init+0xb0>)
 80011e8:	481a      	ldr	r0, [pc, #104]	; (8001254 <LCD_init+0xb8>)
 80011ea:	f001 f8cb 	bl	8002384 <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <LCD_init+0xb0>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80011f4:	4915      	ldr	r1, [pc, #84]	; (800124c <LCD_init+0xb0>)
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <LCD_init+0xb8>)
 80011f8:	f001 f8c4 	bl	8002384 <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <LCD_init+0xb0>)
 80011fe:	220b      	movs	r2, #11
 8001200:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8001202:	4912      	ldr	r1, [pc, #72]	; (800124c <LCD_init+0xb0>)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <LCD_init+0xb8>)
 8001206:	f001 f8bd 	bl	8002384 <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <LCD_init+0xb0>)
 800120c:	220c      	movs	r2, #12
 800120e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <LCD_init+0xb0>)
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <LCD_init+0xb8>)
 8001214:	f001 f8b6 	bl	8002384 <MCAL_GPIO_init>
	_TIM1_delay_ms(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f002 f841 	bl	80032a0 <_TIM1_delay_ms>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f7ff ff50 	bl	80010c4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
 8001224:	2032      	movs	r0, #50	; 0x32
 8001226:	f7ff ff4d 	bl	80010c4 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 800122a:	2028      	movs	r0, #40	; 0x28
 800122c:	f7ff ff4a 	bl	80010c4 <LCD_sendCommand>

	_TIM1_delay_ms(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f002 f835 	bl	80032a0 <_TIM1_delay_ms>



#endif
	LCD_sendCommand(LCD_CURSOR_ON);
 8001236:	200e      	movs	r0, #14
 8001238:	f7ff ff44 	bl	80010c4 <LCD_sendCommand>
	LCD_sendCommand(LCD_GO_TO_HOME);
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff ff41 	bl	80010c4 <LCD_sendCommand>
	LCD_clearScreen();
 8001242:	f000 f809 	bl	8001258 <LCD_clearScreen>

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20003fcc 	.word	0x20003fcc
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40010800 	.word	0x40010800

08001258 <LCD_clearScreen>:
void LCD_clearScreen(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND);
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ff31 	bl	80010c4 <LCD_sendCommand>


}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <LCD_sendCharcter>:

void LCD_sendCharcter(usint8_t data){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_HIGH);
 8001272:	2201      	movs	r2, #1
 8001274:	210e      	movs	r1, #14
 8001276:	4830      	ldr	r0, [pc, #192]	; (8001338 <LCD_sendCharcter+0xd0>)
 8001278:	f001 f96e 	bl	8002558 <MCAL_write_PIN>
//	MCAL_write_PIN(CTRL_PORT, RW, LOGIC_LOW);

	_TIM1_delay_ms(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f002 f80f 	bl	80032a0 <_TIM1_delay_ms>
	_TIM1_delay_ms(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,4));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	2109      	movs	r1, #9
 8001292:	482a      	ldr	r0, [pc, #168]	; (800133c <LCD_sendCharcter+0xd4>)
 8001294:	f001 f960 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,5));
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	210a      	movs	r1, #10
 80012a8:	4824      	ldr	r0, [pc, #144]	; (800133c <LCD_sendCharcter+0xd4>)
 80012aa:	f001 f955 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,6));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	210b      	movs	r1, #11
 80012be:	481f      	ldr	r0, [pc, #124]	; (800133c <LCD_sendCharcter+0xd4>)
 80012c0:	f001 f94a 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,7));
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	09db      	lsrs	r3, r3, #7
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	210c      	movs	r1, #12
 80012ce:	481b      	ldr	r0, [pc, #108]	; (800133c <LCD_sendCharcter+0xd4>)
 80012d0:	f001 f942 	bl	8002558 <MCAL_write_PIN>
	EN_PULS();
 80012d4:	f7ff fee0 	bl	8001098 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,0));
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	2109      	movs	r1, #9
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <LCD_sendCharcter+0xd4>)
 80012e6:	f001 f937 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,1));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	085b      	lsrs	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	210a      	movs	r1, #10
 80012fa:	4810      	ldr	r0, [pc, #64]	; (800133c <LCD_sendCharcter+0xd4>)
 80012fc:	f001 f92c 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,2));
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	210b      	movs	r1, #11
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <LCD_sendCharcter+0xd4>)
 8001312:	f001 f921 	bl	8002558 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,3));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	210c      	movs	r1, #12
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <LCD_sendCharcter+0xd4>)
 8001328:	f001 f916 	bl	8002558 <MCAL_write_PIN>
	EN_PULS();
 800132c:	f7ff feb4 	bl	8001098 <EN_PULS>

#endif

}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40010800 	.word	0x40010800

08001340 <LCD_sendString>:
void LCD_sendString(char *data){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
	while(data[i] != 0){
 800134c:	e009      	b.n	8001362 <LCD_sendString+0x22>
		LCD_sendCharcter(data[i++]);
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	73fa      	strb	r2, [r7, #15]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff83 	bl	8001268 <LCD_sendCharcter>
	while(data[i] != 0){
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ef      	bne.n	800134e <LCD_sendString+0xe>

	}
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LCD_moveCURSER>:
void LCD_moveCURSER(unsigned char row,unsigned char col){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d819      	bhi.n	80013c2 <LCD_moveCURSER+0x4a>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <LCD_moveCURSER+0x1c>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013ab 	.word	0x080013ab
 800139c:	080013b3 	.word	0x080013b3
 80013a0:	080013bb 	.word	0x080013bb
	{
		case 0:
			lcd_memory_address=col;
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	73fb      	strb	r3, [r7, #15]
				break;
 80013a8:	e00b      	b.n	80013c2 <LCD_moveCURSER+0x4a>
		case 1:
			lcd_memory_address=col+0x40;
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	3340      	adds	r3, #64	; 0x40
 80013ae:	73fb      	strb	r3, [r7, #15]
				break;
 80013b0:	e007      	b.n	80013c2 <LCD_moveCURSER+0x4a>
		case 2:
			lcd_memory_address=col+0x10;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	3310      	adds	r3, #16
 80013b6:	73fb      	strb	r3, [r7, #15]
				break;
 80013b8:	e003      	b.n	80013c2 <LCD_moveCURSER+0x4a>
		case 3:
			lcd_memory_address=col+0x50;
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	3350      	adds	r3, #80	; 0x50
 80013be:	73fb      	strb	r3, [r7, #15]
				break;
 80013c0:	bf00      	nop
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe7a 	bl	80010c4 <LCD_sendCommand>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <LCD_intgerToString>:

void LCD_intgerToString(unsigned int num){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	char buff[16];
	itoa(num,buff,10);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	220a      	movs	r2, #10
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fb60 	bl	8003aae <itoa>
	LCD_sendString(buff);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffa4 	bl	8001340 <LCD_sendString>


}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	while(1);
 8001404:	e7fe      	b.n	8001404 <ADC_ERROR_HANDLER+0x4>
	...

08001408 <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	; 0x40
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8001412:	2300      	movs	r3, #0
 8001414:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001416:	2300      	movs	r3, #0
 8001418:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800141c:	2300      	movs	r3, #0
 800141e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	f200 80d7 	bhi.w	80015d8 <ADC_GPIO_CONFIG+0x1d0>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <ADC_GPIO_CONFIG+0x28>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001471 	.word	0x08001471
 8001434:	0800148f 	.word	0x0800148f
 8001438:	080014ad 	.word	0x080014ad
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014e9 	.word	0x080014e9
 8001444:	08001507 	.word	0x08001507
 8001448:	08001525 	.word	0x08001525
 800144c:	08001543 	.word	0x08001543
 8001450:	08001561 	.word	0x08001561
 8001454:	0800157f 	.word	0x0800157f
 8001458:	080015d9 	.word	0x080015d9
 800145c:	080015d9 	.word	0x080015d9
 8001460:	080015d9 	.word	0x080015d9
 8001464:	080015d9 	.word	0x080015d9
 8001468:	0800159d 	.word	0x0800159d
 800146c:	080015bb 	.word	0x080015bb
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001470:	2300      	movs	r3, #0
 8001472:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001474:	2300      	movs	r3, #0
 8001476:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800147a:	2300      	movs	r3, #0
 800147c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001480:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001484:	4619      	mov	r1, r3
 8001486:	4858      	ldr	r0, [pc, #352]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 8001488:	f000 ff7c 	bl	8002384 <MCAL_GPIO_init>
		break;
 800148c:	e0a7      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 800148e:	2301      	movs	r3, #1
 8001490:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001492:	2300      	movs	r3, #0
 8001494:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001498:	2300      	movs	r3, #0
 800149a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 800149e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4850      	ldr	r0, [pc, #320]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 80014a6:	f000 ff6d 	bl	8002384 <MCAL_GPIO_init>
		break;
 80014aa:	e098      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 80014ac:	2302      	movs	r3, #2
 80014ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80014bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014c0:	4619      	mov	r1, r3
 80014c2:	4849      	ldr	r0, [pc, #292]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 80014c4:	f000 ff5e 	bl	8002384 <MCAL_GPIO_init>
		break;
 80014c8:	e089      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 80014ca:	2303      	movs	r3, #3
 80014cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80014da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014de:	4619      	mov	r1, r3
 80014e0:	4841      	ldr	r0, [pc, #260]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 80014e2:	f000 ff4f 	bl	8002384 <MCAL_GPIO_init>
		break;
 80014e6:	e07a      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 80014e8:	2304      	movs	r3, #4
 80014ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80014f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fc:	4619      	mov	r1, r3
 80014fe:	483a      	ldr	r0, [pc, #232]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 8001500:	f000 ff40 	bl	8002384 <MCAL_GPIO_init>
		break;
 8001504:	e06b      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001506:	2305      	movs	r3, #5
 8001508:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800150a:	2300      	movs	r3, #0
 800150c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001510:	2300      	movs	r3, #0
 8001512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001516:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151a:	4619      	mov	r1, r3
 800151c:	4832      	ldr	r0, [pc, #200]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 800151e:	f000 ff31 	bl	8002384 <MCAL_GPIO_init>
		break;
 8001522:	e05c      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8001524:	2306      	movs	r3, #6
 8001526:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001528:	2300      	movs	r3, #0
 800152a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800152e:	2300      	movs	r3, #0
 8001530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001538:	4619      	mov	r1, r3
 800153a:	482b      	ldr	r0, [pc, #172]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 800153c:	f000 ff22 	bl	8002384 <MCAL_GPIO_init>
		break;
 8001540:	e04d      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8001542:	2307      	movs	r3, #7
 8001544:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001546:	2300      	movs	r3, #0
 8001548:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800154c:	2300      	movs	r3, #0
 800154e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001552:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001556:	4619      	mov	r1, r3
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <ADC_GPIO_CONFIG+0x1e0>)
 800155a:	f000 ff13 	bl	8002384 <MCAL_GPIO_init>
		break;
 800155e:	e03e      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001560:	2300      	movs	r3, #0
 8001562:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001564:	2300      	movs	r3, #0
 8001566:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800156a:	2300      	movs	r3, #0
 800156c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001570:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001574:	4619      	mov	r1, r3
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <ADC_GPIO_CONFIG+0x1e4>)
 8001578:	f000 ff04 	bl	8002384 <MCAL_GPIO_init>
		break;
 800157c:	e02f      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 800157e:	2301      	movs	r3, #1
 8001580:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001582:	2300      	movs	r3, #0
 8001584:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001588:	2300      	movs	r3, #0
 800158a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 800158e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001592:	4619      	mov	r1, r3
 8001594:	4815      	ldr	r0, [pc, #84]	; (80015ec <ADC_GPIO_CONFIG+0x1e4>)
 8001596:	f000 fef5 	bl	8002384 <MCAL_GPIO_init>
		break;
 800159a:	e020      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 800159c:	2304      	movs	r3, #4
 800159e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 80015ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b0:	4619      	mov	r1, r3
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <ADC_GPIO_CONFIG+0x1e8>)
 80015b4:	f000 fee6 	bl	8002384 <MCAL_GPIO_init>
		break;
 80015b8:	e011      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 80015ba:	2305      	movs	r3, #5
 80015bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 80015ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <ADC_GPIO_CONFIG+0x1e8>)
 80015d2:	f000 fed7 	bl	8002384 <MCAL_GPIO_init>
		break;
 80015d6:	e002      	b.n	80015de <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 80015d8:	f7ff ff12 	bl	8001400 <ADC_ERROR_HANDLER>
		break;
 80015dc:	bf00      	nop

	}



}
 80015de:	bf00      	nop
 80015e0:	3740      	adds	r7, #64	; 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40011000 	.word	0x40011000

080015f4 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d905      	bls.n	8001612 <ADC_init+0x1e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b0d      	cmp	r3, #13
 800160c:	d801      	bhi.n	8001612 <ADC_init+0x1e>
		return ADC_error;
 800160e:	2301      	movs	r3, #1
 8001610:	e177      	b.n	8001902 <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a9a      	ldr	r2, [pc, #616]	; (8001880 <ADC_init+0x28c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d113      	bne.n	8001642 <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4a98      	ldr	r2, [pc, #608]	; (8001884 <ADC_init+0x290>)
 8001622:	460b      	mov	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	440b      	add	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001630:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8001634:	4b94      	ldr	r3, [pc, #592]	; (8001888 <ADC_init+0x294>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a93      	ldr	r2, [pc, #588]	; (8001888 <ADC_init+0x294>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	e013      	b.n	800166a <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	4a8e      	ldr	r2, [pc, #568]	; (8001884 <ADC_init+0x290>)
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	33c0      	adds	r3, #192	; 0xc0
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	ca07      	ldmia	r2, {r0, r1, r2}
 800165a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 800165e:	4b8a      	ldr	r3, [pc, #552]	; (8001888 <ADC_init+0x294>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	4a89      	ldr	r2, [pc, #548]	; (8001888 <ADC_init+0x294>)
 8001664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001668:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff feca 	bl	8001408 <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6893      	ldr	r3, [r2, #8]
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 800167e:	200a      	movs	r0, #10
 8001680:	f001 fde2 	bl	8003248 <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6893      	ldr	r3, [r2, #8]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 800168e:	f001 fc93 	bl	8002fb8 <MCAL_GET_PCLCK2>
 8001692:	4603      	mov	r3, r0
 8001694:	4a7d      	ldr	r2, [pc, #500]	; (800188c <ADC_init+0x298>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	2b1c      	cmp	r3, #28
 800169e:	d014      	beq.n	80016ca <ADC_init+0xd6>
 80016a0:	2b1c      	cmp	r3, #28
 80016a2:	d819      	bhi.n	80016d8 <ADC_init+0xe4>
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d002      	beq.n	80016ae <ADC_init+0xba>
 80016a8:	2b10      	cmp	r3, #16
 80016aa:	d007      	beq.n	80016bc <ADC_init+0xc8>
 80016ac:	e014      	b.n	80016d8 <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 80016ae:	4b76      	ldr	r3, [pc, #472]	; (8001888 <ADC_init+0x294>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a75      	ldr	r2, [pc, #468]	; (8001888 <ADC_init+0x294>)
 80016b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b8:	6053      	str	r3, [r2, #4]
		break;
 80016ba:	e014      	b.n	80016e6 <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 80016bc:	4b72      	ldr	r3, [pc, #456]	; (8001888 <ADC_init+0x294>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a71      	ldr	r2, [pc, #452]	; (8001888 <ADC_init+0x294>)
 80016c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c6:	6053      	str	r3, [r2, #4]
		break;
 80016c8:	e00d      	b.n	80016e6 <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <ADC_init+0x294>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <ADC_init+0x294>)
 80016d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016d4:	6053      	str	r3, [r2, #4]
		break;
 80016d6:	e006      	b.n	80016e6 <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 80016d8:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <ADC_init+0x294>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a6a      	ldr	r2, [pc, #424]	; (8001888 <ADC_init+0x294>)
 80016de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e2:	6053      	str	r3, [r2, #4]
		break;
 80016e4:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6893      	ldr	r3, [r2, #8]
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6893      	ldr	r3, [r2, #8]
 80016f4:	f36f 23cb 	bfc	r3, #11, #1
 80016f8:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	f200 80a8 	bhi.w	8001854 <ADC_init+0x260>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <ADC_init+0x118>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	0800174d 	.word	0x0800174d
 8001710:	08001763 	.word	0x08001763
 8001714:	08001779 	.word	0x08001779
 8001718:	0800178f 	.word	0x0800178f
 800171c:	080017a5 	.word	0x080017a5
 8001720:	080017bb 	.word	0x080017bb
 8001724:	080017d1 	.word	0x080017d1
 8001728:	080017e7 	.word	0x080017e7
 800172c:	080017fd 	.word	0x080017fd
 8001730:	08001813 	.word	0x08001813
 8001734:	08001855 	.word	0x08001855
 8001738:	08001855 	.word	0x08001855
 800173c:	08001855 	.word	0x08001855
 8001740:	08001855 	.word	0x08001855
 8001744:	08001829 	.word	0x08001829
 8001748:	0800183f 	.word	0x0800183f
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	b2d9      	uxtb	r1, r3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6913      	ldr	r3, [r2, #16]
 800175a:	f361 0302 	bfi	r3, r1, #0, #3
 800175e:	6113      	str	r3, [r2, #16]
		break;
 8001760:	e07b      	b.n	800185a <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	b2d9      	uxtb	r1, r3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6913      	ldr	r3, [r2, #16]
 8001770:	f361 03c5 	bfi	r3, r1, #3, #3
 8001774:	6113      	str	r3, [r2, #16]

		break;
 8001776:	e070      	b.n	800185a <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b2d9      	uxtb	r1, r3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6913      	ldr	r3, [r2, #16]
 8001786:	f361 1388 	bfi	r3, r1, #6, #3
 800178a:	6113      	str	r3, [r2, #16]

		break;
 800178c:	e065      	b.n	800185a <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6913      	ldr	r3, [r2, #16]
 800179c:	f361 234b 	bfi	r3, r1, #9, #3
 80017a0:	6113      	str	r3, [r2, #16]

		break;
 80017a2:	e05a      	b.n	800185a <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	789b      	ldrb	r3, [r3, #2]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	b2d9      	uxtb	r1, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6913      	ldr	r3, [r2, #16]
 80017b2:	f361 330e 	bfi	r3, r1, #12, #3
 80017b6:	6113      	str	r3, [r2, #16]

		break;
 80017b8:	e04f      	b.n	800185a <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	b2d9      	uxtb	r1, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6913      	ldr	r3, [r2, #16]
 80017c8:	f361 33d1 	bfi	r3, r1, #15, #3
 80017cc:	6113      	str	r3, [r2, #16]

		break;
 80017ce:	e044      	b.n	800185a <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2d9      	uxtb	r1, r3
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6913      	ldr	r3, [r2, #16]
 80017de:	f361 4394 	bfi	r3, r1, #18, #3
 80017e2:	6113      	str	r3, [r2, #16]

		break;
 80017e4:	e039      	b.n	800185a <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6913      	ldr	r3, [r2, #16]
 80017f4:	f361 5357 	bfi	r3, r1, #21, #3
 80017f8:	6113      	str	r3, [r2, #16]

		break;
 80017fa:	e02e      	b.n	800185a <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	b2d9      	uxtb	r1, r3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6913      	ldr	r3, [r2, #16]
 800180a:	f361 631a 	bfi	r3, r1, #24, #3
 800180e:	6113      	str	r3, [r2, #16]

		break;
 8001810:	e023      	b.n	800185a <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	b2d9      	uxtb	r1, r3
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6913      	ldr	r3, [r2, #16]
 8001820:	f361 63dd 	bfi	r3, r1, #27, #3
 8001824:	6113      	str	r3, [r2, #16]

		break;
 8001826:	e018      	b.n	800185a <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	789b      	ldrb	r3, [r3, #2]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68d3      	ldr	r3, [r2, #12]
 8001836:	f361 330e 	bfi	r3, r1, #12, #3
 800183a:	60d3      	str	r3, [r2, #12]

		break;
 800183c:	e00d      	b.n	800185a <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	789b      	ldrb	r3, [r3, #2]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2d9      	uxtb	r1, r3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68d3      	ldr	r3, [r2, #12]
 800184c:	f361 33d1 	bfi	r3, r1, #15, #3
 8001850:	60d3      	str	r3, [r2, #12]
		break;
 8001852:	e002      	b.n	800185a <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 8001854:	f7ff fdd4 	bl	8001400 <ADC_ERROR_HANDLER>
		break;
 8001858:	bf00      	nop


	}

	switch(config->mode){
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <ADC_init+0x274>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d006      	beq.n	8001874 <ADC_init+0x280>
 8001866:	e013      	b.n	8001890 <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6893      	ldr	r3, [r2, #8]
 800186c:	f36f 0341 	bfc	r3, #1, #1
 8001870:	6093      	str	r3, [r2, #8]
		break;
 8001872:	e010      	b.n	8001896 <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6893      	ldr	r3, [r2, #8]
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6093      	str	r3, [r2, #8]
		break;
 800187e:	e00a      	b.n	8001896 <ADC_init+0x2a2>
 8001880:	40012400 	.word	0x40012400
 8001884:	20003fd0 	.word	0x20003fd0
 8001888:	40021000 	.word	0x40021000
 800188c:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8001890:	f7ff fdb6 	bl	8001400 <ADC_ERROR_HANDLER>
		break;
 8001894:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d022      	beq.n	80018ec <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6853      	ldr	r3, [r2, #4]
 80018aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ae:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6853      	ldr	r3, [r2, #4]
 80018be:	f361 0304 	bfi	r3, r1, #0, #5
 80018c2:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	78db      	ldrb	r3, [r3, #3]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6853      	ldr	r3, [r2, #4]
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	6053      	str	r3, [r2, #4]
 80018d6:	e004      	b.n	80018e2 <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6853      	ldr	r3, [r2, #4]
 80018dc:	f36f 1386 	bfc	r3, #6, #1
 80018e0:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6853      	ldr	r3, [r2, #4]
 80018e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ea:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6893      	ldr	r3, [r2, #8]
 80018f0:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 80018f4:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6893      	ldr	r3, [r2, #8]
 80018fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018fe:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <ADC_read+0xd8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d108      	bne.n	8001938 <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8001926:	7afa      	ldrb	r2, [r7, #11]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <ADC_read+0xdc>)
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	e008      	b.n	800194a <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8001938:	7afa      	ldrb	r2, [r7, #11]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	33c0      	adds	r3, #192	; 0xc0
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <ADC_read+0xdc>)
 8001946:	4413      	add	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800196a:	f361 0304 	bfi	r3, r1, #0, #5
 800196e:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10c      	bne.n	8001992 <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	6893      	ldr	r3, [r2, #8]
 800197c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001980:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 8001982:	bf00      	nop
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f8      	beq.n	8001984 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	78db      	ldrb	r3, [r3, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	801a      	strh	r2, [r3, #0]
		data++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3302      	adds	r3, #2
 80019a8:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 80019aa:	e016      	b.n	80019da <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 80019ac:	2300      	movs	r3, #0
 80019ae:	74fb      	strb	r3, [r7, #19]
 80019b0:	e00a      	b.n	80019c8 <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	801a      	strh	r2, [r3, #0]
			data++;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3302      	adds	r3, #2
 80019c0:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 80019c2:	7cfb      	ldrb	r3, [r7, #19]
 80019c4:	3301      	adds	r3, #1
 80019c6:	74fb      	strb	r3, [r7, #19]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f3c3 5303 	ubfx	r3, r3, #20, #4
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	7cfb      	ldrb	r3, [r7, #19]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d9eb      	bls.n	80019b2 <ADC_read+0xa6>
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40012400 	.word	0x40012400
 80019e8:	20003fd0 	.word	0x20003fd0

080019ec <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <ADC1_2_IRQHandler+0x54>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10f      	bne.n	8001a1e <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <ADC1_2_IRQHandler+0x54>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <ADC1_2_IRQHandler+0x58>)
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3308      	adds	r3, #8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 8001a1c:	e00e      	b.n	8001a3c <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <ADC1_2_IRQHandler+0x5c>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <ADC1_2_IRQHandler+0x58>)
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	440b      	add	r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	33c8      	adds	r3, #200	; 0xc8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4798      	blx	r3
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012400 	.word	0x40012400
 8001a44:	20003fd0 	.word	0x20003fd0
 8001a48:	40012800 	.word	0x40012800

08001a4c <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	while(1);
 8001a50:	e7fe      	b.n	8001a50 <ERROR_HANDLER+0x4>
	...

08001a54 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MCAL_CAN_SET_GPIO+0x30>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4808      	ldr	r0, [pc, #32]	; (8001a88 <MCAL_CAN_SET_GPIO+0x34>)
 8001a66:	f000 fc8d 	bl	8002384 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MCAL_CAN_SET_GPIO+0x38>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MCAL_CAN_SET_GPIO+0x34>)
 8001a76:	f000 fc85 	bl	8002384 <MCAL_GPIO_init>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	08003bb0 	.word	0x08003bb0
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	08003bb4 	.word	0x08003bb4

08001a90 <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <MCAL_CAN_init+0x21c>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <MCAL_CAN_init+0x220>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a82      	ldr	r2, [pc, #520]	; (8001cb0 <MCAL_CAN_init+0x220>)
 8001aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aac:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 8001aae:	f7ff ffd1 	bl	8001a54 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 8001ab2:	4b80      	ldr	r3, [pc, #512]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11f      	bne.n	8001b00 <MCAL_CAN_init+0x70>
 8001ac0:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d118      	bne.n	8001b00 <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8001ace:	4a79      	ldr	r2, [pc, #484]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	f36f 0341 	bfc	r3, #1, #1
 8001ad6:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 8001ad8:	4a76      	ldr	r2, [pc, #472]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 8001ae2:	bf00      	nop
 8001ae4:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1f8      	bne.n	8001ae4 <MCAL_CAN_init+0x54>
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f1      	bne.n	8001ae4 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8001b08:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e004      	b.n	8001b1e <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8001b14:	4a67      	ldr	r2, [pc, #412]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b16:	6813      	ldr	r3, [r2, #0]
 8001b18:	f36f 1386 	bfc	r3, #6, #1
 8001b1c:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8001b26:	4a63      	ldr	r2, [pc, #396]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e004      	b.n	8001b3c <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 8001b32:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	f36f 1304 	bfc	r3, #4, #1
 8001b3a:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	f36f 0382 	bfc	r3, #2, #1
 8001b44:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e004      	b.n	8001b64 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 8001b5a:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	f36f 03c3 	bfc	r3, #3, #1
 8001b62:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 8001b64:	f001 fa14 	bl	8002f90 <MCAL_GET_PCLCK1>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <MCAL_CAN_init+0x228>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <MCAL_CAN_init+0xe8>
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <MCAL_CAN_init+0x22c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d023      	beq.n	8001bbe <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 8001b76:	e045      	b.n	8001c04 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d83e      	bhi.n	8001bfe <MCAL_CAN_init+0x16e>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <MCAL_CAN_init+0xf8>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001ba3 	.word	0x08001ba3
 8001b90:	08001bad 	.word	0x08001bad
 8001b94:	08001bb5 	.word	0x08001bb5
			CAN1->BTR.ALL_Bits=0x00050000;
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001b9a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001b9e:	61da      	str	r2, [r3, #28]
			break;
 8001ba0:	e00c      	b.n	8001bbc <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001ba4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001ba8:	61da      	str	r2, [r3, #28]
			break;
 8001baa:	e007      	b.n	8001bbc <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001bae:	4a44      	ldr	r2, [pc, #272]	; (8001cc0 <MCAL_CAN_init+0x230>)
 8001bb0:	61da      	str	r2, [r3, #28]
			break;
 8001bb2:	e003      	b.n	8001bbc <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <MCAL_CAN_init+0x234>)
 8001bb8:	61da      	str	r2, [r3, #28]
			break;
 8001bba:	bf00      	nop
		break;
 8001bbc:	e01f      	b.n	8001bfe <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	78db      	ldrb	r3, [r3, #3]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d81d      	bhi.n	8001c02 <MCAL_CAN_init+0x172>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <MCAL_CAN_init+0x13c>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be5 	.word	0x08001be5
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001bf5 	.word	0x08001bf5
				CAN1->BTR.ALL_Bits=0x00090001;
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001bde:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <MCAL_CAN_init+0x238>)
 8001be0:	61da      	str	r2, [r3, #28]
				break;
 8001be2:	e00b      	b.n	8001bfc <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <MCAL_CAN_init+0x23c>)
 8001be8:	61da      	str	r2, [r3, #28]
				break;
 8001bea:	e007      	b.n	8001bfc <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001bee:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <MCAL_CAN_init+0x240>)
 8001bf0:	61da      	str	r2, [r3, #28]
				break;
 8001bf2:	e003      	b.n	8001bfc <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001bf6:	4a37      	ldr	r2, [pc, #220]	; (8001cd4 <MCAL_CAN_init+0x244>)
 8001bf8:	61da      	str	r2, [r3, #28]
				break;
 8001bfa:	bf00      	nop
			break;
 8001bfc:	e001      	b.n	8001c02 <MCAL_CAN_init+0x172>
		break;
 8001bfe:	bf00      	nop
 8001c00:	e000      	b.n	8001c04 <MCAL_CAN_init+0x174>
			break;
 8001c02:	bf00      	nop

	}

	switch(CANx->MODE){
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d837      	bhi.n	8001c7c <MCAL_CAN_init+0x1ec>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <MCAL_CAN_init+0x184>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c3b 	.word	0x08001c3b
 8001c1c:	08001c51 	.word	0x08001c51
 8001c20:	08001c67 	.word	0x08001c67
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8001c24:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c26:	69d3      	ldr	r3, [r2, #28]
 8001c28:	f36f 73df 	bfc	r3, #31, #1
 8001c2c:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c30:	69d3      	ldr	r3, [r2, #28]
 8001c32:	f36f 739e 	bfc	r3, #30, #1
 8001c36:	61d3      	str	r3, [r2, #28]

		break;
 8001c38:	e023      	b.n	8001c82 <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c3c:	69d3      	ldr	r3, [r2, #28]
 8001c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c42:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c46:	69d3      	ldr	r3, [r2, #28]
 8001c48:	f36f 739e 	bfc	r3, #30, #1
 8001c4c:	61d3      	str	r3, [r2, #28]
		break;
 8001c4e:	e018      	b.n	8001c82 <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c52:	69d3      	ldr	r3, [r2, #28]
 8001c54:	f36f 73df 	bfc	r3, #31, #1
 8001c58:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c5c:	69d3      	ldr	r3, [r2, #28]
 8001c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c62:	61d3      	str	r3, [r2, #28]
		break;
 8001c64:	e00d      	b.n	8001c82 <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c68:	69d3      	ldr	r3, [r2, #28]
 8001c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c6e:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c72:	69d3      	ldr	r3, [r2, #28]
 8001c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	61d3      	str	r3, [r2, #28]
		break;
 8001c7a:	e002      	b.n	8001c82 <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 8001c7c:	f7ff fee6 	bl	8001a4c <ERROR_HANDLER>
		break;
 8001c80:	bf00      	nop

	}

	if(CANx->IE){
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	795b      	ldrb	r3, [r3, #5]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d028      	beq.n	8001cdc <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c8c:	6953      	ldr	r3, [r2, #20]
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <MCAL_CAN_init+0x224>)
 8001c96:	6953      	ldr	r3, [r2, #20]
 8001c98:	f043 0310 	orr.w	r3, r3, #16
 8001c9c:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MCAL_CAN_init+0x248>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <MCAL_CAN_init+0x248>)
 8001ca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e027      	b.n	8001cfc <MCAL_CAN_init+0x26c>
 8001cac:	20004150 	.word	0x20004150
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40006400 	.word	0x40006400
 8001cb8:	007a1200 	.word	0x007a1200
 8001cbc:	016e3600 	.word	0x016e3600
 8001cc0:	001c0001 	.word	0x001c0001
 8001cc4:	001c0004 	.word	0x001c0004
 8001cc8:	00090001 	.word	0x00090001
 8001ccc:	001c0002 	.word	0x001c0002
 8001cd0:	001c0005 	.word	0x001c0005
 8001cd4:	001c000e 	.word	0x001c000e
 8001cd8:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001cde:	6953      	ldr	r3, [r2, #20]
 8001ce0:	f36f 0341 	bfc	r3, #1, #1
 8001ce4:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001ce8:	6953      	ldr	r3, [r2, #20]
 8001cea:	f36f 1304 	bfc	r3, #4, #1
 8001cee:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <MCAL_CAN_init+0x2dc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <MCAL_CAN_init+0x2dc>)
 8001cf6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001cfa:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001cfe:	6953      	ldr	r3, [r2, #20]
 8001d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d04:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d08:	6953      	ldr	r3, [r2, #20]
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0e:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MCAL_CAN_init+0x2e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <MCAL_CAN_init+0x2e0>)
 8001d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1a:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d118      	bne.n	8001d5c <MCAL_CAN_init+0x2cc>
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f36f 0341 	bfc	r3, #1, #1
 8001d40:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f36f 0300 	bfc	r3, #0, #1
 8001d4a:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8001d4c:	bf00      	nop
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MCAL_CAN_init+0x2d8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d0f8      	beq.n	8001d4e <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40006400 	.word	0x40006400
 8001d6c:	e000e180 	.word	0xe000e180
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <MCAL_CAN_RESET+0x24>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <MCAL_CAN_RESET+0x24>)
 8001d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d82:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <MCAL_CAN_RESET+0x24>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <MCAL_CAN_RESET+0x24>)
 8001d8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	6113      	str	r3, [r2, #16]

}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000

08001d9c <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4798      	blx	r3
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20004150 	.word	0x20004150

08001db0 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <CAN_RX1_IRQHandler+0x10>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4798      	blx	r3
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20004150 	.word	0x20004150

08001dc4 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 8001dc8:	f7ff ffd4 	bl	8001d74 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <CAN_SCE_IRQHandler+0x14>)
 8001dce:	f7ff fe5f 	bl	8001a90 <MCAL_CAN_init>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20004150 	.word	0x20004150

08001ddc <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d854      	bhi.n	8001e96 <NVIC_ENABLE+0xba>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <NVIC_ENABLE+0x18>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e35 	.word	0x08001e35
 8001df8:	08001e43 	.word	0x08001e43
 8001dfc:	08001e51 	.word	0x08001e51
 8001e00:	08001e5f 	.word	0x08001e5f
 8001e04:	08001e6d 	.word	0x08001e6d
 8001e08:	08001e7b 	.word	0x08001e7b
 8001e0c:	08001e7b 	.word	0x08001e7b
 8001e10:	08001e7b 	.word	0x08001e7b
 8001e14:	08001e7b 	.word	0x08001e7b
 8001e18:	08001e7b 	.word	0x08001e7b
 8001e1c:	08001e89 	.word	0x08001e89
 8001e20:	08001e89 	.word	0x08001e89
 8001e24:	08001e89 	.word	0x08001e89
 8001e28:	08001e89 	.word	0x08001e89
 8001e2c:	08001e89 	.word	0x08001e89
 8001e30:	08001e89 	.word	0x08001e89
	case 0:
		NVIC_EXTI0_EN;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3e:	6013      	str	r3, [r2, #0]
		break;
 8001e40:	e029      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6013      	str	r3, [r2, #0]
		break;
 8001e4e:	e022      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
		break;
 8001e5c:	e01b      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e68:	6013      	str	r3, [r2, #0]
		break;
 8001e6a:	e014      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
		break;
 8001e78:	e00d      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <NVIC_ENABLE+0xc4>)
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6013      	str	r3, [r2, #0]
		break;
 8001e86:	e006      	b.n	8001e96 <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <NVIC_ENABLE+0xc8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <NVIC_ENABLE+0xc8>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
break;
 8001e94:	bf00      	nop

	}
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000e104 	.word	0xe000e104

08001ea8 <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d854      	bhi.n	8001f62 <NVIC_DISABLE+0xba>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <NVIC_DISABLE+0x18>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001f01 	.word	0x08001f01
 8001ec4:	08001f0f 	.word	0x08001f0f
 8001ec8:	08001f1d 	.word	0x08001f1d
 8001ecc:	08001f2b 	.word	0x08001f2b
 8001ed0:	08001f39 	.word	0x08001f39
 8001ed4:	08001f47 	.word	0x08001f47
 8001ed8:	08001f47 	.word	0x08001f47
 8001edc:	08001f47 	.word	0x08001f47
 8001ee0:	08001f47 	.word	0x08001f47
 8001ee4:	08001f47 	.word	0x08001f47
 8001ee8:	08001f55 	.word	0x08001f55
 8001eec:	08001f55 	.word	0x08001f55
 8001ef0:	08001f55 	.word	0x08001f55
 8001ef4:	08001f55 	.word	0x08001f55
 8001ef8:	08001f55 	.word	0x08001f55
 8001efc:	08001f55 	.word	0x08001f55
	case 0:
		NVIC_EXTI0_D;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f0a:	6013      	str	r3, [r2, #0]
		break;
 8001f0c:	e029      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f18:	6013      	str	r3, [r2, #0]
		break;
 8001f1a:	e022      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
		break;
 8001f28:	e01b      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f34:	6013      	str	r3, [r2, #0]
		break;
 8001f36:	e014      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f42:	6013      	str	r3, [r2, #0]
		break;
 8001f44:	e00d      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <NVIC_DISABLE+0xc4>)
 8001f4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f50:	6013      	str	r3, [r2, #0]
		break;
 8001f52:	e006      	b.n	8001f62 <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <NVIC_DISABLE+0xc8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <NVIC_DISABLE+0xc8>)
 8001f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
break;
 8001f60:	bf00      	nop

	}
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000e104 	.word	0xe000e104

08001f74 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |=(1<<0);
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <MCAL_EXTI_init+0x1a0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a64      	ldr	r2, [pc, #400]	; (8002114 <MCAL_EXTI_init+0x1a0>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6193      	str	r3, [r2, #24]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	891b      	ldrh	r3, [r3, #8]
 8001faa:	813b      	strh	r3, [r7, #8]
 8001fac:	2301      	movs	r3, #1
 8001fae:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f9e2 	bl	8002384 <MCAL_GPIO_init>

		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7b1b      	ldrb	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <MCAL_EXTI_init+0x6c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	60d3      	str	r3, [r2, #12]
 8001fde:	e029      	b.n	8002034 <MCAL_EXTI_init+0xc0>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7b1b      	ldrb	r3, [r3, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10b      	bne.n	8002000 <MCAL_EXTI_init+0x8c>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	8812      	ldrh	r2, [r2, #0]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	408a      	lsls	r2, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4a47      	ldr	r2, [pc, #284]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	e019      	b.n	8002034 <MCAL_EXTI_init+0xc0>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d115      	bne.n	8002034 <MCAL_EXTI_init+0xc0>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	8812      	ldrh	r2, [r2, #0]
 8002010:	4611      	mov	r1, r2
 8002012:	2201      	movs	r2, #1
 8002014:	408a      	lsls	r2, r1
 8002016:	4611      	mov	r1, r2
 8002018:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 800201a:	430b      	orrs	r3, r1
 800201c:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 800201e:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	4611      	mov	r1, r2
 8002028:	2201      	movs	r2, #1
 800202a:	408a      	lsls	r2, r1
 800202c:	4611      	mov	r1, r2
 800202e:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 8002030:	430b      	orrs	r3, r1
 8002032:	6093      	str	r3, [r2, #8]


		}
		//UPDATE THE ALTERNATIVE FUNC
			AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8002034:	4a39      	ldr	r2, [pc, #228]	; (800211c <MCAL_EXTI_init+0x1a8>)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	3302      	adds	r3, #2
 800203a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	210f      	movs	r1, #15
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	4934      	ldr	r1, [pc, #208]	; (800211c <MCAL_EXTI_init+0x1a8>)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4002      	ands	r2, r0
 8002050:	3302      	adds	r3, #2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <MCAL_EXTI_init+0x1a8>)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3302      	adds	r3, #2
 800205c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	492e      	ldr	r1, [pc, #184]	; (8002120 <MCAL_EXTI_init+0x1ac>)
 8002066:	428b      	cmp	r3, r1
 8002068:	d016      	beq.n	8002098 <MCAL_EXTI_init+0x124>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <MCAL_EXTI_init+0x1b0>)
 8002070:	428b      	cmp	r3, r1
 8002072:	d00f      	beq.n	8002094 <MCAL_EXTI_init+0x120>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	492b      	ldr	r1, [pc, #172]	; (8002128 <MCAL_EXTI_init+0x1b4>)
 800207a:	428b      	cmp	r3, r1
 800207c:	d008      	beq.n	8002090 <MCAL_EXTI_init+0x11c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	492a      	ldr	r1, [pc, #168]	; (800212c <MCAL_EXTI_init+0x1b8>)
 8002084:	428b      	cmp	r3, r1
 8002086:	d101      	bne.n	800208c <MCAL_EXTI_init+0x118>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <MCAL_EXTI_init+0x126>
 800208c:	2300      	movs	r3, #0
 800208e:	e004      	b.n	800209a <MCAL_EXTI_init+0x126>
 8002090:	2303      	movs	r3, #3
 8002092:	e002      	b.n	800209a <MCAL_EXTI_init+0x126>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <MCAL_EXTI_init+0x126>
 8002098:	2300      	movs	r3, #0
 800209a:	7bb9      	ldrb	r1, [r7, #14]
 800209c:	408b      	lsls	r3, r1
 800209e:	4618      	mov	r0, r3
 80020a0:	491e      	ldr	r1, [pc, #120]	; (800211c <MCAL_EXTI_init+0x1a8>)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	4302      	orrs	r2, r0
 80020a6:	3302      	adds	r3, #2
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <MCAL_EXTI_init+0x1bc>)
 80020b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7b5b      	ldrb	r3, [r3, #13]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d111      	bne.n	80020e8 <MCAL_EXTI_init+0x174>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	4611      	mov	r1, r2
 80020ce:	2201      	movs	r2, #1
 80020d0:	408a      	lsls	r2, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	4a10      	ldr	r2, [pc, #64]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 80020d6:	430b      	orrs	r3, r1
 80020d8:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe7b 	bl	8001ddc <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 80020e6:	e011      	b.n	800210c <MCAL_EXTI_init+0x198>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	4611      	mov	r1, r2
 80020f2:	2201      	movs	r2, #1
 80020f4:	408a      	lsls	r2, r1
 80020f6:	43d2      	mvns	r2, r2
 80020f8:	4611      	mov	r1, r2
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <MCAL_EXTI_init+0x1a4>)
 80020fc:	400b      	ands	r3, r1
 80020fe:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fece 	bl	8001ea8 <NVIC_DISABLE>
	}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40010400 	.word	0x40010400
 800211c:	40010000 	.word	0x40010000
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40011000 	.word	0x40011000
 800212c:	40011400 	.word	0x40011400
 8002130:	2000415c 	.word	0x2000415c

08002134 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <EXTI0_IRQHandler+0x1c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <EXTI0_IRQHandler+0x20>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <EXTI0_IRQHandler+0x20>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6153      	str	r3, [r2, #20]
	}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000415c 	.word	0x2000415c
 8002154:	40010400 	.word	0x40010400

08002158 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <EXTI1_IRQHandler+0x1c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <EXTI1_IRQHandler+0x20>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <EXTI1_IRQHandler+0x20>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6153      	str	r3, [r2, #20]

	}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000415c 	.word	0x2000415c
 8002178:	40010400 	.word	0x40010400

0800217c <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <EXTI2_IRQHandler+0x1c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <EXTI2_IRQHandler+0x20>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <EXTI2_IRQHandler+0x20>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6153      	str	r3, [r2, #20]

	}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000415c 	.word	0x2000415c
 800219c:	40010400 	.word	0x40010400

080021a0 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <EXTI3_IRQHandler+0x1c>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <EXTI3_IRQHandler+0x20>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <EXTI3_IRQHandler+0x20>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6153      	str	r3, [r2, #20]

	}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000415c 	.word	0x2000415c
 80021c0:	40010400 	.word	0x40010400

080021c4 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <EXTI4_IRQHandler+0x1c>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <EXTI4_IRQHandler+0x20>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <EXTI4_IRQHandler+0x20>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6153      	str	r3, [r2, #20]

	}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000415c 	.word	0x2000415c
 80021e4:	40010400 	.word	0x40010400

080021e8 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 80021ec:	4b26      	ldr	r3, [pc, #152]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <EXTI9_5_IRQHandler+0x22>
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 80021fe:	f043 0320 	orr.w	r3, r3, #32
 8002202:	6153      	str	r3, [r2, #20]
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <EXTI9_5_IRQHandler+0xa4>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <EXTI9_5_IRQHandler+0x40>
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 800221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002220:	6153      	str	r3, [r2, #20]
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <EXTI9_5_IRQHandler+0xa4>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <EXTI9_5_IRQHandler+0x5e>
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 800223a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223e:	6153      	str	r3, [r2, #20]
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <EXTI9_5_IRQHandler+0xa4>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <EXTI9_5_IRQHandler+0x7c>
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6153      	str	r3, [r2, #20]
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <EXTI9_5_IRQHandler+0xa4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <EXTI9_5_IRQHandler+0x9a>
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <EXTI9_5_IRQHandler+0xa0>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6153      	str	r3, [r2, #20]
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <EXTI9_5_IRQHandler+0xa4>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4798      	blx	r3
	}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40010400 	.word	0x40010400
 800228c:	2000415c 	.word	0x2000415c

08002290 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <EXTI15_10_IRQHandler+0x22>
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6153      	str	r3, [r2, #20]
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <EXTI15_10_IRQHandler+0x40>
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a22      	ldr	r2, [pc, #136]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c8:	6153      	str	r3, [r2, #20]
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <EXTI15_10_IRQHandler+0x5e>
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e6:	6153      	str	r3, [r2, #20]
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <EXTI15_10_IRQHandler+0x7c>
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 8002300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002304:	6153      	str	r3, [r2, #20]
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <EXTI15_10_IRQHandler+0x9a>
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 800231e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002322:	6153      	str	r3, [r2, #20]
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <EXTI15_10_IRQHandler+0xb8>
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <EXTI15_10_IRQHandler+0xbc>)
 800233c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002340:	6153      	str	r3, [r2, #20]
 8002342:	4b03      	ldr	r3, [pc, #12]	; (8002350 <EXTI15_10_IRQHandler+0xc0>)
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	4798      	blx	r3

	}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010400 	.word	0x40010400
 8002350:	2000415c 	.word	0x2000415c

08002354 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d803      	bhi.n	800236c <Get_PIN_Positon+0x18>
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	b29b      	uxth	r3, r3
 800236a:	e004      	b.n	8002376 <Get_PIN_Positon+0x22>
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	3b08      	subs	r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	b29b      	uxth	r3, r3
 8002376:	81fb      	strh	r3, [r7, #14]
return positon;
 8002378:	89fb      	ldrh	r3, [r7, #14]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a6b      	ldr	r2, [pc, #428]	; (8002540 <MCAL_GPIO_init+0x1bc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d106      	bne.n	80023a4 <MCAL_GPIO_init+0x20>
 8002396:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	e02a      	b.n	80023fa <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a68      	ldr	r2, [pc, #416]	; (8002548 <MCAL_GPIO_init+0x1c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d106      	bne.n	80023ba <MCAL_GPIO_init+0x36>
 80023ac:	4b65      	ldr	r3, [pc, #404]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a64      	ldr	r2, [pc, #400]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	e01f      	b.n	80023fa <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a63      	ldr	r2, [pc, #396]	; (800254c <MCAL_GPIO_init+0x1c8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d106      	bne.n	80023d0 <MCAL_GPIO_init+0x4c>
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4a5f      	ldr	r2, [pc, #380]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6193      	str	r3, [r2, #24]
 80023ce:	e014      	b.n	80023fa <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <MCAL_GPIO_init+0x1cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d106      	bne.n	80023e6 <MCAL_GPIO_init+0x62>
 80023d8:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a59      	ldr	r2, [pc, #356]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	e009      	b.n	80023fa <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <MCAL_GPIO_init+0x1d0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d105      	bne.n	80023fa <MCAL_GPIO_init+0x76>
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a54      	ldr	r2, [pc, #336]	; (8002544 <MCAL_GPIO_init+0x1c0>)
 80023f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f8:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b07      	cmp	r3, #7
 8002402:	d801      	bhi.n	8002408 <MCAL_GPIO_init+0x84>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	e001      	b.n	800240c <MCAL_GPIO_init+0x88>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff9d 	bl	8002354 <Get_PIN_Positon>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	230f      	movs	r3, #15
 8002420:	4093      	lsls	r3, r2
 8002422:	43da      	mvns	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	401a      	ands	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	789b      	ldrb	r3, [r3, #2]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <MCAL_GPIO_init+0xd2>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d009      	beq.n	8002456 <MCAL_GPIO_init+0xd2>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d004      	beq.n	8002456 <MCAL_GPIO_init+0xd2>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	789b      	ldrb	r3, [r3, #2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d156      	bne.n	8002504 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	789b      	ldrb	r3, [r3, #2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d11c      	bne.n	800249a <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff74 	bl	8002354 <Get_PIN_Positon>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	2308      	movs	r3, #8
 8002472:	fa03 f202 	lsl.w	r2, r3, r2
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	2301      	movs	r3, #1
 800248a:	4093      	lsls	r3, r2
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002498:	e04d      	b.n	8002536 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	789b      	ldrb	r3, [r3, #2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d11c      	bne.n	80024de <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff52 	bl	8002354 <Get_PIN_Positon>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	2308      	movs	r3, #8
 80024b6:	fa03 f202 	lsl.w	r2, r3, r2
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	2301      	movs	r3, #1
 80024ce:	fa03 f202 	lsl.w	r2, r3, r2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80024dc:	e02b      	b.n	8002536 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	789b      	ldrb	r3, [r3, #2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	009c      	lsls	r4, r3, #2
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <Get_PIN_Positon>
 80024f2:	4603      	mov	r3, r0
 80024f4:	fa04 f203 	lsl.w	r2, r4, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8002502:	e018      	b.n	8002536 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	789b      	ldrb	r3, [r3, #2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3b04      	subs	r3, #4
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	78d2      	ldrb	r2, [r2, #3]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	ea43 0402 	orr.w	r4, r3, r2
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff18 	bl	8002354 <Get_PIN_Positon>
 8002524:	4603      	mov	r3, r0
 8002526:	fa04 f203 	lsl.w	r2, r4, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

	}

}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	40010800 	.word	0x40010800
 8002544:	40021000 	.word	0x40021000
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40011000 	.word	0x40011000
 8002550:	40011400 	.word	0x40011400
 8002554:	40011800 	.word	0x40011800

08002558 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10b      	bne.n	8002588 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	fa03 f202 	lsl.w	r2, r3, r2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60da      	str	r2, [r3, #12]

	}



}
 8002586:	e00a      	b.n	800259e <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	4093      	lsls	r3, r2
 8002592:	43da      	mvns	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	b292      	uxth	r2, r2
 80025bc:	40d3      	lsrs	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	b29b      	uxth	r3, r3

}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <MCAL_TOGGLE_PIN>:
usint16_t MCAL_Read_PORT(GPIOx_REG* GPIOx){
	return (GPIOx->IDR);
}
void MCAL_TOGGLE_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=(1<<PIN_Number);
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	fa03 f202 	lsl.w	r2, r3, r2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	405a      	eors	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60da      	str	r2, [r3, #12]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
	while(1);
 8002600:	e7fe      	b.n	8002600 <GP_ERROR_HANDLER+0x4>
	...

08002604 <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 8002604:	b580      	push	{r7, lr}
 8002606:	b09c      	sub	sp, #112	; 0x70
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
 8002610:	4613      	mov	r3, r2
 8002612:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	f040 8089 	bne.w	8002730 <MCAL_SET_GP_TIMx_GPIO+0x12c>
		switch (MODE) {
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d043      	beq.n	80026ac <MCAL_SET_GP_TIMx_GPIO+0xa8>
 8002624:	2b02      	cmp	r3, #2
 8002626:	f300 81bb 	bgt.w	80029a0 <MCAL_SET_GP_TIMx_GPIO+0x39c>
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 81ba 	beq.w	80029a4 <MCAL_SET_GP_TIMx_GPIO+0x3a0>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d000      	beq.n	8002636 <MCAL_SET_GP_TIMx_GPIO+0x32>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002634:	e1b4      	b.n	80029a0 <MCAL_SET_GP_TIMx_GPIO+0x39c>
			switch(CHx){
 8002636:	78bb      	ldrb	r3, [r7, #2]
 8002638:	3b01      	subs	r3, #1
 800263a:	2b03      	cmp	r3, #3
 800263c:	d832      	bhi.n	80026a4 <MCAL_SET_GP_TIMx_GPIO+0xa0>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <MCAL_SET_GP_TIMx_GPIO+0x40>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	08002669 	.word	0x08002669
 800264c:	0800267d 	.word	0x0800267d
 8002650:	08002691 	.word	0x08002691
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8002654:	4bb0      	ldr	r3, [pc, #704]	; (8002918 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800265a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800265e:	4619      	mov	r1, r3
 8002660:	48ae      	ldr	r0, [pc, #696]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002662:	f7ff fe8f 	bl	8002384 <MCAL_GPIO_init>
				break;
 8002666:	e020      	b.n	80026aa <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8002668:	4bad      	ldr	r3, [pc, #692]	; (8002920 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800266e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002672:	4619      	mov	r1, r3
 8002674:	48a9      	ldr	r0, [pc, #676]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002676:	f7ff fe85 	bl	8002384 <MCAL_GPIO_init>
				break;
 800267a:	e016      	b.n	80026aa <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <MCAL_SET_GP_TIMx_GPIO+0x320>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002682:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002686:	4619      	mov	r1, r3
 8002688:	48a4      	ldr	r0, [pc, #656]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800268a:	f7ff fe7b 	bl	8002384 <MCAL_GPIO_init>
				break;
 800268e:	e00c      	b.n	80026aa <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8002690:	4ba5      	ldr	r3, [pc, #660]	; (8002928 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002696:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800269a:	4619      	mov	r1, r3
 800269c:	489f      	ldr	r0, [pc, #636]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800269e:	f7ff fe71 	bl	8002384 <MCAL_GPIO_init>
				break;
 80026a2:	e002      	b.n	80026aa <MCAL_SET_GP_TIMx_GPIO+0xa6>
				GP_ERROR_HANDLER();
 80026a4:	f7ff ffaa 	bl	80025fc <GP_ERROR_HANDLER>
			break;
 80026a8:	e185      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80026aa:	e184      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 80026ac:	78bb      	ldrb	r3, [r7, #2]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d839      	bhi.n	8002728 <MCAL_SET_GP_TIMx_GPIO+0x124>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <MCAL_SET_GP_TIMx_GPIO+0xb8>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026ed 	.word	0x080026ed
 80026c4:	08002701 	.word	0x08002701
 80026c8:	08002715 	.word	0x08002715
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOA, &pin);
 80026de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e2:	4619      	mov	r1, r3
 80026e4:	488d      	ldr	r0, [pc, #564]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80026e6:	f7ff fe4d 	bl	8002384 <MCAL_GPIO_init>
					break;
 80026ea:	e020      	b.n	800272e <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <MCAL_SET_GP_TIMx_GPIO+0x328>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80026f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026f6:	4619      	mov	r1, r3
 80026f8:	4888      	ldr	r0, [pc, #544]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80026fa:	f7ff fe43 	bl	8002384 <MCAL_GPIO_init>
					break;
 80026fe:	e016      	b.n	800272e <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 8002700:	4b8b      	ldr	r3, [pc, #556]	; (8002930 <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800270a:	4619      	mov	r1, r3
 800270c:	4883      	ldr	r0, [pc, #524]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800270e:	f7ff fe39 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002712:	e00c      	b.n	800272e <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 8002714:	4b87      	ldr	r3, [pc, #540]	; (8002934 <MCAL_SET_GP_TIMx_GPIO+0x330>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 800271a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800271e:	4619      	mov	r1, r3
 8002720:	487e      	ldr	r0, [pc, #504]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002722:	f7ff fe2f 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002726:	e002      	b.n	800272e <MCAL_SET_GP_TIMx_GPIO+0x12a>
					GP_ERROR_HANDLER();
 8002728:	f7ff ff68 	bl	80025fc <GP_ERROR_HANDLER>
				break;
 800272c:	e143      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800272e:	e142      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}

	}else if(TIMx ==TIM3){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a81      	ldr	r2, [pc, #516]	; (8002938 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 8002734:	4293      	cmp	r3, r2
 8002736:	f040 8089 	bne.w	800284c <MCAL_SET_GP_TIMx_GPIO+0x248>
		switch (MODE) {
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d043      	beq.n	80027c8 <MCAL_SET_GP_TIMx_GPIO+0x1c4>
 8002740:	2b02      	cmp	r3, #2
 8002742:	f300 8131 	bgt.w	80029a8 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8130 	beq.w	80029ac <MCAL_SET_GP_TIMx_GPIO+0x3a8>
 800274c:	2b01      	cmp	r3, #1
 800274e:	d000      	beq.n	8002752 <MCAL_SET_GP_TIMx_GPIO+0x14e>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002750:	e12a      	b.n	80029a8 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
			switch(CHx){
 8002752:	78bb      	ldrb	r3, [r7, #2]
 8002754:	3b01      	subs	r3, #1
 8002756:	2b03      	cmp	r3, #3
 8002758:	d832      	bhi.n	80027c0 <MCAL_SET_GP_TIMx_GPIO+0x1bc>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <MCAL_SET_GP_TIMx_GPIO+0x15c>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002771 	.word	0x08002771
 8002764:	08002785 	.word	0x08002785
 8002768:	08002799 	.word	0x08002799
 800276c:	080027ad 	.word	0x080027ad
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8002770:	4b72      	ldr	r3, [pc, #456]	; (800293c <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002776:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800277a:	4619      	mov	r1, r3
 800277c:	4867      	ldr	r0, [pc, #412]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800277e:	f7ff fe01 	bl	8002384 <MCAL_GPIO_init>
				break;
 8002782:	e020      	b.n	80027c6 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8002784:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800278a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800278e:	4619      	mov	r1, r3
 8002790:	4862      	ldr	r0, [pc, #392]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002792:	f7ff fdf7 	bl	8002384 <MCAL_GPIO_init>
				break;
 8002796:	e016      	b.n	80027c6 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8002798:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800279e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027a2:	4619      	mov	r1, r3
 80027a4:	4867      	ldr	r0, [pc, #412]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80027a6:	f7ff fded 	bl	8002384 <MCAL_GPIO_init>
				break;
 80027aa:	e00c      	b.n	80027c6 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 80027ac:	4b5c      	ldr	r3, [pc, #368]	; (8002920 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 80027b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027b6:	4619      	mov	r1, r3
 80027b8:	4862      	ldr	r0, [pc, #392]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80027ba:	f7ff fde3 	bl	8002384 <MCAL_GPIO_init>
				break;
 80027be:	e002      	b.n	80027c6 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				GP_ERROR_HANDLER();
 80027c0:	f7ff ff1c 	bl	80025fc <GP_ERROR_HANDLER>
			break;
 80027c4:	e0f7      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80027c6:	e0f6      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 80027c8:	78bb      	ldrb	r3, [r7, #2]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d839      	bhi.n	8002844 <MCAL_SET_GP_TIMx_GPIO+0x240>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <MCAL_SET_GP_TIMx_GPIO+0x1d4>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027fd 	.word	0x080027fd
 80027e0:	08002811 	.word	0x08002811
 80027e4:	08002831 	.word	0x08002831
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 80027e8:	4b57      	ldr	r3, [pc, #348]	; (8002948 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80027ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027f2:	4619      	mov	r1, r3
 80027f4:	4849      	ldr	r0, [pc, #292]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80027f6:	f7ff fdc5 	bl	8002384 <MCAL_GPIO_init>
					break;
 80027fa:	e026      	b.n	800284a <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <MCAL_SET_GP_TIMx_GPIO+0x348>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002802:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002806:	4619      	mov	r1, r3
 8002808:	4844      	ldr	r0, [pc, #272]	; (800291c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800280a:	f7ff fdbb 	bl	8002384 <MCAL_GPIO_init>
					break;
 800280e:	e01c      	b.n	800284a <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8002810:	2300      	movs	r3, #0
 8002812:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002816:	2301      	movs	r3, #1
 8002818:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800281c:	2300      	movs	r3, #0
 800281e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOB, &pin);
 8002822:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002826:	4619      	mov	r1, r3
 8002828:	4846      	ldr	r0, [pc, #280]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800282a:	f7ff fdab 	bl	8002384 <MCAL_GPIO_init>
					break;
 800282e:	e00c      	b.n	800284a <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002836:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800283a:	4619      	mov	r1, r3
 800283c:	4841      	ldr	r0, [pc, #260]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800283e:	f7ff fda1 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002842:	e002      	b.n	800284a <MCAL_SET_GP_TIMx_GPIO+0x246>
					GP_ERROR_HANDLER();
 8002844:	f7ff feda 	bl	80025fc <GP_ERROR_HANDLER>
				break;
 8002848:	e0b5      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800284a:	e0b4      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}



	}else if(TIMx ==TIM4){
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	f040 80b0 	bne.w	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		switch (MODE) {
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d043      	beq.n	80028e4 <MCAL_SET_GP_TIMx_GPIO+0x2e0>
 800285c:	2b02      	cmp	r3, #2
 800285e:	f300 80a7 	bgt.w	80029b0 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <MCAL_SET_GP_TIMx_GPIO+0x3b0>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d000      	beq.n	800286e <MCAL_SET_GP_TIMx_GPIO+0x26a>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 800286c:	e0a0      	b.n	80029b0 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
			switch(CHx){
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	3b01      	subs	r3, #1
 8002872:	2b03      	cmp	r3, #3
 8002874:	d832      	bhi.n	80028dc <MCAL_SET_GP_TIMx_GPIO+0x2d8>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <MCAL_SET_GP_TIMx_GPIO+0x278>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	080028a1 	.word	0x080028a1
 8002884:	080028b5 	.word	0x080028b5
 8002888:	080028c9 	.word	0x080028c9
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002896:	4619      	mov	r1, r3
 8002898:	482a      	ldr	r0, [pc, #168]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800289a:	f7ff fd73 	bl	8002384 <MCAL_GPIO_init>
				break;
 800289e:	e020      	b.n	80028e2 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 80028a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028aa:	4619      	mov	r1, r3
 80028ac:	4825      	ldr	r0, [pc, #148]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80028ae:	f7ff fd69 	bl	8002384 <MCAL_GPIO_init>
				break;
 80028b2:	e016      	b.n	80028e2 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <MCAL_SET_GP_TIMx_GPIO+0x350>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 80028ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028be:	4619      	mov	r1, r3
 80028c0:	4820      	ldr	r0, [pc, #128]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80028c2:	f7ff fd5f 	bl	8002384 <MCAL_GPIO_init>
				break;
 80028c6:	e00c      	b.n	80028e2 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 80028c8:	4b23      	ldr	r3, [pc, #140]	; (8002958 <MCAL_SET_GP_TIMx_GPIO+0x354>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 80028ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d2:	4619      	mov	r1, r3
 80028d4:	481b      	ldr	r0, [pc, #108]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80028d6:	f7ff fd55 	bl	8002384 <MCAL_GPIO_init>
				break;
 80028da:	e002      	b.n	80028e2 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				GP_ERROR_HANDLER();
 80028dc:	f7ff fe8e 	bl	80025fc <GP_ERROR_HANDLER>
			break;
 80028e0:	e069      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80028e2:	e068      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 80028e4:	78bb      	ldrb	r3, [r7, #2]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d855      	bhi.n	8002998 <MCAL_SET_GP_TIMx_GPIO+0x394>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <MCAL_SET_GP_TIMx_GPIO+0x2f0>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800295d 	.word	0x0800295d
 80028fc:	08002971 	.word	0x08002971
 8002900:	08002985 	.word	0x08002985
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 800290a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800290e:	4619      	mov	r1, r3
 8002910:	480c      	ldr	r0, [pc, #48]	; (8002944 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002912:	f7ff fd37 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002916:	e042      	b.n	800299e <MCAL_SET_GP_TIMx_GPIO+0x39a>
 8002918:	08003bb8 	.word	0x08003bb8
 800291c:	40010800 	.word	0x40010800
 8002920:	08003bbc 	.word	0x08003bbc
 8002924:	08003bc0 	.word	0x08003bc0
 8002928:	08003bc4 	.word	0x08003bc4
 800292c:	08003bc8 	.word	0x08003bc8
 8002930:	08003bcc 	.word	0x08003bcc
 8002934:	08003bd0 	.word	0x08003bd0
 8002938:	40000400 	.word	0x40000400
 800293c:	08003bd4 	.word	0x08003bd4
 8002940:	08003bd8 	.word	0x08003bd8
 8002944:	40010c00 	.word	0x40010c00
 8002948:	08003bdc 	.word	0x08003bdc
 800294c:	08003be0 	.word	0x08003be0
 8002950:	40000800 	.word	0x40000800
 8002954:	08003be4 	.word	0x08003be4
 8002958:	08003be8 	.word	0x08003be8
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <MCAL_SET_GP_TIMx_GPIO+0x3bc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002962:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002966:	4619      	mov	r1, r3
 8002968:	4816      	ldr	r0, [pc, #88]	; (80029c4 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 800296a:	f7ff fd0b 	bl	8002384 <MCAL_GPIO_init>
					break;
 800296e:	e016      	b.n	800299e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MCAL_SET_GP_TIMx_GPIO+0x3c4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002976:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800297a:	4619      	mov	r1, r3
 800297c:	4811      	ldr	r0, [pc, #68]	; (80029c4 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 800297e:	f7ff fd01 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002982:	e00c      	b.n	800299e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <MCAL_SET_GP_TIMx_GPIO+0x3c8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 800298a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800298e:	4619      	mov	r1, r3
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8002992:	f7ff fcf7 	bl	8002384 <MCAL_GPIO_init>
					break;
 8002996:	e002      	b.n	800299e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					GP_ERROR_HANDLER();
 8002998:	f7ff fe30 	bl	80025fc <GP_ERROR_HANDLER>
				break;
 800299c:	e00b      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800299e:	e00a      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 80029a0:	bf00      	nop
 80029a2:	e008      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 80029a4:	bf00      	nop
 80029a6:	e006      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 80029a8:	bf00      	nop
 80029aa:	e004      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 80029b4:	bf00      	nop
		//////////



	}
}
 80029b6:	bf00      	nop
 80029b8:	3770      	adds	r7, #112	; 0x70
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08003be0 	.word	0x08003be0
 80029c4:	40010c00 	.word	0x40010c00
 80029c8:	08003bec 	.word	0x08003bec
 80029cc:	08003bf0 	.word	0x08003bf0

080029d0 <GP_TIMx_start>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_TIMx_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_NORMAL_config* NORMAL_SITTING){
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==NORMAL){
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	7a5b      	ldrb	r3, [r3, #9]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 80c1 	bne.w	8002b68 <GP_TIMx_start+0x198>
		GP_TIMx_Deint(TIMx);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f8d0 	bl	8002b8c <GP_TIMx_Deint>

		g_GP_TIMX=TIMx;
 80029ec:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <GP_TIMx_start+0x1a4>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6013      	str	r3, [r2, #0]
		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d10c      	bne.n	8002a14 <GP_TIMx_start+0x44>
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <GP_TIMx_start+0x1a8>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <GP_TIMx_start+0x1a8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	61d3      	str	r3, [r2, #28]
 8002a06:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <GP_TIMx_start+0x1ac>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a12:	e024      	b.n	8002a5e <GP_TIMx_start+0x8e>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a5a      	ldr	r2, [pc, #360]	; (8002b80 <GP_TIMx_start+0x1b0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10e      	bne.n	8002a3a <GP_TIMx_start+0x6a>
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <GP_TIMx_start+0x1a8>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a55      	ldr	r2, [pc, #340]	; (8002b78 <GP_TIMx_start+0x1a8>)
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <GP_TIMx_start+0x1ac>)
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f103 0410 	add.w	r4, r3, #16
 8002a30:	4613      	mov	r3, r2
 8002a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a38:	e011      	b.n	8002a5e <GP_TIMx_start+0x8e>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a51      	ldr	r2, [pc, #324]	; (8002b84 <GP_TIMx_start+0x1b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <GP_TIMx_start+0x8e>
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <GP_TIMx_start+0x1a8>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <GP_TIMx_start+0x1a8>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <GP_TIMx_start+0x1ac>)
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	f103 0420 	add.w	r4, r3, #32
 8002a56:	4613      	mov	r3, r2
 8002a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC -1;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	461a      	mov	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	885b      	ldrh	r3, [r3, #2]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30

		if(Sitting->TIME_RCR)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	889b      	ldrh	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <GP_TIMx_start+0xc0>
			TIMx->CR1.BIT_NAME.ARPE=1;
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6813      	ldr	r3, [r2, #0]
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	6013      	str	r3, [r2, #0]

		//1.Select the mode CMS[1:0]
		switch(NORMAL_SITTING->NORMAL_MODE){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d01c      	beq.n	8002ad2 <GP_TIMx_start+0x102>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	dc20      	bgt.n	8002ade <GP_TIMx_start+0x10e>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <GP_TIMx_start+0xd6>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00b      	beq.n	8002abc <GP_TIMx_start+0xec>
 8002aa4:	e01b      	b.n	8002ade <GP_TIMx_start+0x10e>
		case Up:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	f36f 1346 	bfc	r3, #5, #2
 8002aae:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	f36f 1304 	bfc	r3, #4, #1
 8002ab8:	6013      	str	r3, [r2, #0]
			break;
 8002aba:	e013      	b.n	8002ae4 <GP_TIMx_start+0x114>
		case DOWN:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	f36f 1346 	bfc	r3, #5, #2
 8002ac4:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	6013      	str	r3, [r2, #0]
			break;
 8002ad0:	e008      	b.n	8002ae4 <GP_TIMx_start+0x114>
		case Up_Down:
			TIMx->CR1.BIT_NAME.CMS=0b11;
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ada:	6013      	str	r3, [r2, #0]
			/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
			break;
 8002adc:	e002      	b.n	8002ae4 <GP_TIMx_start+0x114>
		default:
			GP_ERROR_HANDLER();
 8002ade:	f7ff fd8d 	bl	80025fc <GP_ERROR_HANDLER>
			break;
 8002ae2:	bf00      	nop
		}
		MCAL_SET_GP_TIMx_GPIO(TIMx,NORMAL,0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff fd8b 	bl	8002604 <MCAL_SET_GP_TIMx_GPIO>
		TIMx->CR1.BIT_NAME.CEN=1;
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	6813      	ldr	r3, [r2, #0]
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	7a1b      	ldrb	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d125      	bne.n	8002b4c <GP_TIMx_start+0x17c>
			TIMx->DIER.BIT_NAME.UIE=1;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	68d3      	ldr	r3, [r2, #12]
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	60d3      	str	r3, [r2, #12]
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d106      	bne.n	8002b20 <GP_TIMx_start+0x150>
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6013      	str	r3, [r2, #0]
			TIMx->SR.BIT_NAME.UIF=0;
		}
	}else{
		GP_ERROR_HANDLER();
	}
}
 8002b1e:	e025      	b.n	8002b6c <GP_TIMx_start+0x19c>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <GP_TIMx_start+0x1b0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <GP_TIMx_start+0x166>
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	e01a      	b.n	8002b6c <GP_TIMx_start+0x19c>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <GP_TIMx_start+0x1b4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d116      	bne.n	8002b6c <GP_TIMx_start+0x19c>
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <GP_TIMx_start+0x1b8>)
 8002b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b48:	6013      	str	r3, [r2, #0]
}
 8002b4a:	e00f      	b.n	8002b6c <GP_TIMx_start+0x19c>
			while(!TIMx->SR.BIT_NAME.UIF);
 8002b4c:	bf00      	nop
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f8      	beq.n	8002b4e <GP_TIMx_start+0x17e>
			TIMx->SR.BIT_NAME.UIF=0;
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6913      	ldr	r3, [r2, #16]
 8002b60:	f36f 0300 	bfc	r3, #0, #1
 8002b64:	6113      	str	r3, [r2, #16]
}
 8002b66:	e001      	b.n	8002b6c <GP_TIMx_start+0x19c>
		GP_ERROR_HANDLER();
 8002b68:	f7ff fd48 	bl	80025fc <GP_ERROR_HANDLER>
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	200041c8 	.word	0x200041c8
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	20004198 	.word	0x20004198
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <GP_TIMx_Deint>:

void GP_TIMX_Clear(GP_TIMx_REG* TIMx){

	TIMx->CNT=0;
}
void GP_TIMx_Deint(GP_TIMx_REG* TIMx){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	if(TIMx== TIM2)			{RCC->APB1ENR|=(1<<0);			}
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d106      	bne.n	8002baa <GP_TIMx_Deint+0x1e>
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	61d3      	str	r3, [r2, #28]
 8002ba8:	e014      	b.n	8002bd4 <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM3)	{RCC->APB1ENR|=(1<<1);			}
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <GP_TIMx_Deint+0x104>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d106      	bne.n	8002bc0 <GP_TIMx_Deint+0x34>
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a35      	ldr	r2, [pc, #212]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	e009      	b.n	8002bd4 <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM4)	{RCC->APB1ENR|=(1<<2);		}
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <GP_TIMx_Deint+0x108>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <GP_TIMx_Deint+0x48>
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	61d3      	str	r3, [r2, #28]

	TIMx->CR1.ALL_BITS=0;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
	TIMx->ARR=0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER.ALL_BITS=0;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
	TIMx->CCMR1.ALL_BITS=0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
	TIMx->CCMR2.ALL_BITS=0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
	TIMx->CCR1=0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2=0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3=0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4=0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CNT=0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR2.ALL_BITS=0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	605a      	str	r2, [r3, #4]
	TIMx->PSC=0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d10c      	bne.n	8002c3e <GP_TIMx_Deint+0xb2>
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6113      	str	r3, [r2, #16]
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6113      	str	r3, [r2, #16]
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}
 8002c3c:	e020      	b.n	8002c80 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <GP_TIMx_Deint+0x104>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10c      	bne.n	8002c60 <GP_TIMx_Deint+0xd4>
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6113      	str	r3, [r2, #16]
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c58:	f023 0302 	bic.w	r3, r3, #2
 8002c5c:	6113      	str	r3, [r2, #16]
}
 8002c5e:	e00f      	b.n	8002c80 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <GP_TIMx_Deint+0x108>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10b      	bne.n	8002c80 <GP_TIMx_Deint+0xf4>
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6113      	str	r3, [r2, #16]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <GP_TIMx_Deint+0x100>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6113      	str	r3, [r2, #16]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8002c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	7813      	ldrb	r3, [r2, #0]
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8002cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cbc:	6913      	ldr	r3, [r2, #16]
 8002cbe:	f36f 0300 	bfc	r3, #0, #1
 8002cc2:	6113      	str	r3, [r2, #16]
 8002cc4:	e04e      	b.n	8002d64 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8002cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	7813      	ldrb	r3, [r2, #0]
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8002ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ce4:	6913      	ldr	r3, [r2, #16]
 8002ce6:	f36f 0341 	bfc	r3, #1, #1
 8002cea:	6113      	str	r3, [r2, #16]
 8002cec:	e03a      	b.n	8002d64 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8002cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	7813      	ldrb	r3, [r2, #0]
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8002d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d0c:	6913      	ldr	r3, [r2, #16]
 8002d0e:	f36f 0382 	bfc	r3, #2, #1
 8002d12:	6113      	str	r3, [r2, #16]
 8002d14:	e026      	b.n	8002d64 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8002d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	7813      	ldrb	r3, [r2, #0]
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8002d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d34:	6913      	ldr	r3, [r2, #16]
 8002d36:	f36f 03c3 	bfc	r3, #3, #1
 8002d3a:	6113      	str	r3, [r2, #16]
 8002d3c:	e012      	b.n	8002d64 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8002d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	7813      	ldrb	r3, [r2, #0]
 8002d52:	f043 0310 	orr.w	r3, r3, #16
 8002d56:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8002d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d5c:	6913      	ldr	r3, [r2, #16]
 8002d5e:	f36f 1304 	bfc	r3, #4, #1
 8002d62:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <TIM2_IRQHandler+0xdc>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3

}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20004198 	.word	0x20004198

08002d78 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	7813      	ldrb	r3, [r2, #0]
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002d98:	6913      	ldr	r3, [r2, #16]
 8002d9a:	f36f 0300 	bfc	r3, #0, #1
 8002d9e:	6113      	str	r3, [r2, #16]
 8002da0:	e046      	b.n	8002e30 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	7813      	ldrb	r3, [r2, #0]
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8002dba:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002dbc:	6913      	ldr	r3, [r2, #16]
 8002dbe:	f36f 0341 	bfc	r3, #1, #1
 8002dc2:	6113      	str	r3, [r2, #16]
 8002dc4:	e034      	b.n	8002e30 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	7813      	ldrb	r3, [r2, #0]
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002de0:	6913      	ldr	r3, [r2, #16]
 8002de2:	f36f 0382 	bfc	r3, #2, #1
 8002de6:	6113      	str	r3, [r2, #16]
 8002de8:	e022      	b.n	8002e30 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	7813      	ldrb	r3, [r2, #0]
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002e04:	6913      	ldr	r3, [r2, #16]
 8002e06:	f36f 03c3 	bfc	r3, #3, #1
 8002e0a:	6113      	str	r3, [r2, #16]
 8002e0c:	e010      	b.n	8002e30 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	7813      	ldrb	r3, [r2, #0]
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8002e26:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <TIM3_IRQHandler+0xc8>)
 8002e28:	6913      	ldr	r3, [r2, #16]
 8002e2a:	f36f 1304 	bfc	r3, #4, #1
 8002e2e:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <TIM3_IRQHandler+0xcc>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40000400 	.word	0x40000400
 8002e44:	20004198 	.word	0x20004198

08002e48 <TIM4_IRQHandler>:
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8002e4e:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	7813      	ldrb	r3, [r2, #0]
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002e68:	6913      	ldr	r3, [r2, #16]
 8002e6a:	f36f 0300 	bfc	r3, #0, #1
 8002e6e:	6113      	str	r3, [r2, #16]
 8002e70:	e04b      	b.n	8002f0a <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	7813      	ldrb	r3, [r2, #0]
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8002e8a:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002e8c:	6913      	ldr	r3, [r2, #16]
 8002e8e:	f36f 0341 	bfc	r3, #1, #1
 8002e92:	6113      	str	r3, [r2, #16]
 8002e94:	e039      	b.n	8002f0a <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00f      	beq.n	8002ec4 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	7813      	ldrb	r3, [r2, #0]
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002eb0:	6913      	ldr	r3, [r2, #16]
 8002eb2:	f36f 0382 	bfc	r3, #2, #1
 8002eb6:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	7813      	ldrb	r3, [r2, #0]
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	7013      	strb	r3, [r2, #0]
 8002ec2:	e022      	b.n	8002f0a <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	7813      	ldrb	r3, [r2, #0]
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8002edc:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002ede:	6913      	ldr	r3, [r2, #16]
 8002ee0:	f36f 03c3 	bfc	r3, #3, #1
 8002ee4:	6113      	str	r3, [r2, #16]
 8002ee6:	e010      	b.n	8002f0a <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	7813      	ldrb	r3, [r2, #0]
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <TIM4_IRQHandler+0xd4>)
 8002f02:	6913      	ldr	r3, [r2, #16]
 8002f04:	f36f 1304 	bfc	r3, #4, #1
 8002f08:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <TIM4_IRQHandler+0xd8>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3


}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	20004198 	.word	0x20004198

08002f24 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MCAL_GET_SYS_CLCK+0x34>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d00a      	beq.n	8002f4c <MCAL_GET_SYS_CLCK+0x28>
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d80a      	bhi.n	8002f50 <MCAL_GET_SYS_CLCK+0x2c>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <MCAL_GET_SYS_CLCK+0x20>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <MCAL_GET_SYS_CLCK+0x24>
 8002f42:	e005      	b.n	8002f50 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <MCAL_GET_SYS_CLCK+0x38>)
 8002f46:	e003      	b.n	8002f50 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <MCAL_GET_SYS_CLCK+0x3c>)
 8002f4a:	e001      	b.n	8002f50 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MCAL_GET_SYS_CLCK+0x40>)
 8002f4e:	e7ff      	b.n	8002f50 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	01ab3f00 	.word	0x01ab3f00

08002f68 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8002f6c:	f7ff ffda 	bl	8002f24 <MCAL_GET_SYS_CLCK>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <MCAL_GET_H_CLCK+0x20>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <MCAL_GET_H_CLCK+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	20000010 	.word	0x20000010

08002f90 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8002f94:	f7ff ffe8 	bl	8002f68 <MCAL_GET_H_CLCK>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <MCAL_GET_PCLCK1+0x20>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <MCAL_GET_PCLCK1+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3

}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8002fbc:	f7ff ffd4 	bl	8002f68 <MCAL_GET_H_CLCK>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <MCAL_GET_PCLCK2+0x20>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0adb      	lsrs	r3, r3, #11
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <MCAL_GET_PCLCK2+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3

}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	20000008 	.word	0x20000008

08002fe0 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4905      	ldr	r1, [pc, #20]	; (8003000 <SPI1_IRQHandler+0x20>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f80c 	bl	8003008 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <SPI1_IRQHandler+0x24>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	7938      	ldrb	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40013000 	.word	0x40013000
 8003004:	200041cc 	.word	0x200041cc

08003008 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00f      	beq.n	8003040 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	7813      	ldrb	r3, [r2, #0]
 8003024:	f36f 0300 	bfc	r3, #0, #1
 8003028:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	7813      	ldrb	r3, [r2, #0]
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	7913      	ldrb	r3, [r2, #4]
 8003038:	f36f 1386 	bfc	r3, #6, #1
 800303c:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 800303e:	e015      	b.n	800306c <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	7813      	ldrb	r3, [r2, #0]
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	7813      	ldrb	r3, [r2, #0]
 800305c:	f36f 0341 	bfc	r3, #1, #1
 8003060:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	7913      	ldrb	r3, [r2, #4]
 8003066:	f36f 13c7 	bfc	r3, #7, #1
 800306a:	7113      	strb	r3, [r2, #4]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
	...

08003078 <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <MCAL_SET_TIMx_GPIO+0x24>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	4619      	mov	r1, r3
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <MCAL_SET_TIMx_GPIO+0x28>)
 800308e:	f7ff f979 	bl	8002384 <MCAL_GPIO_init>
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	08003bf4 	.word	0x08003bf4
 80030a0:	40010800 	.word	0x40010800

080030a4 <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <TIMER_1_8_start+0x100>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4614      	mov	r4, r2
 80030b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 80030ba:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <TIMER_1_8_start+0x104>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3a      	ldr	r2, [pc, #232]	; (80031ac <TIMER_1_8_start+0x108>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d105      	bne.n	80030d4 <TIMER_1_8_start+0x30>
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <TIMER_1_8_start+0x10c>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <TIMER_1_8_start+0x10c>)
 80030ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d2:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	885b      	ldrh	r3, [r3, #2]
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	889b      	ldrh	r3, [r3, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	7a5b      	ldrb	r3, [r3, #9]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d01c      	beq.n	800313e <TIMER_1_8_start+0x9a>
 8003104:	2b02      	cmp	r3, #2
 8003106:	dc20      	bgt.n	800314a <TIMER_1_8_start+0xa6>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <TIMER_1_8_start+0x6e>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d00b      	beq.n	8003128 <TIMER_1_8_start+0x84>
 8003110:	e01b      	b.n	800314a <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	f36f 1346 	bfc	r3, #5, #2
 800311a:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	f36f 1304 	bfc	r3, #4, #1
 8003124:	6013      	str	r3, [r2, #0]
		break;
 8003126:	e013      	b.n	8003150 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	f36f 1346 	bfc	r3, #5, #2
 8003130:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	f043 0310 	orr.w	r3, r3, #16
 800313a:	6013      	str	r3, [r2, #0]
		break;
 800313c:	e008      	b.n	8003150 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003146:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 8003148:	e002      	b.n	8003150 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 800314a:	f7fe fc7f 	bl	8001a4c <ERROR_HANDLER>
		break;
 800314e:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff91 	bl	8003078 <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	7a1b      	ldrb	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68d3      	ldr	r3, [r2, #12]
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <TIMER_1_8_start+0x110>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <TIMER_1_8_start+0x110>)
 8003178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800317c:	6013      	str	r3, [r2, #0]
	}else{
 		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 800317e:	e00c      	b.n	800319a <TIMER_1_8_start+0xf6>
 		while(!TIMx->SR.BIT_NAME.UIF);
 8003180:	bf00      	nop
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f8      	beq.n	8003182 <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6913      	ldr	r3, [r2, #16]
 8003194:	f36f 0300 	bfc	r3, #0, #1
 8003198:	6113      	str	r3, [r2, #16]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200041ec 	.word	0x200041ec
 80031a8:	200041fc 	.word	0x200041fc
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40021000 	.word	0x40021000
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <TIM1_UP_IRQHandler+0x1c>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <TIM1_UP_IRQHandler+0x20>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	6913      	ldr	r3, [r2, #16]
 80031c8:	f36f 0300 	bfc	r3, #0, #1
 80031cc:	6113      	str	r3, [r2, #16]

}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200041ec 	.word	0x200041ec
 80031d8:	200041fc 	.word	0x200041fc

080031dc <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <TIM1_CC_IRQHandler+0x1c>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <TIM1_CC_IRQHandler+0x20>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	6913      	ldr	r3, [r2, #16]
 80031ec:	f36f 0341 	bfc	r3, #1, #1
 80031f0:	6113      	str	r3, [r2, #16]

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200041ec 	.word	0x200041ec
 80031fc:	200041fc 	.word	0x200041fc

08003200 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <TIM1_BRK_IRQHandler+0x1c>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <TIM1_BRK_IRQHandler+0x20>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	6913      	ldr	r3, [r2, #16]
 8003210:	f36f 0300 	bfc	r3, #0, #1
 8003214:	6113      	str	r3, [r2, #16]

}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200041ec 	.word	0x200041ec
 8003220:	200041fc 	.word	0x200041fc

08003224 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <TIM1_TRG_COM_IRQHandler+0x20>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	6913      	ldr	r3, [r2, #16]
 8003234:	f36f 0300 	bfc	r3, #0, #1
 8003238:	6113      	str	r3, [r2, #16]

}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200041ec 	.word	0x200041ec
 8003244:	200041fc 	.word	0x200041fc

08003248 <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 8003252:	f7ff feb1 	bl	8002fb8 <MCAL_GET_PCLCK2>
 8003256:	4603      	mov	r3, r0
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <_TIM1_delay_us+0x50>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29b      	uxth	r3, r3
 8003266:	813b      	strh	r3, [r7, #8]
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	3b01      	subs	r3, #1
 800326c:	b29b      	uxth	r3, r3
 800326e:	817b      	strh	r3, [r7, #10]
 8003270:	2300      	movs	r3, #0
 8003272:	81bb      	strh	r3, [r7, #12]
 8003274:	2300      	movs	r3, #0
 8003276:	81fb      	strh	r3, [r7, #14]
 8003278:	2301      	movs	r3, #1
 800327a:	743b      	strb	r3, [r7, #16]
 800327c:	2300      	movs	r3, #0
 800327e:	747b      	strb	r3, [r7, #17]
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	4619      	mov	r1, r3
 800328a:	4804      	ldr	r0, [pc, #16]	; (800329c <_TIM1_delay_us+0x54>)
 800328c:	f7ff ff0a 	bl	80030a4 <TIMER_1_8_start>

}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	431bde83 	.word	0x431bde83
 800329c:	40012c00 	.word	0x40012c00

080032a0 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e006      	b.n	80032be <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 80032b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b4:	f7ff ffc8 	bl	8003248 <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3f4      	bcc.n	80032b0 <_TIM1_delay_ms+0x10>

}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_TIM1_delay_s>:
void _TIM1_delay_s(uint16_t delay){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e006      	b.n	80032ee <_TIM1_delay_s+0x1e>
			_TIM1_delay_ms(1000);
 80032e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032e4:	f7ff ffdc 	bl	80032a0 <_TIM1_delay_ms>
		for(uint32_t i=0;i<delay;i++)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3f4      	bcc.n	80032e0 <_TIM1_delay_s+0x10>

}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <USART1_IRQHandler>:
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
void USART1_IRQHandler(void){
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART1)){
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <USART1_IRQHandler+0x1c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <USART1_IRQHandler+0x16>
		G_P_config[0].P_Call_Back();
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <USART1_IRQHandler+0x20>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4798      	blx	r3

	}
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40013800 	.word	0x40013800
 8003320:	20004200 	.word	0x20004200

08003324 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART2)){
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <USART2_IRQHandler+0x1c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <USART2_IRQHandler+0x16>
		G_P_config[1].P_Call_Back();
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <USART2_IRQHandler+0x20>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4798      	blx	r3
	}
}void USART3_IRQHandler(void){
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40004400 	.word	0x40004400
 8003344:	20004200 	.word	0x20004200

08003348 <USART3_IRQHandler>:
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART3)){
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <USART3_IRQHandler+0x1c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <USART3_IRQHandler+0x16>
		G_P_config[2].P_Call_Back();
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <USART3_IRQHandler+0x20>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4798      	blx	r3
	}
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40004800 	.word	0x40004800
 8003368:	20004200 	.word	0x20004200

0800336c <Stepper_SET_DIR>:
#   |_____\____\___/ |_| |_| \_\\___/|_| \_|___\____|____/           \____|_| \_\/_/   \_\_|     |_| |_____|_| \_\____/


 */
#include "main.h"
void Stepper_SET_DIR(uint8_t dir){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
	switch(dir){
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b2b      	cmp	r3, #43	; 0x2b
 800337a:	d002      	beq.n	8003382 <Stepper_SET_DIR+0x16>
 800337c:	2b2d      	cmp	r3, #45	; 0x2d
 800337e:	d021      	beq.n	80033c4 <Stepper_SET_DIR+0x58>
		MCAL_write_PIN(Stepper_GPIO, B2, 0);		_TIM1_delay_ms(1);

		break;

	}
}
 8003380:	e041      	b.n	8003406 <Stepper_SET_DIR+0x9a>
		MCAL_write_PIN(Stepper_GPIO, A1, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2101      	movs	r1, #1
 8003386:	4822      	ldr	r0, [pc, #136]	; (8003410 <Stepper_SET_DIR+0xa4>)
 8003388:	f7ff f8e6 	bl	8002558 <MCAL_write_PIN>
		_TIM1_delay_ms(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f7ff ff87 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, A2, 0);		_TIM1_delay_ms(1);
 8003392:	2200      	movs	r2, #0
 8003394:	2102      	movs	r1, #2
 8003396:	481e      	ldr	r0, [pc, #120]	; (8003410 <Stepper_SET_DIR+0xa4>)
 8003398:	f7ff f8de 	bl	8002558 <MCAL_write_PIN>
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff ff7f 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, B1, 1);		_TIM1_delay_ms(1);
 80033a2:	2201      	movs	r2, #1
 80033a4:	2103      	movs	r1, #3
 80033a6:	481a      	ldr	r0, [pc, #104]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033a8:	f7ff f8d6 	bl	8002558 <MCAL_write_PIN>
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7ff ff77 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, B2, 0);		_TIM1_delay_ms(1);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2104      	movs	r1, #4
 80033b6:	4816      	ldr	r0, [pc, #88]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033b8:	f7ff f8ce 	bl	8002558 <MCAL_write_PIN>
 80033bc:	2001      	movs	r0, #1
 80033be:	f7ff ff6f 	bl	80032a0 <_TIM1_delay_ms>
		break;
 80033c2:	e020      	b.n	8003406 <Stepper_SET_DIR+0x9a>
		MCAL_write_PIN(Stepper_GPIO, A1, 1);		_TIM1_delay_ms(1);
 80033c4:	2201      	movs	r2, #1
 80033c6:	2101      	movs	r1, #1
 80033c8:	4811      	ldr	r0, [pc, #68]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033ca:	f7ff f8c5 	bl	8002558 <MCAL_write_PIN>
 80033ce:	2001      	movs	r0, #1
 80033d0:	f7ff ff66 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, A2, 0);		_TIM1_delay_ms(1);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2102      	movs	r1, #2
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033da:	f7ff f8bd 	bl	8002558 <MCAL_write_PIN>
 80033de:	2001      	movs	r0, #1
 80033e0:	f7ff ff5e 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, B1, 0);		_TIM1_delay_ms(1);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2103      	movs	r1, #3
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033ea:	f7ff f8b5 	bl	8002558 <MCAL_write_PIN>
 80033ee:	2001      	movs	r0, #1
 80033f0:	f7ff ff56 	bl	80032a0 <_TIM1_delay_ms>
		MCAL_write_PIN(Stepper_GPIO, B2, 0);		_TIM1_delay_ms(1);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2104      	movs	r1, #4
 80033f8:	4805      	ldr	r0, [pc, #20]	; (8003410 <Stepper_SET_DIR+0xa4>)
 80033fa:	f7ff f8ad 	bl	8002558 <MCAL_write_PIN>
 80033fe:	2001      	movs	r0, #1
 8003400:	f7ff ff4e 	bl	80032a0 <_TIM1_delay_ms>
		break;
 8003404:	bf00      	nop
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40010800 	.word	0x40010800

08003414 <Stepper_Pulses>:
void Stepper_Pulses(uint16_t speed,uint32_t n_pulses){
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	80fb      	strh	r3, [r7, #6]

	for(uint32_t i=0;i<n_pulses;i++){
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e01a      	b.n	800345c <Stepper_Pulses+0x48>
	MCAL_TOGGLE_PIN(GPIOA, B1);
 8003426:	2103      	movs	r1, #3
 8003428:	4811      	ldr	r0, [pc, #68]	; (8003470 <Stepper_Pulses+0x5c>)
 800342a:	f7ff f8d1 	bl	80025d0 <MCAL_TOGGLE_PIN>
	//		_TIM1_delay_ms(1);

	MCAL_TOGGLE_PIN(GPIOA, B2);
 800342e:	2104      	movs	r1, #4
 8003430:	480f      	ldr	r0, [pc, #60]	; (8003470 <Stepper_Pulses+0x5c>)
 8003432:	f7ff f8cd 	bl	80025d0 <MCAL_TOGGLE_PIN>
	_TIM1_delay_us(speed);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff05 	bl	8003248 <_TIM1_delay_us>

	MCAL_TOGGLE_PIN(GPIOA, A1);
 800343e:	2101      	movs	r1, #1
 8003440:	480b      	ldr	r0, [pc, #44]	; (8003470 <Stepper_Pulses+0x5c>)
 8003442:	f7ff f8c5 	bl	80025d0 <MCAL_TOGGLE_PIN>
	//				_TIM1_delay_ms(1);

	MCAL_TOGGLE_PIN(GPIOA, A2);
 8003446:	2102      	movs	r1, #2
 8003448:	4809      	ldr	r0, [pc, #36]	; (8003470 <Stepper_Pulses+0x5c>)
 800344a:	f7ff f8c1 	bl	80025d0 <MCAL_TOGGLE_PIN>
	_TIM1_delay_us(speed);
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fef9 	bl	8003248 <_TIM1_delay_us>
	for(uint32_t i=0;i<n_pulses;i++){
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d3e0      	bcc.n	8003426 <Stepper_Pulses+0x12>

	}
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40010800 	.word	0x40010800

08003474 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	while(1);
 8003478:	e7fe      	b.n	8003478 <Error_Handller+0x4>
	...

0800347c <Sys_Clk_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Sys_Clk_init(){
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
	// system speed 36Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <Sys_Clk_init+0x30>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a09      	ldr	r2, [pc, #36]	; (80034ac <Sys_Clk_init+0x30>)
 8003486:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800348a:	6053      	str	r3, [r2, #4]
	//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	//	RCC->CFGR |=(1 <<16); //PLL entry clock source
	//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <Sys_Clk_init+0x30>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <Sys_Clk_init+0x30>)
 8003492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003496:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <Sys_Clk_init+0x30>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a03      	ldr	r2, [pc, #12]	; (80034ac <Sys_Clk_init+0x30>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	6053      	str	r3, [r2, #4]


}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000

080034b0 <HALL_EFFECT_TIMER_ENABLE>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void HALL_EFFECT_TIMER_ENABLE(){
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
	HALL_TIMER_EN ^=1;
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HALL_EFFECT_TIMER_ENABLE+0x1c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HALL_EFFECT_TIMER_ENABLE+0x1c>)
 80034c0:	701a      	strb	r2, [r3, #0]

}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20004233 	.word	0x20004233

080034d0 <HALL_EFFECT_HANDLLER>:
 * @param [out] - Void
 * @retval -
 * Note- this fun called every rissing edege from hall effect sensor
 * and update the HALL_EFFECT_KM_H every 1sec and caluclate it from HALL_EFFECT_N_PULSES
 */
void HALL_EFFECT_HANDLLER(){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
//	HALL_EFFECT_COUNTER++;

	if(HALL_TIMER_EN){
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HALL_EFFECT_HANDLLER+0x7c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HALL_EFFECT_HANDLLER+0x18>
		HALL_EFFECT_COUNTER++;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HALL_EFFECT_HANDLLER+0x80>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HALL_EFFECT_HANDLLER+0x80>)
 80034e4:	6013      	str	r3, [r2, #0]
			_TIM1_delay_ms(1);
			HALL_EFFECT_COUNTER=0;
		}
	}

}
 80034e6:	e02e      	b.n	8003546 <HALL_EFFECT_HANDLLER+0x76>
		if(HALL_EFFECT_COUNTER){
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HALL_EFFECT_HANDLLER+0x80>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d02a      	beq.n	8003546 <HALL_EFFECT_HANDLLER+0x76>
			HALL_EFFECT_N_PULSES=HALL_EFFECT_COUNTER;
 80034f0:	4b17      	ldr	r3, [pc, #92]	; (8003550 <HALL_EFFECT_HANDLLER+0x80>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HALL_EFFECT_HANDLLER+0x84>)
 80034f6:	6013      	str	r3, [r2, #0]
			HALL_EFFECT_RPS=((HALL_EFFECT_N_PULSES*HALL_EFFECT_TIME_CONVERSION*1000)/HALL_EFFECT_REV_PER_PULSES*2);
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HALL_EFFECT_HANDLLER+0x84>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HALL_EFFECT_HANDLLER+0x88>)
 8003506:	6013      	str	r3, [r2, #0]
			HALL_EFFECT_RPM=(HALL_EFFECT_RPS *60)/1000;
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HALL_EFFECT_HANDLLER+0x88>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	461a      	mov	r2, r3
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HALL_EFFECT_HANDLLER+0x8c>)
 8003518:	fba3 2302 	umull	r2, r3, r3, r2
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	4a10      	ldr	r2, [pc, #64]	; (8003560 <HALL_EFFECT_HANDLLER+0x90>)
 8003520:	6013      	str	r3, [r2, #0]
			HALL_EFFECT_mM_s=(2*PI*HALL_EFFECT_RPM*MOTOR_SHAFT_RADIUS)/(60*100);
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HALL_EFFECT_HANDLLER+0x90>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f44f 621d 	mov.w	r2, #2512	; 0x9d0
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <HALL_EFFECT_HANDLLER+0x94>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	09db      	lsrs	r3, r3, #7
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HALL_EFFECT_HANDLLER+0x98>)
 8003538:	6013      	str	r3, [r2, #0]
			_TIM1_delay_ms(1);
 800353a:	2001      	movs	r0, #1
 800353c:	f7ff feb0 	bl	80032a0 <_TIM1_delay_ms>
			HALL_EFFECT_COUNTER=0;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HALL_EFFECT_HANDLLER+0x80>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20004233 	.word	0x20004233
 8003550:	20004234 	.word	0x20004234
 8003554:	20004238 	.word	0x20004238
 8003558:	2000423c 	.word	0x2000423c
 800355c:	10624dd3 	.word	0x10624dd3
 8003560:	20004240 	.word	0x20004240
 8003564:	057619f1 	.word	0x057619f1
 8003568:	20004244 	.word	0x20004244

0800356c <HALL_EFECT_Init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void HALL_EFECT_Init(){
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af00      	add	r7, sp, #0
	{
		EXTI_config_t HALL_EFFECT_SITTING={HALL_EFFECT_EXTI_LINE,RISEING,ENABLE,HALL_EFFECT_HANDLLER};
 8003572:	230c      	movs	r3, #12
 8003574:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HALL_EFECT_Init+0x84>)
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
 800357a:	230c      	movs	r3, #12
 800357c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800357e:	2328      	movs	r3, #40	; 0x28
 8003580:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HALL_EFECT_Init+0x88>)
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
		MCAL_EXTI_init(&HALL_EFFECT_SITTING);
 8003592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fcec 	bl	8001f74 <MCAL_EXTI_init>

	}
	_TIM1_delay_ms(10);
 800359c:	200a      	movs	r0, #10
 800359e:	f7ff fe7f 	bl	80032a0 <_TIM1_delay_ms>
	{
		GP_TIMERx_config GP_sitting={(MCAL_GET_H_CLCK()/1000) // to get tick every 1ms
 80035a2:	f7ff fce1 	bl	8002f68 <MCAL_GET_H_CLCK>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <HALL_EFECT_Init+0x8c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	813b      	strh	r3, [r7, #8]
 80035b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	2300      	movs	r3, #0
 80035bc:	81bb      	strh	r3, [r7, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	81fb      	strh	r3, [r7, #14]
 80035c2:	2300      	movs	r3, #0
 80035c4:	743b      	strb	r3, [r7, #16]
 80035c6:	2300      	movs	r3, #0
 80035c8:	747b      	strb	r3, [r7, #17]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HALL_EFECT_Init+0x90>)
 80035cc:	617b      	str	r3, [r7, #20]
				,2000 //to get interrupt every 1SEC
				,0,0,INT_EN,NORMAL,HALL_EFFECT_TIMER_ENABLE};
		GP_TIMERx_NORMAL_config GP_sitting_NORMA={Up};
 80035ce:	2300      	movs	r3, #0
 80035d0:	713b      	strb	r3, [r7, #4]
		GP_TIMx_start(HALL_EFFECT_TIMx_instant,&GP_sitting,&GP_sitting_NORMA);
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	4619      	mov	r1, r3
 80035da:	4809      	ldr	r0, [pc, #36]	; (8003600 <HALL_EFECT_Init+0x94>)
 80035dc:	f7ff f9f8 	bl	80029d0 <GP_TIMx_start>
	}

	_TIM1_delay_ms(10);
 80035e0:	200a      	movs	r0, #10
 80035e2:	f7ff fe5d 	bl	80032a0 <_TIM1_delay_ms>


}
 80035e6:	bf00      	nop
 80035e8:	3738      	adds	r7, #56	; 0x38
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40010c00 	.word	0x40010c00
 80035f4:	080034d1 	.word	0x080034d1
 80035f8:	10624dd3 	.word	0x10624dd3
 80035fc:	080034b1 	.word	0x080034b1
 8003600:	40000800 	.word	0x40000800

08003604 <ADC_Read>:
 * @param [in] - void
 * @param [out] - void
 * @retval -
 * Note- the ADC must work as interrupt otherwise this fun will not work
 */
void ADC_Read(){
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	ADC_read(ADC1,THROTTEL_CHx,&THROTTEL_DATA);
 8003608:	4a03      	ldr	r2, [pc, #12]	; (8003618 <ADC_Read+0x14>)
 800360a:	2100      	movs	r1, #0
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <ADC_Read+0x18>)
 800360e:	f7fe f97d 	bl	800190c <ADC_read>

}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20004230 	.word	0x20004230
 800361c:	40012400 	.word	0x40012400

08003620 <throtel_init>:
 * @param [in] - void
 * @param [out] - void
 * @retval -
 * Note-
 */
void throtel_init(){
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 8003626:	f107 0310 	add.w	r3, r7, #16
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ADC_Read};
 8003630:	2300      	movs	r3, #0
 8003632:	713b      	strb	r3, [r7, #4]
 8003634:	2301      	movs	r3, #1
 8003636:	717b      	strb	r3, [r7, #5]
 8003638:	2300      	movs	r3, #0
 800363a:	71bb      	strb	r3, [r7, #6]
 800363c:	2300      	movs	r3, #0
 800363e:	71fb      	strb	r3, [r7, #7]
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <throtel_init+0x4c>)
 8003648:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4808      	ldr	r0, [pc, #32]	; (8003670 <throtel_init+0x50>)
 8003650:	f7fd ffd0 	bl	80015f4 <ADC_init>
	//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={DIR_PIN,INPUT_PD,0};
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <throtel_init+0x54>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_init(DIR_PORT, &PINx);
 800365a:	463b      	mov	r3, r7
 800365c:	4619      	mov	r1, r3
 800365e:	4806      	ldr	r0, [pc, #24]	; (8003678 <throtel_init+0x58>)
 8003660:	f7fe fe90 	bl	8002384 <MCAL_GPIO_init>

}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08003605 	.word	0x08003605
 8003670:	40012400 	.word	0x40012400
 8003674:	08003bf8 	.word	0x08003bf8
 8003678:	40010c00 	.word	0x40010c00

0800367c <HW_init>:
 * @retval -
 * Note-
 */


void HW_init(){
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 8003682:	f7ff fefb 	bl	800347c <Sys_Clk_init>
	_TIM1_delay_ms(100);
 8003686:	2064      	movs	r0, #100	; 0x64
 8003688:	f7ff fe0a 	bl	80032a0 <_TIM1_delay_ms>
	HALL_EFFECT_N_PULSES=0;
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HW_init+0xb4>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
	HALL_EFFECT_RPS=0;
 8003692:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HW_init+0xb8>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
	HALL_EFFECT_RPM=0;
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HW_init+0xbc>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
	//		_TIM1_delay_ms(1);
	HALL_EFFECT_mM_s=0;
 800369e:	4b27      	ldr	r3, [pc, #156]	; (800373c <HW_init+0xc0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
	HALL_EFECT_Init();
 80036a4:	f7ff ff62 	bl	800356c <HALL_EFECT_Init>
	_TIM1_delay_ms(100);
 80036a8:	2064      	movs	r0, #100	; 0x64
 80036aa:	f7ff fdf9 	bl	80032a0 <_TIM1_delay_ms>

	////////////*********LUNA_INIT***************//////////////////

	LCD_init();
 80036ae:	f7fd fd75 	bl	800119c <LCD_init>
	_TIM1_delay_ms(100);
 80036b2:	2064      	movs	r0, #100	; 0x64
 80036b4:	f7ff fdf4 	bl	80032a0 <_TIM1_delay_ms>


	////////////*********ACC_throtel_init*********//////////////////
	throtel_init();
 80036b8:	f7ff ffb2 	bl	8003620 <throtel_init>
	_TIM1_delay_ms(100);
 80036bc:	2064      	movs	r0, #100	; 0x64
 80036be:	f7ff fdef 	bl	80032a0 <_TIM1_delay_ms>
	////////////*********HALL_EFECT_Init***************//////////////////
	PIN_config pin={A1,OUTPUT_PP,SPEED_2};
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HW_init+0xc4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(Stepper_GPIO, &pin);	_TIM1_delay_ms(10);
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4619      	mov	r1, r3
 80036ce:	481d      	ldr	r0, [pc, #116]	; (8003744 <HW_init+0xc8>)
 80036d0:	f7fe fe58 	bl	8002384 <MCAL_GPIO_init>
 80036d4:	200a      	movs	r0, #10
 80036d6:	f7ff fde3 	bl	80032a0 <_TIM1_delay_ms>

	pin=(PIN_config){A2,OUTPUT_PP,SPEED_2};
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HW_init+0xcc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(Stepper_GPIO, &pin);	_TIM1_delay_ms(10);
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	4619      	mov	r1, r3
 80036e6:	4817      	ldr	r0, [pc, #92]	; (8003744 <HW_init+0xc8>)
 80036e8:	f7fe fe4c 	bl	8002384 <MCAL_GPIO_init>
 80036ec:	200a      	movs	r0, #10
 80036ee:	f7ff fdd7 	bl	80032a0 <_TIM1_delay_ms>

	pin=(PIN_config){B1,OUTPUT_PP,SPEED_2};
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HW_init+0xd0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(Stepper_GPIO, &pin);	_TIM1_delay_ms(10);
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	4619      	mov	r1, r3
 80036fe:	4811      	ldr	r0, [pc, #68]	; (8003744 <HW_init+0xc8>)
 8003700:	f7fe fe40 	bl	8002384 <MCAL_GPIO_init>
 8003704:	200a      	movs	r0, #10
 8003706:	f7ff fdcb 	bl	80032a0 <_TIM1_delay_ms>

	pin=(PIN_config){B2,OUTPUT_PP,SPEED_2};
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HW_init+0xd4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(Stepper_GPIO, &pin);	_TIM1_delay_ms(10);
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	4619      	mov	r1, r3
 8003716:	480b      	ldr	r0, [pc, #44]	; (8003744 <HW_init+0xc8>)
 8003718:	f7fe fe34 	bl	8002384 <MCAL_GPIO_init>
 800371c:	200a      	movs	r0, #10
 800371e:	f7ff fdbf 	bl	80032a0 <_TIM1_delay_ms>

	_TIM1_delay_ms(100);
 8003722:	2064      	movs	r0, #100	; 0x64
 8003724:	f7ff fdbc 	bl	80032a0 <_TIM1_delay_ms>




}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20004238 	.word	0x20004238
 8003734:	2000423c 	.word	0x2000423c
 8003738:	20004240 	.word	0x20004240
 800373c:	20004244 	.word	0x20004244
 8003740:	08003bfc 	.word	0x08003bfc
 8003744:	40010800 	.word	0x40010800
 8003748:	08003c00 	.word	0x08003c00
 800374c:	08003c04 	.word	0x08003c04
 8003750:	08003c08 	.word	0x08003c08

08003754 <READ_TASK>:


void READ_TASK(){
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
	uint8_t ccw_counter=0,cw_counter=0;
 800375a:	2300      	movs	r3, #0
 800375c:	71fb      	strb	r3, [r7, #7]
 800375e:	2300      	movs	r3, #0
 8003760:	71bb      	strb	r3, [r7, #6]

	while(1){
		ADC_Read();
 8003762:	f7ff ff4f 	bl	8003604 <ADC_Read>
		if(MCAL_Read_PIN(DIR_PORT, DIR_PIN)){
 8003766:	210d      	movs	r1, #13
 8003768:	4827      	ldr	r0, [pc, #156]	; (8003808 <READ_TASK+0xb4>)
 800376a:	f7fe ff1d 	bl	80025a8 <MCAL_Read_PIN>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <READ_TASK+0x3c>
			_TIM1_delay_ms(30);
 8003774:	201e      	movs	r0, #30
 8003776:	f7ff fd93 	bl	80032a0 <_TIM1_delay_ms>
			if(MCAL_Read_PIN(DIR_PORT, DIR_PIN)){
 800377a:	210d      	movs	r1, #13
 800377c:	4822      	ldr	r0, [pc, #136]	; (8003808 <READ_TASK+0xb4>)
 800377e:	f7fe ff13 	bl	80025a8 <MCAL_Read_PIN>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <READ_TASK+0x42>
				DIR=CW;
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <READ_TASK+0xb8>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e002      	b.n	8003796 <READ_TASK+0x42>
			}
		}else{
			DIR=CCW;
 8003790:	4b1e      	ldr	r3, [pc, #120]	; (800380c <READ_TASK+0xb8>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]

		}
		speed=5000-((4000*THROTTEL_DATA)/4096);
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <READ_TASK+0xbc>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da01      	bge.n	80037ac <READ_TASK+0x58>
 80037a8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80037ac:	131b      	asrs	r3, r3, #12
 80037ae:	425b      	negs	r3, r3
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80037b6:	3308      	adds	r3, #8
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <READ_TASK+0xc0>)
 80037bc:	801a      	strh	r2, [r3, #0]
		if(DIR==CW){
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <READ_TASK+0xb8>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10b      	bne.n	80037de <READ_TASK+0x8a>
			ccw_counter=0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]
		if(cw_counter==0){
 80037ca:	79bb      	ldrb	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d115      	bne.n	80037fc <READ_TASK+0xa8>
			Stepper_SET_DIR('+');
 80037d0:	202b      	movs	r0, #43	; 0x2b
 80037d2:	f7ff fdcb 	bl	800336c <Stepper_SET_DIR>
			cw_counter++;
 80037d6:	79bb      	ldrb	r3, [r7, #6]
 80037d8:	3301      	adds	r3, #1
 80037da:	71bb      	strb	r3, [r7, #6]
 80037dc:	e00e      	b.n	80037fc <READ_TASK+0xa8>
		}
		}else if(DIR==CCW){
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <READ_TASK+0xb8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <READ_TASK+0xa8>
			cw_counter=0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	71bb      	strb	r3, [r7, #6]
			if(ccw_counter==0){
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <READ_TASK+0xa8>
				Stepper_SET_DIR('-');
 80037f0:	202d      	movs	r0, #45	; 0x2d
 80037f2:	f7ff fdbb 	bl	800336c <Stepper_SET_DIR>
				ccw_counter++;
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	3301      	adds	r3, #1
 80037fa:	71fb      	strb	r3, [r7, #7]
			}
		}
		    vTaskSuspend( READ_Handller_ );
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <READ_TASK+0xc4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fe6d 	bl	80004e0 <vTaskSuspend>
		ADC_Read();
 8003806:	e7ac      	b.n	8003762 <READ_TASK+0xe>
 8003808:	40010c00 	.word	0x40010c00
 800380c:	20004232 	.word	0x20004232
 8003810:	20004230 	.word	0x20004230
 8003814:	20000022 	.word	0x20000022
 8003818:	2000424c 	.word	0x2000424c

0800381c <STEPPER_Handller_TASK>:
	}
}
void STEPPER_Handller_TASK(){
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	while(1){

//		vTaskPrioritySet(STEPPER_Handller_, 3);
		Stepper_Pulses(speed,300);
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <STEPPER_Handller_TASK+0x28>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fdf3 	bl	8003414 <Stepper_Pulses>
		  vTaskResume( READ_Handller_ );
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <STEPPER_Handller_TASK+0x2c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc ff04 	bl	8000640 <vTaskResume>
		    vTaskSuspend( STEPPER_Handller_ );
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <STEPPER_Handller_TASK+0x30>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fe4f 	bl	80004e0 <vTaskSuspend>
		Stepper_Pulses(speed,300);
 8003842:	e7ed      	b.n	8003820 <STEPPER_Handller_TASK+0x4>
 8003844:	20000022 	.word	0x20000022
 8003848:	2000424c 	.word	0x2000424c
 800384c:	20004248 	.word	0x20004248

08003850 <LCD_SEND_DATA>:

//		vTaskPrioritySet(STEPPER_Handller_, 2);

	}
}
void LCD_SEND_DATA(){
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
	while(1){
		LCD_moveCURSER(0,4);
 8003854:	2104      	movs	r1, #4
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd fd8e 	bl	8001378 <LCD_moveCURSER>
		if(HALL_EFFECT_RPM>=1000){
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <LCD_SEND_DATA+0x88>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003864:	d305      	bcc.n	8003872 <LCD_SEND_DATA+0x22>
			LCD_intgerToString(HALL_EFFECT_RPM);
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <LCD_SEND_DATA+0x88>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fdb4 	bl	80013d8 <LCD_intgerToString>
 8003870:	e007      	b.n	8003882 <LCD_SEND_DATA+0x32>

		}else{
			LCD_intgerToString(HALL_EFFECT_RPM);
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <LCD_SEND_DATA+0x88>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fdae 	bl	80013d8 <LCD_intgerToString>
			LCD_sendString("    ");
 800387c:	4817      	ldr	r0, [pc, #92]	; (80038dc <LCD_SEND_DATA+0x8c>)
 800387e:	f7fd fd5f 	bl	8001340 <LCD_sendString>

		}
		LCD_moveCURSER(1,2);
 8003882:	2102      	movs	r1, #2
 8003884:	2001      	movs	r0, #1
 8003886:	f7fd fd77 	bl	8001378 <LCD_moveCURSER>
		if(HALL_EFFECT_mM_s>=100){
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <LCD_SEND_DATA+0x90>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b63      	cmp	r3, #99	; 0x63
 8003890:	d905      	bls.n	800389e <LCD_SEND_DATA+0x4e>
			LCD_intgerToString(HALL_EFFECT_mM_s);
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <LCD_SEND_DATA+0x90>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fd9e 	bl	80013d8 <LCD_intgerToString>
 800389c:	e007      	b.n	80038ae <LCD_SEND_DATA+0x5e>

		}else{
			LCD_intgerToString(HALL_EFFECT_mM_s);
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <LCD_SEND_DATA+0x90>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fd98 	bl	80013d8 <LCD_intgerToString>
			LCD_sendString("    ");
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <LCD_SEND_DATA+0x8c>)
 80038aa:	f7fd fd49 	bl	8001340 <LCD_sendString>

		}
		LCD_moveCURSER(0,10);
 80038ae:	210a      	movs	r1, #10
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fd fd61 	bl	8001378 <LCD_moveCURSER>
		if(DIR ==CCW){
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <LCD_SEND_DATA+0x94>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <LCD_SEND_DATA+0x76>
			LCD_sendString("CCW");
 80038be:	480a      	ldr	r0, [pc, #40]	; (80038e8 <LCD_SEND_DATA+0x98>)
 80038c0:	f7fd fd3e 	bl	8001340 <LCD_sendString>
 80038c4:	e002      	b.n	80038cc <LCD_SEND_DATA+0x7c>

		}else{
			LCD_sendString("CW ");
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <LCD_SEND_DATA+0x9c>)
 80038c8:	f7fd fd3a 	bl	8001340 <LCD_sendString>
		}
//		LCD_intgerToString(HALL_EFFECT_mM_s);
//		vTaskSuspend(LCD_Handller_);
//		vTaskPrioritySet(STEPPER_Handller_, 2);
		  vTaskResume( STEPPER_Handller_ );
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <LCD_SEND_DATA+0xa0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc feb5 	bl	8000640 <vTaskResume>
		LCD_moveCURSER(0,4);
 80038d6:	e7bd      	b.n	8003854 <LCD_SEND_DATA+0x4>
 80038d8:	20004240 	.word	0x20004240
 80038dc:	08003c0c 	.word	0x08003c0c
 80038e0:	20004244 	.word	0x20004244
 80038e4:	20004232 	.word	0x20004232
 80038e8:	08003c14 	.word	0x08003c14
 80038ec:	08003c18 	.word	0x08003c18
 80038f0:	20004248 	.word	0x20004248

080038f4 <Welcome_TASK>:
	}
}
void Welcome_TASK(){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	while(1){
		LCD_clearScreen();
 80038f8:	f7fd fcae 	bl	8001258 <LCD_clearScreen>
		LCD_moveCURSER(0,0);
 80038fc:	2100      	movs	r1, #0
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fd fd3a 	bl	8001378 <LCD_moveCURSER>
		LCD_sendString("Motion Control Proj.");
 8003904:	4814      	ldr	r0, [pc, #80]	; (8003958 <Welcome_TASK+0x64>)
 8003906:	f7fd fd1b 	bl	8001340 <LCD_sendString>
		LCD_sendString("Welcome");
 800390a:	4814      	ldr	r0, [pc, #80]	; (800395c <Welcome_TASK+0x68>)
 800390c:	f7fd fd18 	bl	8001340 <LCD_sendString>

		LCD_moveCURSER(1,0);
 8003910:	2100      	movs	r1, #0
 8003912:	2001      	movs	r0, #1
 8003914:	f7fd fd30 	bl	8001378 <LCD_moveCURSER>
		LCD_sendString("DR/Soliman Elnagar");
 8003918:	4811      	ldr	r0, [pc, #68]	; (8003960 <Welcome_TASK+0x6c>)
 800391a:	f7fd fd11 	bl	8001340 <LCD_sendString>
		_TIM1_delay_s(5);
 800391e:	2005      	movs	r0, #5
 8003920:	f7ff fcd6 	bl	80032d0 <_TIM1_delay_s>
		LCD_clearScreen();
 8003924:	f7fd fc98 	bl	8001258 <LCD_clearScreen>
		LCD_moveCURSER(0,0);
 8003928:	2100      	movs	r1, #0
 800392a:	2000      	movs	r0, #0
 800392c:	f7fd fd24 	bl	8001378 <LCD_moveCURSER>

		LCD_sendString("RPM=   ");
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <Welcome_TASK+0x70>)
 8003932:	f7fd fd05 	bl	8001340 <LCD_sendString>
		LCD_moveCURSER(1,0);
 8003936:	2100      	movs	r1, #0
 8003938:	2001      	movs	r0, #1
 800393a:	f7fd fd1d 	bl	8001378 <LCD_moveCURSER>
		LCD_sendString("V=         mm/s");
 800393e:	480a      	ldr	r0, [pc, #40]	; (8003968 <Welcome_TASK+0x74>)
 8003940:	f7fd fcfe 	bl	8001340 <LCD_sendString>
		_TIM1_delay_ms(100);
 8003944:	2064      	movs	r0, #100	; 0x64
 8003946:	f7ff fcab 	bl	80032a0 <_TIM1_delay_ms>
		vTaskSuspend(Welcome_TASK_Handller_);
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <Welcome_TASK+0x78>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fdc6 	bl	80004e0 <vTaskSuspend>
		LCD_clearScreen();
 8003954:	e7d0      	b.n	80038f8 <Welcome_TASK+0x4>
 8003956:	bf00      	nop
 8003958:	08003c1c 	.word	0x08003c1c
 800395c:	08003c34 	.word	0x08003c34
 8003960:	08003c3c 	.word	0x08003c3c
 8003964:	08003c50 	.word	0x08003c50
 8003968:	08003c58 	.word	0x08003c58
 800396c:	20004254 	.word	0x20004254

08003970 <main>:

	}
}
int main(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af02      	add	r7, sp, #8
//		_TIM1_delay_s(2);
	HW_init();
 8003976:	f7ff fe81 	bl	800367c <HW_init>

	///////////////////////////
	if(xTaskCreate(LCD_SEND_DATA,"LCD_SEND_DATA",256,NULL,1,&LCD_Handller_)!=pdPASS ){
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <main+0x90>)
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2301      	movs	r3, #1
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003988:	491e      	ldr	r1, [pc, #120]	; (8003a04 <main+0x94>)
 800398a:	481f      	ldr	r0, [pc, #124]	; (8003a08 <main+0x98>)
 800398c:	f7fc fc67 	bl	800025e <xTaskCreate>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <main+0x2a>
		Error_Handller();
 8003996:	f7ff fd6d 	bl	8003474 <Error_Handller>
	}



	if(xTaskCreate(READ_TASK,"READ_TASK",256,NULL,2,&READ_Handller_)!=pdPASS ){
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <main+0x9c>)
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2302      	movs	r3, #2
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a8:	4919      	ldr	r1, [pc, #100]	; (8003a10 <main+0xa0>)
 80039aa:	481a      	ldr	r0, [pc, #104]	; (8003a14 <main+0xa4>)
 80039ac:	f7fc fc57 	bl	800025e <xTaskCreate>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <main+0x4a>
		Error_Handller();
 80039b6:	f7ff fd5d 	bl	8003474 <Error_Handller>
	}

	if(xTaskCreate(Welcome_TASK,"READ_TASK",256,NULL,5,&Welcome_TASK_Handller_)!=pdPASS ){
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <main+0xa8>)
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2305      	movs	r3, #5
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c8:	4911      	ldr	r1, [pc, #68]	; (8003a10 <main+0xa0>)
 80039ca:	4814      	ldr	r0, [pc, #80]	; (8003a1c <main+0xac>)
 80039cc:	f7fc fc47 	bl	800025e <xTaskCreate>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <main+0x6a>
		Error_Handller();
 80039d6:	f7ff fd4d 	bl	8003474 <Error_Handller>
	}

	if(xTaskCreate(STEPPER_Handller_TASK,"STEPPER_Handller_TASK",256,NULL,3,&STEPPER_Handller_)!=pdPASS ){
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <main+0xb0>)
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	2303      	movs	r3, #3
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <main+0xb4>)
 80039ea:	480f      	ldr	r0, [pc, #60]	; (8003a28 <main+0xb8>)
 80039ec:	f7fc fc37 	bl	800025e <xTaskCreate>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <main+0x8a>
		Error_Handller();
 80039f6:	f7ff fd3d 	bl	8003474 <Error_Handller>



	//    MCAL_USART_SendData(TSR_UART_INSTANT, 'D');

	vTaskStartScheduler();
 80039fa:	f7fc fe99 	bl	8000730 <vTaskStartScheduler>

	for(;;);
 80039fe:	e7fe      	b.n	80039fe <main+0x8e>
 8003a00:	20004250 	.word	0x20004250
 8003a04:	08003c68 	.word	0x08003c68
 8003a08:	08003851 	.word	0x08003851
 8003a0c:	2000424c 	.word	0x2000424c
 8003a10:	08003c78 	.word	0x08003c78
 8003a14:	08003755 	.word	0x08003755
 8003a18:	20004254 	.word	0x20004254
 8003a1c:	080038f5 	.word	0x080038f5
 8003a20:	20004248 	.word	0x20004248
 8003a24:	08003c84 	.word	0x08003c84
 8003a28:	0800381d 	.word	0x0800381d

08003a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a2c:	480d      	ldr	r0, [pc, #52]	; (8003a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <LoopForever+0xe>)
  movs r3, #0
 8003a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a3c:	e002      	b.n	8003a44 <LoopCopyDataInit>

08003a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a42:	3304      	adds	r3, #4

08003a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a48:	d3f9      	bcc.n	8003a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a4c:	4c0a      	ldr	r4, [pc, #40]	; (8003a78 <LoopForever+0x16>)
  movs r3, #0
 8003a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a50:	e001      	b.n	8003a56 <LoopFillZerobss>

08003a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a54:	3204      	adds	r2, #4

08003a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a58:	d3fb      	bcc.n	8003a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a5a:	f000 f875 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a5e:	f7ff ff87 	bl	8003970 <main>

08003a62 <LoopForever>:

LoopForever:
  b LoopForever
 8003a62:	e7fe      	b.n	8003a62 <LoopForever>
  ldr   r0, =_estack
 8003a64:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a6c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003a70:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8003a74:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003a78:	20004258 	.word	0x20004258

08003a7c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a7c:	e7fe      	b.n	8003a7c <ADC3_IRQHandler>

08003a7e <__itoa>:
 8003a7e:	1e93      	subs	r3, r2, #2
 8003a80:	2b22      	cmp	r3, #34	; 0x22
 8003a82:	b510      	push	{r4, lr}
 8003a84:	460c      	mov	r4, r1
 8003a86:	d904      	bls.n	8003a92 <__itoa+0x14>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	700b      	strb	r3, [r1, #0]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	2a0a      	cmp	r2, #10
 8003a94:	d109      	bne.n	8003aaa <__itoa+0x2c>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	da07      	bge.n	8003aaa <__itoa+0x2c>
 8003a9a:	232d      	movs	r3, #45	; 0x2d
 8003a9c:	700b      	strb	r3, [r1, #0]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4240      	negs	r0, r0
 8003aa2:	4421      	add	r1, r4
 8003aa4:	f000 f806 	bl	8003ab4 <__utoa>
 8003aa8:	e7f1      	b.n	8003a8e <__itoa+0x10>
 8003aaa:	2100      	movs	r1, #0
 8003aac:	e7f9      	b.n	8003aa2 <__itoa+0x24>

08003aae <itoa>:
 8003aae:	f7ff bfe6 	b.w	8003a7e <__itoa>
	...

08003ab4 <__utoa>:
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	b08b      	sub	sp, #44	; 0x2c
 8003ab8:	4605      	mov	r5, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	466e      	mov	r6, sp
 8003abe:	4c1d      	ldr	r4, [pc, #116]	; (8003b34 <__utoa+0x80>)
 8003ac0:	f104 0c20 	add.w	ip, r4, #32
 8003ac4:	4637      	mov	r7, r6
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	6861      	ldr	r1, [r4, #4]
 8003aca:	3408      	adds	r4, #8
 8003acc:	c703      	stmia	r7!, {r0, r1}
 8003ace:	4564      	cmp	r4, ip
 8003ad0:	463e      	mov	r6, r7
 8003ad2:	d1f7      	bne.n	8003ac4 <__utoa+0x10>
 8003ad4:	7921      	ldrb	r1, [r4, #4]
 8003ad6:	6820      	ldr	r0, [r4, #0]
 8003ad8:	7139      	strb	r1, [r7, #4]
 8003ada:	1e91      	subs	r1, r2, #2
 8003adc:	2922      	cmp	r1, #34	; 0x22
 8003ade:	6038      	str	r0, [r7, #0]
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	d904      	bls.n	8003af0 <__utoa+0x3c>
 8003ae6:	7019      	strb	r1, [r3, #0]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4618      	mov	r0, r3
 8003aec:	b00b      	add	sp, #44	; 0x2c
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	1e58      	subs	r0, r3, #1
 8003af2:	4684      	mov	ip, r0
 8003af4:	fbb5 f7f2 	udiv	r7, r5, r2
 8003af8:	fb02 5617 	mls	r6, r2, r7, r5
 8003afc:	3628      	adds	r6, #40	; 0x28
 8003afe:	446e      	add	r6, sp
 8003b00:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003b04:	460c      	mov	r4, r1
 8003b06:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003b0a:	462e      	mov	r6, r5
 8003b0c:	42b2      	cmp	r2, r6
 8003b0e:	463d      	mov	r5, r7
 8003b10:	f101 0101 	add.w	r1, r1, #1
 8003b14:	d9ee      	bls.n	8003af4 <__utoa+0x40>
 8003b16:	2200      	movs	r2, #0
 8003b18:	545a      	strb	r2, [r3, r1]
 8003b1a:	1919      	adds	r1, r3, r4
 8003b1c:	1aa5      	subs	r5, r4, r2
 8003b1e:	42aa      	cmp	r2, r5
 8003b20:	dae3      	bge.n	8003aea <__utoa+0x36>
 8003b22:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003b26:	780e      	ldrb	r6, [r1, #0]
 8003b28:	3201      	adds	r2, #1
 8003b2a:	7006      	strb	r6, [r0, #0]
 8003b2c:	f801 5901 	strb.w	r5, [r1], #-1
 8003b30:	e7f4      	b.n	8003b1c <__utoa+0x68>
 8003b32:	bf00      	nop
 8003b34:	08003c9a 	.word	0x08003c9a

08003b38 <memset>:
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4402      	add	r2, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	4d0c      	ldr	r5, [pc, #48]	; (8003b80 <__libc_init_array+0x38>)
 8003b4e:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b50:	1b64      	subs	r4, r4, r5
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	f000 f81a 	bl	8003b90 <_init>
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	4d0a      	ldr	r5, [pc, #40]	; (8003b88 <__libc_init_array+0x40>)
 8003b60:	4c0a      	ldr	r4, [pc, #40]	; (8003b8c <__libc_init_array+0x44>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	08003cc0 	.word	0x08003cc0
 8003b84:	08003cc0 	.word	0x08003cc0
 8003b88:	08003cc0 	.word	0x08003cc0
 8003b8c:	08003cc4 	.word	0x08003cc4

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
