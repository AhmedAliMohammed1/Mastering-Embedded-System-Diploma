
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000047e  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009e  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f0  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b2  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004fa  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b5  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 0000884a  00000000  00000000  0000124d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00009a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ca 01 	call	0x394	; 0x394 <main>
  74:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TIMER0_init>:
 *      Author: Ahmed
 */

#include "TIMERS.h"
TIMERS_config_t *G_P_CONFIG_=NULL;
void TIMER0_init(TIMERS_config_t* TIMER_CONFIG){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <TIMER0_init+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <TIMER0_init+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	9a 83       	std	Y+2, r25	; 0x02
  8a:	89 83       	std	Y+1, r24	; 0x01
	G_P_CONFIG_=TIMER_CONFIG;
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	9a 81       	ldd	r25, Y+2	; 0x02
  90:	90 93 61 00 	sts	0x0061, r25
  94:	80 93 60 00 	sts	0x0060, r24
	TCNT0 =0; // clear Timer/Counter Register every time init the timer
  98:	e2 e5       	ldi	r30, 0x52	; 82
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	//• Bit 2:0 – CS02:0: Clock Select
	TCCR0 &=~(0x07 <<0);
  9e:	a3 e5       	ldi	r26, 0x53	; 83
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e3 e5       	ldi	r30, 0x53	; 83
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	8c 93       	st	X, r24
	TCCR0 |=(TIMER_CONFIG->P_S <<0);
  ac:	a3 e5       	ldi	r26, 0x53	; 83
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e3 e5       	ldi	r30, 0x53	; 83
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	81 81       	ldd	r24, Z+1	; 0x01
  bc:	89 2b       	or	r24, r25
  be:	8c 93       	st	X, r24
	switch(TIMER_CONFIG->MODE){
  c0:	e9 81       	ldd	r30, Y+1	; 0x01
  c2:	fa 81       	ldd	r31, Y+2	; 0x02
  c4:	80 81       	ld	r24, Z
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	3c 83       	std	Y+4, r19	; 0x04
  cc:	2b 83       	std	Y+3, r18	; 0x03
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	29 f1       	breq	.+74     	; 0x122 <TIMER0_init+0xa6>
  d8:	2b 81       	ldd	r18, Y+3	; 0x03
  da:	3c 81       	ldd	r19, Y+4	; 0x04
  dc:	22 30       	cpi	r18, 0x02	; 2
  de:	31 05       	cpc	r19, r1
  e0:	2c f4       	brge	.+10     	; 0xec <TIMER0_init+0x70>
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	69 f0       	breq	.+26     	; 0x104 <TIMER0_init+0x88>
  ea:	84 c0       	rjmp	.+264    	; 0x1f4 <TIMER0_init+0x178>
  ec:	2b 81       	ldd	r18, Y+3	; 0x03
  ee:	3c 81       	ldd	r19, Y+4	; 0x04
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	31 05       	cpc	r19, r1
  f4:	99 f1       	breq	.+102    	; 0x15c <TIMER0_init+0xe0>
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	9c 81       	ldd	r25, Y+4	; 0x04
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	91 05       	cpc	r25, r1
  fe:	09 f4       	brne	.+2      	; 0x102 <TIMER0_init+0x86>
 100:	57 c0       	rjmp	.+174    	; 0x1b0 <TIMER0_init+0x134>
 102:	78 c0       	rjmp	.+240    	; 0x1f4 <TIMER0_init+0x178>
	case OVF:
		TCCR0 |=(1<<FOC0);
 104:	a3 e5       	ldi	r26, 0x53	; 83
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e3 e5       	ldi	r30, 0x53	; 83
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	8c 93       	st	X, r24
		TCCR0 &=~((1<<WGM00) |(1<<WGM01));
 112:	a3 e5       	ldi	r26, 0x53	; 83
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e3 e5       	ldi	r30, 0x53	; 83
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	87 7b       	andi	r24, 0xB7	; 183
 11e:	8c 93       	st	X, r24
 120:	69 c0       	rjmp	.+210    	; 0x1f4 <TIMER0_init+0x178>
		break;
	case P_PWM:
		TCCR0 &=~((1<<WGM01));
 122:	a3 e5       	ldi	r26, 0x53	; 83
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e3 e5       	ldi	r30, 0x53	; 83
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM00);
 130:	a3 e5       	ldi	r26, 0x53	; 83
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e3 e5       	ldi	r30, 0x53	; 83
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	8c 93       	st	X, r24
//		Clear OC0 on compare match when up-counting. Set OC0 on compare match when downcounting
		TCCR0 &=~(1<<COM00);
 13e:	a3 e5       	ldi	r26, 0x53	; 83
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e3 e5       	ldi	r30, 0x53	; 83
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8c 93       	st	X, r24
		TCCR0|=(1<<COM01);
 14c:	a3 e5       	ldi	r26, 0x53	; 83
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e3 e5       	ldi	r30, 0x53	; 83
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	8c 93       	st	X, r24
 15a:	4c c0       	rjmp	.+152    	; 0x1f4 <TIMER0_init+0x178>
		break;
	case CTC: //2 1 0 CTC

		TCCR0 |=(1<<FOC0);
 15c:	a3 e5       	ldi	r26, 0x53	; 83
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e3 e5       	ldi	r30, 0x53	; 83
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8c 93       	st	X, r24
		TCCR0 &=~((1<<WGM00));
 16a:	a3 e5       	ldi	r26, 0x53	; 83
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e3 e5       	ldi	r30, 0x53	; 83
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7b       	andi	r24, 0xBF	; 191
 176:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM01);
 178:	a3 e5       	ldi	r26, 0x53	; 83
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e3 e5       	ldi	r30, 0x53	; 83
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 60       	ori	r24, 0x08	; 8
 184:	8c 93       	st	X, r24
		OCR0 = TIMER_CONFIG->Compare_Register;
 186:	ac e5       	ldi	r26, 0x5C	; 92
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e9 81       	ldd	r30, Y+1	; 0x01
 18c:	fa 81       	ldd	r31, Y+2	; 0x02
 18e:	83 81       	ldd	r24, Z+3	; 0x03
 190:	8c 93       	st	X, r24
		//0 1 Toggle OC0 on compare match
		TCCR0 &=~(1<<COM01);
 192:	a3 e5       	ldi	r26, 0x53	; 83
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e3 e5       	ldi	r30, 0x53	; 83
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	8c 93       	st	X, r24
		TCCR0&=~(1<<COM00);
 1a0:	a3 e5       	ldi	r26, 0x53	; 83
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e3 e5       	ldi	r30, 0x53	; 83
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	8c 93       	st	X, r24
 1ae:	22 c0       	rjmp	.+68     	; 0x1f4 <TIMER0_init+0x178>
		break;
	case F_PWM:
		TCCR0 |=(1<<WGM00)|(1<<WGM01); //3 1 1 Fast PWM
 1b0:	a3 e5       	ldi	r26, 0x53	; 83
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e3 e5       	ldi	r30, 0x53	; 83
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	88 64       	ori	r24, 0x48	; 72
 1bc:	8c 93       	st	X, r24
		OCR0=TIMER_CONFIG->PWM;
 1be:	ac e5       	ldi	r26, 0x5C	; 92
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e9 81       	ldd	r30, Y+1	; 0x01
 1c4:	fa 81       	ldd	r31, Y+2	; 0x02
 1c6:	84 81       	ldd	r24, Z+4	; 0x04
 1c8:	8c 93       	st	X, r24
//		Clear OC0 on compare match, set OC0 at BOTTOM,(nin-inverting mode)
		TCCR0 &=~(1<<COM00);
 1ca:	a3 e5       	ldi	r26, 0x53	; 83
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e3 e5       	ldi	r30, 0x53	; 83
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	8c 93       	st	X, r24
		TCCR0|=(1<<COM01);
 1d8:	a3 e5       	ldi	r26, 0x53	; 83
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e3 e5       	ldi	r30, 0x53	; 83
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	8c 93       	st	X, r24
		DDRB |=(1<<PB3);
 1e6:	a7 e3       	ldi	r26, 0x37	; 55
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e7 e3       	ldi	r30, 0x37	; 55
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	8c 93       	st	X, r24
	}



	////////////////////////
	if(TIMER_CONFIG->EN){
 1f4:	e9 81       	ldd	r30, Y+1	; 0x01
 1f6:	fa 81       	ldd	r31, Y+2	; 0x02
 1f8:	82 81       	ldd	r24, Z+2	; 0x02
 1fa:	88 23       	and	r24, r24
 1fc:	09 f1       	breq	.+66     	; 0x240 <TIMER0_init+0x1c4>
		if(TIMER_CONFIG->MODE==OVF) TIMSK |=(1<<TOIE0);
 1fe:	e9 81       	ldd	r30, Y+1	; 0x01
 200:	fa 81       	ldd	r31, Y+2	; 0x02
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	41 f4       	brne	.+16     	; 0x218 <TIMER0_init+0x19c>
 208:	a9 e5       	ldi	r26, 0x59	; 89
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e9 e5       	ldi	r30, 0x59	; 89
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	8c 93       	st	X, r24
 216:	0c c0       	rjmp	.+24     	; 0x230 <TIMER0_init+0x1b4>
		else if(TIMER_CONFIG->MODE==CTC) TIMSK |=(1<<OCIE0);
 218:	e9 81       	ldd	r30, Y+1	; 0x01
 21a:	fa 81       	ldd	r31, Y+2	; 0x02
 21c:	80 81       	ld	r24, Z
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	39 f4       	brne	.+14     	; 0x230 <TIMER0_init+0x1b4>
 222:	a9 e5       	ldi	r26, 0x59	; 89
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e9 e5       	ldi	r30, 0x59	; 89
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	8c 93       	st	X, r24
		SREG|=(1<<7);
 230:	af e5       	ldi	r26, 0x5F	; 95
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	ef e5       	ldi	r30, 0x5F	; 95
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	8c 93       	st	X, r24
 23e:	27 c0       	rjmp	.+78     	; 0x28e <TIMER0_init+0x212>
	}else{

		if(TIMER_CONFIG->MODE==OVF){   while(!TIFR &(1<<TOV0));
 240:	e9 81       	ldd	r30, Y+1	; 0x01
 242:	fa 81       	ldd	r31, Y+2	; 0x02
 244:	80 81       	ld	r24, Z
 246:	88 23       	and	r24, r24
 248:	69 f4       	brne	.+26     	; 0x264 <TIMER0_init+0x1e8>
 24a:	e8 e5       	ldi	r30, 0x58	; 88
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	d9 f3       	breq	.-10     	; 0x24a <TIMER0_init+0x1ce>
		TIFR |=(1<<TOV0);}
 254:	a8 e5       	ldi	r26, 0x58	; 88
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e8 e5       	ldi	r30, 0x58	; 88
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	8c 93       	st	X, r24
 262:	15 c0       	rjmp	.+42     	; 0x28e <TIMER0_init+0x212>
				else if(TIMER_CONFIG->MODE==CTC) {
 264:	e9 81       	ldd	r30, Y+1	; 0x01
 266:	fa 81       	ldd	r31, Y+2	; 0x02
 268:	80 81       	ld	r24, Z
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	81 f4       	brne	.+32     	; 0x28e <TIMER0_init+0x212>
					while(!(TIFR &(1<<OCF0)));
 26e:	e8 e5       	ldi	r30, 0x58	; 88
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	82 70       	andi	r24, 0x02	; 2
 27a:	90 70       	andi	r25, 0x00	; 0
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	b9 f3       	breq	.-18     	; 0x26e <TIMER0_init+0x1f2>
				TIFR |=(1<<OCF0); }
 280:	a8 e5       	ldi	r26, 0x58	; 88
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e8 e5       	ldi	r30, 0x58	; 88
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	8c 93       	st	X, r24
	}
}
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <TIMER0_OVF>:





ISR(TIMER0_OVF){
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	G_P_CONFIG_->P_CALLBACK();
 2c6:	e0 91 60 00 	lds	r30, 0x0060
 2ca:	f0 91 61 00 	lds	r31, 0x0061
 2ce:	05 80       	ldd	r0, Z+5	; 0x05
 2d0:	f6 81       	ldd	r31, Z+6	; 0x06
 2d2:	e0 2d       	mov	r30, r0
 2d4:	09 95       	icall
}
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <TIMER0_COMP>:

ISR(TIMER0_COMP){
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	G_P_CONFIG_->P_CALLBACK();
 326:	e0 91 60 00 	lds	r30, 0x0060
 32a:	f0 91 61 00 	lds	r31, 0x0061
 32e:	05 80       	ldd	r0, Z+5	; 0x05
 330:	f6 81       	ldd	r31, Z+6	; 0x06
 332:	e0 2d       	mov	r30, r0
 334:	09 95       	icall

}
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <WATCH_DOG_TIMER_init>:


void WATCH_DOG_TIMER_init(void){
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	WDTCR=0x0F;
 364:	e1 e4       	ldi	r30, 0x41	; 65
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	80 83       	st	Z, r24
}
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <WATCH_DOG_TIMER_KICK>:
void WATCH_DOG_TIMER_KICK(void){
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	WDTCR|=(1<<WDTOE)|(1<<WDE) ;
 37a:	a1 e4       	ldi	r26, 0x41	; 65
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e1 e4       	ldi	r30, 0x41	; 65
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	88 61       	ori	r24, 0x18	; 24
 386:	8c 93       	st	X, r24
	WDTCR=0;
 388:	e1 e4       	ldi	r30, 0x41	; 65
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	10 82       	st	Z, r1
}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <main>:

#include "TIMERS.h"
#include <util/delay.h>
#define F_CPU 1000000UL

void main(void){
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	29 97       	sbiw	r28, 0x09	; 9
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
	TIMERS_config_t CONFIG={CTC,F_1024,DISABLE,100,0};
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	fe 01       	movw	r30, r28
 3ac:	33 96       	adiw	r30, 0x03	; 3
 3ae:	df 01       	movw	r26, r30
 3b0:	98 2f       	mov	r25, r24
 3b2:	1d 92       	st	X+, r1
 3b4:	9a 95       	dec	r25
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <main+0x1e>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	8b 83       	std	Y+3, r24	; 0x03
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	8c 83       	std	Y+4, r24	; 0x04
 3c0:	84 e6       	ldi	r24, 0x64	; 100
 3c2:	8e 83       	std	Y+6, r24	; 0x06
	DDRB |=(1<<0);
 3c4:	a7 e3       	ldi	r26, 0x37	; 55
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e7 e3       	ldi	r30, 0x37	; 55
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	8c 93       	st	X, r24
	while(1){
		PORTB^=(1<<0);
 3d2:	a8 e3       	ldi	r26, 0x38	; 56
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e8 e3       	ldi	r30, 0x38	; 56
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	90 81       	ld	r25, Z
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	89 27       	eor	r24, r25
 3e0:	8c 93       	st	X, r24
		for(int i=0;i<20;i++){ //wait I*100 msec
 3e2:	1a 82       	std	Y+2, r1	; 0x02
 3e4:	19 82       	std	Y+1, r1	; 0x01
 3e6:	09 c0       	rjmp	.+18     	; 0x3fa <main+0x66>
			TIMER0_init(&CONFIG);
 3e8:	ce 01       	movw	r24, r28
 3ea:	03 96       	adiw	r24, 0x03	; 3
 3ec:	0e 94 3e 00 	call	0x7c	; 0x7c <TIMER0_init>
void main(void){
	TIMERS_config_t CONFIG={CTC,F_1024,DISABLE,100,0};
	DDRB |=(1<<0);
	while(1){
		PORTB^=(1<<0);
		for(int i=0;i<20;i++){ //wait I*100 msec
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	84 31       	cpi	r24, 0x14	; 20
 400:	91 05       	cpc	r25, r1
 402:	94 f3       	brlt	.-28     	; 0x3e8 <main+0x54>
 404:	e6 cf       	rjmp	.-52     	; 0x3d2 <main+0x3e>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
