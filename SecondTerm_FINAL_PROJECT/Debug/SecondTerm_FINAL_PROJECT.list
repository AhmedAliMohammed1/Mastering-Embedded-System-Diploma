
SecondTerm_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002c08  08002c08  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c08  08002c08  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000080  08002c90  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002c90  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004643  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe0  00000000  00000000  000246ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001840  00000000  00000000  000256cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000400  00000000  00000000  00026f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000338  00000000  00000000  00027310  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001e29  00000000  00000000  00027648  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000037f4  00000000  00000000  00029471  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006c69  00000000  00000000  0002cc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000338ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  0003394c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000080 	.word	0x20000080
 800014c:	00000000 	.word	0x00000000
 8000150:	08002a48 	.word	0x08002a48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000084 	.word	0x20000084
 800016c:	08002a48 	.word	0x08002a48

08000170 <KEYPAD_init>:
#include "KEYPAD.h"
PIN_config PIN={R0,OUTPUT_PP,SPEED_2};
unsigned char ROWs[]={R0,R1,R2,R3};
unsigned char COL_s[]={C0,C1,C2};

void KEYPAD_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 8000174:	491b      	ldr	r1, [pc, #108]	; (80001e4 <KEYPAD_init+0x74>)
 8000176:	481c      	ldr	r0, [pc, #112]	; (80001e8 <KEYPAD_init+0x78>)
 8000178:	f001 f870 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=R1;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <KEYPAD_init+0x74>)
 800017e:	2201      	movs	r2, #1
 8000180:	801a      	strh	r2, [r3, #0]
 8000182:	4918      	ldr	r1, [pc, #96]	; (80001e4 <KEYPAD_init+0x74>)
 8000184:	4818      	ldr	r0, [pc, #96]	; (80001e8 <KEYPAD_init+0x78>)
 8000186:	f001 f869 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=R2;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 800018a:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <KEYPAD_init+0x74>)
 800018c:	2203      	movs	r2, #3
 800018e:	801a      	strh	r2, [r3, #0]
 8000190:	4914      	ldr	r1, [pc, #80]	; (80001e4 <KEYPAD_init+0x74>)
 8000192:	4815      	ldr	r0, [pc, #84]	; (80001e8 <KEYPAD_init+0x78>)
 8000194:	f001 f862 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=R3;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <KEYPAD_init+0x74>)
 800019a:	2204      	movs	r2, #4
 800019c:	801a      	strh	r2, [r3, #0]
 800019e:	4911      	ldr	r1, [pc, #68]	; (80001e4 <KEYPAD_init+0x74>)
 80001a0:	4811      	ldr	r0, [pc, #68]	; (80001e8 <KEYPAD_init+0x78>)
 80001a2:	f001 f85b 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=C0;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <KEYPAD_init+0x74>)
 80001a8:	2205      	movs	r2, #5
 80001aa:	801a      	strh	r2, [r3, #0]
	PIN.MODE=INPUT_PU; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <KEYPAD_init+0x74>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	709a      	strb	r2, [r3, #2]
 80001b2:	490c      	ldr	r1, [pc, #48]	; (80001e4 <KEYPAD_init+0x74>)
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <KEYPAD_init+0x78>)
 80001b6:	f001 f851 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=C1; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <KEYPAD_init+0x74>)
 80001bc:	2206      	movs	r2, #6
 80001be:	801a      	strh	r2, [r3, #0]
 80001c0:	4908      	ldr	r1, [pc, #32]	; (80001e4 <KEYPAD_init+0x74>)
 80001c2:	4809      	ldr	r0, [pc, #36]	; (80001e8 <KEYPAD_init+0x78>)
 80001c4:	f001 f84a 	bl	800125c <MCAL_GPIO_init>
	PIN.PIN_number=C2; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <KEYPAD_init+0x74>)
 80001ca:	2207      	movs	r2, #7
 80001cc:	801a      	strh	r2, [r3, #0]
 80001ce:	4905      	ldr	r1, [pc, #20]	; (80001e4 <KEYPAD_init+0x74>)
 80001d0:	4805      	ldr	r0, [pc, #20]	; (80001e8 <KEYPAD_init+0x78>)
 80001d2:	f001 f843 	bl	800125c <MCAL_GPIO_init>
	MCAL_write_PORT(KEYPAD_PORT,0xFF);
 80001d6:	21ff      	movs	r1, #255	; 0xff
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <KEYPAD_init+0x78>)
 80001da:	f001 f94f 	bl	800147c <MCAL_write_PORT>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000
 80001e8:	40010c00 	.word	0x40010c00

080001ec <Get_Pressed_KEY>:
unsigned char Get_Pressed_KEY(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	int i,j;
	for(i=0;i<Row_N;i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e0a3      	b.n	8000340 <Get_Pressed_KEY+0x154>

	MCAL_write_PIN(KEYPAD_PORT, ROWs[0], LOGIC_LOW);
 80001f8:	4b56      	ldr	r3, [pc, #344]	; (8000354 <Get_Pressed_KEY+0x168>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	2200      	movs	r2, #0
 8000200:	4619      	mov	r1, r3
 8000202:	4855      	ldr	r0, [pc, #340]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000204:	f001 f912 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(KEYPAD_PORT, ROWs[1], LOGIC_LOW);
 8000208:	4b52      	ldr	r3, [pc, #328]	; (8000354 <Get_Pressed_KEY+0x168>)
 800020a:	785b      	ldrb	r3, [r3, #1]
 800020c:	b29b      	uxth	r3, r3
 800020e:	2200      	movs	r2, #0
 8000210:	4619      	mov	r1, r3
 8000212:	4851      	ldr	r0, [pc, #324]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000214:	f001 f90a 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(KEYPAD_PORT, ROWs[2], LOGIC_LOW);
 8000218:	4b4e      	ldr	r3, [pc, #312]	; (8000354 <Get_Pressed_KEY+0x168>)
 800021a:	789b      	ldrb	r3, [r3, #2]
 800021c:	b29b      	uxth	r3, r3
 800021e:	2200      	movs	r2, #0
 8000220:	4619      	mov	r1, r3
 8000222:	484d      	ldr	r0, [pc, #308]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000224:	f001 f902 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(KEYPAD_PORT, ROWs[3], LOGIC_LOW);
 8000228:	4b4a      	ldr	r3, [pc, #296]	; (8000354 <Get_Pressed_KEY+0x168>)
 800022a:	78db      	ldrb	r3, [r3, #3]
 800022c:	b29b      	uxth	r3, r3
 800022e:	2200      	movs	r2, #0
 8000230:	4619      	mov	r1, r3
 8000232:	4849      	ldr	r0, [pc, #292]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000234:	f001 f8fa 	bl	800142c <MCAL_write_PIN>
//			dms(200);
	MCAL_write_PIN(KEYPAD_PORT, ROWs[i], LOGIC_HIGH);
 8000238:	4a46      	ldr	r2, [pc, #280]	; (8000354 <Get_Pressed_KEY+0x168>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b29b      	uxth	r3, r3
 8000242:	2201      	movs	r2, #1
 8000244:	4619      	mov	r1, r3
 8000246:	4844      	ldr	r0, [pc, #272]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000248:	f001 f8f0 	bl	800142c <MCAL_write_PIN>
//	wait_ms(30);
	for(j=0;j<Col_N;j++){
 800024c:	2300      	movs	r3, #0
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	e070      	b.n	8000334 <Get_Pressed_KEY+0x148>

		if(MCAL_Read_PIN(KEYPAD_PORT, COL_s[j])){
 8000252:	4a42      	ldr	r2, [pc, #264]	; (800035c <Get_Pressed_KEY+0x170>)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b29b      	uxth	r3, r3
 800025c:	4619      	mov	r1, r3
 800025e:	483e      	ldr	r0, [pc, #248]	; (8000358 <Get_Pressed_KEY+0x16c>)
 8000260:	f001 f91c 	bl	800149c <MCAL_Read_PIN>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d056      	beq.n	8000318 <Get_Pressed_KEY+0x12c>
			while(MCAL_Read_PIN(KEYPAD_PORT, COL_s[j]));
 800026a:	bf00      	nop
 800026c:	4a3b      	ldr	r2, [pc, #236]	; (800035c <Get_Pressed_KEY+0x170>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29b      	uxth	r3, r3
 8000276:	4619      	mov	r1, r3
 8000278:	4837      	ldr	r0, [pc, #220]	; (8000358 <Get_Pressed_KEY+0x16c>)
 800027a:	f001 f90f 	bl	800149c <MCAL_Read_PIN>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f3      	bne.n	800026c <Get_Pressed_KEY+0x80>
			switch(i){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b03      	cmp	r3, #3
 8000288:	d848      	bhi.n	800031c <Get_Pressed_KEY+0x130>
 800028a:	a201      	add	r2, pc, #4	; (adr r2, 8000290 <Get_Pressed_KEY+0xa4>)
 800028c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000290:	080002a1 	.word	0x080002a1
 8000294:	080002bf 	.word	0x080002bf
 8000298:	080002dd 	.word	0x080002dd
 800029c:	080002fb 	.word	0x080002fb
			case 0:
				if (j==0) return '*';
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d101      	bne.n	80002aa <Get_Pressed_KEY+0xbe>
 80002a6:	232a      	movs	r3, #42	; 0x2a
 80002a8:	e04f      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==1) return 0;
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d101      	bne.n	80002b4 <Get_Pressed_KEY+0xc8>
 80002b0:	2300      	movs	r3, #0
 80002b2:	e04a      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==2) return '#';
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d132      	bne.n	8000320 <Get_Pressed_KEY+0x134>
 80002ba:	2323      	movs	r3, #35	; 0x23
 80002bc:	e045      	b.n	800034a <Get_Pressed_KEY+0x15e>
				break;
			case 1:
				if (j==0) return 7;
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d101      	bne.n	80002c8 <Get_Pressed_KEY+0xdc>
 80002c4:	2307      	movs	r3, #7
 80002c6:	e040      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==1) return 8;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d101      	bne.n	80002d2 <Get_Pressed_KEY+0xe6>
 80002ce:	2308      	movs	r3, #8
 80002d0:	e03b      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==2) return 9;
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d125      	bne.n	8000324 <Get_Pressed_KEY+0x138>
 80002d8:	2309      	movs	r3, #9
 80002da:	e036      	b.n	800034a <Get_Pressed_KEY+0x15e>

				break;
			case 2:
				if (j==0) return 4;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d101      	bne.n	80002e6 <Get_Pressed_KEY+0xfa>
 80002e2:	2304      	movs	r3, #4
 80002e4:	e031      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==1) return 5;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d101      	bne.n	80002f0 <Get_Pressed_KEY+0x104>
 80002ec:	2305      	movs	r3, #5
 80002ee:	e02c      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==2) return 6;
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d118      	bne.n	8000328 <Get_Pressed_KEY+0x13c>
 80002f6:	2306      	movs	r3, #6
 80002f8:	e027      	b.n	800034a <Get_Pressed_KEY+0x15e>
				break;
			case 3:
				if (j==0) return 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <Get_Pressed_KEY+0x118>
 8000300:	2301      	movs	r3, #1
 8000302:	e022      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==1) return 2;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d101      	bne.n	800030e <Get_Pressed_KEY+0x122>
 800030a:	2302      	movs	r3, #2
 800030c:	e01d      	b.n	800034a <Get_Pressed_KEY+0x15e>
				if (j==2) return 3;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b02      	cmp	r3, #2
 8000312:	d10b      	bne.n	800032c <Get_Pressed_KEY+0x140>
 8000314:	2303      	movs	r3, #3
 8000316:	e018      	b.n	800034a <Get_Pressed_KEY+0x15e>
				break;
			default:
				break;
			}
		}
 8000318:	bf00      	nop
 800031a:	e008      	b.n	800032e <Get_Pressed_KEY+0x142>
				break;
 800031c:	bf00      	nop
 800031e:	e006      	b.n	800032e <Get_Pressed_KEY+0x142>
				break;
 8000320:	bf00      	nop
 8000322:	e004      	b.n	800032e <Get_Pressed_KEY+0x142>
				break;
 8000324:	bf00      	nop
 8000326:	e002      	b.n	800032e <Get_Pressed_KEY+0x142>
				break;
 8000328:	bf00      	nop
 800032a:	e000      	b.n	800032e <Get_Pressed_KEY+0x142>
				break;
 800032c:	bf00      	nop
	for(j=0;j<Col_N;j++){
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	2b02      	cmp	r3, #2
 8000338:	dd8b      	ble.n	8000252 <Get_Pressed_KEY+0x66>
	for(i=0;i<Row_N;i++){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b03      	cmp	r3, #3
 8000344:	f77f af58 	ble.w	80001f8 <Get_Pressed_KEY+0xc>
	}

	}
	return 'N';
 8000348:	234e      	movs	r3, #78	; 0x4e

}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000004 	.word	0x20000004
 8000358:	40010c00 	.word	0x40010c00
 800035c:	20000008 	.word	0x20000008

08000360 <EN_PULS>:
#include "LCD.h"
	PIN_config PIN_C;

void EN_PULS(){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 8000364:	2201      	movs	r2, #1
 8000366:	210a      	movs	r1, #10
 8000368:	4806      	ldr	r0, [pc, #24]	; (8000384 <EN_PULS+0x24>)
 800036a:	f001 f85f 	bl	800142c <MCAL_write_PIN>
	dms(1);
 800036e:	2001      	movs	r0, #1
 8000370:	f001 fbd0 	bl	8001b14 <dms>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 8000374:	2200      	movs	r2, #0
 8000376:	210a      	movs	r1, #10
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <EN_PULS+0x24>)
 800037a:	f001 f857 	bl	800142c <MCAL_write_PIN>

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010c00 	.word	0x40010c00

08000388 <LCD_sendCommand>:

void LCD_sendCommand(usint8_t command){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 8000392:	2200      	movs	r2, #0
 8000394:	210b      	movs	r1, #11
 8000396:	4830      	ldr	r0, [pc, #192]	; (8000458 <LCD_sendCommand+0xd0>)
 8000398:	f001 f848 	bl	800142c <MCAL_write_PIN>
	dms(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f001 fbb9 	bl	8001b14 <dms>
	dus(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	091b      	lsrs	r3, r3, #4
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	210c      	movs	r1, #12
 80003b2:	4829      	ldr	r0, [pc, #164]	; (8000458 <LCD_sendCommand+0xd0>)
 80003b4:	f001 f83a 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	095b      	lsrs	r3, r3, #5
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	210d      	movs	r1, #13
 80003c8:	4823      	ldr	r0, [pc, #140]	; (8000458 <LCD_sendCommand+0xd0>)
 80003ca:	f001 f82f 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	099b      	lsrs	r3, r3, #6
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	210e      	movs	r1, #14
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <LCD_sendCommand+0xd0>)
 80003e0:	f001 f824 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	09db      	lsrs	r3, r3, #7
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	210f      	movs	r1, #15
 80003ee:	481a      	ldr	r0, [pc, #104]	; (8000458 <LCD_sendCommand+0xd0>)
 80003f0:	f001 f81c 	bl	800142c <MCAL_write_PIN>
	EN_PULS();
 80003f4:	f7ff ffb4 	bl	8000360 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	210c      	movs	r1, #12
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <LCD_sendCommand+0xd0>)
 8000406:	f001 f811 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	085b      	lsrs	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	210d      	movs	r1, #13
 800041a:	480f      	ldr	r0, [pc, #60]	; (8000458 <LCD_sendCommand+0xd0>)
 800041c:	f001 f806 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	089b      	lsrs	r3, r3, #2
 8000424:	b2db      	uxtb	r3, r3
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	b2db      	uxtb	r3, r3
 800042c:	461a      	mov	r2, r3
 800042e:	210e      	movs	r1, #14
 8000430:	4809      	ldr	r0, [pc, #36]	; (8000458 <LCD_sendCommand+0xd0>)
 8000432:	f000 fffb 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	08db      	lsrs	r3, r3, #3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	210f      	movs	r1, #15
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <LCD_sendCommand+0xd0>)
 8000448:	f000 fff0 	bl	800142c <MCAL_write_PIN>
	EN_PULS();
 800044c:	f7ff ff88 	bl	8000360 <EN_PULS>

#endif

}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40010c00 	.word	0x40010c00

0800045c <LCD_init>:

void LCD_init(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	dms(20); // wait until power
 8000460:	2014      	movs	r0, #20
 8000462:	f001 fb57 	bl	8001b14 <dms>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <LCD_init+0xa4>)
 8000468:	220b      	movs	r2, #11
 800046a:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <LCD_init+0xa4>)
 800046e:	2204      	movs	r2, #4
 8000470:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 8000472:	4b23      	ldr	r3, [pc, #140]	; (8000500 <LCD_init+0xa4>)
 8000474:	2202      	movs	r2, #2
 8000476:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 8000478:	4921      	ldr	r1, [pc, #132]	; (8000500 <LCD_init+0xa4>)
 800047a:	4822      	ldr	r0, [pc, #136]	; (8000504 <LCD_init+0xa8>)
 800047c:	f000 feee 	bl	800125c <MCAL_GPIO_init>
	// COFIGEUR RW Pin as output OD
	dus(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f001 fb33 	bl	8001aec <dus>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	dus(1);

		PIN_C.PIN_number=EN;
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <LCD_init+0xa4>)
 8000488:	220a      	movs	r2, #10
 800048a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 800048c:	491c      	ldr	r1, [pc, #112]	; (8000500 <LCD_init+0xa4>)
 800048e:	481d      	ldr	r0, [pc, #116]	; (8000504 <LCD_init+0xa8>)
 8000490:	f000 fee4 	bl	800125c <MCAL_GPIO_init>
	dus(15); // wait until power
 8000494:	200f      	movs	r0, #15
 8000496:	f001 fb29 	bl	8001aec <dus>
	dus(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <LCD_init+0xa4>)
 800049c:	2204      	movs	r2, #4
 800049e:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <LCD_init+0xa4>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <LCD_init+0xa4>)
 80004a8:	220c      	movs	r2, #12
 80004aa:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004ac:	4914      	ldr	r1, [pc, #80]	; (8000500 <LCD_init+0xa4>)
 80004ae:	4815      	ldr	r0, [pc, #84]	; (8000504 <LCD_init+0xa8>)
 80004b0:	f000 fed4 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <LCD_init+0xa4>)
 80004b6:	220d      	movs	r2, #13
 80004b8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004ba:	4911      	ldr	r1, [pc, #68]	; (8000500 <LCD_init+0xa4>)
 80004bc:	4811      	ldr	r0, [pc, #68]	; (8000504 <LCD_init+0xa8>)
 80004be:	f000 fecd 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <LCD_init+0xa4>)
 80004c4:	220e      	movs	r2, #14
 80004c6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004c8:	490d      	ldr	r1, [pc, #52]	; (8000500 <LCD_init+0xa4>)
 80004ca:	480e      	ldr	r0, [pc, #56]	; (8000504 <LCD_init+0xa8>)
 80004cc:	f000 fec6 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LCD_init+0xa4>)
 80004d2:	220f      	movs	r2, #15
 80004d4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004d6:	490a      	ldr	r1, [pc, #40]	; (8000500 <LCD_init+0xa4>)
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <LCD_init+0xa8>)
 80004da:	f000 febf 	bl	800125c <MCAL_GPIO_init>
	dus(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 fb04 	bl	8001aec <dus>
	LCD_sendCommand(LCD_GO_TO_HOME);
 80004e4:	2002      	movs	r0, #2
 80004e6:	f7ff ff4f 	bl	8000388 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 80004ea:	2028      	movs	r0, #40	; 0x28
 80004ec:	f7ff ff4c 	bl	8000388 <LCD_sendCommand>

	dus(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f001 fafb 	bl	8001aec <dus>



#endif
	LCD_sendCommand(LCD_CURSOR_ON);
 80004f6:	200e      	movs	r0, #14
 80004f8:	f7ff ff46 	bl	8000388 <LCD_sendCommand>

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000c0 	.word	0x200000c0
 8000504:	40010c00 	.word	0x40010c00

08000508 <LCD_clearScreen>:
void LCD_clearScreen(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND);
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ff3b 	bl	8000388 <LCD_sendCommand>


}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <LCD_sendCharcter>:

void LCD_sendCharcter(usint8_t data){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_HIGH);
 8000522:	2201      	movs	r2, #1
 8000524:	210b      	movs	r1, #11
 8000526:	4830      	ldr	r0, [pc, #192]	; (80005e8 <LCD_sendCharcter+0xd0>)
 8000528:	f000 ff80 	bl	800142c <MCAL_write_PIN>
//	MCAL_write_PIN(CTRL_PORT, RW, LOGIC_LOW);

	dus(10);
 800052c:	200a      	movs	r0, #10
 800052e:	f001 fadd 	bl	8001aec <dus>
	dus(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,4));
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	210c      	movs	r1, #12
 8000542:	4829      	ldr	r0, [pc, #164]	; (80005e8 <LCD_sendCharcter+0xd0>)
 8000544:	f000 ff72 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,5));
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	095b      	lsrs	r3, r3, #5
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	210d      	movs	r1, #13
 8000558:	4823      	ldr	r0, [pc, #140]	; (80005e8 <LCD_sendCharcter+0xd0>)
 800055a:	f000 ff67 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,6));
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	099b      	lsrs	r3, r3, #6
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	210e      	movs	r1, #14
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <LCD_sendCharcter+0xd0>)
 8000570:	f000 ff5c 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,7));
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	09db      	lsrs	r3, r3, #7
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	210f      	movs	r1, #15
 800057e:	481a      	ldr	r0, [pc, #104]	; (80005e8 <LCD_sendCharcter+0xd0>)
 8000580:	f000 ff54 	bl	800142c <MCAL_write_PIN>
	EN_PULS();
 8000584:	f7ff feec 	bl	8000360 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,0));
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	210c      	movs	r1, #12
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <LCD_sendCharcter+0xd0>)
 8000596:	f000 ff49 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,1));
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	085b      	lsrs	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	210d      	movs	r1, #13
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <LCD_sendCharcter+0xd0>)
 80005ac:	f000 ff3e 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,2));
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	089b      	lsrs	r3, r3, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	210e      	movs	r1, #14
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <LCD_sendCharcter+0xd0>)
 80005c2:	f000 ff33 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,3));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	08db      	lsrs	r3, r3, #3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	210f      	movs	r1, #15
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <LCD_sendCharcter+0xd0>)
 80005d8:	f000 ff28 	bl	800142c <MCAL_write_PIN>
	EN_PULS();
 80005dc:	f7ff fec0 	bl	8000360 <EN_PULS>

#endif

}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010c00 	.word	0x40010c00

080005ec <LCD_sendString>:
void LCD_sendString(char *data){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	usint8_t counter=0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	while(*data != 0){
 80005f8:	e006      	b.n	8000608 <LCD_sendString+0x1c>
		LCD_sendCharcter(*data++);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff88 	bl	8000518 <LCD_sendCharcter>
	while(*data != 0){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f4      	bne.n	80005fa <LCD_sendString+0xe>
	}
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LCD_moveCURSER>:
void LCD_moveCURSER(unsigned char row,unsigned char col){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
	switch(row){
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d826      	bhi.n	800067c <LCD_moveCURSER+0x64>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <LCD_moveCURSER+0x1c>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	08000653 	.word	0x08000653
 800063c:	08000661 	.word	0x08000661
 8000640:	0800066f 	.word	0x0800066f
	case 0:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION + col);
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	3b80      	subs	r3, #128	; 0x80
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe9c 	bl	8000388 <LCD_sendCommand>
		break;
 8000650:	e014      	b.n	800067c <LCD_moveCURSER+0x64>
	case 1:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION_2nd + col);
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	3b40      	subs	r3, #64	; 0x40
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe95 	bl	8000388 <LCD_sendCommand>
		break;
 800065e:	e00d      	b.n	800067c <LCD_moveCURSER+0x64>

	case 2:
		LCD_sendCommand(0x90+ col);
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	3b70      	subs	r3, #112	; 0x70
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe8e 	bl	8000388 <LCD_sendCommand>
		break;
 800066c:	e006      	b.n	800067c <LCD_moveCURSER+0x64>
	case 3:
		LCD_sendCommand(0xD0+ col);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	3b30      	subs	r3, #48	; 0x30
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe87 	bl	8000388 <LCD_sendCommand>
		break;
 800067a:	bf00      	nop

	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <LCD_intgerToString>:

void LCD_intgerToString(unsigned int num){
 8000684:	b580      	push	{r7, lr}
 8000686:	b092      	sub	sp, #72	; 0x48
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	int buff[16];
	itoa(num,buff,10);
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	220a      	movs	r2, #10
 8000692:	4619      	mov	r1, r3
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f002 f997 	bl	80029c8 <itoa>
	LCD_sendString(buff);
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffa4 	bl	80005ec <LCD_sendString>


}
 80006a4:	bf00      	nop
 80006a6:	3748      	adds	r7, #72	; 0x48
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <EN_PULS_V2>:
#include "LCD2.h"
	PIN_config PIN_C;

void EN_PULS_V2(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 80006b0:	2201      	movs	r2, #1
 80006b2:	210e      	movs	r1, #14
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <EN_PULS_V2+0x24>)
 80006b6:	f000 feb9 	bl	800142c <MCAL_write_PIN>
	dms(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 fa2a 	bl	8001b14 <dms>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 80006c0:	2200      	movs	r2, #0
 80006c2:	210e      	movs	r1, #14
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <EN_PULS_V2+0x24>)
 80006c6:	f000 feb1 	bl	800142c <MCAL_write_PIN>

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40011000 	.word	0x40011000

080006d4 <LCD_sendCommand_V2>:

void LCD_sendCommand_V2(usint8_t command){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 80006de:	2200      	movs	r2, #0
 80006e0:	210d      	movs	r1, #13
 80006e2:	4830      	ldr	r0, [pc, #192]	; (80007a4 <LCD_sendCommand_V2+0xd0>)
 80006e4:	f000 fea2 	bl	800142c <MCAL_write_PIN>
	dms(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f001 fa13 	bl	8001b14 <dms>
	dus(1);

	EN_PULS_V2();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	210c      	movs	r1, #12
 80006fe:	482a      	ldr	r0, [pc, #168]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 8000700:	f000 fe94 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	210d      	movs	r1, #13
 8000714:	4824      	ldr	r0, [pc, #144]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 8000716:	f000 fe89 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	099b      	lsrs	r3, r3, #6
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	210e      	movs	r1, #14
 800072a:	481f      	ldr	r0, [pc, #124]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 800072c:	f000 fe7e 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	09db      	lsrs	r3, r3, #7
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	210f      	movs	r1, #15
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 800073c:	f000 fe76 	bl	800142c <MCAL_write_PIN>
	EN_PULS_V2();
 8000740:	f7ff ffb4 	bl	80006ac <EN_PULS_V2>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	210c      	movs	r1, #12
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 8000752:	f000 fe6b 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	085b      	lsrs	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	210d      	movs	r1, #13
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 8000768:	f000 fe60 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	210e      	movs	r1, #14
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 800077e:	f000 fe55 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	210f      	movs	r1, #15
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <LCD_sendCommand_V2+0xd4>)
 8000794:	f000 fe4a 	bl	800142c <MCAL_write_PIN>
	EN_PULS_V2();
 8000798:	f7ff ff88 	bl	80006ac <EN_PULS_V2>

#endif

}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40010800 	.word	0x40010800

080007ac <LCD_init_V2>:

void LCD_init_V2(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	dms(20); // wait until power
 80007b0:	2014      	movs	r0, #20
 80007b2:	f001 f9af 	bl	8001b14 <dms>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <LCD_init_V2+0xa4>)
 80007b8:	220d      	movs	r2, #13
 80007ba:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <LCD_init_V2+0xa4>)
 80007be:	2204      	movs	r2, #4
 80007c0:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <LCD_init_V2+0xa4>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80007c8:	4921      	ldr	r1, [pc, #132]	; (8000850 <LCD_init_V2+0xa4>)
 80007ca:	4822      	ldr	r0, [pc, #136]	; (8000854 <LCD_init_V2+0xa8>)
 80007cc:	f000 fd46 	bl	800125c <MCAL_GPIO_init>
	// COFIGEUR RW Pin as output OD
	dus(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 f98b 	bl	8001aec <dus>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	dus(1);

		PIN_C.PIN_number=EN;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <LCD_init_V2+0xa4>)
 80007d8:	220e      	movs	r2, #14
 80007da:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80007dc:	491c      	ldr	r1, [pc, #112]	; (8000850 <LCD_init_V2+0xa4>)
 80007de:	481d      	ldr	r0, [pc, #116]	; (8000854 <LCD_init_V2+0xa8>)
 80007e0:	f000 fd3c 	bl	800125c <MCAL_GPIO_init>
	dus(15); // wait until power
 80007e4:	200f      	movs	r0, #15
 80007e6:	f001 f981 	bl	8001aec <dus>
	dus(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <LCD_init_V2+0xa4>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <LCD_init_V2+0xa4>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <LCD_init_V2+0xa4>)
 80007f8:	220c      	movs	r2, #12
 80007fa:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80007fc:	4914      	ldr	r1, [pc, #80]	; (8000850 <LCD_init_V2+0xa4>)
 80007fe:	4816      	ldr	r0, [pc, #88]	; (8000858 <LCD_init_V2+0xac>)
 8000800:	f000 fd2c 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <LCD_init_V2+0xa4>)
 8000806:	220d      	movs	r2, #13
 8000808:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 800080a:	4911      	ldr	r1, [pc, #68]	; (8000850 <LCD_init_V2+0xa4>)
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <LCD_init_V2+0xac>)
 800080e:	f000 fd25 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <LCD_init_V2+0xa4>)
 8000814:	220e      	movs	r2, #14
 8000816:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8000818:	490d      	ldr	r1, [pc, #52]	; (8000850 <LCD_init_V2+0xa4>)
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <LCD_init_V2+0xac>)
 800081c:	f000 fd1e 	bl	800125c <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <LCD_init_V2+0xa4>)
 8000822:	220f      	movs	r2, #15
 8000824:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <LCD_init_V2+0xa4>)
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <LCD_init_V2+0xac>)
 800082a:	f000 fd17 	bl	800125c <MCAL_GPIO_init>
	dus(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f001 f95c 	bl	8001aec <dus>
	LCD_sendCommand_V2(LCD_GO_TO_HOME);
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff ff4d 	bl	80006d4 <LCD_sendCommand_V2>

	LCD_sendCommand_V2(LCD_TWO_LINES_FOUR_BITS_MODE);
 800083a:	2028      	movs	r0, #40	; 0x28
 800083c:	f7ff ff4a 	bl	80006d4 <LCD_sendCommand_V2>

	dus(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f001 f953 	bl	8001aec <dus>



#endif
	LCD_sendCommand_V2(LCD_CURSOR_ON);
 8000846:	200e      	movs	r0, #14
 8000848:	f7ff ff44 	bl	80006d4 <LCD_sendCommand_V2>

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000c0 	.word	0x200000c0
 8000854:	40011000 	.word	0x40011000
 8000858:	40010800 	.word	0x40010800

0800085c <LCD_clearScreen_V2>:
void LCD_clearScreen_V2(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	LCD_sendCommand_V2(LCD_CLEAR_COMMAND);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff37 	bl	80006d4 <LCD_sendCommand_V2>


}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <LCD_sendCharcter_V2>:

void LCD_sendCharcter_V2(usint8_t data){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_HIGH);
 8000876:	2201      	movs	r2, #1
 8000878:	210d      	movs	r1, #13
 800087a:	4830      	ldr	r0, [pc, #192]	; (800093c <LCD_sendCharcter_V2+0xd0>)
 800087c:	f000 fdd6 	bl	800142c <MCAL_write_PIN>
//	MCAL_write_PIN(CTRL_PORT, RW, LOGIC_LOW);

	dus(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f001 f933 	bl	8001aec <dus>
	dus(1);

	EN_PULS_V2();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,4));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	210c      	movs	r1, #12
 8000896:	482a      	ldr	r0, [pc, #168]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 8000898:	f000 fdc8 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,5));
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	210d      	movs	r1, #13
 80008ac:	4824      	ldr	r0, [pc, #144]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 80008ae:	f000 fdbd 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,6));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	099b      	lsrs	r3, r3, #6
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	210e      	movs	r1, #14
 80008c2:	481f      	ldr	r0, [pc, #124]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 80008c4:	f000 fdb2 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,7));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	09db      	lsrs	r3, r3, #7
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	210f      	movs	r1, #15
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 80008d4:	f000 fdaa 	bl	800142c <MCAL_write_PIN>
	EN_PULS_V2();
 80008d8:	f7ff fee8 	bl	80006ac <EN_PULS_V2>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,0));
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	210c      	movs	r1, #12
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 80008ea:	f000 fd9f 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,1));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	210d      	movs	r1, #13
 80008fe:	4810      	ldr	r0, [pc, #64]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 8000900:	f000 fd94 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,2));
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	210e      	movs	r1, #14
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 8000916:	f000 fd89 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,3));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	210f      	movs	r1, #15
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <LCD_sendCharcter_V2+0xd4>)
 800092c:	f000 fd7e 	bl	800142c <MCAL_write_PIN>
	EN_PULS_V2();
 8000930:	f7ff febc 	bl	80006ac <EN_PULS_V2>

#endif

}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40011000 	.word	0x40011000
 8000940:	40010800 	.word	0x40010800

08000944 <LCD_sendString_V2>:
void LCD_sendString_V2(char *data){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	usint8_t counter=0;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
	while(*data != 0){
 8000950:	e006      	b.n	8000960 <LCD_sendString_V2+0x1c>
		LCD_sendCharcter_V2(*data++);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff86 	bl	800086c <LCD_sendCharcter_V2>
	while(*data != 0){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f4      	bne.n	8000952 <LCD_sendString_V2+0xe>
	}
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <LCD_moveCURSER_V2>:
void LCD_moveCURSER_V2(unsigned char row,unsigned char col){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
	switch(row){
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d826      	bhi.n	80009d4 <LCD_moveCURSER_V2+0x64>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <LCD_moveCURSER_V2+0x1c>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009ab 	.word	0x080009ab
 8000994:	080009b9 	.word	0x080009b9
 8000998:	080009c7 	.word	0x080009c7
	case 0:
		LCD_sendCommand_V2(LCD_SET_CURSOR_LOCATION + col);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3b80      	subs	r3, #128	; 0x80
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe96 	bl	80006d4 <LCD_sendCommand_V2>
		break;
 80009a8:	e014      	b.n	80009d4 <LCD_moveCURSER_V2+0x64>
	case 1:
		LCD_sendCommand_V2(LCD_SET_CURSOR_LOCATION_2nd + col);
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	3b40      	subs	r3, #64	; 0x40
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe8f 	bl	80006d4 <LCD_sendCommand_V2>
		break;
 80009b6:	e00d      	b.n	80009d4 <LCD_moveCURSER_V2+0x64>

	case 2:
		LCD_sendCommand_V2(0x90+ col);
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	3b70      	subs	r3, #112	; 0x70
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe88 	bl	80006d4 <LCD_sendCommand_V2>
		break;
 80009c4:	e006      	b.n	80009d4 <LCD_moveCURSER_V2+0x64>
	case 3:
		LCD_sendCommand_V2(0xD0+ col);
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	3b30      	subs	r3, #48	; 0x30
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe81 	bl	80006d4 <LCD_sendCommand_V2>
		break;
 80009d2:	bf00      	nop

	}
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <Start_TX_RX>:
 *      Author: medoo
 */


#include "SPI_EEPROM.h"
void Start_TX_RX(Flag_source flag){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	7138      	strb	r0, [r7, #4]
	if(flag.RXNE_FLAG){

	}
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <EEPROM_readStatus>:
 SPI_Config_t SPI_config_v ={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_8,idle_0,first_clock,interrupt_DS,Start_TX_RX};


 uint8_t EEPROM_readStatus(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 	uint8_t	 data=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
 	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 80009fa:	2200      	movs	r2, #0
 80009fc:	2104      	movs	r1, #4
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <EEPROM_readStatus+0x3c>)
 8000a00:	f000 fd14 	bl	800142c <MCAL_write_PIN>
 	MCAL_SPI_SendData(SPI1, RDSR_Instruction);
 8000a04:	2105      	movs	r1, #5
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <EEPROM_readStatus+0x40>)
 8000a08:	f000 fe78 	bl	80016fc <MCAL_SPI_SendData>
 	MCAL_SPI_ReciveData(SPI1,&data);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <EEPROM_readStatus+0x40>)
 8000a12:	f000 fead 	bl	8001770 <MCAL_SPI_ReciveData>

 	MCAL_write_PIN(GPIOA, PIN_4, 1); //PA4
 8000a16:	2201      	movs	r2, #1
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <EEPROM_readStatus+0x3c>)
 8000a1c:	f000 fd06 	bl	800142c <MCAL_write_PIN>
 return (data );
 8000a20:	79fb      	ldrb	r3, [r7, #7]


 }
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40013000 	.word	0x40013000

08000a34 <SPI_EEPROM_init>:

void SPI_EEPROM_init(SPI_Reg *SPIx){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	MCAL_SPI_init(SPI1,&SPI_config_v);
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <SPI_EEPROM_init+0x4c>)
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <SPI_EEPROM_init+0x50>)
 8000a40:	f000 fd9c 	bl	800157c <MCAL_SPI_init>
	dms(10);
 8000a44:	200a      	movs	r0, #10
 8000a46:	f001 f865 	bl	8001b14 <dms>

	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <SPI_EEPROM_init+0x54>)
 8000a50:	f000 fcec 	bl	800142c <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, WRDI_Instruction);
 8000a54:	2104      	movs	r1, #4
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <SPI_EEPROM_init+0x50>)
 8000a58:	f000 fe50 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <SPI_EEPROM_init+0x54>)
 8000a62:	f000 fce3 	bl	800142c <MCAL_write_PIN>
	while((EEPROM_readStatus()& (1<<0)));
 8000a66:	bf00      	nop
 8000a68:	f7ff ffc2 	bl	80009f0 <EEPROM_readStatus>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f8      	bne.n	8000a68 <SPI_EEPROM_init+0x34>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	40013000 	.word	0x40013000
 8000a88:	40010800 	.word	0x40010800

08000a8c <SPI_EEPROM_WRITE>:
		The only restriction is that all of the bytes must reside
		in the same page.

 *
 *   */
void SPI_EEPROM_WRITE(SPI_Reg *SPIx,uint16_t addr,uint8_t *data,uint8_t data_len){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	817b      	strh	r3, [r7, #10]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	727b      	strb	r3, [r7, #9]

	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4824      	ldr	r0, [pc, #144]	; (8000b38 <SPI_EEPROM_WRITE+0xac>)
 8000aa6:	f000 fcc1 	bl	800142c <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, WREN_Instruction);
 8000aaa:	2106      	movs	r1, #6
 8000aac:	4823      	ldr	r0, [pc, #140]	; (8000b3c <SPI_EEPROM_WRITE+0xb0>)
 8000aae:	f000 fe25 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4820      	ldr	r0, [pc, #128]	; (8000b38 <SPI_EEPROM_WRITE+0xac>)
 8000ab8:	f000 fcb8 	bl	800142c <MCAL_write_PIN>
//	dms(30);
	/****************/
	MCAL_write_PIN(GPIOA, PIN_4, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <SPI_EEPROM_WRITE+0xac>)
 8000ac2:	f000 fcb3 	bl	800142c <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, WRITE_Instruction);
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	481c      	ldr	r0, [pc, #112]	; (8000b3c <SPI_EEPROM_WRITE+0xb0>)
 8000aca:	f000 fe17 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1, (uint8_t)(addr>>8));
 8000ace:	897b      	ldrh	r3, [r7, #10]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4818      	ldr	r0, [pc, #96]	; (8000b3c <SPI_EEPROM_WRITE+0xb0>)
 8000ada:	f000 fe0f 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1,(uint8_t) (addr &0xFF));
 8000ade:	897b      	ldrh	r3, [r7, #10]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <SPI_EEPROM_WRITE+0xb0>)
 8000ae6:	f000 fe09 	bl	80016fc <MCAL_SPI_SendData>
	for(int i=0;(i<data_len) &&(data_len <=64);i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e00a      	b.n	8000b06 <SPI_EEPROM_WRITE+0x7a>
		MCAL_SPI_SendData(SPI1,((uint8_t)(*data++)));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <SPI_EEPROM_WRITE+0xb0>)
 8000afc:	f000 fdfe 	bl	80016fc <MCAL_SPI_SendData>
	for(int i=0;(i<data_len) &&(data_len <=64);i++){
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	7a7b      	ldrb	r3, [r7, #9]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	da02      	bge.n	8000b14 <SPI_EEPROM_WRITE+0x88>
 8000b0e:	7a7b      	ldrb	r3, [r7, #9]
 8000b10:	2b40      	cmp	r3, #64	; 0x40
 8000b12:	d9ed      	bls.n	8000af0 <SPI_EEPROM_WRITE+0x64>

	}

	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2104      	movs	r1, #4
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <SPI_EEPROM_WRITE+0xac>)
 8000b1a:	f000 fc87 	bl	800142c <MCAL_write_PIN>
	while((EEPROM_readStatus()& (1<<0)));
 8000b1e:	bf00      	nop
 8000b20:	f7ff ff66 	bl	80009f0 <EEPROM_readStatus>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f8      	bne.n	8000b20 <SPI_EEPROM_WRITE+0x94>
////	MCAL_SPI_SendData(SPI1, 0x00);
//	MCAL_write_PIN(GPIOA, PIN_4, 1);
////


}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40013000 	.word	0x40013000

08000b40 <SPI_EEPROM_READ>:
 *	7. The read operation is terminated by raising the CS pin
 *
 * */


void SPI_EEPROM_READ(SPI_Reg *SPIx,uint16_t addr,uint8_t *data,uint8_t data_len){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	817b      	strh	r3, [r7, #10]
 8000b50:	4613      	mov	r3, r2
 8000b52:	727b      	strb	r3, [r7, #9]

	/****************/

	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <SPI_EEPROM_READ+0x70>)
 8000b5a:	f000 fc67 	bl	800142c <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, READ_Instruction);
 8000b5e:	2103      	movs	r1, #3
 8000b60:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <SPI_EEPROM_READ+0x74>)
 8000b62:	f000 fdcb 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1, (uint8_t)(addr<<8));
 8000b66:	2100      	movs	r1, #0
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <SPI_EEPROM_READ+0x74>)
 8000b6a:	f000 fdc7 	bl	80016fc <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1,(uint8_t) (addr &0xFF));
 8000b6e:	897b      	ldrh	r3, [r7, #10]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <SPI_EEPROM_READ+0x74>)
 8000b76:	f000 fdc1 	bl	80016fc <MCAL_SPI_SendData>
	for(uint8_t i=0;i<data_len;i++){
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	e009      	b.n	8000b94 <SPI_EEPROM_READ+0x54>
		MCAL_SPI_ReciveData(SPI1,data++);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <SPI_EEPROM_READ+0x74>)
 8000b8a:	f000 fdf1 	bl	8001770 <MCAL_SPI_ReciveData>
	for(uint8_t i=0;i<data_len;i++){
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	3301      	adds	r3, #1
 8000b92:	75fb      	strb	r3, [r7, #23]
 8000b94:	7dfa      	ldrb	r2, [r7, #23]
 8000b96:	7a7b      	ldrb	r3, [r7, #9]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d3f1      	bcc.n	8000b80 <SPI_EEPROM_READ+0x40>
	}
	MCAL_write_PIN(GPIOA, PIN_4, 1); //PA4
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <SPI_EEPROM_READ+0x70>)
 8000ba2:	f000 fc43 	bl	800142c <MCAL_write_PIN>


}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <Servo1_Entry_Gate_Init>:



//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	PIN_config PinCinfg;
	PinCinfg.PIN_number=PIN_8;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	80bb      	strh	r3, [r7, #4]
	PinCinfg.MODE = OUTPUT_PP;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	71bb      	strb	r3, [r7, #6]
	PinCinfg.SPEED =SPEED_10;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinCinfg);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <Servo1_Entry_Gate_Init+0x24>)
 8000bd0:	f000 fb44 	bl	800125c <MCAL_GPIO_init>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10d      	bne.n	8000c0c <Servo1_Entry_Gate+0x2c>
	{
		//servo1 Enter gate up +90
		MCAL_write_PIN(GPIOB, PIN_8, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <Servo1_Entry_Gate+0x58>)
 8000bf6:	f000 fc19 	bl	800142c <MCAL_write_PIN>
		dus(500);
 8000bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfe:	f000 ff75 	bl	8001aec <dus>
		MCAL_write_PIN(GPIOB, PIN_8, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <Servo1_Entry_Gate+0x58>)
 8000c08:	f000 fc10 	bl	800142c <MCAL_write_PIN>
	}
	if(Direction==Down)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d10d      	bne.n	8000c2e <Servo1_Entry_Gate+0x4e>
	{
		//servo1 Enter gate down -90
		MCAL_write_PIN(GPIOB, PIN_8, 1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2108      	movs	r1, #8
 8000c16:	4808      	ldr	r0, [pc, #32]	; (8000c38 <Servo1_Entry_Gate+0x58>)
 8000c18:	f000 fc08 	bl	800142c <MCAL_write_PIN>
		dus(1488);
 8000c1c:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000c20:	f000 ff64 	bl	8001aec <dus>
		MCAL_write_PIN(GPIOB, PIN_8, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2108      	movs	r1, #8
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <Servo1_Entry_Gate+0x58>)
 8000c2a:	f000 fbff 	bl	800142c <MCAL_write_PIN>
	}


}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	PIN_config PinCinfg;
	PinCinfg.PIN_number=PIN_9;
 8000c42:	2309      	movs	r3, #9
 8000c44:	80bb      	strh	r3, [r7, #4]
	PinCinfg.MODE = OUTPUT_PP;
 8000c46:	2304      	movs	r3, #4
 8000c48:	71bb      	strb	r3, [r7, #6]
	PinCinfg.SPEED =SPEED_10;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinCinfg);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <Servo2_Exit_Gate_Init+0x24>)
 8000c54:	f000 fb02 	bl	800125c <MCAL_GPIO_init>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10d      	bne.n	8000c90 <Servo2_Exit_Gate+0x2c>
	{
		//servo2 Exit gate up +90
		PIN_config PinCinfg;
		MCAL_write_PIN(GPIOB, PIN_9, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2109      	movs	r1, #9
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <Servo2_Exit_Gate+0x58>)
 8000c7a:	f000 fbd7 	bl	800142c <MCAL_write_PIN>
		dus(500);
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f000 ff33 	bl	8001aec <dus>
		MCAL_write_PIN(GPIOB, PIN_9, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2109      	movs	r1, #9
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <Servo2_Exit_Gate+0x58>)
 8000c8c:	f000 fbce 	bl	800142c <MCAL_write_PIN>
	}

	if(Direction == Down)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d10d      	bne.n	8000cb2 <Servo2_Exit_Gate+0x4e>
	{
		//servo2 Exit gate down -90
		MCAL_write_PIN(GPIOB, PIN_9, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2109      	movs	r1, #9
 8000c9a:	4808      	ldr	r0, [pc, #32]	; (8000cbc <Servo2_Exit_Gate+0x58>)
 8000c9c:	f000 fbc6 	bl	800142c <MCAL_write_PIN>
		dus(1488);
 8000ca0:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000ca4:	f000 ff22 	bl	8001aec <dus>
		MCAL_write_PIN(GPIOB, PIN_9, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2109      	movs	r1, #9
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <Servo2_Exit_Gate+0x58>)
 8000cae:	f000 fbbd 	bl	800142c <MCAL_write_PIN>
	}

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d854      	bhi.n	8000d7a <NVIC_ENABLE+0xba>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <NVIC_ENABLE+0x18>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000d19 	.word	0x08000d19
 8000cdc:	08000d27 	.word	0x08000d27
 8000ce0:	08000d35 	.word	0x08000d35
 8000ce4:	08000d43 	.word	0x08000d43
 8000ce8:	08000d51 	.word	0x08000d51
 8000cec:	08000d5f 	.word	0x08000d5f
 8000cf0:	08000d5f 	.word	0x08000d5f
 8000cf4:	08000d5f 	.word	0x08000d5f
 8000cf8:	08000d5f 	.word	0x08000d5f
 8000cfc:	08000d5f 	.word	0x08000d5f
 8000d00:	08000d6d 	.word	0x08000d6d
 8000d04:	08000d6d 	.word	0x08000d6d
 8000d08:	08000d6d 	.word	0x08000d6d
 8000d0c:	08000d6d 	.word	0x08000d6d
 8000d10:	08000d6d 	.word	0x08000d6d
 8000d14:	08000d6d 	.word	0x08000d6d
	case 0:
		NVIC_EXTI0_EN;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d22:	6013      	str	r3, [r2, #0]
		break;
 8000d24:	e029      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6013      	str	r3, [r2, #0]
		break;
 8000d32:	e022      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
		break;
 8000d40:	e01b      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	6013      	str	r3, [r2, #0]
		break;
 8000d4e:	e014      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
		break;
 8000d5c:	e00d      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <NVIC_ENABLE+0xc4>)
 8000d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d68:	6013      	str	r3, [r2, #0]
		break;
 8000d6a:	e006      	b.n	8000d7a <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <NVIC_ENABLE+0xc8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <NVIC_ENABLE+0xc8>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
break;
 8000d78:	bf00      	nop

	}
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000e104 	.word	0xe000e104

08000d8c <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d854      	bhi.n	8000e46 <NVIC_DISABLE+0xba>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <NVIC_DISABLE+0x18>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000de5 	.word	0x08000de5
 8000da8:	08000df3 	.word	0x08000df3
 8000dac:	08000e01 	.word	0x08000e01
 8000db0:	08000e0f 	.word	0x08000e0f
 8000db4:	08000e1d 	.word	0x08000e1d
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e2b 	.word	0x08000e2b
 8000dc0:	08000e2b 	.word	0x08000e2b
 8000dc4:	08000e2b 	.word	0x08000e2b
 8000dc8:	08000e2b 	.word	0x08000e2b
 8000dcc:	08000e39 	.word	0x08000e39
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000e39 	.word	0x08000e39
 8000dd8:	08000e39 	.word	0x08000e39
 8000ddc:	08000e39 	.word	0x08000e39
 8000de0:	08000e39 	.word	0x08000e39
	case 0:
		NVIC_EXTI0_D;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dee:	6013      	str	r3, [r2, #0]
		break;
 8000df0:	e029      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dfc:	6013      	str	r3, [r2, #0]
		break;
 8000dfe:	e022      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
		break;
 8000e0c:	e01b      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e18:	6013      	str	r3, [r2, #0]
		break;
 8000e1a:	e014      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
		break;
 8000e28:	e00d      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <NVIC_DISABLE+0xc4>)
 8000e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e34:	6013      	str	r3, [r2, #0]
		break;
 8000e36:	e006      	b.n	8000e46 <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <NVIC_DISABLE+0xc8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <NVIC_DISABLE+0xc8>)
 8000e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
break;
 8000e44:	bf00      	nop

	}
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000e104 	.word	0xe000e104

08000e58 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	891b      	ldrh	r3, [r3, #8]
 8000e82:	813b      	strh	r3, [r7, #8]
 8000e84:	2301      	movs	r3, #1
 8000e86:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f107 0208 	add.w	r2, r7, #8
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f9e2 	bl	800125c <MCAL_GPIO_init>
		//UPDATE THE ALTERNATIVE FUNC
		AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8000e98:	4a54      	ldr	r2, [pc, #336]	; (8000fec <MCAL_EXTI_init+0x194>)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	494f      	ldr	r1, [pc, #316]	; (8000fec <MCAL_EXTI_init+0x194>)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4002      	ands	r2, r0
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <MCAL_EXTI_init+0x194>)
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4949      	ldr	r1, [pc, #292]	; (8000ff0 <MCAL_EXTI_init+0x198>)
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d016      	beq.n	8000efc <MCAL_EXTI_init+0xa4>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4948      	ldr	r1, [pc, #288]	; (8000ff4 <MCAL_EXTI_init+0x19c>)
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d00f      	beq.n	8000ef8 <MCAL_EXTI_init+0xa0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4946      	ldr	r1, [pc, #280]	; (8000ff8 <MCAL_EXTI_init+0x1a0>)
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d008      	beq.n	8000ef4 <MCAL_EXTI_init+0x9c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4945      	ldr	r1, [pc, #276]	; (8000ffc <MCAL_EXTI_init+0x1a4>)
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d101      	bne.n	8000ef0 <MCAL_EXTI_init+0x98>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e006      	b.n	8000efe <MCAL_EXTI_init+0xa6>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e004      	b.n	8000efe <MCAL_EXTI_init+0xa6>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e002      	b.n	8000efe <MCAL_EXTI_init+0xa6>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <MCAL_EXTI_init+0xa6>
 8000efc:	2300      	movs	r3, #0
 8000efe:	7bb9      	ldrb	r1, [r7, #14]
 8000f00:	408b      	lsls	r3, r1
 8000f02:	4618      	mov	r0, r3
 8000f04:	4939      	ldr	r1, [pc, #228]	; (8000fec <MCAL_EXTI_init+0x194>)
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4302      	orrs	r2, r0
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <MCAL_EXTI_init+0xd8>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	8812      	ldrh	r2, [r2, #0]
 8000f20:	4611      	mov	r1, r2
 8000f22:	2201      	movs	r2, #1
 8000f24:	408a      	lsls	r2, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a35      	ldr	r2, [pc, #212]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	60d3      	str	r3, [r2, #12]
 8000f2e:	e029      	b.n	8000f84 <MCAL_EXTI_init+0x12c>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10b      	bne.n	8000f50 <MCAL_EXTI_init+0xf8>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	8812      	ldrh	r2, [r2, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	2201      	movs	r2, #1
 8000f44:	408a      	lsls	r2, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	6093      	str	r3, [r2, #8]
 8000f4e:	e019      	b.n	8000f84 <MCAL_EXTI_init+0x12c>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b1b      	ldrb	r3, [r3, #12]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d115      	bne.n	8000f84 <MCAL_EXTI_init+0x12c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	8812      	ldrh	r2, [r2, #0]
 8000f60:	4611      	mov	r1, r2
 8000f62:	2201      	movs	r2, #1
 8000f64:	408a      	lsls	r2, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	4a25      	ldr	r2, [pc, #148]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	8812      	ldrh	r2, [r2, #0]
 8000f76:	4611      	mov	r1, r2
 8000f78:	2201      	movs	r2, #1
 8000f7a:	408a      	lsls	r2, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6093      	str	r3, [r2, #8]


		}
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <MCAL_EXTI_init+0x1ac>)
 8000f90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b5b      	ldrb	r3, [r3, #13]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d111      	bne.n	8000fc0 <MCAL_EXTI_init+0x168>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	8812      	ldrh	r2, [r2, #0]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	408a      	lsls	r2, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe81 	bl	8000cc0 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 8000fbe:	e011      	b.n	8000fe4 <MCAL_EXTI_init+0x18c>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	8812      	ldrh	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	2201      	movs	r2, #1
 8000fcc:	408a      	lsls	r2, r1
 8000fce:	43d2      	mvns	r2, r2
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <MCAL_EXTI_init+0x1a8>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fed4 	bl	8000d8c <NVIC_DISABLE>
	}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40010400 	.word	0x40010400
 8001004:	200000c4 	.word	0x200000c4

08001008 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <EXTI0_IRQHandler+0x1c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <EXTI0_IRQHandler+0x20>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <EXTI0_IRQHandler+0x20>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6153      	str	r3, [r2, #20]
	}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000c4 	.word	0x200000c4
 8001028:	40010400 	.word	0x40010400

0800102c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <EXTI1_IRQHandler+0x1c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <EXTI1_IRQHandler+0x20>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <EXTI1_IRQHandler+0x20>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6153      	str	r3, [r2, #20]

	}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000c4 	.word	0x200000c4
 800104c:	40010400 	.word	0x40010400

08001050 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <EXTI2_IRQHandler+0x1c>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <EXTI2_IRQHandler+0x20>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <EXTI2_IRQHandler+0x20>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6153      	str	r3, [r2, #20]

	}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000c4 	.word	0x200000c4
 8001070:	40010400 	.word	0x40010400

08001074 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <EXTI3_IRQHandler+0x1c>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <EXTI3_IRQHandler+0x20>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <EXTI3_IRQHandler+0x20>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6153      	str	r3, [r2, #20]

	}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000c4 	.word	0x200000c4
 8001094:	40010400 	.word	0x40010400

08001098 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <EXTI4_IRQHandler+0x1c>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <EXTI4_IRQHandler+0x20>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <EXTI4_IRQHandler+0x20>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6153      	str	r3, [r2, #20]

	}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000c4 	.word	0x200000c4
 80010b8:	40010400 	.word	0x40010400

080010bc <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <EXTI9_5_IRQHandler+0x22>
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	4a22      	ldr	r2, [pc, #136]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	6153      	str	r3, [r2, #20]
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <EXTI9_5_IRQHandler+0xa4>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <EXTI9_5_IRQHandler+0x40>
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <EXTI9_5_IRQHandler+0xa4>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <EXTI9_5_IRQHandler+0x5e>
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a13      	ldr	r2, [pc, #76]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <EXTI9_5_IRQHandler+0xa4>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <EXTI9_5_IRQHandler+0x7c>
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <EXTI9_5_IRQHandler+0xa4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <EXTI9_5_IRQHandler+0x9a>
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <EXTI9_5_IRQHandler+0xa0>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6153      	str	r3, [r2, #20]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <EXTI9_5_IRQHandler+0xa4>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	4798      	blx	r3
	}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40010400 	.word	0x40010400
 8001160:	200000c4 	.word	0x200000c4

08001164 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <EXTI15_10_IRQHandler+0x22>
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	4a29      	ldr	r2, [pc, #164]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6153      	str	r3, [r2, #20]
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <EXTI15_10_IRQHandler+0x40>
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <EXTI15_10_IRQHandler+0x5e>
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ba:	6153      	str	r3, [r2, #20]
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <EXTI15_10_IRQHandler+0x7c>
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <EXTI15_10_IRQHandler+0x9a>
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f6:	6153      	str	r3, [r2, #20]
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <EXTI15_10_IRQHandler+0xb8>
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <EXTI15_10_IRQHandler+0xbc>)
 8001210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001214:	6153      	str	r3, [r2, #20]
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <EXTI15_10_IRQHandler+0xc0>)
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	4798      	blx	r3

	}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010400 	.word	0x40010400
 8001224:	200000c4 	.word	0x200000c4

08001228 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d803      	bhi.n	8001240 <Get_PIN_Positon+0x18>
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	b29b      	uxth	r3, r3
 800123e:	e006      	b.n	800124e <Get_PIN_Positon+0x26>
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	b29b      	uxth	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	b29b      	uxth	r3, r3
 800124e:	81fb      	strh	r3, [r7, #14]
return positon;
 8001250:	89fb      	ldrh	r3, [r7, #14]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <MCAL_GPIO_init+0x1b8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d106      	bne.n	800127c <MCAL_GPIO_init+0x20>
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a69      	ldr	r2, [pc, #420]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	e02a      	b.n	80012d2 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a67      	ldr	r2, [pc, #412]	; (800141c <MCAL_GPIO_init+0x1c0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d106      	bne.n	8001292 <MCAL_GPIO_init+0x36>
 8001284:	4b64      	ldr	r3, [pc, #400]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a63      	ldr	r2, [pc, #396]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	e01f      	b.n	80012d2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a62      	ldr	r2, [pc, #392]	; (8001420 <MCAL_GPIO_init+0x1c4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d106      	bne.n	80012a8 <MCAL_GPIO_init+0x4c>
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a5e      	ldr	r2, [pc, #376]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	e014      	b.n	80012d2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a5e      	ldr	r2, [pc, #376]	; (8001424 <MCAL_GPIO_init+0x1c8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d106      	bne.n	80012be <MCAL_GPIO_init+0x62>
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	e009      	b.n	80012d2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a59      	ldr	r2, [pc, #356]	; (8001428 <MCAL_GPIO_init+0x1cc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d105      	bne.n	80012d2 <MCAL_GPIO_init+0x76>
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4a53      	ldr	r2, [pc, #332]	; (8001418 <MCAL_GPIO_init+0x1bc>)
 80012cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d0:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d801      	bhi.n	80012e0 <MCAL_GPIO_init+0x84>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	e001      	b.n	80012e4 <MCAL_GPIO_init+0x88>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3304      	adds	r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff9b 	bl	8001228 <Get_PIN_Positon>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	230f      	movs	r3, #15
 80012f8:	4093      	lsls	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	401a      	ands	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <MCAL_GPIO_init+0xd2>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d009      	beq.n	800132e <MCAL_GPIO_init+0xd2>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d004      	beq.n	800132e <MCAL_GPIO_init+0xd2>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d156      	bne.n	80013dc <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d11c      	bne.n	8001372 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff72 	bl	8001228 <Get_PIN_Positon>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	2308      	movs	r3, #8
 800134a:	fa03 f202 	lsl.w	r2, r3, r2
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	2301      	movs	r3, #1
 8001362:	4093      	lsls	r3, r2
 8001364:	43da      	mvns	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8001370:	e04c      	b.n	800140c <MCAL_GPIO_init+0x1b0>
		}

		else if(PINx->MODE == INPUT_PU){
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d11c      	bne.n	80013b6 <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff50 	bl	8001228 <Get_PIN_Positon>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	2308      	movs	r3, #8
 800138e:	fa03 f202 	lsl.w	r2, r3, r2
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	2301      	movs	r3, #1
 80013a6:	fa03 f202 	lsl.w	r2, r3, r2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80013b4:	e02a      	b.n	800140c <MCAL_GPIO_init+0x1b0>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	789b      	ldrb	r3, [r3, #2]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	009c      	lsls	r4, r3, #2
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff2f 	bl	8001228 <Get_PIN_Positon>
 80013ca:	4603      	mov	r3, r0
 80013cc:	fa04 f203 	lsl.w	r2, r4, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80013da:	e017      	b.n	800140c <MCAL_GPIO_init+0x1b0>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3b04      	subs	r3, #4
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	78d2      	ldrb	r2, [r2, #3]
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	ea43 0402 	orr.w	r4, r3, r2
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff16 	bl	8001228 <Get_PIN_Positon>
 80013fc:	4603      	mov	r3, r0
 80013fe:	fa04 f203 	lsl.w	r2, r4, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	431a      	orrs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	601a      	str	r2, [r3, #0]

	}

}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	40010800 	.word	0x40010800
 8001418:	40021000 	.word	0x40021000
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	40011800 	.word	0x40011800

0800142c <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	2301      	movs	r3, #1
 800144c:	fa03 f202 	lsl.w	r2, r3, r2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60da      	str	r2, [r3, #12]

	}



}
 800145a:	e00a      	b.n	8001472 <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	b29b      	uxth	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	2301      	movs	r3, #1
 8001464:	4093      	lsls	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	401a      	ands	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60da      	str	r2, [r3, #12]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <MCAL_write_PORT>:

void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR=value;
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60da      	str	r2, [r3, #12]


}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <MCAL_Read_PIN>:
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]

	return (GPIOx->IDR & 1<<PIN_Number);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	2301      	movs	r3, #1
 80014b6:	408b      	lsls	r3, r1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4013      	ands	r3, r2
 80014bc:	b29b      	uxth	r3, r3

}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MCAL_GET_SYS_CLCK+0x30>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d006      	beq.n	80014e8 <MCAL_GET_SYS_CLCK+0x20>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d302      	bcc.n	80014e4 <MCAL_GET_SYS_CLCK+0x1c>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d004      	beq.n	80014ec <MCAL_GET_SYS_CLCK+0x24>
 80014e2:	e005      	b.n	80014f0 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <MCAL_GET_SYS_CLCK+0x34>)
 80014e6:	e003      	b.n	80014f0 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MCAL_GET_SYS_CLCK+0x38>)
 80014ea:	e001      	b.n	80014f0 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <MCAL_GET_SYS_CLCK+0x38>)
 80014ee:	e7ff      	b.n	80014f0 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	007a1200 	.word	0x007a1200
 8001500:	00f42400 	.word	0x00f42400

08001504 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8001508:	f7ff ffde 	bl	80014c8 <MCAL_GET_SYS_CLCK>
 800150c:	4601      	mov	r1, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <MCAL_GET_H_CLCK+0x20>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <MCAL_GET_H_CLCK+0x24>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	2000001c 	.word	0x2000001c

0800152c <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8001530:	f7ff ffe8 	bl	8001504 <MCAL_GET_H_CLCK>
 8001534:	4601      	mov	r1, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <MCAL_GET_PCLCK1+0x20>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <MCAL_GET_PCLCK1+0x24>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	fa21 f303 	lsr.w	r3, r1, r3

}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	2000001c 	.word	0x2000001c

08001554 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8001558:	f7ff ffd4 	bl	8001504 <MCAL_GET_H_CLCK>
 800155c:	4601      	mov	r1, r0
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <MCAL_GET_PCLCK2+0x20>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	0adb      	lsrs	r3, r3, #11
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <MCAL_GET_PCLCK2+0x24>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8001570:	4618      	mov	r0, r3
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	2000001c 	.word	0x2000001c

0800157c <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <MCAL_SPI_init+0x16c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10c      	bne.n	80015a8 <MCAL_SPI_init+0x2c>
 800158e:	4a57      	ldr	r2, [pc, #348]	; (80016ec <MCAL_SPI_init+0x170>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4614      	mov	r4, r2
 8001594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800159a:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <MCAL_SPI_init+0x174>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <MCAL_SPI_init+0x174>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	e011      	b.n	80015cc <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <MCAL_SPI_init+0x178>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d10d      	bne.n	80015cc <MCAL_SPI_init+0x50>
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <MCAL_SPI_init+0x170>)
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	f103 0410 	add.w	r4, r3, #16
 80015b8:	4613      	mov	r3, r2
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <MCAL_SPI_init+0x174>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <MCAL_SPI_init+0x174>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ca:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	789b      	ldrb	r3, [r3, #2]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	8813      	ldrh	r3, [r2, #0]
 80015da:	f361 23cb 	bfi	r3, r1, #11, #1
 80015de:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	799b      	ldrb	r3, [r3, #6]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b2d9      	uxtb	r1, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	8813      	ldrh	r3, [r2, #0]
 80015ee:	f361 0341 	bfi	r3, r1, #1, #1
 80015f2:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	79db      	ldrb	r3, [r3, #7]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	8813      	ldrh	r3, [r2, #0]
 8001602:	f361 0300 	bfi	r3, r1, #0, #1
 8001606:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	8813      	ldrh	r3, [r2, #0]
 8001616:	f361 13c7 	bfi	r3, r1, #7, #1
 800161a:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <MCAL_SPI_init+0xb4>
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	8813      	ldrh	r3, [r2, #0]
 8001628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162c:	8013      	strh	r3, [r2, #0]
 800162e:	e01c      	b.n	800166a <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10a      	bne.n	800164e <MCAL_SPI_init+0xd2>
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	8813      	ldrh	r3, [r2, #0]
 800163c:	f36f 2349 	bfc	r3, #9, #1
 8001640:	8013      	strh	r3, [r2, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	7913      	ldrb	r3, [r2, #4]
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	7113      	strb	r3, [r2, #4]
 800164c:	e00d      	b.n	800166a <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d109      	bne.n	800166a <MCAL_SPI_init+0xee>
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	8813      	ldrh	r3, [r2, #0]
 800165a:	f36f 2349 	bfc	r3, #9, #1
 800165e:	8013      	strh	r3, [r2, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	7913      	ldrb	r3, [r2, #4]
 8001664:	f36f 0382 	bfc	r3, #2, #1
 8001668:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	b2d9      	uxtb	r1, r3
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	8813      	ldrh	r3, [r2, #0]
 8001678:	f361 0382 	bfi	r3, r1, #2, #1
 800167c:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	8813      	ldrh	r3, [r2, #0]
 800168c:	f361 03c5 	bfi	r3, r1, #3, #3
 8001690:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d114      	bne.n	80016c4 <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MCAL_SPI_init+0x16c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d106      	bne.n	80016b0 <MCAL_SPI_init+0x134>
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MCAL_SPI_init+0x17c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <MCAL_SPI_init+0x17c>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e009      	b.n	80016c4 <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <MCAL_SPI_init+0x178>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d105      	bne.n	80016c4 <MCAL_SPI_init+0x148>
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MCAL_SPI_init+0x17c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <MCAL_SPI_init+0x17c>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f88f 	bl	80017e8 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	8813      	ldrh	r3, [r2, #0]
 80016d8:	f361 1386 	bfi	r3, r1, #6, #1
 80016dc:	8013      	strh	r3, [r2, #0]




}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40013000 	.word	0x40013000
 80016ec:	2000009c 	.word	0x2000009c
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40003800 	.word	0x40003800
 80016f8:	e000e104 	.word	0xe000e104

080016fc <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <MCAL_SPI_SendData+0x64>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d102      	bne.n	800171a <MCAL_SPI_SendData+0x1e>
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MCAL_SPI_SendData+0x68>)
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e005      	b.n	8001726 <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MCAL_SPI_SendData+0x6c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <MCAL_SPI_SendData+0x2a>
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <MCAL_SPI_SendData+0x70>)
 8001724:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	7a1b      	ldrb	r3, [r3, #8]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7913      	ldrb	r3, [r2, #4]
 8001732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001736:	7113      	strb	r3, [r2, #4]
 8001738:	e007      	b.n	800174a <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 800173a:	bf00      	nop
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f8      	beq.n	800173c <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	b2db      	uxtb	r3, r3

}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40013000 	.word	0x40013000
 8001764:	2000009c 	.word	0x2000009c
 8001768:	40003800 	.word	0x40003800
 800176c:	200000ac 	.word	0x200000ac

08001770 <MCAL_SPI_ReciveData>:
void MCAL_SPI_ReciveData(SPI_Reg *SPIx,uint8_t *data){
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	SPI_Config_t *L_P_config_t=NULL;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <MCAL_SPI_ReciveData+0x68>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <MCAL_SPI_ReciveData+0x1c>
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MCAL_SPI_ReciveData+0x6c>)
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e005      	b.n	8001798 <MCAL_SPI_ReciveData+0x28>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <MCAL_SPI_ReciveData+0x70>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <MCAL_SPI_ReciveData+0x28>
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MCAL_SPI_ReciveData+0x74>)
 8001796:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	SPIx->DR_reg.ALL_REG=0x00;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]

	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	7a1b      	ldrb	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <MCAL_SPI_ReciveData+0x42>
		SPIx->SPI_CR2.Bit_Name.RXNEIE = 1;
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	7913      	ldrb	r3, [r2, #4]
 80017aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ae:	7113      	strb	r3, [r2, #4]
 80017b0:	e007      	b.n	80017c2 <MCAL_SPI_ReciveData+0x52>
	}else{
		while(!SPIx->SPI_SR.Bit_Name.RXNE);
 80017b2:	bf00      	nop
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f8      	beq.n	80017b4 <MCAL_SPI_ReciveData+0x44>
	}
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	701a      	strb	r2, [r3, #0]


}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40013000 	.word	0x40013000
 80017dc:	2000009c 	.word	0x2000009c
 80017e0:	40003800 	.word	0x40003800
 80017e4:	200000ac 	.word	0x200000ac

080017e8 <MCAL_SET_GPIO>:

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <MCAL_SET_GPIO+0x1c0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d169      	bne.n	80018d0 <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <MCAL_SET_GPIO+0x1c4>)
 80017fe:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <MCAL_SET_GPIO+0x1c8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <MCAL_SET_GPIO+0x1c8>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	791b      	ldrb	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d108      	bne.n	8001826 <MCAL_SET_GPIO+0x3e>
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <MCAL_SET_GPIO+0x1cc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <MCAL_SET_GPIO+0x1c0>)
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	8013      	strh	r3, [r2, #0]
 8001824:	e00e      	b.n	8001844 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	791b      	ldrb	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d103      	bne.n	8001836 <MCAL_SET_GPIO+0x4e>
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <MCAL_SET_GPIO+0x1d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	e006      	b.n	8001844 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d102      	bne.n	8001844 <MCAL_SET_GPIO+0x5c>
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <MCAL_SET_GPIO+0x1d4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	485d      	ldr	r0, [pc, #372]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 800184c:	f7ff fd06 	bl	800125c <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d103      	bne.n	8001860 <MCAL_SET_GPIO+0x78>
 8001858:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <MCAL_SET_GPIO+0x1dc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e006      	b.n	800186e <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <MCAL_SET_GPIO+0x86>
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <MCAL_SET_GPIO+0x1e0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	4852      	ldr	r0, [pc, #328]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 8001876:	f7ff fcf1 	bl	800125c <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d103      	bne.n	800188a <MCAL_SET_GPIO+0xa2>
 8001882:	4b52      	ldr	r3, [pc, #328]	; (80019cc <MCAL_SET_GPIO+0x1e4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	e006      	b.n	8001898 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <MCAL_SET_GPIO+0xb0>
 8001892:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <MCAL_SET_GPIO+0x1e8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	4848      	ldr	r0, [pc, #288]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 80018a0:	f7ff fcdc 	bl	800125c <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d103      	bne.n	80018b4 <MCAL_SET_GPIO+0xcc>
 80018ac:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <MCAL_SET_GPIO+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	e006      	b.n	80018c2 <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <MCAL_SET_GPIO+0xda>
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <MCAL_SET_GPIO+0x1f0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	483d      	ldr	r0, [pc, #244]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 80018ca:	f7ff fcc7 	bl	800125c <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 80018ce:	e067      	b.n	80019a0 <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a42      	ldr	r2, [pc, #264]	; (80019dc <MCAL_SET_GPIO+0x1f4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d163      	bne.n	80019a0 <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <MCAL_SET_GPIO+0x1f8>)
 80018da:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <MCAL_SET_GPIO+0x1c8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <MCAL_SET_GPIO+0x1c8>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <MCAL_SET_GPIO+0x110>
 80018f0:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <MCAL_SET_GPIO+0x1fc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	e00e      	b.n	8001916 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d103      	bne.n	8001908 <MCAL_SET_GPIO+0x120>
 8001900:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <MCAL_SET_GPIO+0x1fc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	e006      	b.n	8001916 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d102      	bne.n	8001916 <MCAL_SET_GPIO+0x12e>
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <MCAL_SET_GPIO+0x200>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60bb      	str	r3, [r7, #8]
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 800191e:	f7ff fc9d 	bl	800125c <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d103      	bne.n	8001932 <MCAL_SET_GPIO+0x14a>
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <MCAL_SET_GPIO+0x204>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	e006      	b.n	8001940 <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <MCAL_SET_GPIO+0x158>
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <MCAL_SET_GPIO+0x208>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60bb      	str	r3, [r7, #8]
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	481e      	ldr	r0, [pc, #120]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 8001948:	f7ff fc88 	bl	800125c <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d103      	bne.n	800195c <MCAL_SET_GPIO+0x174>
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <MCAL_SET_GPIO+0x20c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	e006      	b.n	800196a <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <MCAL_SET_GPIO+0x182>
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MCAL_SET_GPIO+0x210>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60bb      	str	r3, [r7, #8]
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4619      	mov	r1, r3
 8001970:	4813      	ldr	r0, [pc, #76]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 8001972:	f7ff fc73 	bl	800125c <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d103      	bne.n	8001986 <MCAL_SET_GPIO+0x19e>
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MCAL_SET_GPIO+0x214>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	e006      	b.n	8001994 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <MCAL_SET_GPIO+0x1ac>
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MCAL_SET_GPIO+0x218>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60bb      	str	r3, [r7, #8]
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4619      	mov	r1, r3
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <MCAL_SET_GPIO+0x1d8>)
 800199c:	f7ff fc5e 	bl	800125c <MCAL_GPIO_init>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013000 	.word	0x40013000
 80019ac:	2000009c 	.word	0x2000009c
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08002a60 	.word	0x08002a60
 80019b8:	08002a64 	.word	0x08002a64
 80019bc:	08002a68 	.word	0x08002a68
 80019c0:	40010800 	.word	0x40010800
 80019c4:	08002a6c 	.word	0x08002a6c
 80019c8:	08002a70 	.word	0x08002a70
 80019cc:	08002a74 	.word	0x08002a74
 80019d0:	08002a78 	.word	0x08002a78
 80019d4:	08002a7c 	.word	0x08002a7c
 80019d8:	08002a80 	.word	0x08002a80
 80019dc:	40003800 	.word	0x40003800
 80019e0:	200000ac 	.word	0x200000ac
 80019e4:	08002a84 	.word	0x08002a84
 80019e8:	08002a88 	.word	0x08002a88
 80019ec:	08002a8c 	.word	0x08002a8c
 80019f0:	08002a90 	.word	0x08002a90
 80019f4:	08002a94 	.word	0x08002a94
 80019f8:	08002a98 	.word	0x08002a98
 80019fc:	08002a9c 	.word	0x08002a9c
 8001a00:	08002aa0 	.word	0x08002aa0

08001a04 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4905      	ldr	r1, [pc, #20]	; (8001a24 <SPI1_IRQHandler+0x20>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f80c 	bl	8001a2c <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SPI1_IRQHandler+0x24>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	7938      	ldrb	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40013000 	.word	0x40013000
 8001a28:	2000009c 	.word	0x2000009c

08001a2c <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00f      	beq.n	8001a64 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	7813      	ldrb	r3, [r2, #0]
 8001a48:	f36f 0300 	bfc	r3, #0, #1
 8001a4c:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	7813      	ldrb	r3, [r2, #0]
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	7913      	ldrb	r3, [r2, #4]
 8001a5c:	f36f 1386 	bfc	r3, #6, #1
 8001a60:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8001a62:	e015      	b.n	8001a90 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	7813      	ldrb	r3, [r2, #0]
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	7813      	ldrb	r3, [r2, #0]
 8001a80:	f36f 0341 	bfc	r3, #1, #1
 8001a84:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	7913      	ldrb	r3, [r2, #4]
 8001a8a:	f36f 13c7 	bfc	r3, #7, #1
 8001a8e:	7113      	strb	r3, [r2, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <Timer2_init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <Timer2_init+0x40>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <Timer2_init+0x44>)
 8001aae:	2207      	movs	r2, #7
 8001ab0:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <Timer2_init+0x48>)
 8001ab4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ab8:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8001aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8001aca:	bf00      	nop
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <Timer2_init+0x4c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0fb      	beq.n	8001acc <Timer2_init+0x30>
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	4002101c 	.word	0x4002101c
 8001ae0:	40000028 	.word	0x40000028
 8001ae4:	4000002c 	.word	0x4000002c
 8001ae8:	40000010 	.word	0x40000010

08001aec <dus>:

void dus(int us)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <dus+0x24>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8001afa:	bf00      	nop
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <dus+0x24>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3fa      	bcc.n	8001afc <dus+0x10>
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40000024 	.word	0x40000024

08001b14 <dms>:

void dms(int ms)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	int i=0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e006      	b.n	8001b34 <dms+0x20>
	{
		dus(1000);
 8001b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2a:	f7ff ffdf 	bl	8001aec <dus>
	for(i=0;i<ms;i++)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf4      	blt.n	8001b26 <dms+0x12>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4aa9      	ldr	r2, [pc, #676]	; (8001df8 <MCAL_USART_init+0x2b4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10c      	bne.n	8001b70 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8001b56:	4aa9      	ldr	r2, [pc, #676]	; (8001dfc <MCAL_USART_init+0x2b8>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8001b62:	4ba7      	ldr	r3, [pc, #668]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4aa6      	ldr	r2, [pc, #664]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	e024      	b.n	8001bba <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4aa4      	ldr	r2, [pc, #656]	; (8001e04 <MCAL_USART_init+0x2c0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d10e      	bne.n	8001b96 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8001b78:	4ba0      	ldr	r3, [pc, #640]	; (8001dfc <MCAL_USART_init+0x2b8>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	f103 0410 	add.w	r4, r3, #16
 8001b80:	4613      	mov	r3, r2
 8001b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8001b88:	4b9d      	ldr	r3, [pc, #628]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a9c      	ldr	r2, [pc, #624]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b92:	61d3      	str	r3, [r2, #28]
 8001b94:	e011      	b.n	8001bba <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <MCAL_USART_init+0x2c4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10d      	bne.n	8001bba <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 8001b9e:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <MCAL_USART_init+0x2b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	f103 0420 	add.w	r4, r3, #32
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001baa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 8001bae:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a93      	ldr	r2, [pc, #588]	; (8001e00 <MCAL_USART_init+0x2bc>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	7912      	ldrb	r2, [r2, #4]
 8001bce:	0312      	lsls	r2, r2, #12
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	79d2      	ldrb	r2, [r2, #7]
 8001bde:	0312      	lsls	r2, r2, #12
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	7a5b      	ldrb	r3, [r3, #9]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f043 0208 	orr.w	r2, r3, #8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f043 0204 	orr.w	r2, r3, #4
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7a1b      	ldrb	r3, [r3, #8]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d826      	bhi.n	8001c5c <MCAL_USART_init+0x118>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <MCAL_USART_init+0xd0>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c33 	.word	0x08001c33
 8001c1c:	08001c41 	.word	0x08001c41
 8001c20:	08001c4f 	.word	0x08001c4f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	615a      	str	r2, [r3, #20]
		break;
 8001c30:	e014      	b.n	8001c5c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	615a      	str	r2, [r3, #20]
		break;
 8001c3e:	e00d      	b.n	8001c5c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	615a      	str	r2, [r3, #20]
		break;
 8001c4c:	e006      	b.n	8001c5c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	615a      	str	r2, [r3, #20]
		break;
 8001c5a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	7952      	ldrb	r2, [r2, #5]
 8001c64:	0252      	lsls	r2, r2, #9
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	799b      	ldrb	r3, [r3, #6]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d125      	bne.n	8001cc0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <MCAL_USART_init+0x2b4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d106      	bne.n	8001c8a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8001c7c:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a62      	ldr	r2, [pc, #392]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e014      	b.n	8001cb4 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <MCAL_USART_init+0x2c0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d106      	bne.n	8001ca0 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8001c92:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e009      	b.n	8001cb4 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <MCAL_USART_init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d105      	bne.n	8001cb4 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8001ca8:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a57      	ldr	r2, [pc, #348]	; (8001e0c <MCAL_USART_init+0x2c8>)
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <MCAL_USART_init+0x2b4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12d      	bne.n	8001d24 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8001cc8:	f7ff fc44 	bl	8001554 <MCAL_GET_PCLCK2>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	011c      	lsls	r4, r3, #4
 8001cda:	f7ff fc3b 	bl	8001554 <MCAL_GET_PCLCK2>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cf4:	f7ff fc2e 	bl	8001554 <MCAL_GET_PCLCK2>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	1aeb      	subs	r3, r5, r3
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <MCAL_USART_init+0x2cc>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	ea44 0203 	orr.w	r2, r4, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e062      	b.n	8001dea <MCAL_USART_init+0x2a6>
			}else if(USARTx==USART2){
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a37      	ldr	r2, [pc, #220]	; (8001e04 <MCAL_USART_init+0x2c0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d12d      	bne.n	8001d88 <MCAL_USART_init+0x244>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001d2c:	f7ff fbfe 	bl	800152c <MCAL_GET_PCLCK1>
 8001d30:	4602      	mov	r2, r0
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	011c      	lsls	r4, r3, #4
 8001d3e:	f7ff fbf5 	bl	800152c <MCAL_GET_PCLCK1>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d58:	f7ff fbe8 	bl	800152c <MCAL_GET_PCLCK1>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	1aeb      	subs	r3, r5, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <MCAL_USART_init+0x2cc>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	ea44 0203 	orr.w	r2, r4, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	e030      	b.n	8001dea <MCAL_USART_init+0x2a6>

		}else if(USARTx==USART3){
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <MCAL_USART_init+0x2c4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12c      	bne.n	8001dea <MCAL_USART_init+0x2a6>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001d90:	f7ff fbcc 	bl	800152c <MCAL_GET_PCLCK1>
 8001d94:	4602      	mov	r2, r0
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	011c      	lsls	r4, r3, #4
 8001da2:	f7ff fbc3 	bl	800152c <MCAL_GET_PCLCK1>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009a      	lsls	r2, r3, #2
 8001db0:	441a      	add	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fbb2 f5f3 	udiv	r5, r2, r3
 8001dbc:	f7ff fbb6 	bl	800152c <MCAL_GET_PCLCK1>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	2264      	movs	r2, #100	; 0x64
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	1aeb      	subs	r3, r5, r3
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <MCAL_USART_init+0x2cc>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	ea44 0203 	orr.w	r2, r4, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8a2 	bl	8001f34 <SET_GPIO>
	}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	20000100 	.word	0x20000100
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40004400 	.word	0x40004400
 8001e08:	40004800 	.word	0x40004800
 8001e0c:	e000e104 	.word	0xe000e104
 8001e10:	51eb851f 	.word	0x51eb851f

08001e14 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <MCAL_USART_SendData+0x78>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d102      	bne.n	8001e32 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MCAL_USART_SendData+0x7c>)
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e00c      	b.n	8001e4c <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <MCAL_USART_SendData+0x80>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d102      	bne.n	8001e40 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MCAL_USART_SendData+0x84>)
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e005      	b.n	8001e4c <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <MCAL_USART_SendData+0x88>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MCAL_USART_SendData+0x8c>)
 8001e4a:	60fb      	str	r3, [r7, #12]
	}

	if(L_P_config_pin->MEC ==POLLING){
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	799b      	ldrb	r3, [r3, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <MCAL_USART_SendData+0x50>
		while(!(USARTx->SR & (1<<7)));
 8001e54:	bf00      	nop
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f9      	beq.n	8001e56 <MCAL_USART_SendData+0x42>
 8001e62:	e002      	b.n	8001e6a <MCAL_USART_SendData+0x56>
	}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	799b      	ldrb	r3, [r3, #6]
 8001e68:	2b01      	cmp	r3, #1
	}else if(L_P_config_pin->MEC ==DMA){ // will modified later

	}

	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <MCAL_USART_SendData+0x66>
	{
		USARTx->DR =(data & 0x1FF);
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =(data & 0xFF);

	}

}
 8001e78:	e002      	b.n	8001e80 <MCAL_USART_SendData+0x6c>
		USARTx->DR =(data & 0xFF);
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	20000100 	.word	0x20000100
 8001e94:	40004400 	.word	0x40004400
 8001e98:	20000110 	.word	0x20000110
 8001e9c:	40004800 	.word	0x40004800
 8001ea0:	20000120 	.word	0x20000120

08001ea4 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <MCAL_USART_ReciveData+0x78>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d102      	bne.n	8001ebe <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MCAL_USART_ReciveData+0x7c>)
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e00c      	b.n	8001ed8 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <MCAL_USART_ReciveData+0x80>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d102      	bne.n	8001ecc <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MCAL_USART_ReciveData+0x84>)
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e005      	b.n	8001ed8 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <MCAL_USART_ReciveData+0x88>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MCAL_USART_ReciveData+0x8c>)
 8001ed6:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	799b      	ldrb	r3, [r3, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 8001ee0:	bf00      	nop
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f9      	beq.n	8001ee2 <MCAL_USART_ReciveData+0x3e>
 8001eee:	e002      	b.n	8001ef6 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	795b      	ldrb	r3, [r3, #5]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <MCAL_USART_ReciveData+0x62>
			return USARTx->DR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	e004      	b.n	8001f10 <MCAL_USART_ReciveData+0x6c>
		}else{
			return (USARTx->DR &0xFF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	b29b      	uxth	r3, r3

		}

}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	20000100 	.word	0x20000100
 8001f24:	40004400 	.word	0x40004400
 8001f28:	20000110 	.word	0x20000110
 8001f2c:	40004800 	.word	0x40004800
 8001f30:	20000120 	.word	0x20000120

08001f34 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <SET_GPIO+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <SET_GPIO+0xc0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d115      	bne.n	8001f76 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <SET_GPIO+0xc4>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <SET_GPIO+0xc4>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4827      	ldr	r0, [pc, #156]	; (8001ffc <SET_GPIO+0xc8>)
 8001f5e:	f7ff f97d 	bl	800125c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <SET_GPIO+0xcc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4823      	ldr	r0, [pc, #140]	; (8001ffc <SET_GPIO+0xc8>)
 8001f70:	f7ff f974 	bl	800125c <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8001f74:	e038      	b.n	8001fe8 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <SET_GPIO+0xd0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d118      	bne.n	8001fb0 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <SET_GPIO+0xc4>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <SET_GPIO+0xc4>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <SET_GPIO+0xd4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4819      	ldr	r0, [pc, #100]	; (8001ffc <SET_GPIO+0xc8>)
 8001f98:	f7ff f960 	bl	800125c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <SET_GPIO+0xd8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4814      	ldr	r0, [pc, #80]	; (8001ffc <SET_GPIO+0xc8>)
 8001faa:	f7ff f957 	bl	800125c <MCAL_GPIO_init>
}
 8001fae:	e01b      	b.n	8001fe8 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <SET_GPIO+0xdc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d117      	bne.n	8001fe8 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SET_GPIO+0xc4>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <SET_GPIO+0xc4>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <SET_GPIO+0xe0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <SET_GPIO+0xe4>)
 8001fd2:	f7ff f943 	bl	800125c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <SET_GPIO+0xe8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <SET_GPIO+0xe4>)
 8001fe4:	f7ff f93a 	bl	800125c <MCAL_GPIO_init>
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	08002aa4 	.word	0x08002aa4
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010800 	.word	0x40010800
 8002000:	08002aa8 	.word	0x08002aa8
 8002004:	40004400 	.word	0x40004400
 8002008:	08002aac 	.word	0x08002aac
 800200c:	08002ab0 	.word	0x08002ab0
 8002010:	40004800 	.word	0x40004800
 8002014:	08002ab4 	.word	0x08002ab4
 8002018:	40010c00 	.word	0x40010c00
 800201c:	08002ab8 	.word	0x08002ab8

08002020 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <USART1_IRQHandler+0x10>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4798      	blx	r3
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000100 	.word	0x20000100

08002034 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <USART2_IRQHandler+0x10>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4798      	blx	r3
}void USART3_IRQHandler(void){
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000100 	.word	0x20000100

08002048 <USART3_IRQHandler>:
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <USART3_IRQHandler+0x10>)
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	4798      	blx	r3
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000100 	.word	0x20000100

0800205c <main>:
/*******************************************/

void (*g_f_MASTER_state)(void) =ADMIN_OLD_PASSWORD_CHECK;
void (*g_f_USER_state)(void)=USER_RFID_ENTER;
int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	ALL_PREPHRAL_Init();
 8002060:	f000 f80c 	bl	800207c <ALL_PREPHRAL_Init>
//	SPI_EEPROM_WRITE(SPI1, ADMIN_PASSWORD_EEPROM_ADDRESS, CREATE_PASSWORD, ADMIN_PASSWORD_LEN);
	for(;;){
//		action=Get_Pressed_KEY();
//		switch(action){
//			case 'N':
				g_f_USER_state();
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <main+0x18>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4798      	blx	r3
//				break;
//			default:
				g_f_MASTER_state();
 800206a:	4b03      	ldr	r3, [pc, #12]	; (8002078 <main+0x1c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4798      	blx	r3
				g_f_USER_state();
 8002070:	e7f8      	b.n	8002064 <main+0x8>
 8002072:	bf00      	nop
 8002074:	2000007c 	.word	0x2000007c
 8002078:	20000078 	.word	0x20000078

0800207c <ALL_PREPHRAL_Init>:
 * PARAM1[IN]----> VOID
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
void ALL_PREPHRAL_Init(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	PIN_config PIN_CONFIG={R_LED,OUTPUT_PP,SPEED_10};
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <ALL_PREPHRAL_Init+0x9c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	607b      	str	r3, [r7, #4]
	Timer2_init();
 8002088:	f7ff fd08 	bl	8001a9c <Timer2_init>
	SPI_EEPROM_init(SPI1);
 800208c:	4823      	ldr	r0, [pc, #140]	; (800211c <ALL_PREPHRAL_Init+0xa0>)
 800208e:	f7fe fcd1 	bl	8000a34 <SPI_EEPROM_init>
	MCAL_USART_init(USART1,&UART1_CONFIG_V);
 8002092:	4923      	ldr	r1, [pc, #140]	; (8002120 <ALL_PREPHRAL_Init+0xa4>)
 8002094:	4823      	ldr	r0, [pc, #140]	; (8002124 <ALL_PREPHRAL_Init+0xa8>)
 8002096:	f7ff fd55 	bl	8001b44 <MCAL_USART_init>
	MCAL_USART_init(USART2,&UART2_CONFIG_V);
 800209a:	4923      	ldr	r1, [pc, #140]	; (8002128 <ALL_PREPHRAL_Init+0xac>)
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <ALL_PREPHRAL_Init+0xb0>)
 800209e:	f7ff fd51 	bl	8001b44 <MCAL_USART_init>
	KEYPAD_init();
 80020a2:	f7fe f865 	bl	8000170 <KEYPAD_init>
	LCD_init();
 80020a6:	f7fe f9d9 	bl	800045c <LCD_init>
	MCAL_EXTI_init(&EXTI_PIR1);
 80020aa:	4821      	ldr	r0, [pc, #132]	; (8002130 <ALL_PREPHRAL_Init+0xb4>)
 80020ac:	f7fe fed4 	bl	8000e58 <MCAL_EXTI_init>
	MCAL_EXTI_init(&EXTI_PIR2);
 80020b0:	4820      	ldr	r0, [pc, #128]	; (8002134 <ALL_PREPHRAL_Init+0xb8>)
 80020b2:	f7fe fed1 	bl	8000e58 <MCAL_EXTI_init>
	LCD_init_V2();
 80020b6:	f7fe fb79 	bl	80007ac <LCD_init_V2>
	Servo1_Entry_Gate_Init();
 80020ba:	f7fe fd7d 	bl	8000bb8 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 80020be:	f7fe fdbd 	bl	8000c3c <Servo2_Exit_Gate_Init>
	MCAL_GPIO_init(GPIOA, &PIN_CONFIG);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	481c      	ldr	r0, [pc, #112]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 80020c8:	f7ff f8c8 	bl	800125c <MCAL_GPIO_init>
	/******************************/
	PIN_CONFIG=(PIN_config){G_LED,OUTPUT_PP,SPEED_10};
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <ALL_PREPHRAL_Init+0xc0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PIN_CONFIG);
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4818      	ldr	r0, [pc, #96]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 80020d8:	f7ff f8c0 	bl	800125c <MCAL_GPIO_init>
	/***************PIR1***************/
	PIN_CONFIG=(PIN_config){PIR_1,INPUT_FI,0};
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <ALL_PREPHRAL_Init+0xc4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PIN_CONFIG);
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4814      	ldr	r0, [pc, #80]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 80020e8:	f7ff f8b8 	bl	800125c <MCAL_GPIO_init>
	/***************PIR2***************/
	PIN_CONFIG=(PIN_config){PIR_2,INPUT_FI,0};
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <ALL_PREPHRAL_Init+0xc8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PIN_CONFIG);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4810      	ldr	r0, [pc, #64]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 80020f8:	f7ff f8b0 	bl	800125c <MCAL_GPIO_init>
	/******************************/

	MCAL_write_PIN(GPIOA,G_LED,LED_OFF);
 80020fc:	2201      	movs	r2, #1
 80020fe:	210b      	movs	r1, #11
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 8002102:	f7ff f993 	bl	800142c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOA,R_LED,LED_OFF);
 8002106:	2201      	movs	r2, #1
 8002108:	2100      	movs	r1, #0
 800210a:	480b      	ldr	r0, [pc, #44]	; (8002138 <ALL_PREPHRAL_Init+0xbc>)
 800210c:	f7ff f98e 	bl	800142c <MCAL_write_PIN>


}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	08002abc 	.word	0x08002abc
 800211c:	40013000 	.word	0x40013000
 8002120:	20000030 	.word	0x20000030
 8002124:	40013800 	.word	0x40013800
 8002128:	20000040 	.word	0x20000040
 800212c:	40004400 	.word	0x40004400
 8002130:	20000050 	.word	0x20000050
 8002134:	20000064 	.word	0x20000064
 8002138:	40010800 	.word	0x40010800
 800213c:	08002ac0 	.word	0x08002ac0
 8002140:	08002ac4 	.word	0x08002ac4
 8002144:	08002ac8 	.word	0x08002ac8

08002148 <ADMIN_OLD_PASSWORD_CHECK>:
 * PARAM1[IN]----> VOID
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
void ADMIN_OLD_PASSWORD_CHECK(){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
	uint8_t PASSWORD[ADMIN_PASSWORD_LEN]={0};
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]

	SPI_EEPROM_READ(SPI1, ADMIN_PASSWORD_EEPROM_ADDRESS, PASSWORD, ADMIN_PASSWORD_LEN);
 8002156:	1d3a      	adds	r2, r7, #4
 8002158:	2308      	movs	r3, #8
 800215a:	21f3      	movs	r1, #243	; 0xf3
 800215c:	480e      	ldr	r0, [pc, #56]	; (8002198 <ADMIN_OLD_PASSWORD_CHECK+0x50>)
 800215e:	f7fe fcef 	bl	8000b40 <SPI_EEPROM_READ>

	for(int i=0;i<ADMIN_PASSWORD_LEN;i++)
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e00f      	b.n	8002188 <ADMIN_OLD_PASSWORD_CHECK+0x40>
	{
		if(PASSWORD[i]!=0xFF){
 8002168:	1d3a      	adds	r2, r7, #4
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2bff      	cmp	r3, #255	; 0xff
 8002172:	d003      	beq.n	800217c <ADMIN_OLD_PASSWORD_CHECK+0x34>
			g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <ADMIN_OLD_PASSWORD_CHECK+0x54>)
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <ADMIN_OLD_PASSWORD_CHECK+0x58>)
 8002178:	601a      	str	r2, [r3, #0]
			break;
 800217a:	e008      	b.n	800218e <ADMIN_OLD_PASSWORD_CHECK+0x46>
		}else{
			g_f_MASTER_state=ADMIN_CREATE_PASSWORD;
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <ADMIN_OLD_PASSWORD_CHECK+0x54>)
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <ADMIN_OLD_PASSWORD_CHECK+0x5c>)
 8002180:	601a      	str	r2, [r3, #0]
	for(int i=0;i<ADMIN_PASSWORD_LEN;i++)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b07      	cmp	r3, #7
 800218c:	ddec      	ble.n	8002168 <ADMIN_OLD_PASSWORD_CHECK+0x20>

		}
	}
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40013000 	.word	0x40013000
 800219c:	20000078 	.word	0x20000078
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	08002261 	.word	0x08002261

080021a8 <ADMIN_ENTER_PASSWORD>:
 * PARAM1[IN]----> VOID
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
void ADMIN_ENTER_PASSWORD(){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
	uint8_t PASSWORD[ADMIN_PASSWORD_LEN],pass;
	LCD_clearScreen();
 80021ae:	f7fe f9ab 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("Hello Admin,");
 80021b2:	4825      	ldr	r0, [pc, #148]	; (8002248 <ADMIN_ENTER_PASSWORD+0xa0>)
 80021b4:	f7fe fa1a 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(1,0);
 80021b8:	2100      	movs	r1, #0
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7fe fa2c 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("Please Enter ");
 80021c0:	4822      	ldr	r0, [pc, #136]	; (800224c <ADMIN_ENTER_PASSWORD+0xa4>)
 80021c2:	f7fe fa13 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(2,0);
 80021c6:	2100      	movs	r1, #0
 80021c8:	2002      	movs	r0, #2
 80021ca:	f7fe fa25 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("The PASSWORD:");
 80021ce:	4820      	ldr	r0, [pc, #128]	; (8002250 <ADMIN_ENTER_PASSWORD+0xa8>)
 80021d0:	f7fe fa0c 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3,0);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2003      	movs	r0, #3
 80021d8:	f7fe fa1e 	bl	8000618 <LCD_moveCURSER>


		pass=Get_Pressed_KEY();
 80021dc:	f7fe f806 	bl	80001ec <Get_Pressed_KEY>
 80021e0:	4603      	mov	r3, r0
 80021e2:	72fb      	strb	r3, [r7, #11]
		switch(pass){ // this make the two state (ADMIN and USER) Work at the same time
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	2b4e      	cmp	r3, #78	; 0x4e
 80021e8:	d01a      	beq.n	8002220 <ADMIN_ENTER_PASSWORD+0x78>
		case 'N':
			break;
		default:
			for(int i=0;i<ADMIN_PASSWORD_LEN;){
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e013      	b.n	8002218 <ADMIN_ENTER_PASSWORD+0x70>
				pass=Get_Pressed_KEY();
 80021f0:	f7fd fffc 	bl	80001ec <Get_Pressed_KEY>
 80021f4:	4603      	mov	r3, r0
 80021f6:	72fb      	strb	r3, [r7, #11]
				switch(pass){
 80021f8:	7afb      	ldrb	r3, [r7, #11]
 80021fa:	2b4e      	cmp	r3, #78	; 0x4e
 80021fc:	d100      	bne.n	8002200 <ADMIN_ENTER_PASSWORD+0x58>
						case 'N':
							break;
 80021fe:	e00b      	b.n	8002218 <ADMIN_ENTER_PASSWORD+0x70>
						default:
							PASSWORD[i]=pass;
 8002200:	463a      	mov	r2, r7
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	7afa      	ldrb	r2, [r7, #11]
 8002208:	701a      	strb	r2, [r3, #0]
							i++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
							LCD_sendCharcter('*');
 8002210:	202a      	movs	r0, #42	; 0x2a
 8002212:	f7fe f981 	bl	8000518 <LCD_sendCharcter>
							break;
 8002216:	bf00      	nop
			for(int i=0;i<ADMIN_PASSWORD_LEN;){
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b07      	cmp	r3, #7
 800221c:	dde8      	ble.n	80021f0 <ADMIN_ENTER_PASSWORD+0x48>
				}

			}
			break;
 800221e:	e000      	b.n	8002222 <ADMIN_ENTER_PASSWORD+0x7a>
			break;
 8002220:	bf00      	nop

		}

	if(ADMIN_PASSWORD_CHECK(PASSWORD)){
 8002222:	463b      	mov	r3, r7
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f871 	bl	800230c <ADMIN_PASSWORD_CHECK>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <ADMIN_ENTER_PASSWORD+0x90>
		g_f_MASTER_state=ADMIN_mian_menu;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <ADMIN_ENTER_PASSWORD+0xac>)
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <ADMIN_ENTER_PASSWORD+0xb0>)
 8002234:	601a      	str	r2, [r3, #0]
	}else{
		g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
	}

}
 8002236:	e002      	b.n	800223e <ADMIN_ENTER_PASSWORD+0x96>
		g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <ADMIN_ENTER_PASSWORD+0xac>)
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <ADMIN_ENTER_PASSWORD+0xb4>)
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	08002acc 	.word	0x08002acc
 800224c:	08002adc 	.word	0x08002adc
 8002250:	08002aec 	.word	0x08002aec
 8002254:	20000078 	.word	0x20000078
 8002258:	08002619 	.word	0x08002619
 800225c:	080021a9 	.word	0x080021a9

08002260 <ADMIN_CREATE_PASSWORD>:
 * PARAM1[IN]----> VOID
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
void ADMIN_CREATE_PASSWORD(){
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
	uint8_t PASSWORD[ADMIN_PASSWORD_LEN],pass;
	LCD_clearScreen();
 8002266:	f7fe f94f 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("Hello Admin,");
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <ADMIN_CREATE_PASSWORD+0x94>)
 800226c:	f7fe f9be 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(1,0);
 8002270:	2100      	movs	r1, #0
 8002272:	2001      	movs	r0, #1
 8002274:	f7fe f9d0 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("Please CREATE");
 8002278:	481f      	ldr	r0, [pc, #124]	; (80022f8 <ADMIN_CREATE_PASSWORD+0x98>)
 800227a:	f7fe f9b7 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(2,0);
 800227e:	2100      	movs	r1, #0
 8002280:	2002      	movs	r0, #2
 8002282:	f7fe f9c9 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("The PASSWORD:");
 8002286:	481d      	ldr	r0, [pc, #116]	; (80022fc <ADMIN_CREATE_PASSWORD+0x9c>)
 8002288:	f7fe f9b0 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3,0);
 800228c:	2100      	movs	r1, #0
 800228e:	2003      	movs	r0, #3
 8002290:	f7fe f9c2 	bl	8000618 <LCD_moveCURSER>

	pass=Get_Pressed_KEY();
 8002294:	f7fd ffaa 	bl	80001ec <Get_Pressed_KEY>
 8002298:	4603      	mov	r3, r0
 800229a:	72fb      	strb	r3, [r7, #11]
	switch(pass){ // this make the two state (ADMIN and USER) Work at the same time
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	2b4e      	cmp	r3, #78	; 0x4e
 80022a0:	d01d      	beq.n	80022de <ADMIN_CREATE_PASSWORD+0x7e>
	case 'N':
		break;
	default:
		for(int i=0;i<ADMIN_PASSWORD_LEN;){
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e013      	b.n	80022d0 <ADMIN_CREATE_PASSWORD+0x70>
			pass=Get_Pressed_KEY();
 80022a8:	f7fd ffa0 	bl	80001ec <Get_Pressed_KEY>
 80022ac:	4603      	mov	r3, r0
 80022ae:	72fb      	strb	r3, [r7, #11]
			switch(pass){
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	2b4e      	cmp	r3, #78	; 0x4e
 80022b4:	d100      	bne.n	80022b8 <ADMIN_CREATE_PASSWORD+0x58>
					case 'N':
						break;
 80022b6:	e00b      	b.n	80022d0 <ADMIN_CREATE_PASSWORD+0x70>
					default:
						PASSWORD[i]=pass;
 80022b8:	463a      	mov	r2, r7
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	7afa      	ldrb	r2, [r7, #11]
 80022c0:	701a      	strb	r2, [r3, #0]
						i++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
						LCD_sendCharcter('*');
 80022c8:	202a      	movs	r0, #42	; 0x2a
 80022ca:	f7fe f925 	bl	8000518 <LCD_sendCharcter>
						break;
 80022ce:	bf00      	nop
		for(int i=0;i<ADMIN_PASSWORD_LEN;){
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b07      	cmp	r3, #7
 80022d4:	dde8      	ble.n	80022a8 <ADMIN_CREATE_PASSWORD+0x48>
			}

		}
		g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <ADMIN_CREATE_PASSWORD+0xa0>)
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <ADMIN_CREATE_PASSWORD+0xa4>)
 80022da:	601a      	str	r2, [r3, #0]
		break;
 80022dc:	e000      	b.n	80022e0 <ADMIN_CREATE_PASSWORD+0x80>
		break;
 80022de:	bf00      	nop

	}

	SPI_EEPROM_WRITE(SPI1, ADMIN_PASSWORD_EEPROM_ADDRESS, &PASSWORD, ADMIN_PASSWORD_LEN);
 80022e0:	463a      	mov	r2, r7
 80022e2:	2308      	movs	r3, #8
 80022e4:	21f3      	movs	r1, #243	; 0xf3
 80022e6:	4808      	ldr	r0, [pc, #32]	; (8002308 <ADMIN_CREATE_PASSWORD+0xa8>)
 80022e8:	f7fe fbd0 	bl	8000a8c <SPI_EEPROM_WRITE>
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	08002acc 	.word	0x08002acc
 80022f8:	08002afc 	.word	0x08002afc
 80022fc:	08002aec 	.word	0x08002aec
 8002300:	20000078 	.word	0x20000078
 8002304:	080021a9 	.word	0x080021a9
 8002308:	40013000 	.word	0x40013000

0800230c <ADMIN_PASSWORD_CHECK>:
 * PARAM1[IN]----> THE COMPARE PASSOWRD
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
uint8_t ADMIN_PASSWORD_CHECK(uint8_t *data){
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	uint8_t PASSWORD[ADMIN_PASSWORD_LEN]={0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
	SPI_EEPROM_READ(SPI1, ADMIN_PASSWORD_EEPROM_ADDRESS, &PASSWORD, ADMIN_PASSWORD_LEN);
 800231e:	f107 020c 	add.w	r2, r7, #12
 8002322:	2308      	movs	r3, #8
 8002324:	21f3      	movs	r1, #243	; 0xf3
 8002326:	480f      	ldr	r0, [pc, #60]	; (8002364 <ADMIN_PASSWORD_CHECK+0x58>)
 8002328:	f7fe fc0a 	bl	8000b40 <SPI_EEPROM_READ>
	for(int i=0;i<ADMIN_PASSWORD_LEN;i++){
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e010      	b.n	8002354 <ADMIN_PASSWORD_CHECK+0x48>
		if(*data!=PASSWORD[i]){
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	f107 010c 	add.w	r1, r7, #12
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	440b      	add	r3, r1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <ADMIN_PASSWORD_CHECK+0x3c>
			return 0;
 8002344:	2300      	movs	r3, #0
 8002346:	e009      	b.n	800235c <ADMIN_PASSWORD_CHECK+0x50>
		}else{
			data++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
	for(int i=0;i<ADMIN_PASSWORD_LEN;i++){
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b07      	cmp	r3, #7
 8002358:	ddeb      	ble.n	8002332 <ADMIN_PASSWORD_CHECK+0x26>
		}
	}
	return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013000 	.word	0x40013000

08002368 <ADMIN_change_PASSWORD>:
 * PARAM1[IN]----> THE COMPARE PASSOWRD
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
uint8_t ADMIN_change_PASSWORD(){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
	uint8_t PASSWORD[ADMIN_PASSWORD_LEN]={0},pass=0;
 800236e:	463b      	mov	r3, r7
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	2300      	movs	r3, #0
 8002378:	72fb      	strb	r3, [r7, #11]
	LCD_clearScreen();
 800237a:	f7fe f8c5 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("-Hello Admin,");
 800237e:	4823      	ldr	r0, [pc, #140]	; (800240c <ADMIN_change_PASSWORD+0xa4>)
 8002380:	f7fe f934 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(1,0);
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe f946 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("-ENTER NEW PASSWORD:");
 800238c:	4820      	ldr	r0, [pc, #128]	; (8002410 <ADMIN_change_PASSWORD+0xa8>)
 800238e:	f7fe f92d 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3, 0);
 8002392:	2100      	movs	r1, #0
 8002394:	2003      	movs	r0, #3
 8002396:	f7fe f93f 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("* -> MAIN_MENU");
 800239a:	481e      	ldr	r0, [pc, #120]	; (8002414 <ADMIN_change_PASSWORD+0xac>)
 800239c:	f7fe f926 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(2,0);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7fe f938 	bl	8000618 <LCD_moveCURSER>

	pass=Get_Pressed_KEY();
 80023a8:	f7fd ff20 	bl	80001ec <Get_Pressed_KEY>
 80023ac:	4603      	mov	r3, r0
 80023ae:	72fb      	strb	r3, [r7, #11]
	switch(pass){ // this make the two state (ADMIN and USER) Work at the same time
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	2b4e      	cmp	r3, #78	; 0x4e
 80023b4:	d01d      	beq.n	80023f2 <ADMIN_change_PASSWORD+0x8a>
	case 'N':
		break;
	default:
		for(int i=0;i<ADMIN_PASSWORD_LEN;){
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e013      	b.n	80023e4 <ADMIN_change_PASSWORD+0x7c>
			pass=Get_Pressed_KEY();
 80023bc:	f7fd ff16 	bl	80001ec <Get_Pressed_KEY>
 80023c0:	4603      	mov	r3, r0
 80023c2:	72fb      	strb	r3, [r7, #11]
			switch(pass){
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	2b4e      	cmp	r3, #78	; 0x4e
 80023c8:	d100      	bne.n	80023cc <ADMIN_change_PASSWORD+0x64>
					case 'N':
						break;
 80023ca:	e00b      	b.n	80023e4 <ADMIN_change_PASSWORD+0x7c>
					default:
						PASSWORD[i]=pass;
 80023cc:	463a      	mov	r2, r7
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	7afa      	ldrb	r2, [r7, #11]
 80023d4:	701a      	strb	r2, [r3, #0]
						i++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
						LCD_sendCharcter('*');
 80023dc:	202a      	movs	r0, #42	; 0x2a
 80023de:	f7fe f89b 	bl	8000518 <LCD_sendCharcter>
						break;
 80023e2:	bf00      	nop
		for(int i=0;i<ADMIN_PASSWORD_LEN;){
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	dde8      	ble.n	80023bc <ADMIN_change_PASSWORD+0x54>
			}

		}
		g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <ADMIN_change_PASSWORD+0xb0>)
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <ADMIN_change_PASSWORD+0xb4>)
 80023ee:	601a      	str	r2, [r3, #0]
		break;
 80023f0:	e000      	b.n	80023f4 <ADMIN_change_PASSWORD+0x8c>
		break;
 80023f2:	bf00      	nop

	}

	SPI_EEPROM_WRITE(SPI1, ADMIN_PASSWORD_EEPROM_ADDRESS, (uint8_t *)&PASSWORD, ADMIN_PASSWORD_LEN);
 80023f4:	463a      	mov	r2, r7
 80023f6:	2308      	movs	r3, #8
 80023f8:	21f3      	movs	r1, #243	; 0xf3
 80023fa:	4809      	ldr	r0, [pc, #36]	; (8002420 <ADMIN_change_PASSWORD+0xb8>)
 80023fc:	f7fe fb46 	bl	8000a8c <SPI_EEPROM_WRITE>
	return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08002b0c 	.word	0x08002b0c
 8002410:	08002b1c 	.word	0x08002b1c
 8002414:	08002b34 	.word	0x08002b34
 8002418:	20000078 	.word	0x20000078
 800241c:	080021a9 	.word	0x080021a9
 8002420:	40013000 	.word	0x40013000

08002424 <ADMIN_ADD_USER>:
 * PARAM1[IN]----> THE COMPARE PASSOWRD
 * RETAVAL	 ---->
 * NOTE		 ----> USER id must be from 0 to 9 only and every time power released the G__P_USER_ID_ADDRESS will reset because i will not save it in eeprom
 *
 */
uint8_t ADMIN_ADD_USER(){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	uint8_t user_id=0;
 800242a:	2300      	movs	r3, #0
 800242c:	71fb      	strb	r3, [r7, #7]
	LCD_clearScreen();
 800242e:	f7fe f86b 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("Enter User ID:");
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <ADMIN_ADD_USER+0xb0>)
 8002434:	f7fe f8da 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3, 0);
 8002438:	2100      	movs	r1, #0
 800243a:	2003      	movs	r0, #3
 800243c:	f7fe f8ec 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("* -> MAIN_MENU");
 8002440:	4825      	ldr	r0, [pc, #148]	; (80024d8 <ADMIN_ADD_USER+0xb4>)
 8002442:	f7fe f8d3 	bl	80005ec <LCD_sendString>
	while(1){
		user_id=Get_Pressed_KEY();
 8002446:	f7fd fed1 	bl	80001ec <Get_Pressed_KEY>
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
		switch(user_id){
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b2a      	cmp	r3, #42	; 0x2a
 8002452:	d002      	beq.n	800245a <ADMIN_ADD_USER+0x36>
 8002454:	2b4e      	cmp	r3, #78	; 0x4e
 8002456:	d036      	beq.n	80024c6 <ADMIN_ADD_USER+0xa2>
 8002458:	e004      	b.n	8002464 <ADMIN_ADD_USER+0x40>
		case 'N':
			break;
		case '*':
			g_f_MASTER_state=ADMIN_mian_menu;
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <ADMIN_ADD_USER+0xb8>)
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <ADMIN_ADD_USER+0xbc>)
 800245e:	601a      	str	r2, [r3, #0]
			return 1; // this to break the while(1)
 8002460:	2301      	movs	r3, #1
 8002462:	e032      	b.n	80024ca <ADMIN_ADD_USER+0xa6>
			break;
		default :
			LCD_moveCURSER(0, 15);
 8002464:	210f      	movs	r1, #15
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe f8d6 	bl	8000618 <LCD_moveCURSER>
			LCD_intgerToString(user_id);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f908 	bl	8000684 <LCD_intgerToString>
			LCD_moveCURSER(2, 0);
 8002474:	2100      	movs	r1, #0
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe f8ce 	bl	8000618 <LCD_moveCURSER>

			if(G__P_USER_ID_ADDRESS>(User_ID_ADDRESS+(USERS-1))){
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <ADMIN_ADD_USER+0xc0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d906      	bls.n	8002492 <ADMIN_ADD_USER+0x6e>
				LCD_sendString("Users FULL");
 8002484:	4818      	ldr	r0, [pc, #96]	; (80024e8 <ADMIN_ADD_USER+0xc4>)
 8002486:	f7fe f8b1 	bl	80005ec <LCD_sendString>
				dms(200);
 800248a:	20c8      	movs	r0, #200	; 0xc8
 800248c:	f7ff fb42 	bl	8001b14 <dms>
 8002490:	e014      	b.n	80024bc <ADMIN_ADD_USER+0x98>

			}else{
				SPI_EEPROM_WRITE(SPI1, G__P_USER_ID_ADDRESS++, &user_id, 1);
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <ADMIN_ADD_USER+0xc0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	4912      	ldr	r1, [pc, #72]	; (80024e4 <ADMIN_ADD_USER+0xc0>)
 800249a:	600a      	str	r2, [r1, #0]
 800249c:	b299      	uxth	r1, r3
 800249e:	1dfa      	adds	r2, r7, #7
 80024a0:	2301      	movs	r3, #1
 80024a2:	4812      	ldr	r0, [pc, #72]	; (80024ec <ADMIN_ADD_USER+0xc8>)
 80024a4:	f7fe faf2 	bl	8000a8c <SPI_EEPROM_WRITE>
				LCD_moveCURSER(2, 0);
 80024a8:	2100      	movs	r1, #0
 80024aa:	2002      	movs	r0, #2
 80024ac:	f7fe f8b4 	bl	8000618 <LCD_moveCURSER>
				LCD_sendString("Done");
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <ADMIN_ADD_USER+0xcc>)
 80024b2:	f7fe f89b 	bl	80005ec <LCD_sendString>
				dms(200);
 80024b6:	20c8      	movs	r0, #200	; 0xc8
 80024b8:	f7ff fb2c 	bl	8001b14 <dms>

			}
			g_f_MASTER_state=ADMIN_mian_menu;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <ADMIN_ADD_USER+0xb8>)
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <ADMIN_ADD_USER+0xbc>)
 80024c0:	601a      	str	r2, [r3, #0]
			return 1; // this to break the while(1)
 80024c2:	2301      	movs	r3, #1
 80024c4:	e001      	b.n	80024ca <ADMIN_ADD_USER+0xa6>
			break;
 80024c6:	bf00      	nop
		user_id=Get_Pressed_KEY();
 80024c8:	e7bd      	b.n	8002446 <ADMIN_ADD_USER+0x22>
			break;


		}
	}
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	08002b44 	.word	0x08002b44
 80024d8:	08002b34 	.word	0x08002b34
 80024dc:	20000078 	.word	0x20000078
 80024e0:	08002619 	.word	0x08002619
 80024e4:	200000bc 	.word	0x200000bc
 80024e8:	08002b54 	.word	0x08002b54
 80024ec:	40013000 	.word	0x40013000
 80024f0:	08002b60 	.word	0x08002b60

080024f4 <ADMIN_Delete_USER>:


uint8_t ADMIN_Delete_USER(uint8_t user_id) // i will use different technique here
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
	uint8_t *user_ptr=User_ID_ADDRESS,EEPROM_DATA=0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	72bb      	strb	r3, [r7, #10]
	for(uint8_t i=0;i<USERS;i++){
 8002506:	2300      	movs	r3, #0
 8002508:	72fb      	strb	r3, [r7, #11]
 800250a:	e01a      	b.n	8002542 <ADMIN_Delete_USER+0x4e>
		SPI_EEPROM_READ(SPI1, user_ptr, &EEPROM_DATA, 1);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	b299      	uxth	r1, r3
 8002510:	f107 020a 	add.w	r2, r7, #10
 8002514:	2301      	movs	r3, #1
 8002516:	480f      	ldr	r0, [pc, #60]	; (8002554 <ADMIN_Delete_USER+0x60>)
 8002518:	f7fe fb12 	bl	8000b40 <SPI_EEPROM_READ>
		if(EEPROM_DATA==user_id){
 800251c:	7abb      	ldrb	r3, [r7, #10]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d108      	bne.n	8002536 <ADMIN_Delete_USER+0x42>
			SPI_EEPROM_WRITE(SPI1, user_ptr, &DEAFULT_EPPROM_DATA, 1);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	b299      	uxth	r1, r3
 8002528:	2301      	movs	r3, #1
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <ADMIN_Delete_USER+0x64>)
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <ADMIN_Delete_USER+0x60>)
 800252e:	f7fe faad 	bl	8000a8c <SPI_EEPROM_WRITE>
			return 1;
 8002532:	2301      	movs	r3, #1
 8002534:	e009      	b.n	800254a <ADMIN_Delete_USER+0x56>
		}else{
			user_ptr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0;i<USERS;i++){
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	3301      	adds	r3, #1
 8002540:	72fb      	strb	r3, [r7, #11]
 8002542:	7afb      	ldrb	r3, [r7, #11]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d9e1      	bls.n	800250c <ADMIN_Delete_USER+0x18>
		}
	}
	return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40013000 	.word	0x40013000
 8002558:	2000002d 	.word	0x2000002d

0800255c <ADMIN_Delete_USER_interface>:


uint8_t ADMIN_Delete_USER_interface(){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
	uint8_t user_id=0;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
	LCD_clearScreen();
 8002566:	f7fd ffcf 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("Enter User ID:");
 800256a:	4824      	ldr	r0, [pc, #144]	; (80025fc <ADMIN_Delete_USER_interface+0xa0>)
 800256c:	f7fe f83e 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3, 0);
 8002570:	2100      	movs	r1, #0
 8002572:	2003      	movs	r0, #3
 8002574:	f7fe f850 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("* -> MAIN_MENU");
 8002578:	4821      	ldr	r0, [pc, #132]	; (8002600 <ADMIN_Delete_USER_interface+0xa4>)
 800257a:	f7fe f837 	bl	80005ec <LCD_sendString>
	while(1){
		user_id=Get_Pressed_KEY();
 800257e:	f7fd fe35 	bl	80001ec <Get_Pressed_KEY>
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
		switch(user_id){
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b2a      	cmp	r3, #42	; 0x2a
 800258a:	d002      	beq.n	8002592 <ADMIN_Delete_USER_interface+0x36>
 800258c:	2b4e      	cmp	r3, #78	; 0x4e
 800258e:	d02f      	beq.n	80025f0 <ADMIN_Delete_USER_interface+0x94>
 8002590:	e004      	b.n	800259c <ADMIN_Delete_USER_interface+0x40>
		case 'N':
			break;
		case '*':
			g_f_MASTER_state=ADMIN_mian_menu;
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <ADMIN_Delete_USER_interface+0xa8>)
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <ADMIN_Delete_USER_interface+0xac>)
 8002596:	601a      	str	r2, [r3, #0]
			return 1; // this to break the while(1)
 8002598:	2301      	movs	r3, #1
 800259a:	e02b      	b.n	80025f4 <ADMIN_Delete_USER_interface+0x98>
			break;
		default :
			LCD_moveCURSER(0, 15);
 800259c:	210f      	movs	r1, #15
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe f83a 	bl	8000618 <LCD_moveCURSER>

			LCD_intgerToString(user_id);
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f86c 	bl	8000684 <LCD_intgerToString>
			LCD_moveCURSER(2, 0);
 80025ac:	2100      	movs	r1, #0
 80025ae:	2002      	movs	r0, #2
 80025b0:	f7fe f832 	bl	8000618 <LCD_moveCURSER>
			if(ADMIN_Delete_USER(user_id)){
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff9c 	bl	80024f4 <ADMIN_Delete_USER>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <ADMIN_Delete_USER_interface+0x7e>
				G__P_USER_ID_ADDRESS--; // this what track the users in the memory
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <ADMIN_Delete_USER_interface+0xb0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <ADMIN_Delete_USER_interface+0xb0>)
 80025ca:	6013      	str	r3, [r2, #0]
				LCD_sendString("DONE");
 80025cc:	4810      	ldr	r0, [pc, #64]	; (8002610 <ADMIN_Delete_USER_interface+0xb4>)
 80025ce:	f7fe f80d 	bl	80005ec <LCD_sendString>
				dms(200);
 80025d2:	20c8      	movs	r0, #200	; 0xc8
 80025d4:	f7ff fa9e 	bl	8001b14 <dms>
 80025d8:	e005      	b.n	80025e6 <ADMIN_Delete_USER_interface+0x8a>
			}else{
				LCD_sendString("FAIL");
 80025da:	480e      	ldr	r0, [pc, #56]	; (8002614 <ADMIN_Delete_USER_interface+0xb8>)
 80025dc:	f7fe f806 	bl	80005ec <LCD_sendString>
				dms(200);
 80025e0:	20c8      	movs	r0, #200	; 0xc8
 80025e2:	f7ff fa97 	bl	8001b14 <dms>
			}
			g_f_MASTER_state=ADMIN_mian_menu;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <ADMIN_Delete_USER_interface+0xa8>)
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <ADMIN_Delete_USER_interface+0xac>)
 80025ea:	601a      	str	r2, [r3, #0]
			return 1; // this to break the while(1)
 80025ec:	2301      	movs	r3, #1
 80025ee:	e001      	b.n	80025f4 <ADMIN_Delete_USER_interface+0x98>
			break;
 80025f0:	bf00      	nop
		user_id=Get_Pressed_KEY();
 80025f2:	e7c4      	b.n	800257e <ADMIN_Delete_USER_interface+0x22>
			break;


		}
	}
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08002b44 	.word	0x08002b44
 8002600:	08002b34 	.word	0x08002b34
 8002604:	20000078 	.word	0x20000078
 8002608:	08002619 	.word	0x08002619
 800260c:	200000bc 	.word	0x200000bc
 8002610:	08002b68 	.word	0x08002b68
 8002614:	08002b70 	.word	0x08002b70

08002618 <ADMIN_mian_menu>:
 * PARAM1[IN]----> THE COMPARE PASSOWRD
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
uint8_t ADMIN_mian_menu(){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
	uint8_t pass=0;
 800261e:	2300      	movs	r3, #0
 8002620:	71fb      	strb	r3, [r7, #7]
	LCD_clearScreen();
 8002622:	f7fd ff71 	bl	8000508 <LCD_clearScreen>
	LCD_sendString("1-CHANGE PASSWORD");
 8002626:	4822      	ldr	r0, [pc, #136]	; (80026b0 <ADMIN_mian_menu+0x98>)
 8002628:	f7fd ffe0 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(1,0);
 800262c:	2100      	movs	r1, #0
 800262e:	2001      	movs	r0, #1
 8002630:	f7fd fff2 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("2-ADD NEW USER");
 8002634:	481f      	ldr	r0, [pc, #124]	; (80026b4 <ADMIN_mian_menu+0x9c>)
 8002636:	f7fd ffd9 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(2,0);
 800263a:	2100      	movs	r1, #0
 800263c:	2002      	movs	r0, #2
 800263e:	f7fd ffeb 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("3-DELETE USER");
 8002642:	481d      	ldr	r0, [pc, #116]	; (80026b8 <ADMIN_mian_menu+0xa0>)
 8002644:	f7fd ffd2 	bl	80005ec <LCD_sendString>
	LCD_moveCURSER(3,0);
 8002648:	2100      	movs	r1, #0
 800264a:	2003      	movs	r0, #3
 800264c:	f7fd ffe4 	bl	8000618 <LCD_moveCURSER>
	LCD_sendString("4-QUIT");
 8002650:	481a      	ldr	r0, [pc, #104]	; (80026bc <ADMIN_mian_menu+0xa4>)
 8002652:	f7fd ffcb 	bl	80005ec <LCD_sendString>
	while(1){ // loop here until you got an action
		pass=Get_Pressed_KEY(); // pass is the assci value of the number so we will -30 from the number to make it number
 8002656:	f7fd fdc9 	bl	80001ec <Get_Pressed_KEY>
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
		switch(pass){
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d015      	beq.n	8002690 <ADMIN_mian_menu+0x78>
 8002664:	2b03      	cmp	r3, #3
 8002666:	dc04      	bgt.n	8002672 <ADMIN_mian_menu+0x5a>
 8002668:	2b01      	cmp	r3, #1
 800266a:	d007      	beq.n	800267c <ADMIN_mian_menu+0x64>
 800266c:	2b02      	cmp	r3, #2
 800266e:	d00a      	beq.n	8002686 <ADMIN_mian_menu+0x6e>
			g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
			return 1;
			break;
		default:

			break;
 8002670:	e019      	b.n	80026a6 <ADMIN_mian_menu+0x8e>
		switch(pass){
 8002672:	2b04      	cmp	r3, #4
 8002674:	d011      	beq.n	800269a <ADMIN_mian_menu+0x82>
 8002676:	2b4e      	cmp	r3, #78	; 0x4e
 8002678:	d014      	beq.n	80026a4 <ADMIN_mian_menu+0x8c>
			break;
 800267a:	e014      	b.n	80026a6 <ADMIN_mian_menu+0x8e>
			g_f_MASTER_state=ADMIN_change_PASSWORD;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <ADMIN_mian_menu+0xa8>)
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <ADMIN_mian_menu+0xac>)
 8002680:	601a      	str	r2, [r3, #0]
			return 1;
 8002682:	2301      	movs	r3, #1
 8002684:	e010      	b.n	80026a8 <ADMIN_mian_menu+0x90>
			g_f_MASTER_state=ADMIN_ADD_USER;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <ADMIN_mian_menu+0xa8>)
 8002688:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <ADMIN_mian_menu+0xb0>)
 800268a:	601a      	str	r2, [r3, #0]
			return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e00b      	b.n	80026a8 <ADMIN_mian_menu+0x90>
			g_f_MASTER_state=ADMIN_Delete_USER_interface;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <ADMIN_mian_menu+0xa8>)
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <ADMIN_mian_menu+0xb4>)
 8002694:	601a      	str	r2, [r3, #0]
			return 1;
 8002696:	2301      	movs	r3, #1
 8002698:	e006      	b.n	80026a8 <ADMIN_mian_menu+0x90>
			g_f_MASTER_state=ADMIN_ENTER_PASSWORD;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <ADMIN_mian_menu+0xa8>)
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <ADMIN_mian_menu+0xb8>)
 800269e:	601a      	str	r2, [r3, #0]
			return 1;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e001      	b.n	80026a8 <ADMIN_mian_menu+0x90>
			break;
 80026a4:	bf00      	nop
		pass=Get_Pressed_KEY(); // pass is the assci value of the number so we will -30 from the number to make it number
 80026a6:	e7d6      	b.n	8002656 <ADMIN_mian_menu+0x3e>
		}
	}


}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	08002b78 	.word	0x08002b78
 80026b4:	08002b8c 	.word	0x08002b8c
 80026b8:	08002b9c 	.word	0x08002b9c
 80026bc:	08002bac 	.word	0x08002bac
 80026c0:	20000078 	.word	0x20000078
 80026c4:	08002369 	.word	0x08002369
 80026c8:	08002425 	.word	0x08002425
 80026cc:	0800255d 	.word	0x0800255d
 80026d0:	080021a9 	.word	0x080021a9

080026d4 <USER_check_validation>:
 * PARAM1[IN]----> THE COMPARE id
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
uint8_t USER_check_validation(	uint8_t user_id){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
	uint8_t *user_ptr=User_ID_ADDRESS,EEPROM_DATA=0;;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	2300      	movs	r3, #0
 80026e4:	72bb      	strb	r3, [r7, #10]
	for(uint8_t i=0;i<USERS;i++){
 80026e6:	2300      	movs	r3, #0
 80026e8:	72fb      	strb	r3, [r7, #11]
 80026ea:	e012      	b.n	8002712 <USER_check_validation+0x3e>
		SPI_EEPROM_READ(SPI1, user_ptr++, &EEPROM_DATA, 1);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60fa      	str	r2, [r7, #12]
 80026f2:	b299      	uxth	r1, r3
 80026f4:	f107 020a 	add.w	r2, r7, #10
 80026f8:	2301      	movs	r3, #1
 80026fa:	480a      	ldr	r0, [pc, #40]	; (8002724 <USER_check_validation+0x50>)
 80026fc:	f7fe fa20 	bl	8000b40 <SPI_EEPROM_READ>
		if(user_id ==EEPROM_DATA){
 8002700:	7abb      	ldrb	r3, [r7, #10]
 8002702:	79fa      	ldrb	r2, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d101      	bne.n	800270c <USER_check_validation+0x38>
			return 1;
 8002708:	2301      	movs	r3, #1
 800270a:	e006      	b.n	800271a <USER_check_validation+0x46>
	for(uint8_t i=0;i<USERS;i++){
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	3301      	adds	r3, #1
 8002710:	72fb      	strb	r3, [r7, #11]
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d9e9      	bls.n	80026ec <USER_check_validation+0x18>
		}
	}
	return 0;
 8002718:	2300      	movs	r3, #0

}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40013000 	.word	0x40013000

08002728 <USER_RFID_ENTER>:

void USER_RFID_ENTER(){
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	LCD_clearScreen_V2();
 800272c:	f7fe f896 	bl	800085c <LCD_clearScreen_V2>
	LCD_sendString_V2("HELLO");
 8002730:	4823      	ldr	r0, [pc, #140]	; (80027c0 <USER_RFID_ENTER+0x98>)
 8002732:	f7fe f907 	bl	8000944 <LCD_sendString_V2>
	LCD_moveCURSER_V2(1,0);
 8002736:	2100      	movs	r1, #0
 8002738:	2001      	movs	r0, #1
 800273a:	f7fe f919 	bl	8000970 <LCD_moveCURSER_V2>
	LCD_sendString_V2("Please Enter RFID");
 800273e:	4821      	ldr	r0, [pc, #132]	; (80027c4 <USER_RFID_ENTER+0x9c>)
 8002740:	f7fe f900 	bl	8000944 <LCD_sendString_V2>
	if(g_user_id != USART_TX_RX_FLAG){ // 0xFF is a flag indicate if the user send any data using usart or not
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <USER_RFID_ENTER+0xa0>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d034      	beq.n	80027b6 <USER_RFID_ENTER+0x8e>
		if(USER_check_validation(g_user_id)){
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <USER_RFID_ENTER+0xa0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ffbf 	bl	80026d4 <USER_check_validation>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <USER_RFID_ENTER+0x62>
			LCD_clearScreen_V2();
 800275c:	f7fe f87e 	bl	800085c <LCD_clearScreen_V2>
			LCD_sendString_V2("Welcome");
 8002760:	481a      	ldr	r0, [pc, #104]	; (80027cc <USER_RFID_ENTER+0xa4>)
 8002762:	f7fe f8ef 	bl	8000944 <LCD_sendString_V2>
			Servo1_Entry_Gate(UP);
 8002766:	2001      	movs	r0, #1
 8002768:	f7fe fa3a 	bl	8000be0 <Servo1_Entry_Gate>
			MCAL_write_PIN(GPIOA,G_LED,LED_ON);
 800276c:	2200      	movs	r2, #0
 800276e:	210b      	movs	r1, #11
 8002770:	4817      	ldr	r0, [pc, #92]	; (80027d0 <USER_RFID_ENTER+0xa8>)
 8002772:	f7fe fe5b 	bl	800142c <MCAL_write_PIN>
			dms(500);
 8002776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800277a:	f7ff f9cb 	bl	8001b14 <dms>
			MCAL_write_PIN(GPIOA,G_LED,LED_OFF);
 800277e:	2201      	movs	r2, #1
 8002780:	210b      	movs	r1, #11
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <USER_RFID_ENTER+0xa8>)
 8002784:	f7fe fe52 	bl	800142c <MCAL_write_PIN>
 8002788:	e012      	b.n	80027b0 <USER_RFID_ENTER+0x88>


		}else{
			LCD_clearScreen_V2();
 800278a:	f7fe f867 	bl	800085c <LCD_clearScreen_V2>
			LCD_sendString_V2("Wrong ID");
 800278e:	4811      	ldr	r0, [pc, #68]	; (80027d4 <USER_RFID_ENTER+0xac>)
 8002790:	f7fe f8d8 	bl	8000944 <LCD_sendString_V2>
			MCAL_write_PIN(GPIOA,R_LED,LED_ON);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <USER_RFID_ENTER+0xa8>)
 800279a:	f7fe fe47 	bl	800142c <MCAL_write_PIN>
			dms(500);
 800279e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a2:	f7ff f9b7 	bl	8001b14 <dms>
			MCAL_write_PIN(GPIOA,R_LED,LED_OFF);
 80027a6:	2201      	movs	r2, #1
 80027a8:	2100      	movs	r1, #0
 80027aa:	4809      	ldr	r0, [pc, #36]	; (80027d0 <USER_RFID_ENTER+0xa8>)
 80027ac:	f7fe fe3e 	bl	800142c <MCAL_write_PIN>

		}

		g_user_id=USART_TX_RX_FLAG;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <USER_RFID_ENTER+0xa0>)
 80027b2:	22ff      	movs	r2, #255	; 0xff
 80027b4:	701a      	strb	r2, [r3, #0]
	}
	g_f_USER_state=USER_RFID_EXIT;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <USER_RFID_ENTER+0xb0>)
 80027b8:	4a08      	ldr	r2, [pc, #32]	; (80027dc <USER_RFID_ENTER+0xb4>)
 80027ba:	601a      	str	r2, [r3, #0]


}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	08002bb4 	.word	0x08002bb4
 80027c4:	08002bbc 	.word	0x08002bbc
 80027c8:	2000002e 	.word	0x2000002e
 80027cc:	08002bd0 	.word	0x08002bd0
 80027d0:	40010800 	.word	0x40010800
 80027d4:	08002bd8 	.word	0x08002bd8
 80027d8:	2000007c 	.word	0x2000007c
 80027dc:	080027e1 	.word	0x080027e1

080027e0 <USER_RFID_EXIT>:
void USER_RFID_EXIT(){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0

	if(g_exit_user_id != USART_TX_RX_FLAG){ // 0xFF is a flag indicate if the user send any data using usart or not
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <USER_RFID_EXIT+0x50>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2bff      	cmp	r3, #255	; 0xff
 80027ea:	d01c      	beq.n	8002826 <USER_RFID_EXIT+0x46>
		if(USER_check_validation(g_exit_user_id)){
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <USER_RFID_EXIT+0x50>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff6f 	bl	80026d4 <USER_check_validation>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <USER_RFID_EXIT+0x24>
			Servo2_Exit_Gate(UP);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fe fa31 	bl	8000c64 <Servo2_Exit_Gate>
 8002802:	e00d      	b.n	8002820 <USER_RFID_EXIT+0x40>

		}else{

			MCAL_write_PIN(GPIOA,R_LED,LED_ON);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <USER_RFID_EXIT+0x54>)
 800280a:	f7fe fe0f 	bl	800142c <MCAL_write_PIN>
			dms(500);
 800280e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002812:	f7ff f97f 	bl	8001b14 <dms>
			MCAL_write_PIN(GPIOA,R_LED,LED_OFF);
 8002816:	2201      	movs	r2, #1
 8002818:	2100      	movs	r1, #0
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <USER_RFID_EXIT+0x54>)
 800281c:	f7fe fe06 	bl	800142c <MCAL_write_PIN>

		}

		g_exit_user_id=USART_TX_RX_FLAG;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <USER_RFID_EXIT+0x50>)
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	701a      	strb	r2, [r3, #0]
	}
	g_f_USER_state=USER_RFID_ENTER;
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <USER_RFID_EXIT+0x58>)
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <USER_RFID_EXIT+0x5c>)
 800282a:	601a      	str	r2, [r3, #0]



}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000002f 	.word	0x2000002f
 8002834:	40010800 	.word	0x40010800
 8002838:	2000007c 	.word	0x2000007c
 800283c:	08002729 	.word	0x08002729

08002840 <USART1_call_Back>:
void USART1_call_Back(void){
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	if(	USART1->SR &(1<<5)){
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <USART1_call_Back+0x48>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <USART1_call_Back+0x1e>
		g_user_id=	(MCAL_USART_ReciveData(USART1));
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <USART1_call_Back+0x48>)
 8002852:	f7ff fb27 	bl	8001ea4 <MCAL_USART_ReciveData>
 8002856:	4603      	mov	r3, r0
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <USART1_call_Back+0x4c>)
 800285c:	701a      	strb	r2, [r3, #0]

		}if((USART1->SR &(1<<7))){
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <USART1_call_Back+0x48>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <USART1_call_Back+0x36>
		MCAL_USART_SendData(USART1, g_user_id);
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <USART1_call_Back+0x4c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <USART1_call_Back+0x48>)
 8002872:	f7ff facf 	bl	8001e14 <MCAL_USART_SendData>

	}

		g_user_id-=48;
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <USART1_call_Back+0x4c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3b30      	subs	r3, #48	; 0x30
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <USART1_call_Back+0x4c>)
 8002880:	701a      	strb	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40013800 	.word	0x40013800
 800288c:	2000002e 	.word	0x2000002e

08002890 <USART2_call_Back>:
void USART2_call_Back(void){
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	if(	USART2->SR &(1<<5)){
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <USART2_call_Back+0x48>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <USART2_call_Back+0x1e>
		g_exit_user_id=	(MCAL_USART_ReciveData(USART2));
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <USART2_call_Back+0x48>)
 80028a2:	f7ff faff 	bl	8001ea4 <MCAL_USART_ReciveData>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <USART2_call_Back+0x4c>)
 80028ac:	701a      	strb	r2, [r3, #0]

		}if((USART2->SR &(1<<7))){
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <USART2_call_Back+0x48>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <USART2_call_Back+0x36>
		MCAL_USART_SendData(USART2, g_exit_user_id);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <USART2_call_Back+0x4c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <USART2_call_Back+0x48>)
 80028c2:	f7ff faa7 	bl	8001e14 <MCAL_USART_SendData>

	}

		g_exit_user_id-=48; //convert from assci to decimal
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <USART2_call_Back+0x4c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3b30      	subs	r3, #48	; 0x30
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b03      	ldr	r3, [pc, #12]	; (80028dc <USART2_call_Back+0x4c>)
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40004400 	.word	0x40004400
 80028dc:	2000002f 	.word	0x2000002f

080028e0 <EXTI_ENTRY_GATE>:



void EXTI_ENTRY_GATE(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	Servo1_Entry_Gate(Down);
 80028e4:	2002      	movs	r0, #2
 80028e6:	f7fe f97b 	bl	8000be0 <Servo1_Entry_Gate>

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}

080028ee <EXTI_EXIT_GATE>:
void EXTI_EXIT_GATE(){
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
	Servo2_Exit_Gate(Down);
 80028f2:	2002      	movs	r0, #2
 80028f4:	f7fe f9b6 	bl	8000c64 <Servo2_Exit_Gate>

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002900:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <LoopForever+0x6>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	; (800293c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <LoopForever+0xe>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	; (8002948 <LoopForever+0x16>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800292a:	f000 f811 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800292e:	f7ff fb95 	bl	800205c <main>

08002932 <LoopForever>:

LoopForever:
    b LoopForever
 8002932:	e7fe      	b.n	8002932 <LoopForever>
  ldr   r0, =_estack
 8002934:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002940:	08002c10 	.word	0x08002c10
  ldr r2, =_sbss
 8002944:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002948:	20000130 	.word	0x20000130

0800294c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_2_IRQHandler>
	...

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2500      	movs	r5, #0
 8002954:	4e0c      	ldr	r6, [pc, #48]	; (8002988 <__libc_init_array+0x38>)
 8002956:	4c0d      	ldr	r4, [pc, #52]	; (800298c <__libc_init_array+0x3c>)
 8002958:	1ba4      	subs	r4, r4, r6
 800295a:	10a4      	asrs	r4, r4, #2
 800295c:	42a5      	cmp	r5, r4
 800295e:	d109      	bne.n	8002974 <__libc_init_array+0x24>
 8002960:	f000 f872 	bl	8002a48 <_init>
 8002964:	2500      	movs	r5, #0
 8002966:	4e0a      	ldr	r6, [pc, #40]	; (8002990 <__libc_init_array+0x40>)
 8002968:	4c0a      	ldr	r4, [pc, #40]	; (8002994 <__libc_init_array+0x44>)
 800296a:	1ba4      	subs	r4, r4, r6
 800296c:	10a4      	asrs	r4, r4, #2
 800296e:	42a5      	cmp	r5, r4
 8002970:	d105      	bne.n	800297e <__libc_init_array+0x2e>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002978:	4798      	blx	r3
 800297a:	3501      	adds	r5, #1
 800297c:	e7ee      	b.n	800295c <__libc_init_array+0xc>
 800297e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002982:	4798      	blx	r3
 8002984:	3501      	adds	r5, #1
 8002986:	e7f2      	b.n	800296e <__libc_init_array+0x1e>
 8002988:	08002c08 	.word	0x08002c08
 800298c:	08002c08 	.word	0x08002c08
 8002990:	08002c08 	.word	0x08002c08
 8002994:	08002c0c 	.word	0x08002c0c

08002998 <__itoa>:
 8002998:	1e93      	subs	r3, r2, #2
 800299a:	2b22      	cmp	r3, #34	; 0x22
 800299c:	b510      	push	{r4, lr}
 800299e:	460c      	mov	r4, r1
 80029a0:	d904      	bls.n	80029ac <__itoa+0x14>
 80029a2:	2300      	movs	r3, #0
 80029a4:	461c      	mov	r4, r3
 80029a6:	700b      	strb	r3, [r1, #0]
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd10      	pop	{r4, pc}
 80029ac:	2a0a      	cmp	r2, #10
 80029ae:	d109      	bne.n	80029c4 <__itoa+0x2c>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	da07      	bge.n	80029c4 <__itoa+0x2c>
 80029b4:	232d      	movs	r3, #45	; 0x2d
 80029b6:	700b      	strb	r3, [r1, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4240      	negs	r0, r0
 80029bc:	4421      	add	r1, r4
 80029be:	f000 f805 	bl	80029cc <__utoa>
 80029c2:	e7f1      	b.n	80029a8 <__itoa+0x10>
 80029c4:	2100      	movs	r1, #0
 80029c6:	e7f9      	b.n	80029bc <__itoa+0x24>

080029c8 <itoa>:
 80029c8:	f7ff bfe6 	b.w	8002998 <__itoa>

080029cc <__utoa>:
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	4605      	mov	r5, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	466e      	mov	r6, sp
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <__utoa+0x78>)
 80029d8:	f103 0c20 	add.w	ip, r3, #32
 80029dc:	4637      	mov	r7, r6
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	3308      	adds	r3, #8
 80029e4:	c703      	stmia	r7!, {r0, r1}
 80029e6:	4563      	cmp	r3, ip
 80029e8:	463e      	mov	r6, r7
 80029ea:	d1f7      	bne.n	80029dc <__utoa+0x10>
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	6038      	str	r0, [r7, #0]
 80029f2:	713b      	strb	r3, [r7, #4]
 80029f4:	1e93      	subs	r3, r2, #2
 80029f6:	2b22      	cmp	r3, #34	; 0x22
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	d904      	bls.n	8002a08 <__utoa+0x3c>
 80029fe:	7023      	strb	r3, [r4, #0]
 8002a00:	461c      	mov	r4, r3
 8002a02:	4620      	mov	r0, r4
 8002a04:	b00b      	add	sp, #44	; 0x2c
 8002a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a08:	1e66      	subs	r6, r4, #1
 8002a0a:	fbb5 f0f2 	udiv	r0, r5, r2
 8002a0e:	fb02 5510 	mls	r5, r2, r0, r5
 8002a12:	af0a      	add	r7, sp, #40	; 0x28
 8002a14:	443d      	add	r5, r7
 8002a16:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8002a20:	4605      	mov	r5, r0
 8002a22:	b968      	cbnz	r0, 8002a40 <__utoa+0x74>
 8002a24:	4622      	mov	r2, r4
 8002a26:	5460      	strb	r0, [r4, r1]
 8002a28:	4423      	add	r3, r4
 8002a2a:	1b19      	subs	r1, r3, r4
 8002a2c:	1b10      	subs	r0, r2, r4
 8002a2e:	4281      	cmp	r1, r0
 8002a30:	dde7      	ble.n	8002a02 <__utoa+0x36>
 8002a32:	7811      	ldrb	r1, [r2, #0]
 8002a34:	7818      	ldrb	r0, [r3, #0]
 8002a36:	f802 0b01 	strb.w	r0, [r2], #1
 8002a3a:	f803 1901 	strb.w	r1, [r3], #-1
 8002a3e:	e7f4      	b.n	8002a2a <__utoa+0x5e>
 8002a40:	460b      	mov	r3, r1
 8002a42:	e7e2      	b.n	8002a0a <__utoa+0x3e>
 8002a44:	08002be1 	.word	0x08002be1

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
