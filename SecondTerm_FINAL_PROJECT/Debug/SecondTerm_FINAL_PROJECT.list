
SecondTerm_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001864  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a58  08001a58  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001a58  08001a58  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a58  08001a58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a58  08001a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000060  08001ac0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001ac0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f0c  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d8c  00000000  00000000  00023f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000125c  00000000  00000000  00024d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000348  00000000  00000000  00025f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000290  00000000  00000000  000262c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001c26  00000000  00000000  00026558  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003109  00000000  00000000  0002817e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000069a0  00000000  00000000  0002b287  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031c27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009dc  00000000  00000000  00031ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000060 	.word	0x20000060
 800014c:	00000000 	.word	0x00000000
 8000150:	0800197c 	.word	0x0800197c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000064 	.word	0x20000064
 800016c:	0800197c 	.word	0x0800197c

08000170 <KEYPAD_init>:
#include "KEYPAD.h"
PIN_config PIN={R0,OUTPUT_PP,SPEED_2};
unsigned char ROWs[]={R0,R1,R2,R3};
unsigned char COL_s[]={C0,C1,C2};

void KEYPAD_init(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 8000174:	491b      	ldr	r1, [pc, #108]	; (80001e4 <KEYPAD_init+0x74>)
 8000176:	481c      	ldr	r0, [pc, #112]	; (80001e8 <KEYPAD_init+0x78>)
 8000178:	f000 fd74 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=R1;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <KEYPAD_init+0x74>)
 800017e:	2201      	movs	r2, #1
 8000180:	801a      	strh	r2, [r3, #0]
 8000182:	4918      	ldr	r1, [pc, #96]	; (80001e4 <KEYPAD_init+0x74>)
 8000184:	4818      	ldr	r0, [pc, #96]	; (80001e8 <KEYPAD_init+0x78>)
 8000186:	f000 fd6d 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=R2;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 800018a:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <KEYPAD_init+0x74>)
 800018c:	2203      	movs	r2, #3
 800018e:	801a      	strh	r2, [r3, #0]
 8000190:	4914      	ldr	r1, [pc, #80]	; (80001e4 <KEYPAD_init+0x74>)
 8000192:	4815      	ldr	r0, [pc, #84]	; (80001e8 <KEYPAD_init+0x78>)
 8000194:	f000 fd66 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=R3;	MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <KEYPAD_init+0x74>)
 800019a:	2204      	movs	r2, #4
 800019c:	801a      	strh	r2, [r3, #0]
 800019e:	4911      	ldr	r1, [pc, #68]	; (80001e4 <KEYPAD_init+0x74>)
 80001a0:	4811      	ldr	r0, [pc, #68]	; (80001e8 <KEYPAD_init+0x78>)
 80001a2:	f000 fd5f 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=C0;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <KEYPAD_init+0x74>)
 80001a8:	2205      	movs	r2, #5
 80001aa:	801a      	strh	r2, [r3, #0]
	PIN.MODE=INPUT_PU; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <KEYPAD_init+0x74>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	709a      	strb	r2, [r3, #2]
 80001b2:	490c      	ldr	r1, [pc, #48]	; (80001e4 <KEYPAD_init+0x74>)
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <KEYPAD_init+0x78>)
 80001b6:	f000 fd55 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=C1; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <KEYPAD_init+0x74>)
 80001bc:	2206      	movs	r2, #6
 80001be:	801a      	strh	r2, [r3, #0]
 80001c0:	4908      	ldr	r1, [pc, #32]	; (80001e4 <KEYPAD_init+0x74>)
 80001c2:	4809      	ldr	r0, [pc, #36]	; (80001e8 <KEYPAD_init+0x78>)
 80001c4:	f000 fd4e 	bl	8000c64 <MCAL_GPIO_init>
	PIN.PIN_number=C2; MCAL_GPIO_init(KEYPAD_PORT, &PIN);
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <KEYPAD_init+0x74>)
 80001ca:	2207      	movs	r2, #7
 80001cc:	801a      	strh	r2, [r3, #0]
 80001ce:	4905      	ldr	r1, [pc, #20]	; (80001e4 <KEYPAD_init+0x74>)
 80001d0:	4805      	ldr	r0, [pc, #20]	; (80001e8 <KEYPAD_init+0x78>)
 80001d2:	f000 fd47 	bl	8000c64 <MCAL_GPIO_init>
	MCAL_write_PORT(KEYPAD_PORT,0xFF);
 80001d6:	21ff      	movs	r1, #255	; 0xff
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <KEYPAD_init+0x78>)
 80001da:	f000 fe53 	bl	8000e84 <MCAL_write_PORT>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000
 80001e8:	40010c00 	.word	0x40010c00

080001ec <EN_PULS>:
#include "LCD.h"
	PIN_config PIN_C;

void EN_PULS(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 80001f0:	2201      	movs	r2, #1
 80001f2:	210a      	movs	r1, #10
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <EN_PULS+0x24>)
 80001f6:	f000 fe1d 	bl	8000e34 <MCAL_write_PIN>
	dus(50);
 80001fa:	2032      	movs	r0, #50	; 0x32
 80001fc:	f001 f91a 	bl	8001434 <dus>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 8000200:	2200      	movs	r2, #0
 8000202:	210a      	movs	r1, #10
 8000204:	4802      	ldr	r0, [pc, #8]	; (8000210 <EN_PULS+0x24>)
 8000206:	f000 fe15 	bl	8000e34 <MCAL_write_PIN>

}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010c00 	.word	0x40010c00

08000214 <LCD_sendCommand>:

void LCD_sendCommand(usint8_t command){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 800021e:	2200      	movs	r2, #0
 8000220:	210b      	movs	r1, #11
 8000222:	4830      	ldr	r0, [pc, #192]	; (80002e4 <LCD_sendCommand+0xd0>)
 8000224:	f000 fe06 	bl	8000e34 <MCAL_write_PIN>
	dus(1);
 8000228:	2001      	movs	r0, #1
 800022a:	f001 f903 	bl	8001434 <dus>
	dus(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	091b      	lsrs	r3, r3, #4
 8000232:	b2db      	uxtb	r3, r3
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	210c      	movs	r1, #12
 800023e:	4829      	ldr	r0, [pc, #164]	; (80002e4 <LCD_sendCommand+0xd0>)
 8000240:	f000 fdf8 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	095b      	lsrs	r3, r3, #5
 8000248:	b2db      	uxtb	r3, r3
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
 8000250:	461a      	mov	r2, r3
 8000252:	210d      	movs	r1, #13
 8000254:	4823      	ldr	r0, [pc, #140]	; (80002e4 <LCD_sendCommand+0xd0>)
 8000256:	f000 fded 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	099b      	lsrs	r3, r3, #6
 800025e:	b2db      	uxtb	r3, r3
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	461a      	mov	r2, r3
 8000268:	210e      	movs	r1, #14
 800026a:	481e      	ldr	r0, [pc, #120]	; (80002e4 <LCD_sendCommand+0xd0>)
 800026c:	f000 fde2 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	09db      	lsrs	r3, r3, #7
 8000274:	b2db      	uxtb	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	210f      	movs	r1, #15
 800027a:	481a      	ldr	r0, [pc, #104]	; (80002e4 <LCD_sendCommand+0xd0>)
 800027c:	f000 fdda 	bl	8000e34 <MCAL_write_PIN>
	EN_PULS();
 8000280:	f7ff ffb4 	bl	80001ec <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	210c      	movs	r1, #12
 8000290:	4814      	ldr	r0, [pc, #80]	; (80002e4 <LCD_sendCommand+0xd0>)
 8000292:	f000 fdcf 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	085b      	lsrs	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	210d      	movs	r1, #13
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <LCD_sendCommand+0xd0>)
 80002a8:	f000 fdc4 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	089b      	lsrs	r3, r3, #2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	210e      	movs	r1, #14
 80002bc:	4809      	ldr	r0, [pc, #36]	; (80002e4 <LCD_sendCommand+0xd0>)
 80002be:	f000 fdb9 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	08db      	lsrs	r3, r3, #3
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	210f      	movs	r1, #15
 80002d2:	4804      	ldr	r0, [pc, #16]	; (80002e4 <LCD_sendCommand+0xd0>)
 80002d4:	f000 fdae 	bl	8000e34 <MCAL_write_PIN>
	EN_PULS();
 80002d8:	f7ff ff88 	bl	80001ec <EN_PULS>

#endif

}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <LCD_init>:

void LCD_init(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	dus(20); // wait until power
 80002ec:	2014      	movs	r0, #20
 80002ee:	f001 f8a1 	bl	8001434 <dus>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 80002f2:	4b25      	ldr	r3, [pc, #148]	; (8000388 <LCD_init+0xa0>)
 80002f4:	220b      	movs	r2, #11
 80002f6:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 80002f8:	4b23      	ldr	r3, [pc, #140]	; (8000388 <LCD_init+0xa0>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <LCD_init+0xa0>)
 8000300:	2202      	movs	r2, #2
 8000302:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 8000304:	4920      	ldr	r1, [pc, #128]	; (8000388 <LCD_init+0xa0>)
 8000306:	4821      	ldr	r0, [pc, #132]	; (800038c <LCD_init+0xa4>)
 8000308:	f000 fcac 	bl	8000c64 <MCAL_GPIO_init>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	dus(1);

		PIN_C.PIN_number=EN;
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <LCD_init+0xa0>)
 800030e:	220a      	movs	r2, #10
 8000310:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 8000312:	491d      	ldr	r1, [pc, #116]	; (8000388 <LCD_init+0xa0>)
 8000314:	481d      	ldr	r0, [pc, #116]	; (800038c <LCD_init+0xa4>)
 8000316:	f000 fca5 	bl	8000c64 <MCAL_GPIO_init>
	dus(15); // wait until power
 800031a:	200f      	movs	r0, #15
 800031c:	f001 f88a 	bl	8001434 <dus>
	dus(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <LCD_init+0xa0>)
 8000322:	2204      	movs	r2, #4
 8000324:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <LCD_init+0xa0>)
 8000328:	2202      	movs	r2, #2
 800032a:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <LCD_init+0xa0>)
 800032e:	220c      	movs	r2, #12
 8000330:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <LCD_init+0xa0>)
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <LCD_init+0xa4>)
 8000336:	f000 fc95 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <LCD_init+0xa0>)
 800033c:	220d      	movs	r2, #13
 800033e:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8000340:	4911      	ldr	r1, [pc, #68]	; (8000388 <LCD_init+0xa0>)
 8000342:	4812      	ldr	r0, [pc, #72]	; (800038c <LCD_init+0xa4>)
 8000344:	f000 fc8e 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <LCD_init+0xa0>)
 800034a:	220e      	movs	r2, #14
 800034c:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LCD_init+0xa0>)
 8000350:	480e      	ldr	r0, [pc, #56]	; (800038c <LCD_init+0xa4>)
 8000352:	f000 fc87 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <LCD_init+0xa0>)
 8000358:	220f      	movs	r2, #15
 800035a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 800035c:	490a      	ldr	r1, [pc, #40]	; (8000388 <LCD_init+0xa0>)
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <LCD_init+0xa4>)
 8000360:	f000 fc80 	bl	8000c64 <MCAL_GPIO_init>
	dus(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f001 f865 	bl	8001434 <dus>
	LCD_sendCommand(LCD_GO_TO_HOME);
 800036a:	2002      	movs	r0, #2
 800036c:	f7ff ff52 	bl	8000214 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 8000370:	2028      	movs	r0, #40	; 0x28
 8000372:	f7ff ff4f 	bl	8000214 <LCD_sendCommand>

	dus(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f001 f85c 	bl	8001434 <dus>



#endif
	LCD_sendCommand(LCD_CURSOR_ON);
 800037c:	200e      	movs	r0, #14
 800037e:	f7ff ff49 	bl	8000214 <LCD_sendCommand>

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000009c 	.word	0x2000009c
 800038c:	40010c00 	.word	0x40010c00

08000390 <EN_PULS_V2>:
#include "LCD2.h"
	PIN_config PIN_C;

void EN_PULS_V2(){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 8000394:	2201      	movs	r2, #1
 8000396:	210e      	movs	r1, #14
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <EN_PULS_V2+0x24>)
 800039a:	f000 fd4b 	bl	8000e34 <MCAL_write_PIN>
	dus(50);
 800039e:	2032      	movs	r0, #50	; 0x32
 80003a0:	f001 f848 	bl	8001434 <dus>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 80003a4:	2200      	movs	r2, #0
 80003a6:	210e      	movs	r1, #14
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <EN_PULS_V2+0x24>)
 80003aa:	f000 fd43 	bl	8000e34 <MCAL_write_PIN>

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40011000 	.word	0x40011000

080003b8 <LCD_sendCommand_V2>:

void LCD_sendCommand_V2(usint8_t command){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 80003c2:	2200      	movs	r2, #0
 80003c4:	210d      	movs	r1, #13
 80003c6:	4830      	ldr	r0, [pc, #192]	; (8000488 <LCD_sendCommand_V2+0xd0>)
 80003c8:	f000 fd34 	bl	8000e34 <MCAL_write_PIN>
	dus(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f001 f831 	bl	8001434 <dus>
	dus(1);

	EN_PULS_V2();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	091b      	lsrs	r3, r3, #4
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	210c      	movs	r1, #12
 80003e2:	482a      	ldr	r0, [pc, #168]	; (800048c <LCD_sendCommand_V2+0xd4>)
 80003e4:	f000 fd26 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	095b      	lsrs	r3, r3, #5
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	461a      	mov	r2, r3
 80003f6:	210d      	movs	r1, #13
 80003f8:	4824      	ldr	r0, [pc, #144]	; (800048c <LCD_sendCommand_V2+0xd4>)
 80003fa:	f000 fd1b 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	099b      	lsrs	r3, r3, #6
 8000402:	b2db      	uxtb	r3, r3
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	210e      	movs	r1, #14
 800040e:	481f      	ldr	r0, [pc, #124]	; (800048c <LCD_sendCommand_V2+0xd4>)
 8000410:	f000 fd10 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	09db      	lsrs	r3, r3, #7
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	210f      	movs	r1, #15
 800041e:	481b      	ldr	r0, [pc, #108]	; (800048c <LCD_sendCommand_V2+0xd4>)
 8000420:	f000 fd08 	bl	8000e34 <MCAL_write_PIN>
	EN_PULS_V2();
 8000424:	f7ff ffb4 	bl	8000390 <EN_PULS_V2>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	210c      	movs	r1, #12
 8000434:	4815      	ldr	r0, [pc, #84]	; (800048c <LCD_sendCommand_V2+0xd4>)
 8000436:	f000 fcfd 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	085b      	lsrs	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	210d      	movs	r1, #13
 800044a:	4810      	ldr	r0, [pc, #64]	; (800048c <LCD_sendCommand_V2+0xd4>)
 800044c:	f000 fcf2 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	089b      	lsrs	r3, r3, #2
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	210e      	movs	r1, #14
 8000460:	480a      	ldr	r0, [pc, #40]	; (800048c <LCD_sendCommand_V2+0xd4>)
 8000462:	f000 fce7 	bl	8000e34 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	08db      	lsrs	r3, r3, #3
 800046a:	b2db      	uxtb	r3, r3
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	210f      	movs	r1, #15
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <LCD_sendCommand_V2+0xd4>)
 8000478:	f000 fcdc 	bl	8000e34 <MCAL_write_PIN>
	EN_PULS_V2();
 800047c:	f7ff ff88 	bl	8000390 <EN_PULS_V2>

#endif

}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40011000 	.word	0x40011000
 800048c:	40010800 	.word	0x40010800

08000490 <LCD_init_V2>:

void LCD_init_V2(){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	dus(20); // wait until power
 8000494:	2014      	movs	r0, #20
 8000496:	f000 ffcd 	bl	8001434 <dus>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <LCD_init_V2+0xa0>)
 800049c:	220d      	movs	r2, #13
 800049e:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <LCD_init_V2+0xa0>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <LCD_init_V2+0xa0>)
 80004a8:	2202      	movs	r2, #2
 80004aa:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80004ac:	4920      	ldr	r1, [pc, #128]	; (8000530 <LCD_init_V2+0xa0>)
 80004ae:	4821      	ldr	r0, [pc, #132]	; (8000534 <LCD_init_V2+0xa4>)
 80004b0:	f000 fbd8 	bl	8000c64 <MCAL_GPIO_init>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	dus(1);

		PIN_C.PIN_number=EN;
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <LCD_init_V2+0xa0>)
 80004b6:	220e      	movs	r2, #14
 80004b8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 80004ba:	491d      	ldr	r1, [pc, #116]	; (8000530 <LCD_init_V2+0xa0>)
 80004bc:	481d      	ldr	r0, [pc, #116]	; (8000534 <LCD_init_V2+0xa4>)
 80004be:	f000 fbd1 	bl	8000c64 <MCAL_GPIO_init>
	dus(15); // wait until power
 80004c2:	200f      	movs	r0, #15
 80004c4:	f000 ffb6 	bl	8001434 <dus>
	dus(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <LCD_init_V2+0xa0>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <LCD_init_V2+0xa0>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <LCD_init_V2+0xa0>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004da:	4915      	ldr	r1, [pc, #84]	; (8000530 <LCD_init_V2+0xa0>)
 80004dc:	4816      	ldr	r0, [pc, #88]	; (8000538 <LCD_init_V2+0xa8>)
 80004de:	f000 fbc1 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <LCD_init_V2+0xa0>)
 80004e4:	220d      	movs	r2, #13
 80004e6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004e8:	4911      	ldr	r1, [pc, #68]	; (8000530 <LCD_init_V2+0xa0>)
 80004ea:	4813      	ldr	r0, [pc, #76]	; (8000538 <LCD_init_V2+0xa8>)
 80004ec:	f000 fbba 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <LCD_init_V2+0xa0>)
 80004f2:	220e      	movs	r2, #14
 80004f4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80004f6:	490e      	ldr	r1, [pc, #56]	; (8000530 <LCD_init_V2+0xa0>)
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <LCD_init_V2+0xa8>)
 80004fa:	f000 fbb3 	bl	8000c64 <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <LCD_init_V2+0xa0>)
 8000500:	220f      	movs	r2, #15
 8000502:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 8000504:	490a      	ldr	r1, [pc, #40]	; (8000530 <LCD_init_V2+0xa0>)
 8000506:	480c      	ldr	r0, [pc, #48]	; (8000538 <LCD_init_V2+0xa8>)
 8000508:	f000 fbac 	bl	8000c64 <MCAL_GPIO_init>
	dus(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f000 ff91 	bl	8001434 <dus>
	LCD_sendCommand_V2(LCD_GO_TO_HOME);
 8000512:	2002      	movs	r0, #2
 8000514:	f7ff ff50 	bl	80003b8 <LCD_sendCommand_V2>

	LCD_sendCommand_V2(LCD_TWO_LINES_FOUR_BITS_MODE);
 8000518:	2028      	movs	r0, #40	; 0x28
 800051a:	f7ff ff4d 	bl	80003b8 <LCD_sendCommand_V2>

	dus(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f000 ff88 	bl	8001434 <dus>



#endif
	LCD_sendCommand_V2(LCD_CURSOR_ON);
 8000524:	200e      	movs	r0, #14
 8000526:	f7ff ff47 	bl	80003b8 <LCD_sendCommand_V2>

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000009c 	.word	0x2000009c
 8000534:	40011000 	.word	0x40011000
 8000538:	40010800 	.word	0x40010800

0800053c <SPI_EEPROM_init>:


#include "SPI_EEPROM.h"
 SPI_Config_t SPI_config_v ={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_8,idle_0,first_clock,interrupt_DS,NULL};

void SPI_EEPROM_init(SPI_Reg *SPIx){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	MCAL_SPI_init(SPI1,&SPI_config_v);
 8000544:	4906      	ldr	r1, [pc, #24]	; (8000560 <SPI_EEPROM_init+0x24>)
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <SPI_EEPROM_init+0x28>)
 8000548:	f000 fd06 	bl	8000f58 <MCAL_SPI_init>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	2104      	movs	r1, #4
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <SPI_EEPROM_init+0x2c>)
 8000552:	f000 fc6f 	bl	8000e34 <MCAL_write_PIN>



}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000004 	.word	0x20000004
 8000564:	40013000 	.word	0x40013000
 8000568:	40010800 	.word	0x40010800

0800056c <SPI_EEPROM_WRITE>:
		The only restriction is that all of the bytes must reside
		in the same page.

 *
 *   */
void SPI_EEPROM_WRITE(SPI_Reg *SPIx,uint16_t addr,uint8_t *data,uint8_t data_len){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	727b      	strb	r3, [r7, #9]

	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 8000580:	2200      	movs	r2, #0
 8000582:	2104      	movs	r1, #4
 8000584:	4830      	ldr	r0, [pc, #192]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 8000586:	f000 fc55 	bl	8000e34 <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, WREN_Instruction);
 800058a:	2106      	movs	r1, #6
 800058c:	482f      	ldr	r0, [pc, #188]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 800058e:	f000 fda7 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	2104      	movs	r1, #4
 8000596:	482c      	ldr	r0, [pc, #176]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 8000598:	f000 fc4c 	bl	8000e34 <MCAL_write_PIN>
	/********************/
	MCAL_write_PIN(GPIOA, PIN_4, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2104      	movs	r1, #4
 80005a0:	4829      	ldr	r0, [pc, #164]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 80005a2:	f000 fc47 	bl	8000e34 <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, 0x00);
 80005a6:	2100      	movs	r1, #0
 80005a8:	4828      	ldr	r0, [pc, #160]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 80005aa:	f000 fd99 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2104      	movs	r1, #4
 80005b2:	4825      	ldr	r0, [pc, #148]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 80005b4:	f000 fc3e 	bl	8000e34 <MCAL_write_PIN>
	/****************/
	MCAL_write_PIN(GPIOA, PIN_4, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4822      	ldr	r0, [pc, #136]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 80005be:	f000 fc39 	bl	8000e34 <MCAL_write_PIN>

	MCAL_SPI_SendData(SPI1, WRITE_Instruction);
 80005c2:	2102      	movs	r1, #2
 80005c4:	4821      	ldr	r0, [pc, #132]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 80005c6:	f000 fd8b 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1, (uint8_t)(addr>>8));
 80005ca:	897b      	ldrh	r3, [r7, #10]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 80005d8:	f000 fd82 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1,(uint8_t) addr);
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 80005e6:	f000 fd7b 	bl	80010e0 <MCAL_SPI_SendData>
	for(int i=0;(i<data_len) &&(data_len <=64);i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e00c      	b.n	800060a <SPI_EEPROM_WRITE+0x9e>
		MCAL_SPI_SendData(SPI1,*data);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 80005fa:	f000 fd71 	bl	80010e0 <MCAL_SPI_SendData>
		data++;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
	for(int i=0;(i<data_len) &&(data_len <=64);i++){
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	7a7b      	ldrb	r3, [r7, #9]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	429a      	cmp	r2, r3
 8000610:	da02      	bge.n	8000618 <SPI_EEPROM_WRITE+0xac>
 8000612:	7a7b      	ldrb	r3, [r7, #9]
 8000614:	2b40      	cmp	r3, #64	; 0x40
 8000616:	d9eb      	bls.n	80005f0 <SPI_EEPROM_WRITE+0x84>
	}
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 800061e:	f000 fc09 	bl	8000e34 <MCAL_write_PIN>

	/********************/
	MCAL_write_PIN(GPIOA, PIN_4, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 8000628:	f000 fc04 	bl	8000e34 <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, 0x00);
 800062c:	2100      	movs	r1, #0
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <SPI_EEPROM_WRITE+0xe0>)
 8000630:	f000 fd56 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	2104      	movs	r1, #4
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SPI_EEPROM_WRITE+0xdc>)
 800063a:	f000 fbfb 	bl	8000e34 <MCAL_write_PIN>
	/****************/



}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010800 	.word	0x40010800
 800064c:	40013000 	.word	0x40013000

08000650 <SPI_EEPROM_READ>:
 *	7. The read operation is terminated by raising the CS pin
 *
 * */


void SPI_EEPROM_READ(SPI_Reg *SPIx,uint16_t addr,uint8_t *data,uint8_t data_len){
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	461a      	mov	r2, r3
 800065c:	460b      	mov	r3, r1
 800065e:	817b      	strh	r3, [r7, #10]
 8000660:	4613      	mov	r3, r2
 8000662:	727b      	strb	r3, [r7, #9]


	MCAL_write_PIN(GPIOA, PIN_4, 0); //PA4
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <SPI_EEPROM_READ+0x70>)
 800066a:	f000 fbe3 	bl	8000e34 <MCAL_write_PIN>
	MCAL_SPI_SendData(SPI1, READ_Instruction);
 800066e:	2103      	movs	r1, #3
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <SPI_EEPROM_READ+0x74>)
 8000672:	f000 fd35 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1, (uint8_t)(addr<<8));
 8000676:	2100      	movs	r1, #0
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <SPI_EEPROM_READ+0x74>)
 800067a:	f000 fd31 	bl	80010e0 <MCAL_SPI_SendData>
	MCAL_SPI_SendData(SPI1,(uint8_t) addr);
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	480f      	ldr	r0, [pc, #60]	; (80006c4 <SPI_EEPROM_READ+0x74>)
 8000688:	f000 fd2a 	bl	80010e0 <MCAL_SPI_SendData>
	for(int i=0;i<data_len;i++){
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	e009      	b.n	80006a6 <SPI_EEPROM_READ+0x56>
		MCAL_SPI_ReciveData(SPI1,(uint8_t *)data);
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <SPI_EEPROM_READ+0x74>)
 8000696:	f000 fd55 	bl	8001144 <MCAL_SPI_ReciveData>
		data++;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<data_len;i++){
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3301      	adds	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	7a7b      	ldrb	r3, [r7, #9]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbf1      	blt.n	8000692 <SPI_EEPROM_READ+0x42>
	}
	MCAL_write_PIN(GPIOA, PIN_4, 1); //PA4
 80006ae:	2201      	movs	r2, #1
 80006b0:	2104      	movs	r1, #4
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <SPI_EEPROM_READ+0x70>)
 80006b4:	f000 fbbe 	bl	8000e34 <MCAL_write_PIN>


}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40013000 	.word	0x40013000

080006c8 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d854      	bhi.n	8000782 <NVIC_ENABLE+0xba>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <NVIC_ENABLE+0x18>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000721 	.word	0x08000721
 80006e4:	0800072f 	.word	0x0800072f
 80006e8:	0800073d 	.word	0x0800073d
 80006ec:	0800074b 	.word	0x0800074b
 80006f0:	08000759 	.word	0x08000759
 80006f4:	08000767 	.word	0x08000767
 80006f8:	08000767 	.word	0x08000767
 80006fc:	08000767 	.word	0x08000767
 8000700:	08000767 	.word	0x08000767
 8000704:	08000767 	.word	0x08000767
 8000708:	08000775 	.word	0x08000775
 800070c:	08000775 	.word	0x08000775
 8000710:	08000775 	.word	0x08000775
 8000714:	08000775 	.word	0x08000775
 8000718:	08000775 	.word	0x08000775
 800071c:	08000775 	.word	0x08000775
	case 0:
		NVIC_EXTI0_EN;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <NVIC_ENABLE+0xc4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <NVIC_ENABLE+0xc4>)
 8000726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072a:	6013      	str	r3, [r2, #0]
		break;
 800072c:	e029      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <NVIC_ENABLE+0xc4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <NVIC_ENABLE+0xc4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6013      	str	r3, [r2, #0]
		break;
 800073a:	e022      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <NVIC_ENABLE+0xc4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <NVIC_ENABLE+0xc4>)
 8000742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000746:	6013      	str	r3, [r2, #0]
		break;
 8000748:	e01b      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <NVIC_ENABLE+0xc4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <NVIC_ENABLE+0xc4>)
 8000750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000754:	6013      	str	r3, [r2, #0]
		break;
 8000756:	e014      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <NVIC_ENABLE+0xc4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <NVIC_ENABLE+0xc4>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000762:	6013      	str	r3, [r2, #0]
		break;
 8000764:	e00d      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <NVIC_ENABLE+0xc4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <NVIC_ENABLE+0xc4>)
 800076c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000770:	6013      	str	r3, [r2, #0]
		break;
 8000772:	e006      	b.n	8000782 <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <NVIC_ENABLE+0xc8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <NVIC_ENABLE+0xc8>)
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
break;
 8000780:	bf00      	nop

	}
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000e104 	.word	0xe000e104

08000794 <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d854      	bhi.n	800084e <NVIC_DISABLE+0xba>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <NVIC_DISABLE+0x18>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007ed 	.word	0x080007ed
 80007b0:	080007fb 	.word	0x080007fb
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000817 	.word	0x08000817
 80007bc:	08000825 	.word	0x08000825
 80007c0:	08000833 	.word	0x08000833
 80007c4:	08000833 	.word	0x08000833
 80007c8:	08000833 	.word	0x08000833
 80007cc:	08000833 	.word	0x08000833
 80007d0:	08000833 	.word	0x08000833
 80007d4:	08000841 	.word	0x08000841
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000841 	.word	0x08000841
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000841 	.word	0x08000841
 80007e8:	08000841 	.word	0x08000841
	case 0:
		NVIC_EXTI0_D;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <NVIC_DISABLE+0xc4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <NVIC_DISABLE+0xc4>)
 80007f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f6:	6013      	str	r3, [r2, #0]
		break;
 80007f8:	e029      	b.n	800084e <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <NVIC_DISABLE+0xc4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <NVIC_DISABLE+0xc4>)
 8000800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000804:	6013      	str	r3, [r2, #0]
		break;
 8000806:	e022      	b.n	800084e <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <NVIC_DISABLE+0xc4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <NVIC_DISABLE+0xc4>)
 800080e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000812:	6013      	str	r3, [r2, #0]
		break;
 8000814:	e01b      	b.n	800084e <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <NVIC_DISABLE+0xc4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <NVIC_DISABLE+0xc4>)
 800081c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000820:	6013      	str	r3, [r2, #0]
		break;
 8000822:	e014      	b.n	800084e <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <NVIC_DISABLE+0xc4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <NVIC_DISABLE+0xc4>)
 800082a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800082e:	6013      	str	r3, [r2, #0]
		break;
 8000830:	e00d      	b.n	800084e <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <NVIC_DISABLE+0xc4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <NVIC_DISABLE+0xc4>)
 8000838:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800083c:	6013      	str	r3, [r2, #0]
		break;
 800083e:	e006      	b.n	800084e <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <NVIC_DISABLE+0xc8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <NVIC_DISABLE+0xc8>)
 8000846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800084a:	6013      	str	r3, [r2, #0]
break;
 800084c:	bf00      	nop

	}
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000e104 	.word	0xe000e104

08000860 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	b29b      	uxth	r3, r3
 8000870:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	891b      	ldrh	r3, [r3, #8]
 800088a:	813b      	strh	r3, [r7, #8]
 800088c:	2301      	movs	r3, #1
 800088e:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f107 0208 	add.w	r2, r7, #8
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f9e2 	bl	8000c64 <MCAL_GPIO_init>
		//UPDATE THE ALTERNATIVE FUNC
		AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 80008a0:	4a54      	ldr	r2, [pc, #336]	; (80009f4 <MCAL_EXTI_init+0x194>)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3302      	adds	r3, #2
 80008a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	210f      	movs	r1, #15
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	494f      	ldr	r1, [pc, #316]	; (80009f4 <MCAL_EXTI_init+0x194>)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4002      	ands	r2, r0
 80008bc:	3302      	adds	r3, #2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 80008c2:	4a4c      	ldr	r2, [pc, #304]	; (80009f4 <MCAL_EXTI_init+0x194>)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	3302      	adds	r3, #2
 80008c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4949      	ldr	r1, [pc, #292]	; (80009f8 <MCAL_EXTI_init+0x198>)
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d016      	beq.n	8000904 <MCAL_EXTI_init+0xa4>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4948      	ldr	r1, [pc, #288]	; (80009fc <MCAL_EXTI_init+0x19c>)
 80008dc:	428b      	cmp	r3, r1
 80008de:	d00f      	beq.n	8000900 <MCAL_EXTI_init+0xa0>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4946      	ldr	r1, [pc, #280]	; (8000a00 <MCAL_EXTI_init+0x1a0>)
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d008      	beq.n	80008fc <MCAL_EXTI_init+0x9c>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	4945      	ldr	r1, [pc, #276]	; (8000a04 <MCAL_EXTI_init+0x1a4>)
 80008f0:	428b      	cmp	r3, r1
 80008f2:	d101      	bne.n	80008f8 <MCAL_EXTI_init+0x98>
 80008f4:	2304      	movs	r3, #4
 80008f6:	e006      	b.n	8000906 <MCAL_EXTI_init+0xa6>
 80008f8:	2300      	movs	r3, #0
 80008fa:	e004      	b.n	8000906 <MCAL_EXTI_init+0xa6>
 80008fc:	2303      	movs	r3, #3
 80008fe:	e002      	b.n	8000906 <MCAL_EXTI_init+0xa6>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <MCAL_EXTI_init+0xa6>
 8000904:	2300      	movs	r3, #0
 8000906:	7bb9      	ldrb	r1, [r7, #14]
 8000908:	408b      	lsls	r3, r1
 800090a:	4618      	mov	r0, r3
 800090c:	4939      	ldr	r1, [pc, #228]	; (80009f4 <MCAL_EXTI_init+0x194>)
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4302      	orrs	r2, r0
 8000912:	3302      	adds	r3, #2
 8000914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7b1b      	ldrb	r3, [r3, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10b      	bne.n	8000938 <MCAL_EXTI_init+0xd8>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000920:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	8812      	ldrh	r2, [r2, #0]
 8000928:	4611      	mov	r1, r2
 800092a:	2201      	movs	r2, #1
 800092c:	408a      	lsls	r2, r1
 800092e:	4611      	mov	r1, r2
 8000930:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000932:	430b      	orrs	r3, r1
 8000934:	60d3      	str	r3, [r2, #12]
 8000936:	e029      	b.n	800098c <MCAL_EXTI_init+0x12c>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7b1b      	ldrb	r3, [r3, #12]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d10b      	bne.n	8000958 <MCAL_EXTI_init+0xf8>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000940:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	2201      	movs	r2, #1
 800094c:	408a      	lsls	r2, r1
 800094e:	4611      	mov	r1, r2
 8000950:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000952:	430b      	orrs	r3, r1
 8000954:	6093      	str	r3, [r2, #8]
 8000956:	e019      	b.n	800098c <MCAL_EXTI_init+0x12c>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7b1b      	ldrb	r3, [r3, #12]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d115      	bne.n	800098c <MCAL_EXTI_init+0x12c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	8812      	ldrh	r2, [r2, #0]
 8000968:	4611      	mov	r1, r2
 800096a:	2201      	movs	r2, #1
 800096c:	408a      	lsls	r2, r1
 800096e:	4611      	mov	r1, r2
 8000970:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000972:	430b      	orrs	r3, r1
 8000974:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	8812      	ldrh	r2, [r2, #0]
 800097e:	4611      	mov	r1, r2
 8000980:	2201      	movs	r2, #1
 8000982:	408a      	lsls	r2, r1
 8000984:	4611      	mov	r1, r2
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6093      	str	r3, [r2, #8]


		}
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	691b      	ldr	r3, [r3, #16]
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <MCAL_EXTI_init+0x1ac>)
 8000998:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7b5b      	ldrb	r3, [r3, #13]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d111      	bne.n	80009c8 <MCAL_EXTI_init+0x168>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	4611      	mov	r1, r2
 80009ae:	2201      	movs	r2, #1
 80009b0:	408a      	lsls	r2, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe81 	bl	80006c8 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 80009c6:	e011      	b.n	80009ec <MCAL_EXTI_init+0x18c>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	8812      	ldrh	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	408a      	lsls	r2, r1
 80009d6:	43d2      	mvns	r2, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <MCAL_EXTI_init+0x1a8>)
 80009dc:	400b      	ands	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fed4 	bl	8000794 <NVIC_DISABLE>
	}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010000 	.word	0x40010000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011000 	.word	0x40011000
 8000a04:	40011400 	.word	0x40011400
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	200000a0 	.word	0x200000a0

08000a10 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <EXTI0_IRQHandler+0x1c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <EXTI0_IRQHandler+0x20>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <EXTI0_IRQHandler+0x20>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6153      	str	r3, [r2, #20]
	}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	40010400 	.word	0x40010400

08000a34 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <EXTI1_IRQHandler+0x1c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <EXTI1_IRQHandler+0x20>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <EXTI1_IRQHandler+0x20>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6153      	str	r3, [r2, #20]

	}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000a0 	.word	0x200000a0
 8000a54:	40010400 	.word	0x40010400

08000a58 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <EXTI2_IRQHandler+0x1c>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI2_IRQHandler+0x20>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI2_IRQHandler+0x20>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6153      	str	r3, [r2, #20]

	}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	40010400 	.word	0x40010400

08000a7c <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <EXTI3_IRQHandler+0x1c>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <EXTI3_IRQHandler+0x20>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <EXTI3_IRQHandler+0x20>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6153      	str	r3, [r2, #20]

	}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000a0 	.word	0x200000a0
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <EXTI4_IRQHandler+0x1c>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <EXTI4_IRQHandler+0x20>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <EXTI4_IRQHandler+0x20>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6153      	str	r3, [r2, #20]

	}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	40010400 	.word	0x40010400

08000ac4 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <EXTI9_5_IRQHandler+0x22>
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6153      	str	r3, [r2, #20]
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <EXTI9_5_IRQHandler+0xa4>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <EXTI9_5_IRQHandler+0x40>
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <EXTI9_5_IRQHandler+0xa4>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <EXTI9_5_IRQHandler+0x5e>
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1a:	6153      	str	r3, [r2, #20]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <EXTI9_5_IRQHandler+0xa4>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <EXTI9_5_IRQHandler+0x7c>
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <EXTI9_5_IRQHandler+0xa4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d008      	beq.n	8000b5e <EXTI9_5_IRQHandler+0x9a>
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6153      	str	r3, [r2, #20]
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <EXTI9_5_IRQHandler+0xa4>)
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	4798      	blx	r3
	}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010400 	.word	0x40010400
 8000b68:	200000a0 	.word	0x200000a0

08000b6c <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d008      	beq.n	8000b8e <EXTI15_10_IRQHandler+0x22>
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6153      	str	r3, [r2, #20]
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <EXTI15_10_IRQHandler+0x40>
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <EXTI15_10_IRQHandler+0x5e>
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc2:	6153      	str	r3, [r2, #20]
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <EXTI15_10_IRQHandler+0x7c>
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d008      	beq.n	8000c06 <EXTI15_10_IRQHandler+0x9a>
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6153      	str	r3, [r2, #20]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c04:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d008      	beq.n	8000c24 <EXTI15_10_IRQHandler+0xb8>
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <EXTI15_10_IRQHandler+0xc0>)
 8000c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c22:	4798      	blx	r3

	}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40010400 	.word	0x40010400
 8000c2c:	200000a0 	.word	0x200000a0

08000c30 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d803      	bhi.n	8000c48 <Get_PIN_Positon+0x18>
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	e006      	b.n	8000c56 <Get_PIN_Positon+0x26>
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000c4e:	3338      	adds	r3, #56	; 0x38
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	81fb      	strh	r3, [r7, #14]
return positon;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a6a      	ldr	r2, [pc, #424]	; (8000e1c <MCAL_GPIO_init+0x1b8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d106      	bne.n	8000c84 <MCAL_GPIO_init+0x20>
 8000c76:	4b6a      	ldr	r3, [pc, #424]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a69      	ldr	r2, [pc, #420]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	e02a      	b.n	8000cda <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a67      	ldr	r2, [pc, #412]	; (8000e24 <MCAL_GPIO_init+0x1c0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d106      	bne.n	8000c9a <MCAL_GPIO_init+0x36>
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a63      	ldr	r2, [pc, #396]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	e01f      	b.n	8000cda <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a62      	ldr	r2, [pc, #392]	; (8000e28 <MCAL_GPIO_init+0x1c4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <MCAL_GPIO_init+0x4c>
 8000ca2:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a5e      	ldr	r2, [pc, #376]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	e014      	b.n	8000cda <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a5e      	ldr	r2, [pc, #376]	; (8000e2c <MCAL_GPIO_init+0x1c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d106      	bne.n	8000cc6 <MCAL_GPIO_init+0x62>
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a58      	ldr	r2, [pc, #352]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	e009      	b.n	8000cda <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <MCAL_GPIO_init+0x1cc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d105      	bne.n	8000cda <MCAL_GPIO_init+0x76>
 8000cce:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <MCAL_GPIO_init+0x1bc>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d801      	bhi.n	8000ce8 <MCAL_GPIO_init+0x84>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	e001      	b.n	8000cec <MCAL_GPIO_init+0x88>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff9b 	bl	8000c30 <Get_PIN_Positon>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	230f      	movs	r3, #15
 8000d00:	4093      	lsls	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	401a      	ands	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00e      	beq.n	8000d36 <MCAL_GPIO_init+0xd2>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d009      	beq.n	8000d36 <MCAL_GPIO_init+0xd2>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d004      	beq.n	8000d36 <MCAL_GPIO_init+0xd2>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d156      	bne.n	8000de4 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d11c      	bne.n	8000d7a <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff72 	bl	8000c30 <Get_PIN_Positon>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2308      	movs	r3, #8
 8000d52:	fa03 f202 	lsl.w	r2, r3, r2
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	401a      	ands	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000d78:	e04c      	b.n	8000e14 <MCAL_GPIO_init+0x1b0>
		}

		else if(PINx->MODE == INPUT_PU){
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d11c      	bne.n	8000dbe <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff50 	bl	8000c30 <Get_PIN_Positon>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	2308      	movs	r3, #8
 8000d96:	fa03 f202 	lsl.w	r2, r3, r2
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	2301      	movs	r3, #1
 8000dae:	fa03 f202 	lsl.w	r2, r3, r2
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000dbc:	e02a      	b.n	8000e14 <MCAL_GPIO_init+0x1b0>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	789b      	ldrb	r3, [r3, #2]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	009c      	lsls	r4, r3, #2
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff2f 	bl	8000c30 <Get_PIN_Positon>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	fa04 f203 	lsl.w	r2, r4, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8000de2:	e017      	b.n	8000e14 <MCAL_GPIO_init+0x1b0>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3b04      	subs	r3, #4
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	78d2      	ldrb	r2, [r2, #3]
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	ea43 0402 	orr.w	r4, r3, r2
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff16 	bl	8000c30 <Get_PIN_Positon>
 8000e04:	4603      	mov	r3, r0
 8000e06:	fa04 f203 	lsl.w	r2, r4, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	601a      	str	r2, [r3, #0]

	}

}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	40011800 	.word	0x40011800

08000e34 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10b      	bne.n	8000e64 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	2301      	movs	r3, #1
 8000e54:	fa03 f202 	lsl.w	r2, r3, r2
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60da      	str	r2, [r3, #12]

	}



}
 8000e62:	e00a      	b.n	8000e7a <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	401a      	ands	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60da      	str	r2, [r3, #12]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <MCAL_write_PORT>:

void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR=value;
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60da      	str	r2, [r3, #12]


}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MCAL_GET_SYS_CLCK+0x30>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d006      	beq.n	8000ec4 <MCAL_GET_SYS_CLCK+0x20>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d302      	bcc.n	8000ec0 <MCAL_GET_SYS_CLCK+0x1c>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d004      	beq.n	8000ec8 <MCAL_GET_SYS_CLCK+0x24>
 8000ebe:	e005      	b.n	8000ecc <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MCAL_GET_SYS_CLCK+0x34>)
 8000ec2:	e003      	b.n	8000ecc <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <MCAL_GET_SYS_CLCK+0x38>)
 8000ec6:	e001      	b.n	8000ecc <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <MCAL_GET_SYS_CLCK+0x38>)
 8000eca:	e7ff      	b.n	8000ecc <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	007a1200 	.word	0x007a1200
 8000edc:	00f42400 	.word	0x00f42400

08000ee0 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000ee4:	f7ff ffde 	bl	8000ea4 <MCAL_GET_SYS_CLCK>
 8000ee8:	4601      	mov	r1, r0
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <MCAL_GET_H_CLCK+0x20>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <MCAL_GET_H_CLCK+0x24>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	20000014 	.word	0x20000014

08000f08 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8000f0c:	f7ff ffe8 	bl	8000ee0 <MCAL_GET_H_CLCK>
 8000f10:	4601      	mov	r1, r0
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <MCAL_GET_PCLCK1+0x20>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <MCAL_GET_PCLCK1+0x24>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	20000014 	.word	0x20000014

08000f30 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8000f34:	f7ff ffd4 	bl	8000ee0 <MCAL_GET_H_CLCK>
 8000f38:	4601      	mov	r1, r0
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <MCAL_GET_PCLCK2+0x20>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	0adb      	lsrs	r3, r3, #11
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <MCAL_GET_PCLCK2+0x24>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	20000014 	.word	0x20000014

08000f58 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0,}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a59      	ldr	r2, [pc, #356]	; (80010cc <MCAL_SPI_init+0x174>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10c      	bne.n	8000f84 <MCAL_SPI_init+0x2c>
 8000f6a:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <MCAL_SPI_init+0x178>)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4614      	mov	r4, r2
 8000f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <MCAL_SPI_init+0x17c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <MCAL_SPI_init+0x17c>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	e011      	b.n	8000fa8 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <MCAL_SPI_init+0x180>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d10d      	bne.n	8000fa8 <MCAL_SPI_init+0x50>
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <MCAL_SPI_init+0x178>)
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	f103 0410 	add.w	r4, r3, #16
 8000f94:	4613      	mov	r3, r2
 8000f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <MCAL_SPI_init+0x17c>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <MCAL_SPI_init+0x17c>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	789b      	ldrb	r3, [r3, #2]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2d9      	uxtb	r1, r3
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	8813      	ldrh	r3, [r2, #0]
 8000fb6:	f361 23cb 	bfi	r3, r1, #11, #1
 8000fba:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	799b      	ldrb	r3, [r3, #6]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	8813      	ldrh	r3, [r2, #0]
 8000fca:	f361 0341 	bfi	r3, r1, #1, #1
 8000fce:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	79db      	ldrb	r3, [r3, #7]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b2d9      	uxtb	r1, r3
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	8813      	ldrh	r3, [r2, #0]
 8000fde:	f361 0300 	bfi	r3, r1, #0, #1
 8000fe2:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	78db      	ldrb	r3, [r3, #3]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	8813      	ldrh	r3, [r2, #0]
 8000ff2:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ff6:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <MCAL_SPI_init+0xb4>
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	8813      	ldrh	r3, [r2, #0]
 8001004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001008:	8013      	strh	r3, [r2, #0]
 800100a:	e01c      	b.n	8001046 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10a      	bne.n	800102a <MCAL_SPI_init+0xd2>
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	8813      	ldrh	r3, [r2, #0]
 8001018:	f36f 2349 	bfc	r3, #9, #1
 800101c:	8013      	strh	r3, [r2, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7913      	ldrb	r3, [r2, #4]
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	7113      	strb	r3, [r2, #4]
 8001028:	e00d      	b.n	8001046 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d109      	bne.n	8001046 <MCAL_SPI_init+0xee>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	8813      	ldrh	r3, [r2, #0]
 8001036:	f36f 2349 	bfc	r3, #9, #1
 800103a:	8013      	strh	r3, [r2, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	7913      	ldrb	r3, [r2, #4]
 8001040:	f36f 0382 	bfc	r3, #2, #1
 8001044:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	b2d9      	uxtb	r1, r3
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	8813      	ldrh	r3, [r2, #0]
 8001054:	f361 0382 	bfi	r3, r1, #2, #1
 8001058:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	b2d9      	uxtb	r1, r3
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	8813      	ldrh	r3, [r2, #0]
 8001068:	f361 03c5 	bfi	r3, r1, #3, #3
 800106c:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	7a1b      	ldrb	r3, [r3, #8]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d119      	bne.n	80010aa <MCAL_SPI_init+0x152>
		SPIx->SPI_CR2.Bit_Name.RXNEIE = 1;
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	7913      	ldrb	r3, [r2, #4]
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	7113      	strb	r3, [r2, #4]
//		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MCAL_SPI_init+0x174>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d106      	bne.n	8001096 <MCAL_SPI_init+0x13e>
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MCAL_SPI_init+0x184>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <MCAL_SPI_init+0x184>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e009      	b.n	80010aa <MCAL_SPI_init+0x152>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MCAL_SPI_init+0x180>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d105      	bne.n	80010aa <MCAL_SPI_init+0x152>
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MCAL_SPI_init+0x184>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <MCAL_SPI_init+0x184>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f882 	bl	80011b4 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b2d9      	uxtb	r1, r3
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	8813      	ldrh	r3, [r2, #0]
 80010be:	f361 1386 	bfi	r3, r1, #6, #1
 80010c2:	8013      	strh	r3, [r2, #0]




}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	40013000 	.word	0x40013000
 80010d0:	2000007c 	.word	0x2000007c
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40003800 	.word	0x40003800
 80010dc:	e000e104 	.word	0xe000e104

080010e0 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


void MCAL_SPI_SendData(SPI_Reg *SPIx,uint16_t data){
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
	SPI_Config_t *L_P_config_t=NULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <MCAL_SPI_SendData+0x54>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d102      	bne.n	80010fe <MCAL_SPI_SendData+0x1e>
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MCAL_SPI_SendData+0x58>)
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e005      	b.n	800110a <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <MCAL_SPI_SendData+0x5c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <MCAL_SPI_SendData+0x2a>
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MCAL_SPI_SendData+0x60>)
 8001108:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	7a1b      	ldrb	r3, [r3, #8]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d007      	beq.n	8001122 <MCAL_SPI_SendData+0x42>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 8001112:	bf00      	nop
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f8      	beq.n	8001114 <MCAL_SPI_SendData+0x34>
	}
	SPIx->DR_reg.ALL_REG=data;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]

}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40013000 	.word	0x40013000
 8001138:	2000007c 	.word	0x2000007c
 800113c:	40003800 	.word	0x40003800
 8001140:	2000008c 	.word	0x2000008c

08001144 <MCAL_SPI_ReciveData>:
void MCAL_SPI_ReciveData(SPI_Reg *SPIx,uint16_t *data){
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	SPI_Config_t *L_P_config_t=NULL;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MCAL_SPI_ReciveData+0x60>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d102      	bne.n	8001160 <MCAL_SPI_ReciveData+0x1c>
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MCAL_SPI_ReciveData+0x64>)
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e005      	b.n	800116c <MCAL_SPI_ReciveData+0x28>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MCAL_SPI_ReciveData+0x68>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <MCAL_SPI_ReciveData+0x28>
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MCAL_SPI_ReciveData+0x6c>)
 800116a:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	SPIx->DR_reg.ALL_REG=0x00;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]

	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d007      	beq.n	800118a <MCAL_SPI_ReciveData+0x46>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.RXNE);
 800117a:	bf00      	nop
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f8      	beq.n	800117c <MCAL_SPI_ReciveData+0x38>
	}
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	801a      	strh	r2, [r3, #0]


}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40013000 	.word	0x40013000
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	40003800 	.word	0x40003800
 80011b0:	2000008c 	.word	0x2000008c

080011b4 <MCAL_SET_GPIO>:

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a6c      	ldr	r2, [pc, #432]	; (8001374 <MCAL_SET_GPIO+0x1c0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d169      	bne.n	800129c <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 80011c8:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <MCAL_SET_GPIO+0x1c4>)
 80011ca:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <MCAL_SET_GPIO+0x1c8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a6a      	ldr	r2, [pc, #424]	; (800137c <MCAL_SET_GPIO+0x1c8>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	791b      	ldrb	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d108      	bne.n	80011f2 <MCAL_SET_GPIO+0x3e>
 80011e0:	4b67      	ldr	r3, [pc, #412]	; (8001380 <MCAL_SET_GPIO+0x1cc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4a63      	ldr	r2, [pc, #396]	; (8001374 <MCAL_SET_GPIO+0x1c0>)
 80011e8:	8813      	ldrh	r3, [r2, #0]
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	8013      	strh	r3, [r2, #0]
 80011f0:	e00e      	b.n	8001210 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d103      	bne.n	8001202 <MCAL_SET_GPIO+0x4e>
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <MCAL_SET_GPIO+0x1d0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e006      	b.n	8001210 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d102      	bne.n	8001210 <MCAL_SET_GPIO+0x5c>
 800120a:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <MCAL_SET_GPIO+0x1d4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	485d      	ldr	r0, [pc, #372]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 8001218:	f7ff fd24 	bl	8000c64 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d103      	bne.n	800122c <MCAL_SET_GPIO+0x78>
 8001224:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <MCAL_SET_GPIO+0x1dc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e006      	b.n	800123a <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <MCAL_SET_GPIO+0x86>
 8001234:	4b57      	ldr	r3, [pc, #348]	; (8001394 <MCAL_SET_GPIO+0x1e0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4852      	ldr	r0, [pc, #328]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 8001242:	f7ff fd0f 	bl	8000c64 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d103      	bne.n	8001256 <MCAL_SET_GPIO+0xa2>
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <MCAL_SET_GPIO+0x1e4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	e006      	b.n	8001264 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <MCAL_SET_GPIO+0xb0>
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <MCAL_SET_GPIO+0x1e8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	4848      	ldr	r0, [pc, #288]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 800126c:	f7ff fcfa 	bl	8000c64 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d103      	bne.n	8001280 <MCAL_SET_GPIO+0xcc>
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <MCAL_SET_GPIO+0x1ec>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	e006      	b.n	800128e <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <MCAL_SET_GPIO+0xda>
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <MCAL_SET_GPIO+0x1f0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	483d      	ldr	r0, [pc, #244]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 8001296:	f7ff fce5 	bl	8000c64 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 800129a:	e067      	b.n	800136c <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <MCAL_SET_GPIO+0x1f4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d163      	bne.n	800136c <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <MCAL_SET_GPIO+0x1f8>)
 80012a6:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 80012a8:	4b34      	ldr	r3, [pc, #208]	; (800137c <MCAL_SET_GPIO+0x1c8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a33      	ldr	r2, [pc, #204]	; (800137c <MCAL_SET_GPIO+0x1c8>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <MCAL_SET_GPIO+0x110>
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MCAL_SET_GPIO+0x1fc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	e00e      	b.n	80012e2 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <MCAL_SET_GPIO+0x120>
 80012cc:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <MCAL_SET_GPIO+0x1fc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	e006      	b.n	80012e2 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	791b      	ldrb	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d102      	bne.n	80012e2 <MCAL_SET_GPIO+0x12e>
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <MCAL_SET_GPIO+0x200>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60bb      	str	r3, [r7, #8]
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	4828      	ldr	r0, [pc, #160]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 80012ea:	f7ff fcbb 	bl	8000c64 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d103      	bne.n	80012fe <MCAL_SET_GPIO+0x14a>
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <MCAL_SET_GPIO+0x204>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	e006      	b.n	800130c <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <MCAL_SET_GPIO+0x158>
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <MCAL_SET_GPIO+0x208>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60bb      	str	r3, [r7, #8]
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	481e      	ldr	r0, [pc, #120]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 8001314:	f7ff fca6 	bl	8000c64 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d103      	bne.n	8001328 <MCAL_SET_GPIO+0x174>
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MCAL_SET_GPIO+0x20c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	e006      	b.n	8001336 <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <MCAL_SET_GPIO+0x182>
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <MCAL_SET_GPIO+0x210>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60bb      	str	r3, [r7, #8]
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4619      	mov	r1, r3
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 800133e:	f7ff fc91 	bl	8000c64 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d103      	bne.n	8001352 <MCAL_SET_GPIO+0x19e>
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MCAL_SET_GPIO+0x214>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e006      	b.n	8001360 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <MCAL_SET_GPIO+0x1ac>
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MCAL_SET_GPIO+0x218>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60bb      	str	r3, [r7, #8]
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <MCAL_SET_GPIO+0x1d8>)
 8001368:	f7ff fc7c 	bl	8000c64 <MCAL_GPIO_init>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013000 	.word	0x40013000
 8001378:	2000007c 	.word	0x2000007c
 800137c:	40021000 	.word	0x40021000
 8001380:	08001994 	.word	0x08001994
 8001384:	08001998 	.word	0x08001998
 8001388:	0800199c 	.word	0x0800199c
 800138c:	40010800 	.word	0x40010800
 8001390:	080019a0 	.word	0x080019a0
 8001394:	080019a4 	.word	0x080019a4
 8001398:	080019a8 	.word	0x080019a8
 800139c:	080019ac 	.word	0x080019ac
 80013a0:	080019b0 	.word	0x080019b0
 80013a4:	080019b4 	.word	0x080019b4
 80013a8:	40003800 	.word	0x40003800
 80013ac:	2000008c 	.word	0x2000008c
 80013b0:	080019b8 	.word	0x080019b8
 80013b4:	080019bc 	.word	0x080019bc
 80013b8:	080019c0 	.word	0x080019c0
 80013bc:	080019c4 	.word	0x080019c4
 80013c0:	080019c8 	.word	0x080019c8
 80013c4:	080019cc 	.word	0x080019cc
 80013c8:	080019d0 	.word	0x080019d0
 80013cc:	080019d4 	.word	0x080019d4

080013d0 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	G_P_Config_t[0].P_CallBack();
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <SPI1_IRQHandler+0x10>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4798      	blx	r3
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000007c 	.word	0x2000007c

080013e4 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <Timer2_init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <Timer2_init+0x40>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <Timer2_init+0x44>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <Timer2_init+0x48>)
 80013fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001400:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8001402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8001412:	bf00      	nop
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <Timer2_init+0x4c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0fb      	beq.n	8001414 <Timer2_init+0x30>
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	4002101c 	.word	0x4002101c
 8001428:	40000028 	.word	0x40000028
 800142c:	4000002c 	.word	0x4000002c
 8001430:	40000010 	.word	0x40000010

08001434 <dus>:

void dus(int us)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <dus+0x24>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8001442:	bf00      	nop
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <dus+0x24>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3fa      	bcc.n	8001444 <dus+0x10>
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40000024 	.word	0x40000024

0800145c <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4aa9      	ldr	r2, [pc, #676]	; (8001710 <MCAL_USART_init+0x2b4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10c      	bne.n	8001488 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 800146e:	4aa9      	ldr	r2, [pc, #676]	; (8001714 <MCAL_USART_init+0x2b8>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4614      	mov	r4, r2
 8001474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 800147a:	4ba7      	ldr	r3, [pc, #668]	; (8001718 <MCAL_USART_init+0x2bc>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4aa6      	ldr	r2, [pc, #664]	; (8001718 <MCAL_USART_init+0x2bc>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	e024      	b.n	80014d2 <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4aa4      	ldr	r2, [pc, #656]	; (800171c <MCAL_USART_init+0x2c0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d10e      	bne.n	80014ae <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8001490:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <MCAL_USART_init+0x2b8>)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	f103 0410 	add.w	r4, r3, #16
 8001498:	4613      	mov	r3, r2
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 80014a0:	4b9d      	ldr	r3, [pc, #628]	; (8001718 <MCAL_USART_init+0x2bc>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a9c      	ldr	r2, [pc, #624]	; (8001718 <MCAL_USART_init+0x2bc>)
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	61d3      	str	r3, [r2, #28]
 80014ac:	e011      	b.n	80014d2 <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a9b      	ldr	r2, [pc, #620]	; (8001720 <MCAL_USART_init+0x2c4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10d      	bne.n	80014d2 <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80014b6:	4b97      	ldr	r3, [pc, #604]	; (8001714 <MCAL_USART_init+0x2b8>)
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f103 0420 	add.w	r4, r3, #32
 80014be:	4613      	mov	r3, r2
 80014c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80014c6:	4b94      	ldr	r3, [pc, #592]	; (8001718 <MCAL_USART_init+0x2bc>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a93      	ldr	r2, [pc, #588]	; (8001718 <MCAL_USART_init+0x2bc>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	7912      	ldrb	r2, [r2, #4]
 80014e6:	0312      	lsls	r2, r2, #12
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	79d2      	ldrb	r2, [r2, #7]
 80014f6:	0312      	lsls	r2, r2, #12
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	7a5b      	ldrb	r3, [r3, #9]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10b      	bne.n	800151e <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f043 0208 	orr.w	r2, r3, #8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f043 0204 	orr.w	r2, r3, #4
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d826      	bhi.n	8001574 <MCAL_USART_init+0x118>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <MCAL_USART_init+0xd0>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	0800154b 	.word	0x0800154b
 8001534:	08001559 	.word	0x08001559
 8001538:	08001567 	.word	0x08001567
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	615a      	str	r2, [r3, #20]
		break;
 8001548:	e014      	b.n	8001574 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	615a      	str	r2, [r3, #20]
		break;
 8001556:	e00d      	b.n	8001574 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	615a      	str	r2, [r3, #20]
		break;
 8001564:	e006      	b.n	8001574 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	615a      	str	r2, [r3, #20]
		break;
 8001572:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	7952      	ldrb	r2, [r2, #5]
 800157c:	0252      	lsls	r2, r2, #9
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d125      	bne.n	80015d8 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a60      	ldr	r2, [pc, #384]	; (8001710 <MCAL_USART_init+0x2b4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d106      	bne.n	80015a2 <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8001594:	4b63      	ldr	r3, [pc, #396]	; (8001724 <MCAL_USART_init+0x2c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a62      	ldr	r2, [pc, #392]	; (8001724 <MCAL_USART_init+0x2c8>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e014      	b.n	80015cc <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a5d      	ldr	r2, [pc, #372]	; (800171c <MCAL_USART_init+0x2c0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d106      	bne.n	80015b8 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80015aa:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <MCAL_USART_init+0x2c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <MCAL_USART_init+0x2c8>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e009      	b.n	80015cc <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a59      	ldr	r2, [pc, #356]	; (8001720 <MCAL_USART_init+0x2c4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d105      	bne.n	80015cc <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <MCAL_USART_init+0x2c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a57      	ldr	r2, [pc, #348]	; (8001724 <MCAL_USART_init+0x2c8>)
 80015c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ca:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f043 0220 	orr.w	r2, r3, #32
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]
		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <MCAL_USART_init+0x2b4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12d      	bne.n	800163c <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80015e0:	f7ff fca6 	bl	8000f30 <MCAL_GET_PCLCK2>
 80015e4:	4602      	mov	r2, r0
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	011c      	lsls	r4, r3, #4
 80015f2:	f7ff fc9d 	bl	8000f30 <MCAL_GET_PCLCK2>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009a      	lsls	r2, r3, #2
 8001600:	441a      	add	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fbb2 f5f3 	udiv	r5, r2, r3
 800160c:	f7ff fc90 	bl	8000f30 <MCAL_GET_PCLCK2>
 8001610:	4602      	mov	r2, r0
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	2264      	movs	r2, #100	; 0x64
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	1aeb      	subs	r3, r5, r3
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4a40      	ldr	r2, [pc, #256]	; (8001728 <MCAL_USART_init+0x2cc>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	ea44 0203 	orr.w	r2, r4, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	e062      	b.n	8001702 <MCAL_USART_init+0x2a6>
			}else if(USARTx==USART2){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a37      	ldr	r2, [pc, #220]	; (800171c <MCAL_USART_init+0x2c0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d12d      	bne.n	80016a0 <MCAL_USART_init+0x244>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001644:	f7ff fc60 	bl	8000f08 <MCAL_GET_PCLCK1>
 8001648:	4602      	mov	r2, r0
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	011c      	lsls	r4, r3, #4
 8001656:	f7ff fc57 	bl	8000f08 <MCAL_GET_PCLCK1>
 800165a:	4602      	mov	r2, r0
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009a      	lsls	r2, r3, #2
 8001664:	441a      	add	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001670:	f7ff fc4a 	bl	8000f08 <MCAL_GET_PCLCK1>
 8001674:	4602      	mov	r2, r0
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	2264      	movs	r2, #100	; 0x64
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	1aeb      	subs	r3, r5, r3
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4a27      	ldr	r2, [pc, #156]	; (8001728 <MCAL_USART_init+0x2cc>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	ea44 0203 	orr.w	r2, r4, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	e030      	b.n	8001702 <MCAL_USART_init+0x2a6>

		}else if(USARTx==USART3){
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <MCAL_USART_init+0x2c4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d12c      	bne.n	8001702 <MCAL_USART_init+0x2a6>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80016a8:	f7ff fc2e 	bl	8000f08 <MCAL_GET_PCLCK1>
 80016ac:	4602      	mov	r2, r0
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	011c      	lsls	r4, r3, #4
 80016ba:	f7ff fc25 	bl	8000f08 <MCAL_GET_PCLCK1>
 80016be:	4602      	mov	r2, r0
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009a      	lsls	r2, r3, #2
 80016c8:	441a      	add	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80016d4:	f7ff fc18 	bl	8000f08 <MCAL_GET_PCLCK1>
 80016d8:	4602      	mov	r2, r0
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	2264      	movs	r2, #100	; 0x64
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	1aeb      	subs	r3, r5, r3
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <MCAL_USART_init+0x2cc>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	ea44 0203 	orr.w	r2, r4, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f812 	bl	800172c <SET_GPIO>
	}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	40013800 	.word	0x40013800
 8001714:	200000dc 	.word	0x200000dc
 8001718:	40021000 	.word	0x40021000
 800171c:	40004400 	.word	0x40004400
 8001720:	40004800 	.word	0x40004800
 8001724:	e000e104 	.word	0xe000e104
 8001728:	51eb851f 	.word	0x51eb851f

0800172c <SET_GPIO>:

		}

}

void SET_GPIO(USART_REG *USARTx){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <SET_GPIO+0xbc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <SET_GPIO+0xc0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d115      	bne.n	800176e <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <SET_GPIO+0xc4>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <SET_GPIO+0xc4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	4827      	ldr	r0, [pc, #156]	; (80017f4 <SET_GPIO+0xc8>)
 8001756:	f7ff fa85 	bl	8000c64 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SET_GPIO+0xcc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <SET_GPIO+0xc8>)
 8001768:	f7ff fa7c 	bl	8000c64 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 800176c:	e038      	b.n	80017e0 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a22      	ldr	r2, [pc, #136]	; (80017fc <SET_GPIO+0xd0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d118      	bne.n	80017a8 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <SET_GPIO+0xc4>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <SET_GPIO+0xc4>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <SET_GPIO+0xd4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <SET_GPIO+0xc8>)
 8001790:	f7ff fa68 	bl	8000c64 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <SET_GPIO+0xd8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4814      	ldr	r0, [pc, #80]	; (80017f4 <SET_GPIO+0xc8>)
 80017a2:	f7ff fa5f 	bl	8000c64 <MCAL_GPIO_init>
}
 80017a6:	e01b      	b.n	80017e0 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <SET_GPIO+0xdc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d117      	bne.n	80017e0 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <SET_GPIO+0xc4>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <SET_GPIO+0xc4>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <SET_GPIO+0xe0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <SET_GPIO+0xe4>)
 80017ca:	f7ff fa4b 	bl	8000c64 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <SET_GPIO+0xe8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <SET_GPIO+0xe4>)
 80017dc:	f7ff fa42 	bl	8000c64 <MCAL_GPIO_init>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	080019d8 	.word	0x080019d8
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	080019dc 	.word	0x080019dc
 80017fc:	40004400 	.word	0x40004400
 8001800:	080019e0 	.word	0x080019e0
 8001804:	080019e4 	.word	0x080019e4
 8001808:	40004800 	.word	0x40004800
 800180c:	080019e8 	.word	0x080019e8
 8001810:	40010c00 	.word	0x40010c00
 8001814:	080019ec 	.word	0x080019ec

08001818 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <USART1_IRQHandler+0x10>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4798      	blx	r3
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000dc 	.word	0x200000dc

0800182c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <USART2_IRQHandler+0x10>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200000dc 	.word	0x200000dc

08001840 <USART3_IRQHandler>:
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <USART3_IRQHandler+0x10>)
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	4798      	blx	r3
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200000dc 	.word	0x200000dc

08001854 <main>:
/*******************************************/

void (*g_f_MASTER_state)(void) =ADMIN_OLD_PASSWORD_CHECK;
void (*g_f_USER_state)(void)=NULL;
int main(void)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
	int data[4]={1,2,3,4};
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <main+0x30>)
 800185c:	463c      	mov	r4, r7
 800185e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ALL_PREPHRAL_Init();
 8001864:	f000 f812 	bl	800188c <ALL_PREPHRAL_Init>
	SPI_EEPROM_WRITE(SPI1, 0x0001, data,4);
 8001868:	463a      	mov	r2, r7
 800186a:	2304      	movs	r3, #4
 800186c:	2101      	movs	r1, #1
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <main+0x34>)
 8001870:	f7fe fe7c 	bl	800056c <SPI_EEPROM_WRITE>
	SPI_EEPROM_READ(SPI1, 0x0001, &data, 4);
 8001874:	463a      	mov	r2, r7
 8001876:	2304      	movs	r3, #4
 8001878:	2101      	movs	r1, #1
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <main+0x34>)
 800187c:	f7fe fee8 	bl	8000650 <SPI_EEPROM_READ>

	for(;;){
 8001880:	e7fe      	b.n	8001880 <main+0x2c>
 8001882:	bf00      	nop
 8001884:	080019f0 	.word	0x080019f0
 8001888:	40013000 	.word	0x40013000

0800188c <ALL_PREPHRAL_Init>:
 * PARAM1[IN]----> VOID
 * RETAVAL	 ---->
 * NOTE		 ---->
 *
 */
void ALL_PREPHRAL_Init(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	Timer2_init();
 8001890:	f7ff fda8 	bl	80013e4 <Timer2_init>
	SPI_EEPROM_init(SPI1);
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <ALL_PREPHRAL_Init+0x3c>)
 8001896:	f7fe fe51 	bl	800053c <SPI_EEPROM_init>
	MCAL_USART_init(USART1,&UART_CONFIG_V);
 800189a:	490c      	ldr	r1, [pc, #48]	; (80018cc <ALL_PREPHRAL_Init+0x40>)
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <ALL_PREPHRAL_Init+0x44>)
 800189e:	f7ff fddd 	bl	800145c <MCAL_USART_init>
	MCAL_USART_init(USART2,&UART_CONFIG_V);
 80018a2:	490a      	ldr	r1, [pc, #40]	; (80018cc <ALL_PREPHRAL_Init+0x40>)
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <ALL_PREPHRAL_Init+0x48>)
 80018a6:	f7ff fdd9 	bl	800145c <MCAL_USART_init>
	KEYPAD_init();
 80018aa:	f7fe fc61 	bl	8000170 <KEYPAD_init>
	LCD_init();
 80018ae:	f7fe fd1b 	bl	80002e8 <LCD_init>
	MCAL_EXTI_init(&EXTI_PIR1);
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <ALL_PREPHRAL_Init+0x4c>)
 80018b4:	f7fe ffd4 	bl	8000860 <MCAL_EXTI_init>
	MCAL_EXTI_init(&EXTI_PIR2);
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <ALL_PREPHRAL_Init+0x50>)
 80018ba:	f7fe ffd1 	bl	8000860 <MCAL_EXTI_init>
	LCD_init_V2();
 80018be:	f7fe fde7 	bl	8000490 <LCD_init_V2>

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40013000 	.word	0x40013000
 80018cc:	20000028 	.word	0x20000028
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40004400 	.word	0x40004400
 80018d8:	20000038 	.word	0x20000038
 80018dc:	2000004c 	.word	0x2000004c

080018e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <LoopForever+0x6>)
  ldr r1, =_edata
 80018ea:	490d      	ldr	r1, [pc, #52]	; (8001920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <LoopForever+0xe>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001900:	4c0a      	ldr	r4, [pc, #40]	; (800192c <LoopForever+0x16>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800190e:	f000 f811 	bl	8001934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001912:	f7ff ff9f 	bl	8001854 <main>

08001916 <LoopForever>:

LoopForever:
    b LoopForever
 8001916:	e7fe      	b.n	8001916 <LoopForever>
  ldr   r0, =_estack
 8001918:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001924:	08001a60 	.word	0x08001a60
  ldr r2, =_sbss
 8001928:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800192c:	2000010c 	.word	0x2000010c

08001930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC1_2_IRQHandler>
	...

08001934 <__libc_init_array>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	2500      	movs	r5, #0
 8001938:	4e0c      	ldr	r6, [pc, #48]	; (800196c <__libc_init_array+0x38>)
 800193a:	4c0d      	ldr	r4, [pc, #52]	; (8001970 <__libc_init_array+0x3c>)
 800193c:	1ba4      	subs	r4, r4, r6
 800193e:	10a4      	asrs	r4, r4, #2
 8001940:	42a5      	cmp	r5, r4
 8001942:	d109      	bne.n	8001958 <__libc_init_array+0x24>
 8001944:	f000 f81a 	bl	800197c <_init>
 8001948:	2500      	movs	r5, #0
 800194a:	4e0a      	ldr	r6, [pc, #40]	; (8001974 <__libc_init_array+0x40>)
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <__libc_init_array+0x44>)
 800194e:	1ba4      	subs	r4, r4, r6
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	42a5      	cmp	r5, r4
 8001954:	d105      	bne.n	8001962 <__libc_init_array+0x2e>
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800195c:	4798      	blx	r3
 800195e:	3501      	adds	r5, #1
 8001960:	e7ee      	b.n	8001940 <__libc_init_array+0xc>
 8001962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001966:	4798      	blx	r3
 8001968:	3501      	adds	r5, #1
 800196a:	e7f2      	b.n	8001952 <__libc_init_array+0x1e>
 800196c:	08001a58 	.word	0x08001a58
 8001970:	08001a58 	.word	0x08001a58
 8001974:	08001a58 	.word	0x08001a58
 8001978:	08001a5c 	.word	0x08001a5c

0800197c <_init>:
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197e:	bf00      	nop
 8001980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001982:	bc08      	pop	{r3}
 8001984:	469e      	mov	lr, r3
 8001986:	4770      	bx	lr

08001988 <_fini>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	bf00      	nop
 800198c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198e:	bc08      	pop	{r3}
 8001990:	469e      	mov	lr, r3
 8001992:	4770      	bx	lr
