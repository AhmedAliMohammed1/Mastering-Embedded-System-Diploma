
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000bd8  08000bd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c00  08000c00  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000c00  08000c00  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c00  08000c00  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c00  08000c00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000014  08000c1c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000c1c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000165a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005dc  00000000  00000000  00021697  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000092c  00000000  00000000  00021c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  000225a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00022750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000015a4  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000011df  00000000  00000000  00023e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00005d9e  00000000  00000000  0002502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002adc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000510  00000000  00000000  0002ae44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bc0 	.word	0x08000bc0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000bc0 	.word	0x08000bc0

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000040 	.word	0x20000040
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000040 	.word	0x20000040
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000040 	.word	0x20000040
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000040 	.word	0x20000040
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000040 	.word	0x20000040
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000040 	.word	0x20000040

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000040 	.word	0x20000040

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e006      	b.n	80003b6 <Get_PIN_Positon+0x26>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80003ae:	3338      	adds	r3, #56	; 0x38
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d801      	bhi.n	80003dc <MCAL_GPIO_init+0x18>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	e001      	b.n	80003e0 <MCAL_GPIO_init+0x1c>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3304      	adds	r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffd1 	bl	8000390 <Get_PIN_Positon>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	230f      	movs	r3, #15
 80003f4:	4093      	lsls	r3, r2
 80003f6:	43da      	mvns	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	401a      	ands	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00e      	beq.n	800042a <MCAL_GPIO_init+0x66>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b01      	cmp	r3, #1
 8000414:	d009      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b02      	cmp	r3, #2
 800041e:	d004      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	789b      	ldrb	r3, [r3, #2]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b03      	cmp	r3, #3
 8000428:	d156      	bne.n	80004d8 <MCAL_GPIO_init+0x114>
		if(PINx->MODE == INPUT_PD){
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	789b      	ldrb	r3, [r3, #2]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b03      	cmp	r3, #3
 8000432:	d11c      	bne.n	800046e <MCAL_GPIO_init+0xaa>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffa8 	bl	8000390 <Get_PIN_Positon>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	2308      	movs	r3, #8
 8000446:	fa03 f202 	lsl.w	r2, r3, r2
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	b29b      	uxth	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2301      	movs	r3, #1
 800045e:	4093      	lsls	r3, r2
 8000460:	43da      	mvns	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	401a      	ands	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 800046c:	e04c      	b.n	8000508 <MCAL_GPIO_init+0x144>
		}

		else if(PINx->MODE == INPUT_PU){
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b02      	cmp	r3, #2
 8000476:	d11c      	bne.n	80004b2 <MCAL_GPIO_init+0xee>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	b29b      	uxth	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_PIN_Positon>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	2308      	movs	r3, #8
 800048a:	fa03 f202 	lsl.w	r2, r3, r2
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	431a      	orrs	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	2301      	movs	r3, #1
 80004a2:	fa03 f202 	lsl.w	r2, r3, r2
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004b0:	e02a      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	009c      	lsls	r4, r3, #2
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff65 	bl	8000390 <Get_PIN_Positon>
 80004c6:	4603      	mov	r3, r0
 80004c8:	fa04 f203 	lsl.w	r2, r4, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	431a      	orrs	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80004d6:	e017      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	789b      	ldrb	r3, [r3, #2]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	3b04      	subs	r3, #4
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	78d2      	ldrb	r2, [r2, #3]
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	ea43 0402 	orr.w	r4, r3, r2
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff4c 	bl	8000390 <Get_PIN_Positon>
 80004f8:	4603      	mov	r3, r0
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	431a      	orrs	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	601a      	str	r2, [r3, #0]

	}

}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MCAL_GET_SYS_CLCK+0x30>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	2b01      	cmp	r3, #1
 8000520:	d006      	beq.n	8000530 <MCAL_GET_SYS_CLCK+0x20>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d302      	bcc.n	800052c <MCAL_GET_SYS_CLCK+0x1c>
 8000526:	2b02      	cmp	r3, #2
 8000528:	d004      	beq.n	8000534 <MCAL_GET_SYS_CLCK+0x24>
 800052a:	e005      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MCAL_GET_SYS_CLCK+0x34>)
 800052e:	e003      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MCAL_GET_SYS_CLCK+0x38>)
 8000532:	e001      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <MCAL_GET_SYS_CLCK+0x38>)
 8000536:	e7ff      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	007a1200 	.word	0x007a1200
 8000548:	00f42400 	.word	0x00f42400

0800054c <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000550:	f7ff ffde 	bl	8000510 <MCAL_GET_SYS_CLCK>
 8000554:	4601      	mov	r1, r0
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MCAL_GET_H_CLCK+0x20>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	091b      	lsrs	r3, r3, #4
 800055c:	f003 030f 	and.w	r3, r3, #15
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <MCAL_GET_H_CLCK+0x24>)
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000568:	4618      	mov	r0, r3
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	20000000 	.word	0x20000000

08000574 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8000578:	f7ff ffe8 	bl	800054c <MCAL_GET_H_CLCK>
 800057c:	4601      	mov	r1, r0
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MCAL_GET_PCLCK1+0x20>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	f003 0307 	and.w	r3, r3, #7
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <MCAL_GET_PCLCK1+0x24>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000590:	4618      	mov	r0, r3
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	20000000 	.word	0x20000000

0800059c <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80005a0:	f7ff ffd4 	bl	800054c <MCAL_GET_H_CLCK>
 80005a4:	4601      	mov	r1, r0
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_GET_PCLCK2+0x20>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	0adb      	lsrs	r3, r3, #11
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <MCAL_GET_PCLCK2+0x24>)
 80005b2:	5cd3      	ldrb	r3, [r2, r3]
 80005b4:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000000 	.word	0x20000000

080005c4 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t *G_P_config[3] ={NULL};
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4aa3      	ldr	r2, [pc, #652]	; (8000860 <MCAL_USART_init+0x29c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d109      	bne.n	80005ea <MCAL_USART_init+0x26>
		G_P_config[0]=PIN;
 80005d6:	4aa3      	ldr	r2, [pc, #652]	; (8000864 <MCAL_USART_init+0x2a0>)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6013      	str	r3, [r2, #0]
		RCC->APB2ENR |=(1<<14);
 80005dc:	4ba2      	ldr	r3, [pc, #648]	; (8000868 <MCAL_USART_init+0x2a4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4aa1      	ldr	r2, [pc, #644]	; (8000868 <MCAL_USART_init+0x2a4>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	e01a      	b.n	8000620 <MCAL_USART_init+0x5c>
	}else if(USARTx==USART2){
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a9f      	ldr	r2, [pc, #636]	; (800086c <MCAL_USART_init+0x2a8>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d109      	bne.n	8000606 <MCAL_USART_init+0x42>
		G_P_config[1]=PIN;
 80005f2:	4a9c      	ldr	r2, [pc, #624]	; (8000864 <MCAL_USART_init+0x2a0>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	6053      	str	r3, [r2, #4]
		RCC->APB1ENR |=(1<<17);
 80005f8:	4b9b      	ldr	r3, [pc, #620]	; (8000868 <MCAL_USART_init+0x2a4>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a9a      	ldr	r2, [pc, #616]	; (8000868 <MCAL_USART_init+0x2a4>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	61d3      	str	r3, [r2, #28]
 8000604:	e00c      	b.n	8000620 <MCAL_USART_init+0x5c>
}else if(USARTx==USART3){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a99      	ldr	r2, [pc, #612]	; (8000870 <MCAL_USART_init+0x2ac>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d108      	bne.n	8000620 <MCAL_USART_init+0x5c>
		G_P_config[2]=PIN;
 800060e:	4a95      	ldr	r2, [pc, #596]	; (8000864 <MCAL_USART_init+0x2a0>)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6093      	str	r3, [r2, #8]
		RCC->APB1ENR |=(1<<18);
 8000614:	4b94      	ldr	r3, [pc, #592]	; (8000868 <MCAL_USART_init+0x2a4>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a93      	ldr	r2, [pc, #588]	; (8000868 <MCAL_USART_init+0x2a4>)
 800061a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800061e:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	0312      	lsls	r2, r2, #12
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	79d2      	ldrb	r2, [r2, #7]
 8000644:	0312      	lsls	r2, r2, #12
 8000646:	431a      	orrs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	7a5b      	ldrb	r3, [r3, #9]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10b      	bne.n	800066c <MCAL_USART_init+0xa8>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f043 0208 	orr.w	r2, r3, #8
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f043 0204 	orr.w	r2, r3, #4
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	7a1b      	ldrb	r3, [r3, #8]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d827      	bhi.n	80006c4 <MCAL_USART_init+0x100>
 8000674:	a201      	add	r2, pc, #4	; (adr r2, 800067c <MCAL_USART_init+0xb8>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	0800068d 	.word	0x0800068d
 8000680:	0800069b 	.word	0x0800069b
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080006b7 	.word	0x080006b7
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	615a      	str	r2, [r3, #20]
		break;
 8000698:	e014      	b.n	80006c4 <MCAL_USART_init+0x100>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]
		break;
 80006a6:	e00d      	b.n	80006c4 <MCAL_USART_init+0x100>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	615a      	str	r2, [r3, #20]
		break;
 80006b4:	e006      	b.n	80006c4 <MCAL_USART_init+0x100>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	615a      	str	r2, [r3, #20]
		break;
 80006c2:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	7952      	ldrb	r2, [r2, #5]
 80006cc:	0252      	lsls	r2, r2, #9
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d125      	bne.n	8000728 <MCAL_USART_init+0x164>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a60      	ldr	r2, [pc, #384]	; (8000860 <MCAL_USART_init+0x29c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <MCAL_USART_init+0x12e>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 80006e4:	4b63      	ldr	r3, [pc, #396]	; (8000874 <MCAL_USART_init+0x2b0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a62      	ldr	r2, [pc, #392]	; (8000874 <MCAL_USART_init+0x2b0>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e014      	b.n	800071c <MCAL_USART_init+0x158>
		}
		else if(USARTx==USART2){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a5d      	ldr	r2, [pc, #372]	; (800086c <MCAL_USART_init+0x2a8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <MCAL_USART_init+0x144>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80006fa:	4b5e      	ldr	r3, [pc, #376]	; (8000874 <MCAL_USART_init+0x2b0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a5d      	ldr	r2, [pc, #372]	; (8000874 <MCAL_USART_init+0x2b0>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e009      	b.n	800071c <MCAL_USART_init+0x158>

		}
		else if(USARTx==USART3){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a59      	ldr	r2, [pc, #356]	; (8000870 <MCAL_USART_init+0x2ac>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d105      	bne.n	800071c <MCAL_USART_init+0x158>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8000710:	4b58      	ldr	r3, [pc, #352]	; (8000874 <MCAL_USART_init+0x2b0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a57      	ldr	r2, [pc, #348]	; (8000874 <MCAL_USART_init+0x2b0>)
 8000716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071a:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f043 0220 	orr.w	r2, r3, #32
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <MCAL_USART_init+0x29c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d12d      	bne.n	800078c <MCAL_USART_init+0x1c8>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8000730:	f7ff ff34 	bl	800059c <MCAL_GET_PCLCK2>
 8000734:	4602      	mov	r2, r0
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000740:	011c      	lsls	r4, r3, #4
 8000742:	f7ff ff2b 	bl	800059c <MCAL_GET_PCLCK2>
 8000746:	4602      	mov	r2, r0
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	009a      	lsls	r2, r3, #2
 8000750:	441a      	add	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	fbb2 f5f3 	udiv	r5, r2, r3
 800075c:	f7ff ff1e 	bl	800059c <MCAL_GET_PCLCK2>
 8000760:	4602      	mov	r2, r0
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	2264      	movs	r2, #100	; 0x64
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	1aeb      	subs	r3, r5, r3
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <MCAL_USART_init+0x2b4>)
 8000778:	fba2 2303 	umull	r2, r3, r2, r3
 800077c:	095b      	lsrs	r3, r3, #5
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	ea44 0203 	orr.w	r2, r4, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	e062      	b.n	8000852 <MCAL_USART_init+0x28e>
			}else if(USARTx==USART2){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <MCAL_USART_init+0x2a8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d12d      	bne.n	80007f0 <MCAL_USART_init+0x22c>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000794:	f7ff feee 	bl	8000574 <MCAL_GET_PCLCK1>
 8000798:	4602      	mov	r2, r0
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a4:	011c      	lsls	r4, r3, #4
 80007a6:	f7ff fee5 	bl	8000574 <MCAL_GET_PCLCK1>
 80007aa:	4602      	mov	r2, r0
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009a      	lsls	r2, r3, #2
 80007b4:	441a      	add	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80007c0:	f7ff fed8 	bl	8000574 <MCAL_GET_PCLCK1>
 80007c4:	4602      	mov	r2, r0
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d0:	2264      	movs	r2, #100	; 0x64
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	1aeb      	subs	r3, r5, r3
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4a27      	ldr	r2, [pc, #156]	; (8000878 <MCAL_USART_init+0x2b4>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	ea44 0203 	orr.w	r2, r4, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	e030      	b.n	8000852 <MCAL_USART_init+0x28e>

		}else if(USARTx==USART3){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MCAL_USART_init+0x2ac>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d12c      	bne.n	8000852 <MCAL_USART_init+0x28e>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80007f8:	f7ff febc 	bl	8000574 <MCAL_GET_PCLCK1>
 80007fc:	4602      	mov	r2, r0
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	fbb2 f3f3 	udiv	r3, r2, r3
 8000808:	011c      	lsls	r4, r3, #4
 800080a:	f7ff feb3 	bl	8000574 <MCAL_GET_PCLCK1>
 800080e:	4602      	mov	r2, r0
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	009a      	lsls	r2, r3, #2
 8000818:	441a      	add	r2, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	fbb2 f5f3 	udiv	r5, r2, r3
 8000824:	f7ff fea6 	bl	8000574 <MCAL_GET_PCLCK1>
 8000828:	4602      	mov	r2, r0
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	2264      	movs	r2, #100	; 0x64
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	1aeb      	subs	r3, r5, r3
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <MCAL_USART_init+0x2b4>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	095b      	lsrs	r3, r3, #5
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	ea44 0203 	orr.w	r2, r4, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f000 f89e 	bl	8000994 <SET_GPIO>
	}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bdb0      	pop	{r4, r5, r7, pc}
 8000860:	40013800 	.word	0x40013800
 8000864:	20000030 	.word	0x20000030
 8000868:	40021000 	.word	0x40021000
 800086c:	40004400 	.word	0x40004400
 8000870:	40004800 	.word	0x40004800
 8000874:	e000e104 	.word	0xe000e104
 8000878:	51eb851f 	.word	0x51eb851f

0800087c <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <MCAL_USART_SendData+0x7c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d103      	bne.n	800089c <MCAL_USART_SendData+0x20>
		L_P_config_pin=G_P_config[0];
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MCAL_USART_SendData+0x80>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e00e      	b.n	80008ba <MCAL_USART_SendData+0x3e>
	}		else if(USARTx==USART2){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MCAL_USART_SendData+0x84>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d103      	bne.n	80008ac <MCAL_USART_SendData+0x30>
		L_P_config_pin=G_P_config[1];
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MCAL_USART_SendData+0x80>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e006      	b.n	80008ba <MCAL_USART_SendData+0x3e>
	}
	else if(USARTx==USART3){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MCAL_USART_SendData+0x88>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d102      	bne.n	80008ba <MCAL_USART_SendData+0x3e>
		L_P_config_pin=G_P_config[2];
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MCAL_USART_SendData+0x80>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	60fb      	str	r3, [r7, #12]
	}

	if(L_P_config_pin->MEC ==POLLING){
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d107      	bne.n	80008d2 <MCAL_USART_SendData+0x56>
		while(!(USARTx->SR & (1<<7)));
 80008c2:	bf00      	nop
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f9      	beq.n	80008c4 <MCAL_USART_SendData+0x48>
 80008d0:	e002      	b.n	80008d8 <MCAL_USART_SendData+0x5c>
	}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	799b      	ldrb	r3, [r3, #6]
 80008d6:	2b01      	cmp	r3, #1
	}else if(L_P_config_pin->MEC ==DMA){ // will modified later

	}

	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d103      	bne.n	80008e8 <MCAL_USART_SendData+0x6c>
	{
		USARTx->DR =(data & 0x1FF);
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =(data & 0xFF);

	}

}
 80008e6:	e002      	b.n	80008ee <MCAL_USART_SendData+0x72>
		USARTx->DR =(data & 0xFF);
 80008e8:	78fa      	ldrb	r2, [r7, #3]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	605a      	str	r2, [r3, #4]
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40013800 	.word	0x40013800
 80008fc:	20000030 	.word	0x20000030
 8000900:	40004400 	.word	0x40004400
 8000904:	40004800 	.word	0x40004800

08000908 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <MCAL_USART_ReciveData+0x7c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d103      	bne.n	8000924 <MCAL_USART_ReciveData+0x1c>
		L_P_config_pin=G_P_config[0];
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MCAL_USART_ReciveData+0x80>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e00e      	b.n	8000942 <MCAL_USART_ReciveData+0x3a>
	}		else if(USARTx==USART2){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <MCAL_USART_ReciveData+0x84>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d103      	bne.n	8000934 <MCAL_USART_ReciveData+0x2c>
		L_P_config_pin=G_P_config[1];
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MCAL_USART_ReciveData+0x80>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e006      	b.n	8000942 <MCAL_USART_ReciveData+0x3a>
	}
	else if(USARTx==USART3){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <MCAL_USART_ReciveData+0x88>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <MCAL_USART_ReciveData+0x3a>
		L_P_config_pin=G_P_config[2];
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MCAL_USART_ReciveData+0x80>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	799b      	ldrb	r3, [r3, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d107      	bne.n	800095a <MCAL_USART_ReciveData+0x52>
			while(!(USARTx->SR & (1<<5)));
 800094a:	bf00      	nop
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f9      	beq.n	800094c <MCAL_USART_ReciveData+0x44>
 8000958:	e002      	b.n	8000960 <MCAL_USART_ReciveData+0x58>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==DISABLE){
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <MCAL_USART_ReciveData+0x68>
			return USARTx->DR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	b29b      	uxth	r3, r3
 800096e:	e004      	b.n	800097a <MCAL_USART_ReciveData+0x72>
		}else{
			return (USARTx->DR &0xFF);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	b29b      	uxth	r3, r3

		}

}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40013800 	.word	0x40013800
 8000988:	20000030 	.word	0x20000030
 800098c:	40004400 	.word	0x40004400
 8000990:	40004800 	.word	0x40004800

08000994 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SET_GPIO+0xbc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a2b      	ldr	r2, [pc, #172]	; (8000a54 <SET_GPIO+0xc0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d115      	bne.n	80009d6 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <SET_GPIO+0xc4>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <SET_GPIO+0xc4>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4827      	ldr	r0, [pc, #156]	; (8000a5c <SET_GPIO+0xc8>)
 80009be:	f7ff fd01 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <SET_GPIO+0xcc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	4823      	ldr	r0, [pc, #140]	; (8000a5c <SET_GPIO+0xc8>)
 80009d0:	f7ff fcf8 	bl	80003c4 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 80009d4:	e038      	b.n	8000a48 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <SET_GPIO+0xd0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d118      	bne.n	8000a10 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <SET_GPIO+0xc4>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <SET_GPIO+0xc4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <SET_GPIO+0xd4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <SET_GPIO+0xc8>)
 80009f8:	f7ff fce4 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <SET_GPIO+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <SET_GPIO+0xc8>)
 8000a0a:	f7ff fcdb 	bl	80003c4 <MCAL_GPIO_init>
}
 8000a0e:	e01b      	b.n	8000a48 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <SET_GPIO+0xdc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d117      	bne.n	8000a48 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <SET_GPIO+0xc4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <SET_GPIO+0xc4>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <SET_GPIO+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <SET_GPIO+0xe4>)
 8000a32:	f7ff fcc7 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <SET_GPIO+0xe8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <SET_GPIO+0xe4>)
 8000a44:	f7ff fcbe 	bl	80003c4 <MCAL_GPIO_init>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08000bd8 	.word	0x08000bd8
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	08000bdc 	.word	0x08000bdc
 8000a64:	40004400 	.word	0x40004400
 8000a68:	08000be0 	.word	0x08000be0
 8000a6c:	08000be4 	.word	0x08000be4
 8000a70:	40004800 	.word	0x40004800
 8000a74:	08000be8 	.word	0x08000be8
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	08000bec 	.word	0x08000bec

08000a80 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	G_P_config[0]->P_Call_Back();
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <USART1_IRQHandler+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	4798      	blx	r3
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000030 	.word	0x20000030

08000a94 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	G_P_config[1]->P_Call_Back();
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <USART2_IRQHandler+0x10>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000030 	.word	0x20000030

08000aa8 <USART3_IRQHandler>:
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	G_P_config[2]->P_Call_Back();
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <USART3_IRQHandler+0x10>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000030 	.word	0x20000030

08000abc <call_Back>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
	uint8_t data=0;

void call_Back(void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(	USART1->SR &(1<<5)){
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <call_Back+0x3c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <call_Back+0x1e>
			data=	MCAL_USART_ReciveData(USART1);
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <call_Back+0x3c>)
 8000ace:	f7ff ff1b 	bl	8000908 <MCAL_USART_ReciveData>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <call_Back+0x40>)
 8000ad8:	701a      	strb	r2, [r3, #0]

		}if((USART1->SR &(1<<7))){
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <call_Back+0x3c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <call_Back+0x36>
		MCAL_USART_SendData(USART1, data);
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <call_Back+0x40>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <call_Back+0x3c>)
 8000aee:	f7ff fec5 	bl	800087c <MCAL_USART_SendData>

	}
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40013800 	.word	0x40013800
 8000afc:	2000003c 	.word	0x2000003c

08000b00 <main>:
int main(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,call_Back};
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <main+0x1c>)
 8000b08:	463c      	mov	r4, r7
 8000b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(USART1, &UART1_CON);
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <main+0x20>)
 8000b16:	f7ff fd55 	bl	80005c4 <MCAL_USART_init>
    /* Loop forever */
	for(;;){
 8000b1a:	e7fe      	b.n	8000b1a <main+0x1a>
 8000b1c:	08000bf0 	.word	0x08000bf0
 8000b20:	40013800 	.word	0x40013800

08000b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f000 f811 	bl	8000b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b56:	f7ff ffd3 	bl	8000b00 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b68:	08000c08 	.word	0x08000c08
  ldr r2, =_sbss
 8000b6c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b70:	2000007c 	.word	0x2000007c

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <__libc_init_array>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	4e0c      	ldr	r6, [pc, #48]	; (8000bb0 <__libc_init_array+0x38>)
 8000b7e:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <__libc_init_array+0x3c>)
 8000b80:	1ba4      	subs	r4, r4, r6
 8000b82:	10a4      	asrs	r4, r4, #2
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	d109      	bne.n	8000b9c <__libc_init_array+0x24>
 8000b88:	f000 f81a 	bl	8000bc0 <_init>
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	4e0a      	ldr	r6, [pc, #40]	; (8000bb8 <__libc_init_array+0x40>)
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <__libc_init_array+0x44>)
 8000b92:	1ba4      	subs	r4, r4, r6
 8000b94:	10a4      	asrs	r4, r4, #2
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d105      	bne.n	8000ba6 <__libc_init_array+0x2e>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba0:	4798      	blx	r3
 8000ba2:	3501      	adds	r5, #1
 8000ba4:	e7ee      	b.n	8000b84 <__libc_init_array+0xc>
 8000ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000baa:	4798      	blx	r3
 8000bac:	3501      	adds	r5, #1
 8000bae:	e7f2      	b.n	8000b96 <__libc_init_array+0x1e>
 8000bb0:	08000c00 	.word	0x08000c00
 8000bb4:	08000c00 	.word	0x08000c00
 8000bb8:	08000c00 	.word	0x08000c00
 8000bbc:	08000c04 	.word	0x08000c04

08000bc0 <_init>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr

08000bcc <_fini>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	bf00      	nop
 8000bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd2:	bc08      	pop	{r3}
 8000bd4:	469e      	mov	lr, r3
 8000bd6:	4770      	bx	lr
