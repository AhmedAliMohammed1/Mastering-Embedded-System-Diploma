
spi_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001028  08001028  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001028  08001028  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001028  08001028  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000014  08001044  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001044  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027f2  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007dd  00000000  00000000  0002282f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ab4  00000000  00000000  0002300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  00023ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00023ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001691  00000000  00000000  00023e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001778  00000000  00000000  000254b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006175  00000000  00000000  00026c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002cda6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c4  00000000  00000000  0002ce24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fa4 	.word	0x08000fa4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000fa4 	.word	0x08000fa4

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000044 	.word	0x20000044
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000044 	.word	0x20000044
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000044 	.word	0x20000044
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000044 	.word	0x20000044
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000044 	.word	0x20000044
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000044 	.word	0x20000044

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000044 	.word	0x20000044

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e006      	b.n	80003b6 <Get_PIN_Positon+0x26>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80003ae:	3338      	adds	r3, #56	; 0x38
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d801      	bhi.n	80003dc <MCAL_GPIO_init+0x18>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	e001      	b.n	80003e0 <MCAL_GPIO_init+0x1c>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3304      	adds	r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffd1 	bl	8000390 <Get_PIN_Positon>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	230f      	movs	r3, #15
 80003f4:	4093      	lsls	r3, r2
 80003f6:	43da      	mvns	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	401a      	ands	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00e      	beq.n	800042a <MCAL_GPIO_init+0x66>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b01      	cmp	r3, #1
 8000414:	d009      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b02      	cmp	r3, #2
 800041e:	d004      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	789b      	ldrb	r3, [r3, #2]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b03      	cmp	r3, #3
 8000428:	d156      	bne.n	80004d8 <MCAL_GPIO_init+0x114>
		if(PINx->MODE == INPUT_PD){
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	789b      	ldrb	r3, [r3, #2]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b03      	cmp	r3, #3
 8000432:	d11c      	bne.n	800046e <MCAL_GPIO_init+0xaa>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffa8 	bl	8000390 <Get_PIN_Positon>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	2308      	movs	r3, #8
 8000446:	fa03 f202 	lsl.w	r2, r3, r2
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	b29b      	uxth	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2301      	movs	r3, #1
 800045e:	4093      	lsls	r3, r2
 8000460:	43da      	mvns	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	401a      	ands	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 800046c:	e04c      	b.n	8000508 <MCAL_GPIO_init+0x144>
		}

		else if(PINx->MODE == INPUT_PU){
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b02      	cmp	r3, #2
 8000476:	d11c      	bne.n	80004b2 <MCAL_GPIO_init+0xee>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	b29b      	uxth	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_PIN_Positon>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	2308      	movs	r3, #8
 800048a:	fa03 f202 	lsl.w	r2, r3, r2
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	431a      	orrs	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	2301      	movs	r3, #1
 80004a2:	fa03 f202 	lsl.w	r2, r3, r2
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004b0:	e02a      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	009c      	lsls	r4, r3, #2
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff65 	bl	8000390 <Get_PIN_Positon>
 80004c6:	4603      	mov	r3, r0
 80004c8:	fa04 f203 	lsl.w	r2, r4, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	431a      	orrs	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80004d6:	e017      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	789b      	ldrb	r3, [r3, #2]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	3b04      	subs	r3, #4
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	78d2      	ldrb	r2, [r2, #3]
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	ea43 0402 	orr.w	r4, r3, r2
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff4c 	bl	8000390 <Get_PIN_Positon>
 80004f8:	4603      	mov	r3, r0
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	431a      	orrs	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	601a      	str	r2, [r3, #0]

	}

}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MCAL_GET_SYS_CLCK+0x30>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	2b01      	cmp	r3, #1
 8000520:	d006      	beq.n	8000530 <MCAL_GET_SYS_CLCK+0x20>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d302      	bcc.n	800052c <MCAL_GET_SYS_CLCK+0x1c>
 8000526:	2b02      	cmp	r3, #2
 8000528:	d004      	beq.n	8000534 <MCAL_GET_SYS_CLCK+0x24>
 800052a:	e005      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MCAL_GET_SYS_CLCK+0x34>)
 800052e:	e003      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MCAL_GET_SYS_CLCK+0x38>)
 8000532:	e001      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <MCAL_GET_SYS_CLCK+0x38>)
 8000536:	e7ff      	b.n	8000538 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	007a1200 	.word	0x007a1200
 8000548:	00f42400 	.word	0x00f42400

0800054c <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000550:	f7ff ffde 	bl	8000510 <MCAL_GET_SYS_CLCK>
 8000554:	4601      	mov	r1, r0
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MCAL_GET_H_CLCK+0x20>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	091b      	lsrs	r3, r3, #4
 800055c:	f003 030f 	and.w	r3, r3, #15
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <MCAL_GET_H_CLCK+0x24>)
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000568:	4618      	mov	r0, r3
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	20000000 	.word	0x20000000

08000574 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8000578:	f7ff ffe8 	bl	800054c <MCAL_GET_H_CLCK>
 800057c:	4601      	mov	r1, r0
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MCAL_GET_PCLCK1+0x20>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	f003 0307 	and.w	r3, r3, #7
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <MCAL_GET_PCLCK1+0x24>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000590:	4618      	mov	r0, r3
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	20000000 	.word	0x20000000

0800059c <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80005a0:	f7ff ffd4 	bl	800054c <MCAL_GET_H_CLCK>
 80005a4:	4601      	mov	r1, r0
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_GET_PCLCK2+0x20>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	0adb      	lsrs	r3, r3, #11
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <MCAL_GET_PCLCK2+0x24>)
 80005b2:	5cd3      	ldrb	r3, [r2, r3]
 80005b4:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000000 	.word	0x20000000

080005c4 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t *G_P_Config_t[2]={NULL,NULL}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= Config; 	RCC->APB2ENR |=(1<<12); }
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a55      	ldr	r2, [pc, #340]	; (8000728 <MCAL_SPI_init+0x164>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d109      	bne.n	80005ea <MCAL_SPI_init+0x26>
 80005d6:	4a55      	ldr	r2, [pc, #340]	; (800072c <MCAL_SPI_init+0x168>)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <MCAL_SPI_init+0x16c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a53      	ldr	r2, [pc, #332]	; (8000730 <MCAL_SPI_init+0x16c>)
 80005e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	e00c      	b.n	8000604 <MCAL_SPI_init+0x40>
	else if(SPIx == SPI2){ G_P_Config_t[1]= Config;RCC->APB1ENR |=(1<<14); }
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a51      	ldr	r2, [pc, #324]	; (8000734 <MCAL_SPI_init+0x170>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d108      	bne.n	8000604 <MCAL_SPI_init+0x40>
 80005f2:	4a4e      	ldr	r2, [pc, #312]	; (800072c <MCAL_SPI_init+0x168>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	6053      	str	r3, [r2, #4]
 80005f8:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <MCAL_SPI_init+0x16c>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a4c      	ldr	r2, [pc, #304]	; (8000730 <MCAL_SPI_init+0x16c>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	b2d9      	uxtb	r1, r3
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	8813      	ldrh	r3, [r2, #0]
 8000612:	f361 23cb 	bfi	r3, r1, #11, #1
 8000616:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	799b      	ldrb	r3, [r3, #6]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2d9      	uxtb	r1, r3
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	8813      	ldrh	r3, [r2, #0]
 8000626:	f361 0341 	bfi	r3, r1, #1, #1
 800062a:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	79db      	ldrb	r3, [r3, #7]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2d9      	uxtb	r1, r3
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	8813      	ldrh	r3, [r2, #0]
 800063a:	f361 0300 	bfi	r3, r1, #0, #1
 800063e:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	78db      	ldrb	r3, [r3, #3]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	b2d9      	uxtb	r1, r3
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	8813      	ldrh	r3, [r2, #0]
 800064e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000652:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <MCAL_SPI_init+0xa4>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	8813      	ldrh	r3, [r2, #0]
 8000660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000664:	8013      	strh	r3, [r2, #0]
 8000666:	e01c      	b.n	80006a2 <MCAL_SPI_init+0xde>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10a      	bne.n	8000686 <MCAL_SPI_init+0xc2>
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	8813      	ldrh	r3, [r2, #0]
 8000674:	f36f 2349 	bfc	r3, #9, #1
 8000678:	8013      	strh	r3, [r2, #0]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7913      	ldrb	r3, [r2, #4]
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	7113      	strb	r3, [r2, #4]
 8000684:	e00d      	b.n	80006a2 <MCAL_SPI_init+0xde>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d109      	bne.n	80006a2 <MCAL_SPI_init+0xde>
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	8813      	ldrh	r3, [r2, #0]
 8000692:	f36f 2349 	bfc	r3, #9, #1
 8000696:	8013      	strh	r3, [r2, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7913      	ldrb	r3, [r2, #4]
 800069c:	f36f 0382 	bfc	r3, #2, #1
 80006a0:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2d9      	uxtb	r1, r3
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	8813      	ldrh	r3, [r2, #0]
 80006b0:	f361 0382 	bfi	r3, r1, #2, #1
 80006b4:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	b2d9      	uxtb	r1, r3
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	8813      	ldrh	r3, [r2, #0]
 80006c4:	f361 03c5 	bfi	r3, r1, #3, #3
 80006c8:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d119      	bne.n	8000706 <MCAL_SPI_init+0x142>
		SPIx->SPI_CR2.Bit_Name.RXNEIE = 1;
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	7913      	ldrb	r3, [r2, #4]
 80006d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006da:	7113      	strb	r3, [r2, #4]
		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MCAL_SPI_init+0x164>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <MCAL_SPI_init+0x12e>
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MCAL_SPI_init+0x174>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MCAL_SPI_init+0x174>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e009      	b.n	8000706 <MCAL_SPI_init+0x142>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <MCAL_SPI_init+0x170>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d105      	bne.n	8000706 <MCAL_SPI_init+0x142>
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MCAL_SPI_init+0x174>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MCAL_SPI_init+0x174>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2d9      	uxtb	r1, r3
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	8813      	ldrh	r3, [r2, #0]
 8000714:	f361 1386 	bfi	r3, r1, #6, #1
 8000718:	8013      	strh	r3, [r2, #0]
	 MCAL_SET_GPIO(SPIx);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f870 	bl	8000800 <MCAL_SET_GPIO>




}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013000 	.word	0x40013000
 800072c:	20000030 	.word	0x20000030
 8000730:	40021000 	.word	0x40021000
 8000734:	40003800 	.word	0x40003800
 8000738:	e000e104 	.word	0xe000e104

0800073c <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


void MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =G_P_Config_t[0];
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MCAL_SPI_SendData+0x58>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d103      	bne.n	800075c <MCAL_SPI_SendData+0x20>
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MCAL_SPI_SendData+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e006      	b.n	800076a <MCAL_SPI_SendData+0x2e>
	else if(SPIx == SPI2) L_P_config_t =G_P_Config_t[1];
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MCAL_SPI_SendData+0x60>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d102      	bne.n	800076a <MCAL_SPI_SendData+0x2e>
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MCAL_SPI_SendData+0x5c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d007      	beq.n	8000782 <MCAL_SPI_SendData+0x46>

	}else{
		while(!((SPIx)->SPI_SR.Bit_Name.TXE));
 8000772:	bf00      	nop
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f8      	beq.n	8000774 <MCAL_SPI_SendData+0x38>
	}
	((SPIx)->DR_reg.ALL_REG)=data;
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]

}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40013000 	.word	0x40013000
 8000798:	20000030 	.word	0x20000030
 800079c:	40003800 	.word	0x40003800

080007a0 <MCAL_SPI_ReciveData>:
uint8_t MCAL_SPI_ReciveData(SPI_Reg *SPIx){
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =G_P_Config_t[0];
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <MCAL_SPI_ReciveData+0x54>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d103      	bne.n	80007bc <MCAL_SPI_ReciveData+0x1c>
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MCAL_SPI_ReciveData+0x58>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e006      	b.n	80007ca <MCAL_SPI_ReciveData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =G_P_Config_t[1];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MCAL_SPI_ReciveData+0x5c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d102      	bne.n	80007ca <MCAL_SPI_ReciveData+0x2a>
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MCAL_SPI_ReciveData+0x58>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt

	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	7a1b      	ldrb	r3, [r3, #8]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d007      	beq.n	80007e2 <MCAL_SPI_ReciveData+0x42>

	}else{
		while(!((SPIx)->SPI_SR.Bit_Name.RXNE));
 80007d2:	bf00      	nop
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f8      	beq.n	80007d4 <MCAL_SPI_ReciveData+0x34>
	}
	return ((SPIx)->DR_reg.ALL_REG );
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	b2db      	uxtb	r3, r3


}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40013000 	.word	0x40013000
 80007f8:	20000030 	.word	0x20000030
 80007fc:	40003800 	.word	0x40003800

08000800 <MCAL_SET_GPIO>:

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a6d      	ldr	r2, [pc, #436]	; (80009c4 <MCAL_SET_GPIO+0x1c4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d16a      	bne.n	80008ea <MCAL_SET_GPIO+0xea>
		L_P_config_t =G_P_Config_t[0];
 8000814:	4b6c      	ldr	r3, [pc, #432]	; (80009c8 <MCAL_SET_GPIO+0x1c8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 800081a:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <MCAL_SET_GPIO+0x1cc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a6b      	ldr	r2, [pc, #428]	; (80009cc <MCAL_SET_GPIO+0x1cc>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d108      	bne.n	8000840 <MCAL_SET_GPIO+0x40>
 800082e:	4b68      	ldr	r3, [pc, #416]	; (80009d0 <MCAL_SET_GPIO+0x1d0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4a63      	ldr	r2, [pc, #396]	; (80009c4 <MCAL_SET_GPIO+0x1c4>)
 8000836:	8813      	ldrh	r3, [r2, #0]
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	8013      	strh	r3, [r2, #0]
 800083e:	e00e      	b.n	800085e <MCAL_SET_GPIO+0x5e>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d103      	bne.n	8000850 <MCAL_SET_GPIO+0x50>
 8000848:	4b62      	ldr	r3, [pc, #392]	; (80009d4 <MCAL_SET_GPIO+0x1d4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e006      	b.n	800085e <MCAL_SET_GPIO+0x5e>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d102      	bne.n	800085e <MCAL_SET_GPIO+0x5e>
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <MCAL_SET_GPIO+0x1d8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4619      	mov	r1, r3
 8000864:	485d      	ldr	r0, [pc, #372]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 8000866:	f7ff fdad 	bl	80003c4 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d103      	bne.n	800087a <MCAL_SET_GPIO+0x7a>
 8000872:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <MCAL_SET_GPIO+0x1e0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	e006      	b.n	8000888 <MCAL_SET_GPIO+0x88>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d102      	bne.n	8000888 <MCAL_SET_GPIO+0x88>
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <MCAL_SET_GPIO+0x1e4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4619      	mov	r1, r3
 800088e:	4853      	ldr	r0, [pc, #332]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 8000890:	f7ff fd98 	bl	80003c4 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	785b      	ldrb	r3, [r3, #1]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d103      	bne.n	80008a4 <MCAL_SET_GPIO+0xa4>
 800089c:	4b52      	ldr	r3, [pc, #328]	; (80009e8 <MCAL_SET_GPIO+0x1e8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	e006      	b.n	80008b2 <MCAL_SET_GPIO+0xb2>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <MCAL_SET_GPIO+0xb2>
 80008ac:	4b4f      	ldr	r3, [pc, #316]	; (80009ec <MCAL_SET_GPIO+0x1ec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	4848      	ldr	r0, [pc, #288]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 80008ba:	f7ff fd83 	bl	80003c4 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d103      	bne.n	80008ce <MCAL_SET_GPIO+0xce>
 80008c6:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MCAL_SET_GPIO+0x1f0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	e006      	b.n	80008dc <MCAL_SET_GPIO+0xdc>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <MCAL_SET_GPIO+0xdc>
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MCAL_SET_GPIO+0x1f4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	483e      	ldr	r0, [pc, #248]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 80008e4:	f7ff fd6e 	bl	80003c4 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 80008e8:	e068      	b.n	80009bc <MCAL_SET_GPIO+0x1bc>
	else if(SPIx == SPI2){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <MCAL_SET_GPIO+0x1f8>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d164      	bne.n	80009bc <MCAL_SET_GPIO+0x1bc>
		L_P_config_t =G_P_Config_t[1];
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <MCAL_SET_GPIO+0x1c8>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MCAL_SET_GPIO+0x1cc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a33      	ldr	r2, [pc, #204]	; (80009cc <MCAL_SET_GPIO+0x1cc>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <MCAL_SET_GPIO+0x114>
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MCAL_SET_GPIO+0x1fc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	e00e      	b.n	8000932 <MCAL_SET_GPIO+0x132>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <MCAL_SET_GPIO+0x124>
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <MCAL_SET_GPIO+0x1fc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	e006      	b.n	8000932 <MCAL_SET_GPIO+0x132>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d102      	bne.n	8000932 <MCAL_SET_GPIO+0x132>
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MCAL_SET_GPIO+0x200>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60bb      	str	r3, [r7, #8]
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	4828      	ldr	r0, [pc, #160]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 800093a:	f7ff fd43 	bl	80003c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d103      	bne.n	800094e <MCAL_SET_GPIO+0x14e>
 8000946:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <MCAL_SET_GPIO+0x204>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	e006      	b.n	800095c <MCAL_SET_GPIO+0x15c>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <MCAL_SET_GPIO+0x15c>
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MCAL_SET_GPIO+0x208>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	60bb      	str	r3, [r7, #8]
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 8000964:	f7ff fd2e 	bl	80003c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d103      	bne.n	8000978 <MCAL_SET_GPIO+0x178>
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MCAL_SET_GPIO+0x20c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	e006      	b.n	8000986 <MCAL_SET_GPIO+0x186>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	785b      	ldrb	r3, [r3, #1]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <MCAL_SET_GPIO+0x186>
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MCAL_SET_GPIO+0x210>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60bb      	str	r3, [r7, #8]
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 800098e:	f7ff fd19 	bl	80003c4 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d103      	bne.n	80009a2 <MCAL_SET_GPIO+0x1a2>
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MCAL_SET_GPIO+0x214>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	e006      	b.n	80009b0 <MCAL_SET_GPIO+0x1b0>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <MCAL_SET_GPIO+0x1b0>
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MCAL_SET_GPIO+0x218>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	60bb      	str	r3, [r7, #8]
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4619      	mov	r1, r3
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <MCAL_SET_GPIO+0x1dc>)
 80009b8:	f7ff fd04 	bl	80003c4 <MCAL_GPIO_init>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013000 	.word	0x40013000
 80009c8:	20000030 	.word	0x20000030
 80009cc:	40021000 	.word	0x40021000
 80009d0:	08000fbc 	.word	0x08000fbc
 80009d4:	08000fc0 	.word	0x08000fc0
 80009d8:	08000fc4 	.word	0x08000fc4
 80009dc:	40010800 	.word	0x40010800
 80009e0:	08000fc8 	.word	0x08000fc8
 80009e4:	08000fcc 	.word	0x08000fcc
 80009e8:	08000fd0 	.word	0x08000fd0
 80009ec:	08000fd4 	.word	0x08000fd4
 80009f0:	08000fd8 	.word	0x08000fd8
 80009f4:	08000fdc 	.word	0x08000fdc
 80009f8:	40003800 	.word	0x40003800
 80009fc:	08000fe0 	.word	0x08000fe0
 8000a00:	08000fe4 	.word	0x08000fe4
 8000a04:	08000fe8 	.word	0x08000fe8
 8000a08:	08000fec 	.word	0x08000fec
 8000a0c:	08000ff0 	.word	0x08000ff0
 8000a10:	08000ff4 	.word	0x08000ff4
 8000a14:	08000ff8 	.word	0x08000ff8
 8000a18:	08000ffc 	.word	0x08000ffc

08000a1c <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t *G_P_config[3] ={NULL};
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4aa3      	ldr	r2, [pc, #652]	; (8000cb8 <MCAL_USART_init+0x29c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d109      	bne.n	8000a42 <MCAL_USART_init+0x26>
		G_P_config[0]=PIN;
 8000a2e:	4aa3      	ldr	r2, [pc, #652]	; (8000cbc <MCAL_USART_init+0x2a0>)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	6013      	str	r3, [r2, #0]
		RCC->APB2ENR |=(1<<14);
 8000a34:	4ba2      	ldr	r3, [pc, #648]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4aa1      	ldr	r2, [pc, #644]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	e01a      	b.n	8000a78 <MCAL_USART_init+0x5c>
	}else if(USARTx==USART2){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a9f      	ldr	r2, [pc, #636]	; (8000cc4 <MCAL_USART_init+0x2a8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d109      	bne.n	8000a5e <MCAL_USART_init+0x42>
		G_P_config[1]=PIN;
 8000a4a:	4a9c      	ldr	r2, [pc, #624]	; (8000cbc <MCAL_USART_init+0x2a0>)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6053      	str	r3, [r2, #4]
		RCC->APB1ENR |=(1<<17);
 8000a50:	4b9b      	ldr	r3, [pc, #620]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	4a9a      	ldr	r2, [pc, #616]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5a:	61d3      	str	r3, [r2, #28]
 8000a5c:	e00c      	b.n	8000a78 <MCAL_USART_init+0x5c>
}else if(USARTx==USART3){
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a99      	ldr	r2, [pc, #612]	; (8000cc8 <MCAL_USART_init+0x2ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d108      	bne.n	8000a78 <MCAL_USART_init+0x5c>
		G_P_config[2]=PIN;
 8000a66:	4a95      	ldr	r2, [pc, #596]	; (8000cbc <MCAL_USART_init+0x2a0>)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	6093      	str	r3, [r2, #8]
		RCC->APB1ENR |=(1<<18);
 8000a6c:	4b94      	ldr	r3, [pc, #592]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	4a93      	ldr	r2, [pc, #588]	; (8000cc0 <MCAL_USART_init+0x2a4>)
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a76:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	0312      	lsls	r2, r2, #12
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	79d2      	ldrb	r2, [r2, #7]
 8000a9c:	0312      	lsls	r2, r2, #12
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	7a5b      	ldrb	r3, [r3, #9]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10b      	bne.n	8000ac4 <MCAL_USART_init+0xa8>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f043 0208 	orr.w	r2, r3, #8
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	f043 0204 	orr.w	r2, r3, #4
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	7a1b      	ldrb	r3, [r3, #8]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d827      	bhi.n	8000b1c <MCAL_USART_init+0x100>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <MCAL_USART_init+0xb8>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000af3 	.word	0x08000af3
 8000adc:	08000b01 	.word	0x08000b01
 8000ae0:	08000b0f 	.word	0x08000b0f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	615a      	str	r2, [r3, #20]
		break;
 8000af0:	e014      	b.n	8000b1c <MCAL_USART_init+0x100>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	615a      	str	r2, [r3, #20]
		break;
 8000afe:	e00d      	b.n	8000b1c <MCAL_USART_init+0x100>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]
		break;
 8000b0c:	e006      	b.n	8000b1c <MCAL_USART_init+0x100>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	615a      	str	r2, [r3, #20]
		break;
 8000b1a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	7952      	ldrb	r2, [r2, #5]
 8000b24:	0252      	lsls	r2, r2, #9
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	799b      	ldrb	r3, [r3, #6]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d125      	bne.n	8000b80 <MCAL_USART_init+0x164>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a60      	ldr	r2, [pc, #384]	; (8000cb8 <MCAL_USART_init+0x29c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d106      	bne.n	8000b4a <MCAL_USART_init+0x12e>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8000b3c:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a62      	ldr	r2, [pc, #392]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e014      	b.n	8000b74 <MCAL_USART_init+0x158>
		}
		else if(USARTx==USART2){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a5d      	ldr	r2, [pc, #372]	; (8000cc4 <MCAL_USART_init+0x2a8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d106      	bne.n	8000b60 <MCAL_USART_init+0x144>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8000b52:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e009      	b.n	8000b74 <MCAL_USART_init+0x158>

		}
		else if(USARTx==USART3){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a59      	ldr	r2, [pc, #356]	; (8000cc8 <MCAL_USART_init+0x2ac>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d105      	bne.n	8000b74 <MCAL_USART_init+0x158>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8000b68:	4b58      	ldr	r3, [pc, #352]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <MCAL_USART_init+0x2b0>)
 8000b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b72:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f043 0220 	orr.w	r2, r3, #32
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60da      	str	r2, [r3, #12]
		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4d      	ldr	r2, [pc, #308]	; (8000cb8 <MCAL_USART_init+0x29c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d12d      	bne.n	8000be4 <MCAL_USART_init+0x1c8>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8000b88:	f7ff fd08 	bl	800059c <MCAL_GET_PCLCK2>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	011c      	lsls	r4, r3, #4
 8000b9a:	f7ff fcff 	bl	800059c <MCAL_GET_PCLCK2>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009a      	lsls	r2, r3, #2
 8000ba8:	441a      	add	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	fbb2 f5f3 	udiv	r5, r2, r3
 8000bb4:	f7ff fcf2 	bl	800059c <MCAL_GET_PCLCK2>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	2264      	movs	r2, #100	; 0x64
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	1aeb      	subs	r3, r5, r3
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4a40      	ldr	r2, [pc, #256]	; (8000cd0 <MCAL_USART_init+0x2b4>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	095b      	lsrs	r3, r3, #5
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	ea44 0203 	orr.w	r2, r4, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	e062      	b.n	8000caa <MCAL_USART_init+0x28e>
			}else if(USARTx==USART2){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <MCAL_USART_init+0x2a8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d12d      	bne.n	8000c48 <MCAL_USART_init+0x22c>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000bec:	f7ff fcc2 	bl	8000574 <MCAL_GET_PCLCK1>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	011c      	lsls	r4, r3, #4
 8000bfe:	f7ff fcb9 	bl	8000574 <MCAL_GET_PCLCK1>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	009a      	lsls	r2, r3, #2
 8000c0c:	441a      	add	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c18:	f7ff fcac 	bl	8000574 <MCAL_GET_PCLCK1>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	fb02 f303 	mul.w	r3, r2, r3
 8000c2e:	1aeb      	subs	r3, r5, r3
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <MCAL_USART_init+0x2b4>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	095b      	lsrs	r3, r3, #5
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	ea44 0203 	orr.w	r2, r4, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	e030      	b.n	8000caa <MCAL_USART_init+0x28e>

		}else if(USARTx==USART3){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <MCAL_USART_init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d12c      	bne.n	8000caa <MCAL_USART_init+0x28e>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000c50:	f7ff fc90 	bl	8000574 <MCAL_GET_PCLCK1>
 8000c54:	4602      	mov	r2, r0
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	011c      	lsls	r4, r3, #4
 8000c62:	f7ff fc87 	bl	8000574 <MCAL_GET_PCLCK1>
 8000c66:	4602      	mov	r2, r0
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009a      	lsls	r2, r3, #2
 8000c70:	441a      	add	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c7c:	f7ff fc7a 	bl	8000574 <MCAL_GET_PCLCK1>
 8000c80:	4602      	mov	r2, r0
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	2264      	movs	r2, #100	; 0x64
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MCAL_USART_init+0x2b4>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	ea44 0203 	orr.w	r2, r4, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f858 	bl	8000d60 <SET_GPIO>
	}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	20000038 	.word	0x20000038
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	e000e104 	.word	0xe000e104
 8000cd0:	51eb851f 	.word	0x51eb851f

08000cd4 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <MCAL_USART_SendData+0x7c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d103      	bne.n	8000cf4 <MCAL_USART_SendData+0x20>
		L_P_config_pin=G_P_config[0];
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MCAL_USART_SendData+0x80>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e00e      	b.n	8000d12 <MCAL_USART_SendData+0x3e>
	}		else if(USARTx==USART2){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <MCAL_USART_SendData+0x84>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d103      	bne.n	8000d04 <MCAL_USART_SendData+0x30>
		L_P_config_pin=G_P_config[1];
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MCAL_USART_SendData+0x80>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e006      	b.n	8000d12 <MCAL_USART_SendData+0x3e>
	}
	else if(USARTx==USART3){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MCAL_USART_SendData+0x88>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d102      	bne.n	8000d12 <MCAL_USART_SendData+0x3e>
		L_P_config_pin=G_P_config[2];
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MCAL_USART_SendData+0x80>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	60fb      	str	r3, [r7, #12]
	}

	if(L_P_config_pin->MEC ==POLLING){
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	799b      	ldrb	r3, [r3, #6]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d107      	bne.n	8000d2a <MCAL_USART_SendData+0x56>
		while(!(USARTx->SR & (1<<7)));
 8000d1a:	bf00      	nop
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f9      	beq.n	8000d1c <MCAL_USART_SendData+0x48>
 8000d28:	e002      	b.n	8000d30 <MCAL_USART_SendData+0x5c>
	}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	2b01      	cmp	r3, #1
	}else if(L_P_config_pin->MEC ==DMA){ // will modified later

	}

	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	791b      	ldrb	r3, [r3, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d103      	bne.n	8000d40 <MCAL_USART_SendData+0x6c>
	{
		USARTx->DR =(data & 0x1FF);
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =(data & 0xFF);

	}

}
 8000d3e:	e002      	b.n	8000d46 <MCAL_USART_SendData+0x72>
		USARTx->DR =(data & 0xFF);
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	605a      	str	r2, [r3, #4]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40013800 	.word	0x40013800
 8000d54:	20000038 	.word	0x20000038
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40004800 	.word	0x40004800

08000d60 <SET_GPIO>:

		}

}

void SET_GPIO(USART_REG *USARTx){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <SET_GPIO+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <SET_GPIO+0xc0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <SET_GPIO+0xc4>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <SET_GPIO+0xc4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4827      	ldr	r0, [pc, #156]	; (8000e28 <SET_GPIO+0xc8>)
 8000d8a:	f7ff fb1b 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <SET_GPIO+0xcc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4823      	ldr	r0, [pc, #140]	; (8000e28 <SET_GPIO+0xc8>)
 8000d9c:	f7ff fb12 	bl	80003c4 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8000da0:	e038      	b.n	8000e14 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <SET_GPIO+0xd0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d118      	bne.n	8000ddc <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SET_GPIO+0xc4>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <SET_GPIO+0xc4>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <SET_GPIO+0xd4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4819      	ldr	r0, [pc, #100]	; (8000e28 <SET_GPIO+0xc8>)
 8000dc4:	f7ff fafe 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <SET_GPIO+0xd8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <SET_GPIO+0xc8>)
 8000dd6:	f7ff faf5 	bl	80003c4 <MCAL_GPIO_init>
}
 8000dda:	e01b      	b.n	8000e14 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <SET_GPIO+0xdc>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d117      	bne.n	8000e14 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <SET_GPIO+0xc4>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <SET_GPIO+0xc4>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <SET_GPIO+0xe0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <SET_GPIO+0xe4>)
 8000dfe:	f7ff fae1 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <SET_GPIO+0xe8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <SET_GPIO+0xe4>)
 8000e10:	f7ff fad8 	bl	80003c4 <MCAL_GPIO_init>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08001000 	.word	0x08001000
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	08001004 	.word	0x08001004
 8000e30:	40004400 	.word	0x40004400
 8000e34:	08001008 	.word	0x08001008
 8000e38:	0800100c 	.word	0x0800100c
 8000e3c:	40004800 	.word	0x40004800
 8000e40:	08001010 	.word	0x08001010
 8000e44:	40010c00 	.word	0x40010c00
 8000e48:	08001014 	.word	0x08001014

08000e4c <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	G_P_config[0]->P_Call_Back();
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <USART1_IRQHandler+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4798      	blx	r3
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000038 	.word	0x20000038

08000e60 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	G_P_config[1]->P_Call_Back();
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000038 	.word	0x20000038

08000e74 <USART3_IRQHandler>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	G_P_config[2]->P_Call_Back();
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <USART3_IRQHandler+0x10>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	4798      	blx	r3
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000038 	.word	0x20000038

08000e88 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "SPI.h"
#include "USART_Driver.h"
int main(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	; 0x2c
 8000e8c:	af00      	add	r7, sp, #0
	uint8_t data=0xF;
 8000e8e:	230f      	movs	r3, #15
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	SPI_Config_t CONFIG_S={enabled,Slave,SPI_8_BITS,MSB,HW_IN,F_CPU_8,idle_0,second_clock,interrupt_DS,NULL};
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <main+0x74>)
 8000e96:	f107 0414 	add.w	r4, r7, #20
 8000e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	USART_Config_t UART1_CON={115200,EGHIT_BITS,DISABLE,POLLING,ONE_STOP_BIT,Disabled,Asynchronous,NULL};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000eb0:	607b      	str	r3, [r7, #4]
	MCAL_USART_init(USART1, &UART1_CON);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4812      	ldr	r0, [pc, #72]	; (8000f00 <main+0x78>)
 8000eb8:	f7ff fdb0 	bl	8000a1c <MCAL_USART_init>
	MCAL_SPI_init(SPI1,&CONFIG_S);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <main+0x7c>)
 8000ec4:	f7ff fb7e 	bl	80005c4 <MCAL_SPI_init>

    /* Loop forever */
	for(;;){
//		for(int i=0;i<255;i++);
		MCAL_SPI_SendData(SPI1,data);
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <main+0x7c>)
 8000ed0:	f7ff fc34 	bl	800073c <MCAL_SPI_SendData>
		data=MCAL_SPI_ReciveData(SPI1);
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <main+0x7c>)
 8000ed6:	f7ff fc63 	bl	80007a0 <MCAL_SPI_ReciveData>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MCAL_SPI_SendData(SPI1,data);
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <main+0x7c>)
 8000ee8:	f7ff fc28 	bl	800073c <MCAL_SPI_SendData>
		MCAL_USART_SendData(USART1,data);
 8000eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <main+0x78>)
 8000ef4:	f7ff feee 	bl	8000cd4 <MCAL_USART_SendData>
		MCAL_SPI_SendData(SPI1,data);
 8000ef8:	e7e6      	b.n	8000ec8 <main+0x40>
 8000efa:	bf00      	nop
 8000efc:	08001018 	.word	0x08001018
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40013000 	.word	0x40013000

08000f08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopForever+0xe>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopForever+0x16>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f36:	f000 f811 	bl	8000f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff ffa5 	bl	8000e88 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   r0, =_estack
 8000f40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f4c:	08001030 	.word	0x08001030
  ldr r2, =_sbss
 8000f50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f54:	20000080 	.word	0x20000080

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <__libc_init_array>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2500      	movs	r5, #0
 8000f60:	4e0c      	ldr	r6, [pc, #48]	; (8000f94 <__libc_init_array+0x38>)
 8000f62:	4c0d      	ldr	r4, [pc, #52]	; (8000f98 <__libc_init_array+0x3c>)
 8000f64:	1ba4      	subs	r4, r4, r6
 8000f66:	10a4      	asrs	r4, r4, #2
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	d109      	bne.n	8000f80 <__libc_init_array+0x24>
 8000f6c:	f000 f81a 	bl	8000fa4 <_init>
 8000f70:	2500      	movs	r5, #0
 8000f72:	4e0a      	ldr	r6, [pc, #40]	; (8000f9c <__libc_init_array+0x40>)
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <__libc_init_array+0x44>)
 8000f76:	1ba4      	subs	r4, r4, r6
 8000f78:	10a4      	asrs	r4, r4, #2
 8000f7a:	42a5      	cmp	r5, r4
 8000f7c:	d105      	bne.n	8000f8a <__libc_init_array+0x2e>
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f84:	4798      	blx	r3
 8000f86:	3501      	adds	r5, #1
 8000f88:	e7ee      	b.n	8000f68 <__libc_init_array+0xc>
 8000f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	3501      	adds	r5, #1
 8000f92:	e7f2      	b.n	8000f7a <__libc_init_array+0x1e>
 8000f94:	08001028 	.word	0x08001028
 8000f98:	08001028 	.word	0x08001028
 8000f9c:	08001028 	.word	0x08001028
 8000fa0:	0800102c 	.word	0x0800102c

08000fa4 <_init>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr

08000fb0 <_fini>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr
