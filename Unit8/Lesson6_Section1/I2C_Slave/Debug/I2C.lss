
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007c8  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000853  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 09 01 	call	0x212	; 0x212 <main>
  64:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_init>:
 *  Created on: Aug 19, 2023
 *      Author: Ahmed
 */
#include "i2c.h"

void I2C_init(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TWSR =0x00; // select the TWI Prescaler Bits accourding to the data sheet
  74:	e1 e2       	ldi	r30, 0x21	; 33
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	TWBR = 0x02;
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	80 83       	st	Z, r24

	TWAR =0b00000010; // if i will be a slave my address will be 0x02
  82:	e2 e2       	ldi	r30, 0x22	; 34
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	TWCR |=(1<<TWEN);
  8a:	a6 e5       	ldi	r26, 0x56	; 86
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e6 e5       	ldi	r30, 0x56	; 86
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	84 60       	ori	r24, 0x04	; 4
  96:	8c 93       	st	X, r24
}
  98:	cf 91       	pop	r28
  9a:	df 91       	pop	r29
  9c:	08 95       	ret

0000009e <I2C_start>:
void I2C_start(void){
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	TWCR |=(1<<TWEN) |(1<<TWSTA) |(1<<TWINT);
  a6:	a6 e5       	ldi	r26, 0x56	; 86
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e6 e5       	ldi	r30, 0x56	; 86
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 6a       	ori	r24, 0xA4	; 164
  b2:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, and the status code in TWSR will be $08
  b4:	e6 e5       	ldi	r30, 0x56	; 86
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	dc f7       	brge	.-10     	; 0xb4 <I2C_start+0x16>

}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <I2C_stop>:
void I2C_stop(void){
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
	TWCR |=(1<<TWEN) |(1<<TWSTO) |(1<<TWINT);
  cc:	a6 e5       	ldi	r26, 0x56	; 86
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e6 e5       	ldi	r30, 0x56	; 86
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	84 69       	ori	r24, 0x94	; 148
  d8:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, and the status code in TWSR will be $08
  da:	e6 e5       	ldi	r30, 0x56	; 86
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	dc f7       	brge	.-10     	; 0xda <I2C_stop+0x16>

}
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	08 95       	ret

000000ea <I2C_writeByte>:
void I2C_writeByte(uint8_t data){
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
  f6:	e3 e2       	ldi	r30, 0x23	; 35
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	80 83       	st	Z, r24
	TWCR |=(1<<TWEN)  |(1<<TWINT);
  fe:	a6 e5       	ldi	r26, 0x56	; 86
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e6 e5       	ldi	r30, 0x56	; 86
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	84 68       	ori	r24, 0x84	; 132
 10a:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, Possible status codes in master mode are $18, $20, or $38
 10c:	e6 e5       	ldi	r30, 0x56	; 86
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 23       	and	r24, r24
 114:	dc f7       	brge	.-10     	; 0x10c <I2C_writeByte+0x22>

}
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <I2C_readByteWithACK>:
uint8_t I2C_readByteWithACK(void)
{
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 126:	e6 e5       	ldi	r30, 0x56	; 86
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	84 ec       	ldi	r24, 0xC4	; 196
 12c:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (!(TWCR &(1<<TWINT))) ;     /* Read Data */
 12e:	e6 e5       	ldi	r30, 0x56	; 86
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	dc f7       	brge	.-10     	; 0x12e <I2C_readByteWithACK+0x10>
	return TWDR;
 138:	e3 e2       	ldi	r30, 0x23	; 35
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
}
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	08 95       	ret

00000144 <I2C_getStatus>:
uint8_t I2C_getStatus(void)
{
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62

	return (TWSR &0xF8);
 14c:	e1 e2       	ldi	r30, 0x21	; 33
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 7f       	andi	r24, 0xF8	; 248
}
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <I2C_PACKET_TRANSSEMET>:


uint8_t I2C_PACKET_TRANSSEMET(uint8_t slave_address,uint8_t data){
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	00 d0       	rcall	.+0      	; 0x160 <I2C_PACKET_TRANSSEMET+0x6>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	6a 83       	std	Y+2, r22	; 0x02
	I2C_start();
 16a:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	if(I2C_getStatus() != START_condition_DONE){
 16e:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	11 f0       	breq	.+4      	; 0x17a <I2C_PACKET_TRANSSEMET+0x20>
		return ERROR;
 176:	1b 82       	std	Y+3, r1	; 0x03
 178:	17 c0       	rjmp	.+46     	; 0x1a8 <I2C_PACKET_TRANSSEMET+0x4e>
	}
	I2C_writeByte((slave_address &0xFE)+0);
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	0e 94 75 00 	call	0xea	; 0xea <I2C_writeByte>
	if(I2C_getStatus() != SLA_W_DONE){
 182:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	11 f0       	breq	.+4      	; 0x18e <I2C_PACKET_TRANSSEMET+0x34>
		return ERROR;
 18a:	1b 82       	std	Y+3, r1	; 0x03
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <I2C_PACKET_TRANSSEMET+0x4e>
	}
	I2C_writeByte(data);
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	0e 94 75 00 	call	0xea	; 0xea <I2C_writeByte>
	if(I2C_getStatus() != Data_transmitted_DONE){
 194:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 198:	88 32       	cpi	r24, 0x28	; 40
 19a:	11 f0       	breq	.+4      	; 0x1a0 <I2C_PACKET_TRANSSEMET+0x46>
		return ERROR;
 19c:	1b 82       	std	Y+3, r1	; 0x03
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <I2C_PACKET_TRANSSEMET+0x4e>
	}
	I2C_stop();
 1a0:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_stop>
	return Send_DONE;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <I2C_PACKET_Recive>:
uint8_t I2C_PACKET_Recive(uint8_t slave_address,uint8_t data){
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <I2C_PACKET_Recive+0x6>
 1bc:	0f 92       	push	r0
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	6a 83       	std	Y+2, r22	; 0x02
	I2C_start();
 1c6:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	if(I2C_getStatus() != START_condition_DONE){
 1ca:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <I2C_PACKET_Recive+0x20>
		return ERROR;
 1d2:	1b 82       	std	Y+3, r1	; 0x03
 1d4:	17 c0       	rjmp	.+46     	; 0x204 <I2C_PACKET_Recive+0x4e>
	}
	I2C_writeByte((slave_address &0xFE)+1);
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	0e 94 75 00 	call	0xea	; 0xea <I2C_writeByte>
	if(I2C_getStatus() != SLA_R_DONE){
 1e0:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 1e4:	80 34       	cpi	r24, 0x40	; 64
 1e6:	11 f0       	breq	.+4      	; 0x1ec <I2C_PACKET_Recive+0x36>
		return ERROR;
 1e8:	1b 82       	std	Y+3, r1	; 0x03
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <I2C_PACKET_Recive+0x4e>
	}
	I2C_readByteWithACK();
 1ec:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_readByteWithACK>
	if(I2C_getStatus() != Data_received_DONE){
 1f0:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_getStatus>
 1f4:	80 35       	cpi	r24, 0x50	; 80
 1f6:	11 f0       	breq	.+4      	; 0x1fc <I2C_PACKET_Recive+0x46>
		return ERROR;
 1f8:	1b 82       	std	Y+3, r1	; 0x03
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <I2C_PACKET_Recive+0x4e>
	}
	I2C_stop();
 1fc:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_stop>
	return Send_DONE;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	8b 83       	std	Y+3, r24	; 0x03
 204:	8b 81       	ldd	r24, Y+3	; 0x03
}
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <main>:
 *      Author: Ahmed
 */

#include "i2c.h"

void main(void){
 212:	df 93       	push	r29
 214:	cf 93       	push	r28
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x6>
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xFF;
 21c:	ea e3       	ldi	r30, 0x3A	; 58
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	80 83       	st	Z, r24
	while(1){
		for(int i=0;i<9;i++){
 224:	1a 82       	std	Y+2, r1	; 0x02
 226:	19 82       	std	Y+1, r1	; 0x01
 228:	0a c0       	rjmp	.+20     	; 0x23e <main+0x2c>
			I2C_PACKET_TRANSSEMET(0x03,i);
 22a:	99 81       	ldd	r25, Y+1	; 0x01
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	69 2f       	mov	r22, r25
 230:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_PACKET_TRANSSEMET>
#include "i2c.h"

void main(void){
	DDRA=0xFF;
	while(1){
		for(int i=0;i<9;i++){
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	89 30       	cpi	r24, 0x09	; 9
 244:	91 05       	cpc	r25, r1
 246:	8c f3       	brlt	.-30     	; 0x22a <main+0x18>
 248:	ed cf       	rjmp	.-38     	; 0x224 <main+0x12>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
