
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001000  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001130  08001130  00011130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800119c  0800119c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080011a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000014  080011b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080011b8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000298e  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007d9  00000000  00000000  000229cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ab6  00000000  00000000  000231a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  00023c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00023e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001691  00000000  00000000  00023fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000176b  00000000  00000000  00025659  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006171  00000000  00000000  00026dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002cf35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c4  00000000  00000000  0002cfb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08001118 	.word	0x08001118

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08001118 	.word	0x08001118

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000044 	.word	0x20000044
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000044 	.word	0x20000044
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000044 	.word	0x20000044
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000044 	.word	0x20000044
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000044 	.word	0x20000044
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000044 	.word	0x20000044

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000044 	.word	0x20000044

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e006      	b.n	80003b6 <Get_PIN_Positon+0x26>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80003ae:	3338      	adds	r3, #56	; 0x38
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d801      	bhi.n	80003dc <MCAL_GPIO_init+0x18>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	e001      	b.n	80003e0 <MCAL_GPIO_init+0x1c>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3304      	adds	r3, #4
 80003e0:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffd1 	bl	8000390 <Get_PIN_Positon>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	230f      	movs	r3, #15
 80003f4:	4093      	lsls	r3, r2
 80003f6:	43da      	mvns	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	401a      	ands	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00e      	beq.n	800042a <MCAL_GPIO_init+0x66>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b01      	cmp	r3, #1
 8000414:	d009      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b02      	cmp	r3, #2
 800041e:	d004      	beq.n	800042a <MCAL_GPIO_init+0x66>
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	789b      	ldrb	r3, [r3, #2]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b03      	cmp	r3, #3
 8000428:	d156      	bne.n	80004d8 <MCAL_GPIO_init+0x114>
		if(PINx->MODE == INPUT_PD){
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	789b      	ldrb	r3, [r3, #2]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b03      	cmp	r3, #3
 8000432:	d11c      	bne.n	800046e <MCAL_GPIO_init+0xaa>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffa8 	bl	8000390 <Get_PIN_Positon>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	2308      	movs	r3, #8
 8000446:	fa03 f202 	lsl.w	r2, r3, r2
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	b29b      	uxth	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2301      	movs	r3, #1
 800045e:	4093      	lsls	r3, r2
 8000460:	43da      	mvns	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	401a      	ands	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 800046c:	e04c      	b.n	8000508 <MCAL_GPIO_init+0x144>
		}

		else if(PINx->MODE == INPUT_PU){
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b02      	cmp	r3, #2
 8000476:	d11c      	bne.n	80004b2 <MCAL_GPIO_init+0xee>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	b29b      	uxth	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_PIN_Positon>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	2308      	movs	r3, #8
 800048a:	fa03 f202 	lsl.w	r2, r3, r2
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	431a      	orrs	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	2301      	movs	r3, #1
 80004a2:	fa03 f202 	lsl.w	r2, r3, r2
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004b0:	e02a      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	009c      	lsls	r4, r3, #2
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff65 	bl	8000390 <Get_PIN_Positon>
 80004c6:	4603      	mov	r3, r0
 80004c8:	fa04 f203 	lsl.w	r2, r4, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	431a      	orrs	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80004d6:	e017      	b.n	8000508 <MCAL_GPIO_init+0x144>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	789b      	ldrb	r3, [r3, #2]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	3b04      	subs	r3, #4
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	78d2      	ldrb	r2, [r2, #3]
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	ea43 0402 	orr.w	r4, r3, r2
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff4c 	bl	8000390 <Get_PIN_Positon>
 80004f8:	4603      	mov	r3, r0
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	431a      	orrs	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	601a      	str	r2, [r3, #0]

	}

}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
 800051c:	4613      	mov	r3, r2
 800051e:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10b      	bne.n	8000540 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	b29b      	uxth	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	2301      	movs	r3, #1
 8000530:	fa03 f202 	lsl.w	r2, r3, r2
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	60da      	str	r2, [r3, #12]

	}



}
 800053e:	e00a      	b.n	8000556 <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8000540:	887b      	ldrh	r3, [r7, #2]
 8000542:	b29b      	uxth	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	2301      	movs	r3, #1
 8000548:	4093      	lsls	r3, r2
 800054a:	43da      	mvns	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	401a      	ands	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	60da      	str	r2, [r3, #12]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MCAL_GET_SYS_CLCK+0x30>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	f003 0303 	and.w	r3, r3, #3
 800056e:	2b01      	cmp	r3, #1
 8000570:	d006      	beq.n	8000580 <MCAL_GET_SYS_CLCK+0x20>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d302      	bcc.n	800057c <MCAL_GET_SYS_CLCK+0x1c>
 8000576:	2b02      	cmp	r3, #2
 8000578:	d004      	beq.n	8000584 <MCAL_GET_SYS_CLCK+0x24>
 800057a:	e005      	b.n	8000588 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MCAL_GET_SYS_CLCK+0x34>)
 800057e:	e003      	b.n	8000588 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <MCAL_GET_SYS_CLCK+0x38>)
 8000582:	e001      	b.n	8000588 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <MCAL_GET_SYS_CLCK+0x38>)
 8000586:	e7ff      	b.n	8000588 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000
 8000594:	007a1200 	.word	0x007a1200
 8000598:	00f42400 	.word	0x00f42400

0800059c <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 80005a0:	f7ff ffde 	bl	8000560 <MCAL_GET_SYS_CLCK>
 80005a4:	4601      	mov	r1, r0
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_GET_H_CLCK+0x20>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	091b      	lsrs	r3, r3, #4
 80005ac:	f003 030f 	and.w	r3, r3, #15
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <MCAL_GET_H_CLCK+0x24>)
 80005b2:	5cd3      	ldrb	r3, [r2, r3]
 80005b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000000 	.word	0x20000000

080005c4 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 80005c8:	f7ff ffe8 	bl	800059c <MCAL_GET_H_CLCK>
 80005cc:	4601      	mov	r1, r0
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MCAL_GET_PCLCK1+0x20>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <MCAL_GET_PCLCK1+0x24>)
 80005da:	5cd3      	ldrb	r3, [r2, r3]
 80005dc:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	20000000 	.word	0x20000000

080005ec <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80005f0:	f7ff ffd4 	bl	800059c <MCAL_GET_H_CLCK>
 80005f4:	4601      	mov	r1, r0
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MCAL_GET_PCLCK2+0x20>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	0adb      	lsrs	r3, r3, #11
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <MCAL_GET_PCLCK2+0x24>)
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	20000000 	.word	0x20000000

08000614 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t *G_P_Config_t[2]={NULL,NULL}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= Config; 	RCC->APB2ENR |=(1<<12); }
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a63      	ldr	r2, [pc, #396]	; (80007b0 <MCAL_SPI_init+0x19c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d109      	bne.n	800063a <MCAL_SPI_init+0x26>
 8000626:	4a63      	ldr	r2, [pc, #396]	; (80007b4 <MCAL_SPI_init+0x1a0>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b62      	ldr	r3, [pc, #392]	; (80007b8 <MCAL_SPI_init+0x1a4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a61      	ldr	r2, [pc, #388]	; (80007b8 <MCAL_SPI_init+0x1a4>)
 8000632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	e00c      	b.n	8000654 <MCAL_SPI_init+0x40>
	else if(SPIx == SPI2){ G_P_Config_t[1]= Config;RCC->APB1ENR |=(1<<14); }
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a5f      	ldr	r2, [pc, #380]	; (80007bc <MCAL_SPI_init+0x1a8>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d108      	bne.n	8000654 <MCAL_SPI_init+0x40>
 8000642:	4a5c      	ldr	r2, [pc, #368]	; (80007b4 <MCAL_SPI_init+0x1a0>)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6053      	str	r3, [r2, #4]
 8000648:	4b5b      	ldr	r3, [pc, #364]	; (80007b8 <MCAL_SPI_init+0x1a4>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a5a      	ldr	r2, [pc, #360]	; (80007b8 <MCAL_SPI_init+0x1a4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	b2d9      	uxtb	r1, r3
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	6813      	ldr	r3, [r2, #0]
 8000662:	f361 23cb 	bfi	r3, r1, #11, #1
 8000666:	6013      	str	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2d9      	uxtb	r1, r3
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	6813      	ldr	r3, [r2, #0]
 8000676:	f361 0341 	bfi	r3, r1, #1, #1
 800067a:	6013      	str	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	79db      	ldrb	r3, [r3, #7]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2d9      	uxtb	r1, r3
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	f361 0300 	bfi	r3, r1, #0, #1
 800068e:	6013      	str	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	78db      	ldrb	r3, [r3, #3]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2d9      	uxtb	r1, r3
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	6813      	ldr	r3, [r2, #0]
 800069e:	f361 13c7 	bfi	r3, r1, #7, #1
 80006a2:	6013      	str	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <MCAL_SPI_init+0xa4>
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	6813      	ldr	r3, [r2, #0]
 80006b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e01c      	b.n	80006f2 <MCAL_SPI_init+0xde>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d10a      	bne.n	80006d6 <MCAL_SPI_init+0xc2>
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	f36f 2349 	bfc	r3, #9, #1
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6853      	ldr	r3, [r2, #4]
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6053      	str	r3, [r2, #4]
 80006d4:	e00d      	b.n	80006f2 <MCAL_SPI_init+0xde>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d109      	bne.n	80006f2 <MCAL_SPI_init+0xde>
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	6813      	ldr	r3, [r2, #0]
 80006e2:	f36f 2349 	bfc	r3, #9, #1
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	6853      	ldr	r3, [r2, #4]
 80006ec:	f36f 0382 	bfc	r3, #2, #1
 80006f0:	6053      	str	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	6813      	ldr	r3, [r2, #0]
 8000700:	f361 0382 	bfi	r3, r1, #2, #1
 8000704:	6013      	str	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	b2d9      	uxtb	r1, r3
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	6813      	ldr	r3, [r2, #0]
 8000714:	f361 03c5 	bfi	r3, r1, #3, #3
 8000718:	6013      	str	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11a      	bne.n	8000758 <MCAL_SPI_init+0x144>
		SPIx->SPI_CR2.Bit_Name.RXNEIE = 1;
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	6853      	ldr	r3, [r2, #4]
 8000726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072a:	6053      	str	r3, [r2, #4]
		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <MCAL_SPI_init+0x19c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <MCAL_SPI_init+0x12e>
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MCAL_SPI_init+0x1ac>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MCAL_SPI_init+0x1ac>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e024      	b.n	800078c <MCAL_SPI_init+0x178>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MCAL_SPI_init+0x1a8>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d120      	bne.n	800078c <MCAL_SPI_init+0x178>
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MCAL_SPI_init+0x1ac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MCAL_SPI_init+0x1ac>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e019      	b.n	800078c <MCAL_SPI_init+0x178>
}else{
	SPIx->SPI_CR2.Bit_Name.RXNEIE = 0;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	6853      	ldr	r3, [r2, #4]
 800075c:	f36f 1386 	bfc	r3, #6, #1
 8000760:	6053      	str	r3, [r2, #4]
	if(SPIx == SPI1)    	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MCAL_SPI_init+0x19c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <MCAL_SPI_init+0x164>
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MCAL_SPI_init+0x1b0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MCAL_SPI_init+0x1b0>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e009      	b.n	800078c <MCAL_SPI_init+0x178>
			else if(SPIx == SPI2)   NVIC_ICER1 |=(1<< (SPI2_IRQ-32));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MCAL_SPI_init+0x1a8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d105      	bne.n	800078c <MCAL_SPI_init+0x178>
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MCAL_SPI_init+0x1b0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MCAL_SPI_init+0x1b0>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	6813      	ldr	r3, [r2, #0]
 800079a:	f361 1386 	bfi	r3, r1, #6, #1
 800079e:	6013      	str	r3, [r2, #0]
	 MCAL_SET_GPIO(SPIx);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f87d 	bl	80008a0 <MCAL_SET_GPIO>




}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013000 	.word	0x40013000
 80007b4:	20000030 	.word	0x20000030
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40003800 	.word	0x40003800
 80007c0:	e000e104 	.word	0xe000e104
 80007c4:	e000e184 	.word	0xe000e184

080007c8 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


void MCAL_SPI_SendData(SPI_Reg *SPIx,uint16_t *data){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	SPI_Config_t *L_P_config_t=NULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =G_P_Config_t[0];
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <MCAL_SPI_SendData+0x64>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d103      	bne.n	80007e6 <MCAL_SPI_SendData+0x1e>
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MCAL_SPI_SendData+0x68>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e006      	b.n	80007f4 <MCAL_SPI_SendData+0x2c>
	else if(SPIx == SPI2) L_P_config_t =G_P_Config_t[1];
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MCAL_SPI_SendData+0x6c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d102      	bne.n	80007f4 <MCAL_SPI_SendData+0x2c>
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MCAL_SPI_SendData+0x68>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d007      	beq.n	800080c <MCAL_SPI_SendData+0x44>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 80007fc:	bf00      	nop
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f8      	beq.n	80007fe <MCAL_SPI_SendData+0x36>
	}
	SPIx->DR_reg.ALL_REG=(SPIx->DR_reg.ALL_REG & 0xFFFFFF00) |(*data &0xFF);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60da      	str	r2, [r3, #12]

}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40013000 	.word	0x40013000
 8000830:	20000030 	.word	0x20000030
 8000834:	40003800 	.word	0x40003800

08000838 <MCAL_SPI_ReciveData>:
void MCAL_SPI_ReciveData(SPI_Reg *SPIx,uint16_t *data){
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	SPI_Config_t *L_P_config_t=NULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =G_P_Config_t[0];
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MCAL_SPI_ReciveData+0x5c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d103      	bne.n	8000856 <MCAL_SPI_ReciveData+0x1e>
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MCAL_SPI_ReciveData+0x60>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e006      	b.n	8000864 <MCAL_SPI_ReciveData+0x2c>
	else if(SPIx == SPI2) L_P_config_t =G_P_Config_t[1];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <MCAL_SPI_ReciveData+0x64>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d102      	bne.n	8000864 <MCAL_SPI_ReciveData+0x2c>
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MCAL_SPI_ReciveData+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt

	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	7a1b      	ldrb	r3, [r3, #8]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d007      	beq.n	800087c <MCAL_SPI_ReciveData+0x44>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.RXNE);
 800086c:	bf00      	nop
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f8      	beq.n	800086e <MCAL_SPI_ReciveData+0x36>
	}
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	b29b      	uxth	r3, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	b29a      	uxth	r2, r3
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	801a      	strh	r2, [r3, #0]


}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40013000 	.word	0x40013000
 8000898:	20000030 	.word	0x20000030
 800089c:	40003800 	.word	0x40003800

080008a0 <MCAL_SET_GPIO>:

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a6d      	ldr	r2, [pc, #436]	; (8000a64 <MCAL_SET_GPIO+0x1c4>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d16a      	bne.n	800098a <MCAL_SET_GPIO+0xea>
		L_P_config_t =G_P_Config_t[0];
 80008b4:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <MCAL_SET_GPIO+0x1c8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 80008ba:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <MCAL_SET_GPIO+0x1cc>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a6b      	ldr	r2, [pc, #428]	; (8000a6c <MCAL_SET_GPIO+0x1cc>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d108      	bne.n	80008e0 <MCAL_SET_GPIO+0x40>
 80008ce:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <MCAL_SET_GPIO+0x1d0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4a63      	ldr	r2, [pc, #396]	; (8000a64 <MCAL_SET_GPIO+0x1c4>)
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e00e      	b.n	80008fe <MCAL_SET_GPIO+0x5e>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d103      	bne.n	80008f0 <MCAL_SET_GPIO+0x50>
 80008e8:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <MCAL_SET_GPIO+0x1d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e006      	b.n	80008fe <MCAL_SET_GPIO+0x5e>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d102      	bne.n	80008fe <MCAL_SET_GPIO+0x5e>
 80008f8:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <MCAL_SET_GPIO+0x1d8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	485d      	ldr	r0, [pc, #372]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000906:	f7ff fd5d 	bl	80003c4 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d103      	bne.n	800091a <MCAL_SET_GPIO+0x7a>
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <MCAL_SET_GPIO+0x1e0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	e006      	b.n	8000928 <MCAL_SET_GPIO+0x88>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <MCAL_SET_GPIO+0x88>
 8000922:	4b58      	ldr	r3, [pc, #352]	; (8000a84 <MCAL_SET_GPIO+0x1e4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	4619      	mov	r1, r3
 800092e:	4853      	ldr	r0, [pc, #332]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000930:	f7ff fd48 	bl	80003c4 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d103      	bne.n	8000944 <MCAL_SET_GPIO+0xa4>
 800093c:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <MCAL_SET_GPIO+0x1e8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	e006      	b.n	8000952 <MCAL_SET_GPIO+0xb2>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <MCAL_SET_GPIO+0xb2>
 800094c:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <MCAL_SET_GPIO+0x1ec>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4619      	mov	r1, r3
 8000958:	4848      	ldr	r0, [pc, #288]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 800095a:	f7ff fd33 	bl	80003c4 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d103      	bne.n	800096e <MCAL_SET_GPIO+0xce>
 8000966:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <MCAL_SET_GPIO+0x1f0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	e006      	b.n	800097c <MCAL_SET_GPIO+0xdc>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <MCAL_SET_GPIO+0xdc>
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <MCAL_SET_GPIO+0x1f4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4619      	mov	r1, r3
 8000982:	483e      	ldr	r0, [pc, #248]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000984:	f7ff fd1e 	bl	80003c4 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 8000988:	e068      	b.n	8000a5c <MCAL_SET_GPIO+0x1bc>
	else if(SPIx == SPI2){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a42      	ldr	r2, [pc, #264]	; (8000a98 <MCAL_SET_GPIO+0x1f8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d164      	bne.n	8000a5c <MCAL_SET_GPIO+0x1bc>
		L_P_config_t =G_P_Config_t[1];
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <MCAL_SET_GPIO+0x1c8>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 8000998:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MCAL_SET_GPIO+0x1cc>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MCAL_SET_GPIO+0x1cc>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <MCAL_SET_GPIO+0x114>
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MCAL_SET_GPIO+0x1fc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	e00e      	b.n	80009d2 <MCAL_SET_GPIO+0x132>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d103      	bne.n	80009c4 <MCAL_SET_GPIO+0x124>
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MCAL_SET_GPIO+0x1fc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	e006      	b.n	80009d2 <MCAL_SET_GPIO+0x132>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d102      	bne.n	80009d2 <MCAL_SET_GPIO+0x132>
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MCAL_SET_GPIO+0x200>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60bb      	str	r3, [r7, #8]
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 80009da:	f7ff fcf3 	bl	80003c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d103      	bne.n	80009ee <MCAL_SET_GPIO+0x14e>
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <MCAL_SET_GPIO+0x204>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	e006      	b.n	80009fc <MCAL_SET_GPIO+0x15c>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <MCAL_SET_GPIO+0x15c>
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MCAL_SET_GPIO+0x208>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	60bb      	str	r3, [r7, #8]
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000a04:	f7ff fcde 	bl	80003c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d103      	bne.n	8000a18 <MCAL_SET_GPIO+0x178>
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MCAL_SET_GPIO+0x20c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	e006      	b.n	8000a26 <MCAL_SET_GPIO+0x186>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	785b      	ldrb	r3, [r3, #1]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <MCAL_SET_GPIO+0x186>
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MCAL_SET_GPIO+0x210>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60bb      	str	r3, [r7, #8]
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000a2e:	f7ff fcc9 	bl	80003c4 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d103      	bne.n	8000a42 <MCAL_SET_GPIO+0x1a2>
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MCAL_SET_GPIO+0x214>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	e006      	b.n	8000a50 <MCAL_SET_GPIO+0x1b0>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <MCAL_SET_GPIO+0x1b0>
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MCAL_SET_GPIO+0x218>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60bb      	str	r3, [r7, #8]
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MCAL_SET_GPIO+0x1dc>)
 8000a58:	f7ff fcb4 	bl	80003c4 <MCAL_GPIO_init>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013000 	.word	0x40013000
 8000a68:	20000030 	.word	0x20000030
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	08001130 	.word	0x08001130
 8000a74:	08001134 	.word	0x08001134
 8000a78:	08001138 	.word	0x08001138
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	0800113c 	.word	0x0800113c
 8000a84:	08001140 	.word	0x08001140
 8000a88:	08001144 	.word	0x08001144
 8000a8c:	08001148 	.word	0x08001148
 8000a90:	0800114c 	.word	0x0800114c
 8000a94:	08001150 	.word	0x08001150
 8000a98:	40003800 	.word	0x40003800
 8000a9c:	08001154 	.word	0x08001154
 8000aa0:	08001158 	.word	0x08001158
 8000aa4:	0800115c 	.word	0x0800115c
 8000aa8:	08001160 	.word	0x08001160
 8000aac:	08001164 	.word	0x08001164
 8000ab0:	08001168 	.word	0x08001168
 8000ab4:	0800116c 	.word	0x0800116c
 8000ab8:	08001170 	.word	0x08001170

08000abc <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t *G_P_config[3] ={NULL};
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4aa3      	ldr	r2, [pc, #652]	; (8000d58 <MCAL_USART_init+0x29c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d109      	bne.n	8000ae2 <MCAL_USART_init+0x26>
		G_P_config[0]=PIN;
 8000ace:	4aa3      	ldr	r2, [pc, #652]	; (8000d5c <MCAL_USART_init+0x2a0>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6013      	str	r3, [r2, #0]
		RCC->APB2ENR |=(1<<14);
 8000ad4:	4ba2      	ldr	r3, [pc, #648]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4aa1      	ldr	r2, [pc, #644]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	e01a      	b.n	8000b18 <MCAL_USART_init+0x5c>
	}else if(USARTx==USART2){
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a9f      	ldr	r2, [pc, #636]	; (8000d64 <MCAL_USART_init+0x2a8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d109      	bne.n	8000afe <MCAL_USART_init+0x42>
		G_P_config[1]=PIN;
 8000aea:	4a9c      	ldr	r2, [pc, #624]	; (8000d5c <MCAL_USART_init+0x2a0>)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6053      	str	r3, [r2, #4]
		RCC->APB1ENR |=(1<<17);
 8000af0:	4b9b      	ldr	r3, [pc, #620]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a9a      	ldr	r2, [pc, #616]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	e00c      	b.n	8000b18 <MCAL_USART_init+0x5c>
}else if(USARTx==USART3){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a99      	ldr	r2, [pc, #612]	; (8000d68 <MCAL_USART_init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d108      	bne.n	8000b18 <MCAL_USART_init+0x5c>
		G_P_config[2]=PIN;
 8000b06:	4a95      	ldr	r2, [pc, #596]	; (8000d5c <MCAL_USART_init+0x2a0>)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6093      	str	r3, [r2, #8]
		RCC->APB1ENR |=(1<<18);
 8000b0c:	4b94      	ldr	r3, [pc, #592]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4a93      	ldr	r2, [pc, #588]	; (8000d60 <MCAL_USART_init+0x2a4>)
 8000b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b16:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	7912      	ldrb	r2, [r2, #4]
 8000b2c:	0312      	lsls	r2, r2, #12
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	79d2      	ldrb	r2, [r2, #7]
 8000b3c:	0312      	lsls	r2, r2, #12
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	7a5b      	ldrb	r3, [r3, #9]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10b      	bne.n	8000b64 <MCAL_USART_init+0xa8>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f043 0208 	orr.w	r2, r3, #8
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	f043 0204 	orr.w	r2, r3, #4
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	7a1b      	ldrb	r3, [r3, #8]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d827      	bhi.n	8000bbc <MCAL_USART_init+0x100>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <MCAL_USART_init+0xb8>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000b93 	.word	0x08000b93
 8000b7c:	08000ba1 	.word	0x08000ba1
 8000b80:	08000baf 	.word	0x08000baf
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	615a      	str	r2, [r3, #20]
		break;
 8000b90:	e014      	b.n	8000bbc <MCAL_USART_init+0x100>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	615a      	str	r2, [r3, #20]
		break;
 8000b9e:	e00d      	b.n	8000bbc <MCAL_USART_init+0x100>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	615a      	str	r2, [r3, #20]
		break;
 8000bac:	e006      	b.n	8000bbc <MCAL_USART_init+0x100>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	615a      	str	r2, [r3, #20]
		break;
 8000bba:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	7952      	ldrb	r2, [r2, #5]
 8000bc4:	0252      	lsls	r2, r2, #9
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	799b      	ldrb	r3, [r3, #6]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d125      	bne.n	8000c20 <MCAL_USART_init+0x164>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a60      	ldr	r2, [pc, #384]	; (8000d58 <MCAL_USART_init+0x29c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <MCAL_USART_init+0x12e>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8000bdc:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a62      	ldr	r2, [pc, #392]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e014      	b.n	8000c14 <MCAL_USART_init+0x158>
		}
		else if(USARTx==USART2){
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <MCAL_USART_init+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <MCAL_USART_init+0x144>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a5d      	ldr	r2, [pc, #372]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e009      	b.n	8000c14 <MCAL_USART_init+0x158>

		}
		else if(USARTx==USART3){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a59      	ldr	r2, [pc, #356]	; (8000d68 <MCAL_USART_init+0x2ac>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d105      	bne.n	8000c14 <MCAL_USART_init+0x158>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a57      	ldr	r2, [pc, #348]	; (8000d6c <MCAL_USART_init+0x2b0>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c12:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f043 0220 	orr.w	r2, r3, #32
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4d      	ldr	r2, [pc, #308]	; (8000d58 <MCAL_USART_init+0x29c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d12d      	bne.n	8000c84 <MCAL_USART_init+0x1c8>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8000c28:	f7ff fce0 	bl	80005ec <MCAL_GET_PCLCK2>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	011c      	lsls	r4, r3, #4
 8000c3a:	f7ff fcd7 	bl	80005ec <MCAL_GET_PCLCK2>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	009a      	lsls	r2, r3, #2
 8000c48:	441a      	add	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c54:	f7ff fcca 	bl	80005ec <MCAL_GET_PCLCK2>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c64:	2264      	movs	r2, #100	; 0x64
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	1aeb      	subs	r3, r5, r3
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	4a40      	ldr	r2, [pc, #256]	; (8000d70 <MCAL_USART_init+0x2b4>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	ea44 0203 	orr.w	r2, r4, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	e062      	b.n	8000d4a <MCAL_USART_init+0x28e>
			}else if(USARTx==USART2){
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a37      	ldr	r2, [pc, #220]	; (8000d64 <MCAL_USART_init+0x2a8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d12d      	bne.n	8000ce8 <MCAL_USART_init+0x22c>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000c8c:	f7ff fc9a 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000c90:	4602      	mov	r2, r0
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9c:	011c      	lsls	r4, r3, #4
 8000c9e:	f7ff fc91 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	009a      	lsls	r2, r3, #2
 8000cac:	441a      	add	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fbb2 f5f3 	udiv	r5, r2, r3
 8000cb8:	f7ff fc84 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc8:	2264      	movs	r2, #100	; 0x64
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	1aeb      	subs	r3, r5, r3
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <MCAL_USART_init+0x2b4>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	095b      	lsrs	r3, r3, #5
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	ea44 0203 	orr.w	r2, r4, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	e030      	b.n	8000d4a <MCAL_USART_init+0x28e>

		}else if(USARTx==USART3){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <MCAL_USART_init+0x2ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d12c      	bne.n	8000d4a <MCAL_USART_init+0x28e>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000cf0:	f7ff fc68 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d00:	011c      	lsls	r4, r3, #4
 8000d02:	f7ff fc5f 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000d06:	4602      	mov	r2, r0
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009a      	lsls	r2, r3, #2
 8000d10:	441a      	add	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	fbb2 f5f3 	udiv	r5, r2, r3
 8000d1c:	f7ff fc52 	bl	80005c4 <MCAL_GET_PCLCK1>
 8000d20:	4602      	mov	r2, r0
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	2264      	movs	r2, #100	; 0x64
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	1aeb      	subs	r3, r5, r3
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <MCAL_USART_init+0x2b4>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	095b      	lsrs	r3, r3, #5
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	ea44 0203 	orr.w	r2, r4, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f89e 	bl	8000e8c <SET_GPIO>
	}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}
 8000d58:	40013800 	.word	0x40013800
 8000d5c:	20000038 	.word	0x20000038
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	e000e104 	.word	0xe000e104
 8000d70:	51eb851f 	.word	0x51eb851f

08000d74 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MCAL_USART_SendData+0x7c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d103      	bne.n	8000d94 <MCAL_USART_SendData+0x20>
		L_P_config_pin=G_P_config[0];
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MCAL_USART_SendData+0x80>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e00e      	b.n	8000db2 <MCAL_USART_SendData+0x3e>
	}		else if(USARTx==USART2){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <MCAL_USART_SendData+0x84>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d103      	bne.n	8000da4 <MCAL_USART_SendData+0x30>
		L_P_config_pin=G_P_config[1];
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MCAL_USART_SendData+0x80>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e006      	b.n	8000db2 <MCAL_USART_SendData+0x3e>
	}
	else if(USARTx==USART3){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <MCAL_USART_SendData+0x88>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <MCAL_USART_SendData+0x3e>
		L_P_config_pin=G_P_config[2];
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MCAL_USART_SendData+0x80>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	60fb      	str	r3, [r7, #12]
	}

	if(L_P_config_pin->MEC ==POLLING){
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	799b      	ldrb	r3, [r3, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d107      	bne.n	8000dca <MCAL_USART_SendData+0x56>
		while(!(USARTx->SR & (1<<7)));
 8000dba:	bf00      	nop
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f9      	beq.n	8000dbc <MCAL_USART_SendData+0x48>
 8000dc8:	e002      	b.n	8000dd0 <MCAL_USART_SendData+0x5c>
	}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	2b01      	cmp	r3, #1
	}else if(L_P_config_pin->MEC ==DMA){ // will modified later

	}

	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d103      	bne.n	8000de0 <MCAL_USART_SendData+0x6c>
	{
		USARTx->DR =(data & 0x1FF);
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =(data & 0xFF);

	}

}
 8000dde:	e002      	b.n	8000de6 <MCAL_USART_SendData+0x72>
		USARTx->DR =(data & 0xFF);
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40013800 	.word	0x40013800
 8000df4:	20000038 	.word	0x20000038
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40004800 	.word	0x40004800

08000e00 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MCAL_USART_ReciveData+0x7c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d103      	bne.n	8000e1c <MCAL_USART_ReciveData+0x1c>
		L_P_config_pin=G_P_config[0];
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MCAL_USART_ReciveData+0x80>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e00e      	b.n	8000e3a <MCAL_USART_ReciveData+0x3a>
	}		else if(USARTx==USART2){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <MCAL_USART_ReciveData+0x84>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d103      	bne.n	8000e2c <MCAL_USART_ReciveData+0x2c>
		L_P_config_pin=G_P_config[1];
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MCAL_USART_ReciveData+0x80>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	e006      	b.n	8000e3a <MCAL_USART_ReciveData+0x3a>
	}
	else if(USARTx==USART3){
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <MCAL_USART_ReciveData+0x88>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d102      	bne.n	8000e3a <MCAL_USART_ReciveData+0x3a>
		L_P_config_pin=G_P_config[2];
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MCAL_USART_ReciveData+0x80>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d107      	bne.n	8000e52 <MCAL_USART_ReciveData+0x52>
			while(!(USARTx->SR & (1<<5)));
 8000e42:	bf00      	nop
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f9      	beq.n	8000e44 <MCAL_USART_ReciveData+0x44>
 8000e50:	e002      	b.n	8000e58 <MCAL_USART_ReciveData+0x58>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	799b      	ldrb	r3, [r3, #6]
 8000e56:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==DISABLE){
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <MCAL_USART_ReciveData+0x68>
			return USARTx->DR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	e004      	b.n	8000e72 <MCAL_USART_ReciveData+0x72>
		}else{
			return (USARTx->DR &0xFF);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29b      	uxth	r3, r3

		}

}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	20000038 	.word	0x20000038
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40004800 	.word	0x40004800

08000e8c <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <SET_GPIO+0xbc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <SET_GPIO+0xc0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <SET_GPIO+0xc4>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <SET_GPIO+0xc4>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <SET_GPIO+0xc8>)
 8000eb6:	f7ff fa85 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <SET_GPIO+0xcc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <SET_GPIO+0xc8>)
 8000ec8:	f7ff fa7c 	bl	80003c4 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8000ecc:	e038      	b.n	8000f40 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <SET_GPIO+0xd0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d118      	bne.n	8000f08 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <SET_GPIO+0xc4>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <SET_GPIO+0xc4>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <SET_GPIO+0xd4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <SET_GPIO+0xc8>)
 8000ef0:	f7ff fa68 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <SET_GPIO+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <SET_GPIO+0xc8>)
 8000f02:	f7ff fa5f 	bl	80003c4 <MCAL_GPIO_init>
}
 8000f06:	e01b      	b.n	8000f40 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <SET_GPIO+0xdc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d117      	bne.n	8000f40 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <SET_GPIO+0xc4>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <SET_GPIO+0xc4>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <SET_GPIO+0xe0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <SET_GPIO+0xe4>)
 8000f2a:	f7ff fa4b 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <SET_GPIO+0xe8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <SET_GPIO+0xe4>)
 8000f3c:	f7ff fa42 	bl	80003c4 <MCAL_GPIO_init>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	08001174 	.word	0x08001174
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	08001178 	.word	0x08001178
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	0800117c 	.word	0x0800117c
 8000f64:	08001180 	.word	0x08001180
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	08001184 	.word	0x08001184
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	08001188 	.word	0x08001188

08000f78 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	G_P_config[0]->P_Call_Back();
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <USART1_IRQHandler+0x10>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	4798      	blx	r3
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000038 	.word	0x20000038

08000f8c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	G_P_config[1]->P_Call_Back();
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <USART2_IRQHandler+0x10>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000038 	.word	0x20000038

08000fa0 <USART3_IRQHandler>:
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	G_P_config[2]->P_Call_Back();
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <USART3_IRQHandler+0x10>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4798      	blx	r3
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000038 	.word	0x20000038

08000fb4 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "SPI.h"
#include "USART_Driver.h"
int main(void)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08d      	sub	sp, #52	; 0x34
 8000fb8:	af00      	add	r7, sp, #0
	uint8_t data=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	SPI_Config_t CONFIG_S={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_8,idle_0,second_clock,interrupt_DS,NULL};
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <main+0xb8>)
 8000fc2:	f107 0414 	add.w	r4, r7, #20
 8000fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	USART_Config_t UART1_CON={115200,EGHIT_BITS,DISABLE,POLLING,ONE_STOP_BIT,Disabled,Asynchronous,NULL};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fdc:	607b      	str	r3, [r7, #4]
	MCAL_USART_init(USART1, &UART1_CON);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4823      	ldr	r0, [pc, #140]	; (8001070 <main+0xbc>)
 8000fe4:	f7ff fd6a 	bl	8000abc <MCAL_USART_init>
	MCAL_SPI_init(SPI1,&CONFIG_S);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4821      	ldr	r0, [pc, #132]	; (8001074 <main+0xc0>)
 8000ff0:	f7ff fb10 	bl	8000614 <MCAL_SPI_init>
	MCAL_write_PIN(GPIOA, PIN_4, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	481f      	ldr	r0, [pc, #124]	; (8001078 <main+0xc4>)
 8000ffa:	f7ff fa89 	bl	8000510 <MCAL_write_PIN>
    /* Loop forever */
	for(;;){
	data=	MCAL_USART_ReciveData(USART1);
 8000ffe:	481c      	ldr	r0, [pc, #112]	; (8001070 <main+0xbc>)
 8001000:	f7ff fefe 	bl	8000e00 <MCAL_USART_ReciveData>
 8001004:	4603      	mov	r3, r0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	MCAL_USART_SendData(USART1,data);
 800100c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001010:	4619      	mov	r1, r3
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <main+0xbc>)
 8001014:	f7ff feae 	bl	8000d74 <MCAL_USART_SendData>
	MCAL_write_PIN(GPIOA, PIN_4, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2104      	movs	r1, #4
 800101c:	4816      	ldr	r0, [pc, #88]	; (8001078 <main+0xc4>)
 800101e:	f7ff fa77 	bl	8000510 <MCAL_write_PIN>
		MCAL_SPI_SendData(SPI1,(uint16_t *)&data);
 8001022:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001026:	4619      	mov	r1, r3
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <main+0xc0>)
 800102a:	f7ff fbcd 	bl	80007c8 <MCAL_SPI_SendData>
		MCAL_SPI_ReciveData(SPI1,(uint16_t *)&data);
 800102e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001032:	4619      	mov	r1, r3
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0xc0>)
 8001036:	f7ff fbff 	bl	8000838 <MCAL_SPI_ReciveData>
		MCAL_write_PIN(GPIOA, PIN_4, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	2104      	movs	r1, #4
 800103e:	480e      	ldr	r0, [pc, #56]	; (8001078 <main+0xc4>)
 8001040:	f7ff fa66 	bl	8000510 <MCAL_write_PIN>



for(int i=0;i<255;i++) for(int j=0;j<255;j++);
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001048:	e00b      	b.n	8001062 <main+0xae>
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
 800104e:	e002      	b.n	8001056 <main+0xa2>
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	3301      	adds	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	2bfe      	cmp	r3, #254	; 0xfe
 800105a:	ddf9      	ble.n	8001050 <main+0x9c>
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	3301      	adds	r3, #1
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	2bfe      	cmp	r3, #254	; 0xfe
 8001066:	ddf0      	ble.n	800104a <main+0x96>
	data=	MCAL_USART_ReciveData(USART1);
 8001068:	e7c9      	b.n	8000ffe <main+0x4a>
 800106a:	bf00      	nop
 800106c:	0800118c 	.word	0x0800118c
 8001070:	40013800 	.word	0x40013800
 8001074:	40013000 	.word	0x40013000
 8001078:	40010800 	.word	0x40010800

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001080:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f000 f811 	bl	80010d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff ff81 	bl	8000fb4 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010c0:	080011a4 	.word	0x080011a4
  ldr r2, =_sbss
 80010c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010c8:	20000080 	.word	0x20000080

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <__libc_init_array>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	2500      	movs	r5, #0
 80010d4:	4e0c      	ldr	r6, [pc, #48]	; (8001108 <__libc_init_array+0x38>)
 80010d6:	4c0d      	ldr	r4, [pc, #52]	; (800110c <__libc_init_array+0x3c>)
 80010d8:	1ba4      	subs	r4, r4, r6
 80010da:	10a4      	asrs	r4, r4, #2
 80010dc:	42a5      	cmp	r5, r4
 80010de:	d109      	bne.n	80010f4 <__libc_init_array+0x24>
 80010e0:	f000 f81a 	bl	8001118 <_init>
 80010e4:	2500      	movs	r5, #0
 80010e6:	4e0a      	ldr	r6, [pc, #40]	; (8001110 <__libc_init_array+0x40>)
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <__libc_init_array+0x44>)
 80010ea:	1ba4      	subs	r4, r4, r6
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	42a5      	cmp	r5, r4
 80010f0:	d105      	bne.n	80010fe <__libc_init_array+0x2e>
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010f8:	4798      	blx	r3
 80010fa:	3501      	adds	r5, #1
 80010fc:	e7ee      	b.n	80010dc <__libc_init_array+0xc>
 80010fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001102:	4798      	blx	r3
 8001104:	3501      	adds	r5, #1
 8001106:	e7f2      	b.n	80010ee <__libc_init_array+0x1e>
 8001108:	0800119c 	.word	0x0800119c
 800110c:	0800119c 	.word	0x0800119c
 8001110:	0800119c 	.word	0x0800119c
 8001114:	080011a0 	.word	0x080011a0

08001118 <_init>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr

08001124 <_fini>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr
