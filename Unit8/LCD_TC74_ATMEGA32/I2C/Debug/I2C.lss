
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000025f8  0000268c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  0000269e  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  0000269e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000411  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a15  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013eb  00000000  00000000  00005764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002592  00000000  00000000  00006b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000090e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  00009464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00016a33  00000000  00000000  0000a0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00020b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <main>
      8a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <I2C_LCD_init>:
 *      Author: Ahmed
 */
#include "LCD_I2C.h"
	unsigned char COMMAND_var=0;

void I2C_LCD_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 ea       	ldi	r26, 0xA0	; 160
     b60:	b1 e4       	ldi	r27, 0x41	; 65
     b62:	8f a3       	std	Y+39, r24	; 0x27
     b64:	98 a7       	std	Y+40, r25	; 0x28
     b66:	a9 a7       	std	Y+41, r26	; 0x29
     b68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6a:	6f a1       	ldd	r22, Y+39	; 0x27
     b6c:	78 a5       	ldd	r23, Y+40	; 0x28
     b6e:	89 a5       	ldd	r24, Y+41	; 0x29
     b70:	9a a5       	ldd	r25, Y+42	; 0x2a
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	4a ef       	ldi	r20, 0xFA	; 250
     b78:	54 e4       	ldi	r21, 0x44	; 68
     b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	8b a3       	std	Y+35, r24	; 0x23
     b84:	9c a3       	std	Y+36, r25	; 0x24
     b86:	ad a3       	std	Y+37, r26	; 0x25
     b88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b8a:	6b a1       	ldd	r22, Y+35	; 0x23
     b8c:	7c a1       	ldd	r23, Y+36	; 0x24
     b8e:	8d a1       	ldd	r24, Y+37	; 0x25
     b90:	9e a1       	ldd	r25, Y+38	; 0x26
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e8       	ldi	r20, 0x80	; 128
     b98:	5f e3       	ldi	r21, 0x3F	; 63
     b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     b9e:	88 23       	and	r24, r24
     ba0:	2c f4       	brge	.+10     	; 0xbac <I2C_LCD_init+0x66>
		__ticks = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	9a a3       	std	Y+34, r25	; 0x22
     ba8:	89 a3       	std	Y+33, r24	; 0x21
     baa:	3f c0       	rjmp	.+126    	; 0xc2a <I2C_LCD_init+0xe4>
	else if (__tmp > 65535)
     bac:	6b a1       	ldd	r22, Y+35	; 0x23
     bae:	7c a1       	ldd	r23, Y+36	; 0x24
     bb0:	8d a1       	ldd	r24, Y+37	; 0x25
     bb2:	9e a1       	ldd	r25, Y+38	; 0x26
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	3f ef       	ldi	r19, 0xFF	; 255
     bb8:	4f e7       	ldi	r20, 0x7F	; 127
     bba:	57 e4       	ldi	r21, 0x47	; 71
     bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc0:	18 16       	cp	r1, r24
     bc2:	4c f5       	brge	.+82     	; 0xc16 <I2C_LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc4:	6f a1       	ldd	r22, Y+39	; 0x27
     bc6:	78 a5       	ldd	r23, Y+40	; 0x28
     bc8:	89 a5       	ldd	r24, Y+41	; 0x29
     bca:	9a a5       	ldd	r25, Y+42	; 0x2a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	9a a3       	std	Y+34, r25	; 0x22
     bea:	89 a3       	std	Y+33, r24	; 0x21
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <I2C_LCD_init+0xc6>
     bee:	88 ec       	ldi	r24, 0xC8	; 200
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	98 a3       	std	Y+32, r25	; 0x20
     bf4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bf8:	98 a1       	ldd	r25, Y+32	; 0x20
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <I2C_LCD_init+0xb4>
     bfe:	98 a3       	std	Y+32, r25	; 0x20
     c00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c02:	89 a1       	ldd	r24, Y+33	; 0x21
     c04:	9a a1       	ldd	r25, Y+34	; 0x22
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	9a a3       	std	Y+34, r25	; 0x22
     c0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c0c:	89 a1       	ldd	r24, Y+33	; 0x21
     c0e:	9a a1       	ldd	r25, Y+34	; 0x22
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	69 f7       	brne	.-38     	; 0xbee <I2C_LCD_init+0xa8>
     c14:	14 c0       	rjmp	.+40     	; 0xc3e <I2C_LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c16:	6b a1       	ldd	r22, Y+35	; 0x23
     c18:	7c a1       	ldd	r23, Y+36	; 0x24
     c1a:	8d a1       	ldd	r24, Y+37	; 0x25
     c1c:	9e a1       	ldd	r25, Y+38	; 0x26
     c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	9a a3       	std	Y+34, r25	; 0x22
     c28:	89 a3       	std	Y+33, r24	; 0x21
     c2a:	89 a1       	ldd	r24, Y+33	; 0x21
     c2c:	9a a1       	ldd	r25, Y+34	; 0x22
     c2e:	9e 8f       	std	Y+30, r25	; 0x1e
     c30:	8d 8f       	std	Y+29, r24	; 0x1d
     c32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <I2C_LCD_init+0xf0>
     c3a:	9e 8f       	std	Y+30, r25	; 0x1e
     c3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	I2C_LCD_sendCommand(LCD_GO_TO_HOME);
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e8       	ldi	r26, 0x80	; 128
     c4a:	bf e3       	ldi	r27, 0x3F	; 63
     c4c:	89 8f       	std	Y+25, r24	; 0x19
     c4e:	9a 8f       	std	Y+26, r25	; 0x1a
     c50:	ab 8f       	std	Y+27, r26	; 0x1b
     c52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	69 8d       	ldd	r22, Y+25	; 0x19
     c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a ef       	ldi	r20, 0xFA	; 250
     c62:	54 e4       	ldi	r21, 0x44	; 68
     c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8d 8b       	std	Y+21, r24	; 0x15
     c6e:	9e 8b       	std	Y+22, r25	; 0x16
     c70:	af 8b       	std	Y+23, r26	; 0x17
     c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c74:	6d 89       	ldd	r22, Y+21	; 0x15
     c76:	7e 89       	ldd	r23, Y+22	; 0x16
     c78:	8f 89       	ldd	r24, Y+23	; 0x17
     c7a:	98 8d       	ldd	r25, Y+24	; 0x18
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e8       	ldi	r20, 0x80	; 128
     c82:	5f e3       	ldi	r21, 0x3F	; 63
     c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c88:	88 23       	and	r24, r24
     c8a:	2c f4       	brge	.+10     	; 0xc96 <I2C_LCD_init+0x150>
		__ticks = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9c 8b       	std	Y+20, r25	; 0x14
     c92:	8b 8b       	std	Y+19, r24	; 0x13
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <I2C_LCD_init+0x1ce>
	else if (__tmp > 65535)
     c96:	6d 89       	ldd	r22, Y+21	; 0x15
     c98:	7e 89       	ldd	r23, Y+22	; 0x16
     c9a:	8f 89       	ldd	r24, Y+23	; 0x17
     c9c:	98 8d       	ldd	r25, Y+24	; 0x18
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	3f ef       	ldi	r19, 0xFF	; 255
     ca2:	4f e7       	ldi	r20, 0x7F	; 127
     ca4:	57 e4       	ldi	r21, 0x47	; 71
     ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     caa:	18 16       	cp	r1, r24
     cac:	4c f5       	brge	.+82     	; 0xd00 <I2C_LCD_init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cae:	69 8d       	ldd	r22, Y+25	; 0x19
     cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e2       	ldi	r20, 0x20	; 32
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9c 8b       	std	Y+20, r25	; 0x14
     cd4:	8b 8b       	std	Y+19, r24	; 0x13
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <I2C_LCD_init+0x1b0>
     cd8:	88 ec       	ldi	r24, 0xC8	; 200
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9a 8b       	std	Y+18, r25	; 0x12
     cde:	89 8b       	std	Y+17, r24	; 0x11
     ce0:	89 89       	ldd	r24, Y+17	; 0x11
     ce2:	9a 89       	ldd	r25, Y+18	; 0x12
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <I2C_LCD_init+0x19e>
     ce8:	9a 8b       	std	Y+18, r25	; 0x12
     cea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9c 8b       	std	Y+20, r25	; 0x14
     cf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf6:	8b 89       	ldd	r24, Y+19	; 0x13
     cf8:	9c 89       	ldd	r25, Y+20	; 0x14
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <I2C_LCD_init+0x192>
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <I2C_LCD_init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d00:	6d 89       	ldd	r22, Y+21	; 0x15
     d02:	7e 89       	ldd	r23, Y+22	; 0x16
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	98 8b       	std	Y+16, r25	; 0x10
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
     d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1e:	98 89       	ldd	r25, Y+16	; 0x10
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <I2C_LCD_init+0x1da>
     d24:	98 8b       	std	Y+16, r25	; 0x10
     d26:	8f 87       	std	Y+15, r24	; 0x0f

		I2C_LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
		_delay_ms(1);
	#endif
	#ifdef FOUR_BIT_MODE
		I2C_LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
     d28:	88 e2       	ldi	r24, 0x28	; 40
     d2a:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e8       	ldi	r26, 0x80	; 128
     d34:	bf e3       	ldi	r27, 0x3F	; 63
     d36:	8b 87       	std	Y+11, r24	; 0x0b
     d38:	9c 87       	std	Y+12, r25	; 0x0c
     d3a:	ad 87       	std	Y+13, r26	; 0x0d
     d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d40:	7c 85       	ldd	r23, Y+12	; 0x0c
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	4a ef       	ldi	r20, 0xFA	; 250
     d4c:	54 e4       	ldi	r21, 0x44	; 68
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	8f 83       	std	Y+7, r24	; 0x07
     d58:	98 87       	std	Y+8, r25	; 0x08
     d5a:	a9 87       	std	Y+9, r26	; 0x09
     d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d5e:	6f 81       	ldd	r22, Y+7	; 0x07
     d60:	78 85       	ldd	r23, Y+8	; 0x08
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e8       	ldi	r20, 0x80	; 128
     d6c:	5f e3       	ldi	r21, 0x3F	; 63
     d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d72:	88 23       	and	r24, r24
     d74:	2c f4       	brge	.+10     	; 0xd80 <I2C_LCD_init+0x23a>
		__ticks = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	3f c0       	rjmp	.+126    	; 0xdfe <I2C_LCD_init+0x2b8>
	else if (__tmp > 65535)
     d80:	6f 81       	ldd	r22, Y+7	; 0x07
     d82:	78 85       	ldd	r23, Y+8	; 0x08
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	4f e7       	ldi	r20, 0x7F	; 127
     d8e:	57 e4       	ldi	r21, 0x47	; 71
     d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d94:	18 16       	cp	r1, r24
     d96:	4c f5       	brge	.+82     	; 0xdea <I2C_LCD_init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d98:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e2       	ldi	r20, 0x20	; 32
     da6:	51 e4       	ldi	r21, 0x41	; 65
     da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <I2C_LCD_init+0x29a>
     dc2:	88 ec       	ldi	r24, 0xC8	; 200
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9c 83       	std	Y+4, r25	; 0x04
     dc8:	8b 83       	std	Y+3, r24	; 0x03
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <I2C_LCD_init+0x288>
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	69 f7       	brne	.-38     	; 0xdc2 <I2C_LCD_init+0x27c>
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <I2C_LCD_init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <I2C_LCD_init+0x2c4>
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
		I2C_LCD_sendCommand(LCD_CURSOR_ON);
     e12:	8e e0       	ldi	r24, 0x0E	; 14
     e14:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
}
     e18:	aa 96       	adiw	r28, 0x2a	; 42
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <I2C_LCD_sendCommand>:
void I2C_LCD_sendCommand(unsigned char command)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	6e 97       	sbiw	r28, 0x1e	; 30
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char x=0;
     e40:	1d 8e       	std	Y+29, r1	; 0x1d
	I2C_start();
     e42:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
	while (I2C_getStatus() != START_condition_DONE);
     e46:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	91 05       	cpc	r25, r1
     e4e:	d9 f7       	brne	.-10     	; 0xe46 <I2C_LCD_sendCommand+0x1c>
	x=(SLA <<1)+0;
     e50:	80 e7       	ldi	r24, 0x70	; 112
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
		I2C_writeByte(x);
     e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
		while(I2C_getStatus() != SLA_W_DONE);
     e5e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
     e62:	88 31       	cpi	r24, 0x18	; 24
     e64:	91 05       	cpc	r25, r1
     e66:	d9 f7       	brne	.-10     	; 0xe5e <I2C_LCD_sendCommand+0x34>

		COMMAND_var &=~((1<<RS)|(1<<RW));
     e68:	80 91 72 00 	lds	r24, 0x0072
     e6c:	8c 7f       	andi	r24, 0xFC	; 252
     e6e:	80 93 72 00 	sts	0x0072, r24
		I2C_writeByte(COMMAND_var);
     e72:	80 91 72 00 	lds	r24, 0x0072
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
		while(I2C_getStatus() != Data_transmitted_DONE);
     e7e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
     e82:	88 32       	cpi	r24, 0x28	; 40
     e84:	91 05       	cpc	r25, r1
     e86:	d9 f7       	brne	.-10     	; 0xe7e <I2C_LCD_sendCommand+0x54>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e8       	ldi	r26, 0x80	; 128
     e8e:	bf e3       	ldi	r27, 0x3F	; 63
     e90:	89 8f       	std	Y+25, r24	; 0x19
     e92:	9a 8f       	std	Y+26, r25	; 0x1a
     e94:	ab 8f       	std	Y+27, r26	; 0x1b
     e96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	69 8d       	ldd	r22, Y+25	; 0x19
     e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a ef       	ldi	r20, 0xFA	; 250
     ea6:	54 e4       	ldi	r21, 0x44	; 68
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8d 8b       	std	Y+21, r24	; 0x15
     eb2:	9e 8b       	std	Y+22, r25	; 0x16
     eb4:	af 8b       	std	Y+23, r26	; 0x17
     eb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <I2C_LCD_sendCommand+0xb0>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c 8b       	std	Y+20, r25	; 0x14
     ed6:	8b 8b       	std	Y+19, r24	; 0x13
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <I2C_LCD_sendCommand+0x12e>
	else if (__tmp > 65535)
     eda:	6d 89       	ldd	r22, Y+21	; 0x15
     edc:	7e 89       	ldd	r23, Y+22	; 0x16
     ede:	8f 89       	ldd	r24, Y+23	; 0x17
     ee0:	98 8d       	ldd	r25, Y+24	; 0x18
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <I2C_LCD_sendCommand+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	69 8d       	ldd	r22, Y+25	; 0x19
     ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9c 8b       	std	Y+20, r25	; 0x14
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <I2C_LCD_sendCommand+0x110>
     f1c:	88 ec       	ldi	r24, 0xC8	; 200
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9a 8b       	std	Y+18, r25	; 0x12
     f22:	89 8b       	std	Y+17, r24	; 0x11
     f24:	89 89       	ldd	r24, Y+17	; 0x11
     f26:	9a 89       	ldd	r25, Y+18	; 0x12
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <I2C_LCD_sendCommand+0xfe>
     f2c:	9a 8b       	std	Y+18, r25	; 0x12
     f2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <I2C_LCD_sendCommand+0xf2>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <I2C_LCD_sendCommand+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	6d 89       	ldd	r22, Y+21	; 0x15
     f46:	7e 89       	ldd	r23, Y+22	; 0x16
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	98 8d       	ldd	r25, Y+24	; 0x18
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9c 8b       	std	Y+20, r25	; 0x14
     f56:	8b 8b       	std	Y+19, r24	; 0x13
     f58:	8b 89       	ldd	r24, Y+19	; 0x13
     f5a:	9c 89       	ldd	r25, Y+20	; 0x14
     f5c:	98 8b       	std	Y+16, r25	; 0x10
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	98 89       	ldd	r25, Y+16	; 0x10
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <I2C_LCD_sendCommand+0x13a>
     f68:	98 8b       	std	Y+16, r25	; 0x10
     f6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
#ifdef EIGHT_BIT_MODE
	DATA_PORT = command;
#endif
#ifdef FOUR_BIT_MODE
	COMMAND_var = (COMMAND_var &0x0F) |(command &0xF0);
     f6c:	80 91 72 00 	lds	r24, 0x0072
     f70:	98 2f       	mov	r25, r24
     f72:	9f 70       	andi	r25, 0x0F	; 15
     f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f76:	80 7f       	andi	r24, 0xF0	; 240
     f78:	89 2b       	or	r24, r25
     f7a:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
     f7e:	80 91 72 00 	lds	r24, 0x0072
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
     f8a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
     f8e:	88 32       	cpi	r24, 0x28	; 40
     f90:	91 05       	cpc	r25, r1
     f92:	d9 f7       	brne	.-10     	; 0xf8a <I2C_LCD_sendCommand+0x160>

	I2C_EN_PULS();
     f94:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_EN_PULS>
	COMMAND_var = (COMMAND_var &0x0F) |(command <<4);
     f98:	80 91 72 00 	lds	r24, 0x0072
     f9c:	28 2f       	mov	r18, r24
     f9e:	2f 70       	andi	r18, 0x0F	; 15
     fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	82 95       	swap	r24
     fa8:	92 95       	swap	r25
     faa:	90 7f       	andi	r25, 0xF0	; 240
     fac:	98 27       	eor	r25, r24
     fae:	80 7f       	andi	r24, 0xF0	; 240
     fb0:	98 27       	eor	r25, r24
     fb2:	82 2b       	or	r24, r18
     fb4:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
     fb8:	80 91 72 00 	lds	r24, 0x0072
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
     fc4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
     fc8:	88 32       	cpi	r24, 0x28	; 40
     fca:	91 05       	cpc	r25, r1
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <I2C_LCD_sendCommand+0x19a>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e8       	ldi	r26, 0x80	; 128
     fd4:	bf e3       	ldi	r27, 0x3F	; 63
     fd6:	8b 87       	std	Y+11, r24	; 0x0b
     fd8:	9c 87       	std	Y+12, r25	; 0x0c
     fda:	ad 87       	std	Y+13, r26	; 0x0d
     fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4a ef       	ldi	r20, 0xFA	; 250
     fec:	54 e4       	ldi	r21, 0x44	; 68
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	a9 87       	std	Y+9, r26	; 0x09
     ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1012:	88 23       	and	r24, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <I2C_LCD_sendCommand+0x1f6>
		__ticks = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	3f c0       	rjmp	.+126    	; 0x109e <I2C_LCD_sendCommand+0x274>
	else if (__tmp > 65535)
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	4f e7       	ldi	r20, 0x7F	; 127
    102e:	57 e4       	ldi	r21, 0x47	; 71
    1030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1034:	18 16       	cp	r1, r24
    1036:	4c f5       	brge	.+82     	; 0x108a <I2C_LCD_sendCommand+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1038:	6b 85       	ldd	r22, Y+11	; 0x0b
    103a:	7c 85       	ldd	r23, Y+12	; 0x0c
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <I2C_LCD_sendCommand+0x256>
    1062:	88 ec       	ldi	r24, 0xC8	; 200
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <I2C_LCD_sendCommand+0x244>
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	69 f7       	brne	.-38     	; 0x1062 <I2C_LCD_sendCommand+0x238>
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <I2C_LCD_sendCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108a:	6f 81       	ldd	r22, Y+7	; 0x07
    108c:	78 85       	ldd	r23, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9e 83       	std	Y+6, r25	; 0x06
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <I2C_LCD_sendCommand+0x280>
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
	I2C_EN_PULS();
    10b2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_EN_PULS>

	I2C_stop();
    10b6:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>
	TWCR=0;
    10ba:	e6 e5       	ldi	r30, 0x56	; 86
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	10 82       	st	Z, r1

}
    10c0:	6e 96       	adiw	r28, 0x1e	; 30
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <I2C_EN_PULS>:


void I2C_EN_PULS(){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2e 97       	sbiw	r28, 0x0e	; 14
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61

	COMMAND_var |=(1<<EN);
    10e6:	80 91 72 00 	lds	r24, 0x0072
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
    10f0:	80 91 72 00 	lds	r24, 0x0072
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    10fc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1100:	88 32       	cpi	r24, 0x28	; 40
    1102:	91 05       	cpc	r25, r1
    1104:	d9 f7       	brne	.-10     	; 0x10fc <I2C_EN_PULS+0x2a>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 ef       	ldi	r26, 0xF0	; 240
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <I2C_EN_PULS+0x86>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <I2C_EN_PULS+0x104>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <I2C_EN_PULS+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <I2C_EN_PULS+0xe6>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <I2C_EN_PULS+0xd4>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <I2C_EN_PULS+0xc8>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <I2C_EN_PULS+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <I2C_EN_PULS+0x110>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	COMMAND_var &=~(1<<EN);
    11ea:	80 91 72 00 	lds	r24, 0x0072
    11ee:	8b 7f       	andi	r24, 0xFB	; 251
    11f0:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
    11f4:	80 91 72 00 	lds	r24, 0x0072
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    1200:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1204:	88 32       	cpi	r24, 0x28	; 40
    1206:	91 05       	cpc	r25, r1
    1208:	d9 f7       	brne	.-10     	; 0x1200 <I2C_EN_PULS+0x12e>
}
    120a:	2e 96       	adiw	r28, 0x0e	; 14
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <I2C_LCD_sendCharcter>:

/////////////////////////////
void I2C_LCD_sendCharcter(char data){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	6e 97       	sbiw	r28, 0x1e	; 30
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char x=0;
    1232:	1d 8e       	std	Y+29, r1	; 0x1d
	I2C_start();
    1234:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
//	while (I2C_getStatus() != START_condition_DONE); // THERE IS BUG HERE IN PROUTES
	x=(SLA <<1)+0;
    1238:	80 e7       	ldi	r24, 0x70	; 112
    123a:	8d 8f       	std	Y+29, r24	; 0x1d
		I2C_writeByte(x);
    123c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
		while(I2C_getStatus() != SLA_W_DONE);
    1246:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    124a:	88 31       	cpi	r24, 0x18	; 24
    124c:	91 05       	cpc	r25, r1
    124e:	d9 f7       	brne	.-10     	; 0x1246 <I2C_LCD_sendCharcter+0x2a>
	COMMAND_var |=((1<<RS));
    1250:	80 91 72 00 	lds	r24, 0x0072
    1254:	81 60       	ori	r24, 0x01	; 1
    1256:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
    125a:	80 91 72 00 	lds	r24, 0x0072
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    1266:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    126a:	88 32       	cpi	r24, 0x28	; 40
    126c:	91 05       	cpc	r25, r1
    126e:	d9 f7       	brne	.-10     	; 0x1266 <I2C_LCD_sendCharcter+0x4a>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e8       	ldi	r26, 0x80	; 128
    1276:	bf e3       	ldi	r27, 0x3F	; 63
    1278:	89 8f       	std	Y+25, r24	; 0x19
    127a:	9a 8f       	std	Y+26, r25	; 0x1a
    127c:	ab 8f       	std	Y+27, r26	; 0x1b
    127e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1280:	69 8d       	ldd	r22, Y+25	; 0x19
    1282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4a ef       	ldi	r20, 0xFA	; 250
    128e:	54 e4       	ldi	r21, 0x44	; 68
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	8d 8b       	std	Y+21, r24	; 0x15
    129a:	9e 8b       	std	Y+22, r25	; 0x16
    129c:	af 8b       	std	Y+23, r26	; 0x17
    129e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a0:	6d 89       	ldd	r22, Y+21	; 0x15
    12a2:	7e 89       	ldd	r23, Y+22	; 0x16
    12a4:	8f 89       	ldd	r24, Y+23	; 0x17
    12a6:	98 8d       	ldd	r25, Y+24	; 0x18
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <I2C_LCD_sendCharcter+0xa6>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	8b 8b       	std	Y+19, r24	; 0x13
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <I2C_LCD_sendCharcter+0x124>
	else if (__tmp > 65535)
    12c2:	6d 89       	ldd	r22, Y+21	; 0x15
    12c4:	7e 89       	ldd	r23, Y+22	; 0x16
    12c6:	8f 89       	ldd	r24, Y+23	; 0x17
    12c8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	4c f5       	brge	.+82     	; 0x132c <I2C_LCD_sendCharcter+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	69 8d       	ldd	r22, Y+25	; 0x19
    12dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e2       	ldi	r20, 0x20	; 32
    12e8:	51 e4       	ldi	r21, 0x41	; 65
    12ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
    1300:	8b 8b       	std	Y+19, r24	; 0x13
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <I2C_LCD_sendCharcter+0x106>
    1304:	88 ec       	ldi	r24, 0xC8	; 200
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9a 8b       	std	Y+18, r25	; 0x12
    130a:	89 8b       	std	Y+17, r24	; 0x11
    130c:	89 89       	ldd	r24, Y+17	; 0x11
    130e:	9a 89       	ldd	r25, Y+18	; 0x12
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <I2C_LCD_sendCharcter+0xf4>
    1314:	9a 8b       	std	Y+18, r25	; 0x12
    1316:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	8b 89       	ldd	r24, Y+19	; 0x13
    131a:	9c 89       	ldd	r25, Y+20	; 0x14
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	69 f7       	brne	.-38     	; 0x1304 <I2C_LCD_sendCharcter+0xe8>
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <I2C_LCD_sendCharcter+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	6d 89       	ldd	r22, Y+21	; 0x15
    132e:	7e 89       	ldd	r23, Y+22	; 0x16
    1330:	8f 89       	ldd	r24, Y+23	; 0x17
    1332:	98 8d       	ldd	r25, Y+24	; 0x18
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9c 8b       	std	Y+20, r25	; 0x14
    133e:	8b 8b       	std	Y+19, r24	; 0x13
    1340:	8b 89       	ldd	r24, Y+19	; 0x13
    1342:	9c 89       	ldd	r25, Y+20	; 0x14
    1344:	98 8b       	std	Y+16, r25	; 0x10
    1346:	8f 87       	std	Y+15, r24	; 0x0f
    1348:	8f 85       	ldd	r24, Y+15	; 0x0f
    134a:	98 89       	ldd	r25, Y+16	; 0x10
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <I2C_LCD_sendCharcter+0x130>
    1350:	98 8b       	std	Y+16, r25	; 0x10
    1352:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
#ifdef EIGHT_BIT_MODE
	DATA_PORT = data;
#endif
#ifdef FOUR_BIT_MODE
	COMMAND_var = (COMMAND_var &0x0F) |(data &0xF0);
    1354:	80 91 72 00 	lds	r24, 0x0072
    1358:	98 2f       	mov	r25, r24
    135a:	9f 70       	andi	r25, 0x0F	; 15
    135c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    135e:	80 7f       	andi	r24, 0xF0	; 240
    1360:	89 2b       	or	r24, r25
    1362:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
    1366:	80 91 72 00 	lds	r24, 0x0072
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    1372:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1376:	88 32       	cpi	r24, 0x28	; 40
    1378:	91 05       	cpc	r25, r1
    137a:	d9 f7       	brne	.-10     	; 0x1372 <I2C_LCD_sendCharcter+0x156>

	I2C_EN_PULS();
    137c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_EN_PULS>
	COMMAND_var = (COMMAND_var &0x0F) |(data <<4);
    1380:	80 91 72 00 	lds	r24, 0x0072
    1384:	28 2f       	mov	r18, r24
    1386:	2f 70       	andi	r18, 0x0F	; 15
    1388:	8e 8d       	ldd	r24, Y+30	; 0x1e
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	82 95       	swap	r24
    1390:	92 95       	swap	r25
    1392:	90 7f       	andi	r25, 0xF0	; 240
    1394:	98 27       	eor	r25, r24
    1396:	80 7f       	andi	r24, 0xF0	; 240
    1398:	98 27       	eor	r25, r24
    139a:	82 2b       	or	r24, r18
    139c:	80 93 72 00 	sts	0x0072, r24
	I2C_writeByte(COMMAND_var);
    13a0:	80 91 72 00 	lds	r24, 0x0072
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    13ac:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    13b0:	88 32       	cpi	r24, 0x28	; 40
    13b2:	91 05       	cpc	r25, r1
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <I2C_LCD_sendCharcter+0x190>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e8       	ldi	r26, 0x80	; 128
    13bc:	bf e3       	ldi	r27, 0x3F	; 63
    13be:	8b 87       	std	Y+11, r24	; 0x0b
    13c0:	9c 87       	std	Y+12, r25	; 0x0c
    13c2:	ad 87       	std	Y+13, r26	; 0x0d
    13c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8f 83       	std	Y+7, r24	; 0x07
    13e0:	98 87       	std	Y+8, r25	; 0x08
    13e2:	a9 87       	std	Y+9, r26	; 0x09
    13e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e6:	6f 81       	ldd	r22, Y+7	; 0x07
    13e8:	78 85       	ldd	r23, Y+8	; 0x08
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <I2C_LCD_sendCharcter+0x1ec>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <I2C_LCD_sendCharcter+0x26a>
	else if (__tmp > 65535)
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <I2C_LCD_sendCharcter+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6b 85       	ldd	r22, Y+11	; 0x0b
    1422:	7c 85       	ldd	r23, Y+12	; 0x0c
    1424:	8d 85       	ldd	r24, Y+13	; 0x0d
    1426:	9e 85       	ldd	r25, Y+14	; 0x0e
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <I2C_LCD_sendCharcter+0x24c>
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <I2C_LCD_sendCharcter+0x23a>
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <I2C_LCD_sendCharcter+0x22e>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <I2C_LCD_sendCharcter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	6f 81       	ldd	r22, Y+7	; 0x07
    1474:	78 85       	ldd	r23, Y+8	; 0x08
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <I2C_LCD_sendCharcter+0x276>
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
	I2C_EN_PULS();
    149a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_EN_PULS>
	I2C_stop();
    149e:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>
	TWCR=0;
    14a2:	e6 e5       	ldi	r30, 0x56	; 86
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	10 82       	st	Z, r1
}
    14a8:	6e 96       	adiw	r28, 0x1e	; 30
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <I2C_LCD_sendString>:
void I2C_LCD_sendString(char *data){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <I2C_LCD_sendString+0x6>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	9b 83       	std	Y+3, r25	; 0x03
    14c8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char counter=0;
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	16 c0       	rjmp	.+44     	; 0x14fa <I2C_LCD_sendString+0x40>
	while(*data != 0){
		counter++;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	89 83       	std	Y+1, r24	; 0x01
		if(!(counter >=0 && counter <=16)){
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	81 31       	cpi	r24, 0x11	; 17
    14d8:	28 f0       	brcs	.+10     	; 0x14e4 <I2C_LCD_sendString+0x2a>
			counter=0;
    14da:	19 82       	std	Y+1, r1	; 0x01
			I2C_LCD_moveCURSER(1,0);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	0e 94 88 0a 	call	0x1510	; 0x1510 <I2C_LCD_moveCURSER>
		}
		I2C_LCD_sendCharcter(*data++);
    14e4:	ea 81       	ldd	r30, Y+2	; 0x02
    14e6:	fb 81       	ldd	r31, Y+3	; 0x03
    14e8:	20 81       	ld	r18, Z
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9b 83       	std	Y+3, r25	; 0x03
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	82 2f       	mov	r24, r18
    14f6:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_LCD_sendCharcter>
	I2C_stop();
	TWCR=0;
}
void I2C_LCD_sendString(char *data){
	unsigned char counter=0;
	while(*data != 0){
    14fa:	ea 81       	ldd	r30, Y+2	; 0x02
    14fc:	fb 81       	ldd	r31, Y+3	; 0x03
    14fe:	80 81       	ld	r24, Z
    1500:	88 23       	and	r24, r24
    1502:	29 f7       	brne	.-54     	; 0x14ce <I2C_LCD_sendString+0x14>

	}



}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <I2C_LCD_moveCURSER>:
void I2C_LCD_moveCURSER(unsigned char row,unsigned char col){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <I2C_LCD_moveCURSER+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <I2C_LCD_moveCURSER+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6a 83       	std	Y+2, r22	; 0x02
	switch(row){
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3c 83       	std	Y+4, r19	; 0x04
    1528:	2b 83       	std	Y+3, r18	; 0x03
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	31 f0       	breq	.+12     	; 0x153e <I2C_LCD_moveCURSER+0x2e>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	21 30       	cpi	r18, 0x01	; 1
    1538:	31 05       	cpc	r19, r1
    153a:	49 f0       	breq	.+18     	; 0x154e <I2C_LCD_moveCURSER+0x3e>
    153c:	0f c0       	rjmp	.+30     	; 0x155c <I2C_LCD_moveCURSER+0x4c>
		case 0:
			if(col >= 0 && col <=16)
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	81 31       	cpi	r24, 0x11	; 17
    1542:	60 f4       	brcc	.+24     	; 0x155c <I2C_LCD_moveCURSER+0x4c>
				I2C_LCD_sendCommand(0x80+col);
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 58       	subi	r24, 0x80	; 128
    1548:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
    154c:	07 c0       	rjmp	.+14     	; 0x155c <I2C_LCD_moveCURSER+0x4c>
			break;
		case 1:
			if(col >= 0 && col <=16)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	81 31       	cpi	r24, 0x11	; 17
    1552:	20 f4       	brcc	.+8      	; 0x155c <I2C_LCD_moveCURSER+0x4c>
				I2C_LCD_sendCommand(0xC0+col);
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 54       	subi	r24, 0x40	; 64
    1558:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
			break;
	}


}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <I2C_LCD_clearScreen>:
void I2C_LCD_clearScreen(){
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	I2C_LCD_sendCommand(LCD_CLEAR_COMMAND);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 15 07 	call	0xe2a	; 0xe2a <I2C_LCD_sendCommand>
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <I2C_LCD_intgerToString>:

void I2C_LCD_intgerToString(unsigned int num){
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	a2 97       	sbiw	r28, 0x22	; 34
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	9a a3       	std	Y+34, r25	; 0x22
    1594:	89 a3       	std	Y+33, r24	; 0x21
	int buff[16];
	itoa(num,buff,10);
    1596:	89 a1       	ldd	r24, Y+33	; 0x21
    1598:	9a a1       	ldd	r25, Y+34	; 0x22
    159a:	9e 01       	movw	r18, r28
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	b9 01       	movw	r22, r18
    15a2:	4a e0       	ldi	r20, 0x0A	; 10
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	0e 94 b5 12 	call	0x256a	; 0x256a <itoa>
	I2C_LCD_sendString(buff);
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <I2C_LCD_sendString>


}
    15b2:	a2 96       	adiw	r28, 0x22	; 34
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <TC74_WRITE_ON_REG>:


#include "TC74.h"


void TC74_WRITE_ON_REG(uint8_t reg_add,uint8_t data){
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <TC74_WRITE_ON_REG+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <TC74_WRITE_ON_REG+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char x=0,slave_address=0x4D;
    15d4:	1a 82       	std	Y+2, r1	; 0x02
    15d6:	8d e4       	ldi	r24, 0x4D	; 77
    15d8:	89 83       	std	Y+1, r24	; 0x01
	I2C_start();
    15da:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
	while (I2C_getStatus() != START_condition_DONE);
    15de:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	91 05       	cpc	r25, r1
    15e6:	d9 f7       	brne	.-10     	; 0x15de <TC74_WRITE_ON_REG+0x1a>
	x=(slave_address <<1)+0;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	88 0f       	add	r24, r24
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	I2C_writeByte(x);
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != SLA_W_DONE);
    15f8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    15fc:	88 31       	cpi	r24, 0x18	; 24
    15fe:	91 05       	cpc	r25, r1
    1600:	d9 f7       	brne	.-10     	; 0x15f8 <TC74_WRITE_ON_REG+0x34>
	I2C_writeByte(reg_add);
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    160c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1610:	88 32       	cpi	r24, 0x28	; 40
    1612:	91 05       	cpc	r25, r1
    1614:	d9 f7       	brne	.-10     	; 0x160c <TC74_WRITE_ON_REG+0x48>
	I2C_writeByte(data);
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    1620:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1624:	88 32       	cpi	r24, 0x28	; 40
    1626:	91 05       	cpc	r25, r1
    1628:	d9 f7       	brne	.-10     	; 0x1620 <TC74_WRITE_ON_REG+0x5c>

		I2C_stop();
    162a:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>
		TWCR=0;
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	10 82       	st	Z, r1


}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <TC74_Read_TEMP>:
void TC74_Read_TEMP(uint8_t *data){
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <TC74_Read_TEMP+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <TC74_Read_TEMP+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char x=0,slave_address=0x4D;
    1652:	1a 82       	std	Y+2, r1	; 0x02
    1654:	8d e4       	ldi	r24, 0x4D	; 77
    1656:	89 83       	std	Y+1, r24	; 0x01
	I2C_start();
    1658:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
//	while (!I2C_getStatus() != START_condition_DONE); // there is bug here in proteus
	x=(slave_address <<1)+0;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	88 0f       	add	r24, r24
    1660:	8a 83       	std	Y+2, r24	; 0x02
	I2C_writeByte(x);
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != SLA_W_DONE);
    166c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1670:	88 31       	cpi	r24, 0x18	; 24
    1672:	91 05       	cpc	r25, r1
    1674:	d9 f7       	brne	.-10     	; 0x166c <TC74_Read_TEMP+0x2a>
	I2C_writeByte(0x00);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    167e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1682:	88 32       	cpi	r24, 0x28	; 40
    1684:	91 05       	cpc	r25, r1
    1686:	d9 f7       	brne	.-10     	; 0x167e <TC74_Read_TEMP+0x3c>
	TWCR=0;
    1688:	e6 e5       	ldi	r30, 0x56	; 86
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1

	I2C_start();
    168e:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
	x=(slave_address <<1)+1;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 0f       	add	r24, r24
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	8a 83       	std	Y+2, r24	; 0x02
	I2C_writeByte(x);
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != 0x40);
    16a4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    16a8:	80 34       	cpi	r24, 0x40	; 64
    16aa:	91 05       	cpc	r25, r1
    16ac:	d9 f7       	brne	.-10     	; 0x16a4 <TC74_Read_TEMP+0x62>
	*data=I2C_readByteWithACK();
    16ae:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_readByteWithACK>
    16b2:	eb 81       	ldd	r30, Y+3	; 0x03
    16b4:	fc 81       	ldd	r31, Y+4	; 0x04
    16b6:	80 83       	st	Z, r24
	while(I2C_getStatus() != 0x58);
    16b8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    16bc:	88 35       	cpi	r24, 0x58	; 88
    16be:	91 05       	cpc	r25, r1
    16c0:	d9 f7       	brne	.-10     	; 0x16b8 <TC74_Read_TEMP+0x76>
	I2C_stop();
    16c2:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>


}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <I2C_init>:
 *      Author: Ahmed
 */
#include "i2c.h"
#include <util/delay.h>

void I2C_init(void){
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	TWSR =0x00; // select the TWI Prescaler Bits accourding to the data sheet
    16dc:	e1 e2       	ldi	r30, 0x21	; 33
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	10 82       	st	Z, r1
	TWBR = 0x02;
    16e2:	e0 e2       	ldi	r30, 0x20	; 32
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	80 83       	st	Z, r24

	TWAR =0x03; // if i will be a slave my address will be 0x02
    16ea:	e2 e2       	ldi	r30, 0x22	; 34
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	80 83       	st	Z, r24
	TWCR |=(1<<TWEN);
    16f2:	a6 e5       	ldi	r26, 0x56	; 86
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e6 e5       	ldi	r30, 0x56	; 86
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	84 60       	ori	r24, 0x04	; 4
    16fe:	8c 93       	st	X, r24
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <I2C_start>:
void I2C_start(void){
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	TWCR |=(1<<TWEN) |(1<<TWSTA) |(1<<TWINT);
    170e:	a6 e5       	ldi	r26, 0x56	; 86
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e6 e5       	ldi	r30, 0x56	; 86
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	84 6a       	ori	r24, 0xA4	; 164
    171a:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, and the status code in TWSR will be $08
    171c:	e6 e5       	ldi	r30, 0x56	; 86
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 23       	and	r24, r24
    1724:	dc f7       	brge	.-10     	; 0x171c <I2C_start+0x16>

}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <I2C_stop>:
void I2C_stop(void){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	TWCR |=(1<<TWEN) |(1<<TWSTO) |(1<<TWINT);
    1734:	a6 e5       	ldi	r26, 0x56	; 86
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e6 e5       	ldi	r30, 0x56	; 86
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	84 69       	ori	r24, 0x94	; 148
    1740:	8c 93       	st	X, r24
//	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, and the status code in TWSR will be $08

}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <I2C_writeByte>:
void I2C_writeByte(uint8_t data){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    1754:	e3 e2       	ldi	r30, 0x23	; 35
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	80 83       	st	Z, r24
	TWCR |=(1<<TWEN)  |(1<<TWINT);
    175c:	a6 e5       	ldi	r26, 0x56	; 86
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e6 e5       	ldi	r30, 0x56	; 86
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 68       	ori	r24, 0x84	; 132
    1768:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, Possible status codes in master mode are $18, $20, or $38
    176a:	e6 e5       	ldi	r30, 0x56	; 86
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 23       	and	r24, r24
    1772:	dc f7       	brge	.-10     	; 0x176a <I2C_writeByte+0x22>

}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <I2C_readByteWithACK>:
uint8_t I2C_readByteWithACK(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) ;
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	84 e8       	ldi	r24, 0x84	; 132
    178a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (!(TWCR &(1<<TWINT))) ;     /* Read Data */
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	dc f7       	brge	.-10     	; 0x178c <I2C_readByteWithACK+0x10>
	return TWDR;
    1796:	e3 e2       	ldi	r30, 0x23	; 35
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <I2C_getStatus>:
uint8_t I2C_getStatus(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62

	return (TWSR &0xF8);
    17aa:	e1 e2       	ldi	r30, 0x21	; 33
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	88 7f       	andi	r24, 0xF8	; 248
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <I2C_PACKET_TRANSSEMET>:


uint8_t I2C_PACKET_TRANSSEMET(uint8_t slave_address ,uint8_t data){
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <I2C_PACKET_TRANSSEMET+0x6>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char x=0;
    17c8:	19 82       	std	Y+1, r1	; 0x01
	I2C_start();
    17ca:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
	while (I2C_getStatus() != START_condition_DONE);
    17ce:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    17d2:	88 30       	cpi	r24, 0x08	; 8
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <I2C_PACKET_TRANSSEMET+0x16>
	x=(slave_address <<1)+0;
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 0f       	add	r24, r24
    17da:	89 83       	std	Y+1, r24	; 0x01
	I2C_writeByte(x);
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != SLA_W_DONE);
    17e2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    17e6:	88 31       	cpi	r24, 0x18	; 24
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <I2C_PACKET_TRANSSEMET+0x2a>
	I2C_writeByte(data);
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != Data_transmitted_DONE);
    17f0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    17f4:	88 32       	cpi	r24, 0x28	; 40
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <I2C_PACKET_TRANSSEMET+0x38>

		I2C_stop();
    17f8:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>
		TWCR=0;
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	10 82       	st	Z, r1
//	I2C_RESET();
	return Send_DONE;
    1802:	81 e0       	ldi	r24, 0x01	; 1
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <I2C_PACKET_Recive>:
uint8_t I2C_PACKET_Recive(uint8_t slave_address,uint8_t *data){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <I2C_PACKET_Recive+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	7b 83       	std	Y+3, r23	; 0x03
    1820:	6a 83       	std	Y+2, r22	; 0x02
	slave_address =I2C_readByteWithACK();
    1822:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_readByteWithACK>
    1826:	89 83       	std	Y+1, r24	; 0x01
	while(I2C_getStatus() != 0x60);
    1828:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    182c:	80 36       	cpi	r24, 0x60	; 96
    182e:	e1 f7       	brne	.-8      	; 0x1828 <I2C_PACKET_Recive+0x18>

	*data=I2C_readByteWithACK();
    1830:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_readByteWithACK>
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	80 83       	st	Z, r24
	while(I2C_getStatus() != 0x80);
    183a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    183e:	80 38       	cpi	r24, 0x80	; 128
    1840:	e1 f7       	brne	.-8      	; 0x183a <I2C_PACKET_Recive+0x2a>


	return Send_DONE;
    1842:	81 e0       	ldi	r24, 0x01	; 1
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <Master_Recive_Data>:


uint8_t Master_Recive_Data(uint8_t slave_address,uint8_t *data){
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <Master_Recive_Data+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <Master_Recive_Data+0x8>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	7c 83       	std	Y+4, r23	; 0x04
    1860:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char x=0;
    1862:	19 82       	std	Y+1, r1	; 0x01
	I2C_start();
    1864:	0e 94 83 0b 	call	0x1706	; 0x1706 <I2C_start>
	while (I2C_getStatus() != START_condition_DONE);
    1868:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	e1 f7       	brne	.-8      	; 0x1868 <Master_Recive_Data+0x18>
	x=(slave_address <<1)+1;
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	88 0f       	add	r24, r24
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	89 83       	std	Y+1, r24	; 0x01
	I2C_writeByte(x);
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_writeByte>
	while(I2C_getStatus() != 0x40);
    187e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1882:	80 34       	cpi	r24, 0x40	; 64
    1884:	e1 f7       	brne	.-8      	; 0x187e <Master_Recive_Data+0x2e>
	*data=I2C_readByteWithACK();
    1886:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_readByteWithACK>
    188a:	eb 81       	ldd	r30, Y+3	; 0x03
    188c:	fc 81       	ldd	r31, Y+4	; 0x04
    188e:	80 83       	st	Z, r24
	while(I2C_getStatus() != 0x58);
    1890:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    1894:	88 35       	cpi	r24, 0x58	; 88
    1896:	e1 f7       	brne	.-8      	; 0x1890 <Master_Recive_Data+0x40>
	I2C_stop();
    1898:	0e 94 96 0b 	call	0x172c	; 0x172c <I2C_stop>


	return Send_DONE;
    189c:	81 e0       	ldi	r24, 0x01	; 1




}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <Slave_Send_Data>:
uint8_t Slave_Send_Data(uint8_t slave_address,uint8_t data){
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	60 97       	sbiw	r28, 0x10	; 16
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	8f 87       	std	Y+15, r24	; 0x0f
    18c2:	68 8b       	std	Y+16, r22	; 0x10
//	TWCR |=(1<<TWEN)  |(1<<TWINT);
	//	while (!(TWCR &(1<<TWINT))) ;

	slave_address =I2C_readByteWithACK();
    18c4:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_readByteWithACK>
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
	while(I2C_getStatus() != 0xA8);
    18ca:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    18ce:	88 3a       	cpi	r24, 0xA8	; 168
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <Slave_Send_Data+0x1e>

	TWDR=data;
    18d2:	e3 e2       	ldi	r30, 0x23	; 35
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	88 89       	ldd	r24, Y+16	; 0x10
    18d8:	80 83       	st	Z, r24
	TWCR |=(1<<TWEN)  |(1<<TWINT);
    18da:	a6 e5       	ldi	r26, 0x56	; 86
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e6 e5       	ldi	r30, 0x56	; 86
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	84 68       	ori	r24, 0x84	; 132
    18e6:	8c 93       	st	X, r24
	while (!(TWCR &(1<<TWINT))) ; // wait until  TWINT Flag is set by hardware, Possible status codes in master mode are $18, $20, or $38
    18e8:	e6 e5       	ldi	r30, 0x56	; 86
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	88 23       	and	r24, r24
    18f0:	dc f7       	brge	.-10     	; 0x18e8 <Slave_Send_Data+0x3c>
	while(I2C_getStatus() != 0xB8);
    18f2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <I2C_getStatus>
    18f6:	88 3b       	cpi	r24, 0xB8	; 184
    18f8:	e1 f7       	brne	.-8      	; 0x18f2 <Slave_Send_Data+0x46>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 ef       	ldi	r26, 0xF0	; 240
    1900:	b1 e4       	ldi	r27, 0x41	; 65
    1902:	8b 87       	std	Y+11, r24	; 0x0b
    1904:	9c 87       	std	Y+12, r25	; 0x0c
    1906:	ad 87       	std	Y+13, r26	; 0x0d
    1908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	6b 85       	ldd	r22, Y+11	; 0x0b
    190c:	7c 85       	ldd	r23, Y+12	; 0x0c
    190e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1910:	9e 85       	ldd	r25, Y+14	; 0x0e
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4a ef       	ldi	r20, 0xFA	; 250
    1918:	54 e4       	ldi	r21, 0x44	; 68
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8f 83       	std	Y+7, r24	; 0x07
    1924:	98 87       	std	Y+8, r25	; 0x08
    1926:	a9 87       	std	Y+9, r26	; 0x09
    1928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192a:	6f 81       	ldd	r22, Y+7	; 0x07
    192c:	78 85       	ldd	r23, Y+8	; 0x08
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <Slave_Send_Data+0xa0>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <Slave_Send_Data+0x11e>
	else if (__tmp > 65535)
    194c:	6f 81       	ldd	r22, Y+7	; 0x07
    194e:	78 85       	ldd	r23, Y+8	; 0x08
    1950:	89 85       	ldd	r24, Y+9	; 0x09
    1952:	9a 85       	ldd	r25, Y+10	; 0x0a
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	4c f5       	brge	.+82     	; 0x19b6 <Slave_Send_Data+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	6b 85       	ldd	r22, Y+11	; 0x0b
    1966:	7c 85       	ldd	r23, Y+12	; 0x0c
    1968:	8d 85       	ldd	r24, Y+13	; 0x0d
    196a:	9e 85       	ldd	r25, Y+14	; 0x0e
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <Slave_Send_Data+0x100>
    198e:	88 ec       	ldi	r24, 0xC8	; 200
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	8b 83       	std	Y+3, r24	; 0x03
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <Slave_Send_Data+0xee>
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <Slave_Send_Data+0xe2>
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <Slave_Send_Data+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <Slave_Send_Data+0x12a>
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
//	I2C_RESET();
_delay_ms(30);
//	I2C_stop();

	return Send_DONE;
    19de:	81 e0       	ldi	r24, 0x01	; 1
}
    19e0:	60 96       	adiw	r28, 0x10	; 16
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <EN_PULS>:
 *  Created on: Jul 23, 2023
 *      Author: Ahmed
 */
#include "lcd.h"

void EN_PULS(){
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	2e 97       	sbiw	r28, 0x0e	; 14
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61

	CTRL_PORT |=(1<<EN);
    1a06:	a8 e3       	ldi	r26, 0x38	; 56
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e8 e3       	ldi	r30, 0x38	; 56
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a0 ef       	ldi	r26, 0xF0	; 240
    1a1a:	b1 e4       	ldi	r27, 0x41	; 65
    1a1c:	8b 87       	std	Y+11, r24	; 0x0b
    1a1e:	9c 87       	std	Y+12, r25	; 0x0c
    1a20:	ad 87       	std	Y+13, r26	; 0x0d
    1a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a ef       	ldi	r20, 0xFA	; 250
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8f 83       	std	Y+7, r24	; 0x07
    1a3e:	98 87       	std	Y+8, r25	; 0x08
    1a40:	a9 87       	std	Y+9, r26	; 0x09
    1a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <EN_PULS+0x74>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	3f c0       	rjmp	.+126    	; 0x1ae4 <EN_PULS+0xf2>
	else if (__tmp > 65535)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	4c f5       	brge	.+82     	; 0x1ad0 <EN_PULS+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <EN_PULS+0xd4>
    1aa8:	88 ec       	ldi	r24, 0xC8	; 200
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <EN_PULS+0xc2>
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <EN_PULS+0xb6>
    1ace:	14 c0       	rjmp	.+40     	; 0x1af8 <EN_PULS+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <EN_PULS+0xfe>
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	CTRL_PORT &=~(1<<EN);
    1af8:	a8 e3       	ldi	r26, 0x38	; 56
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	87 7f       	andi	r24, 0xF7	; 247
    1b04:	8c 93       	st	X, r24
}
    1b06:	2e 96       	adiw	r28, 0x0e	; 14
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <LCD_init>:

void LCD_init(){
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	aa 97       	sbiw	r28, 0x2a	; 42
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
	CTRL_DIR |=(1<<RS) |(1<<RW) | (1<<EN);
    1b2c:	a7 e3       	ldi	r26, 0x37	; 55
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e7 e3       	ldi	r30, 0x37	; 55
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8b 60       	ori	r24, 0x0B	; 11
    1b38:	8c 93       	st	X, r24
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b40:	b1 e4       	ldi	r27, 0x41	; 65
    1b42:	8f a3       	std	Y+39, r24	; 0x27
    1b44:	98 a7       	std	Y+40, r25	; 0x28
    1b46:	a9 a7       	std	Y+41, r26	; 0x29
    1b48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8b a3       	std	Y+35, r24	; 0x23
    1b64:	9c a3       	std	Y+36, r25	; 0x24
    1b66:	ad a3       	std	Y+37, r26	; 0x25
    1b68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b70:	9e a1       	ldd	r25, Y+38	; 0x26
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <LCD_init+0x74>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <LCD_init+0xf2>
	else if (__tmp > 65535)
    1b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	9e a1       	ldd	r25, Y+38	; 0x26
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <LCD_init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    1baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9a a3       	std	Y+34, r25	; 0x22
    1bca:	89 a3       	std	Y+33, r24	; 0x21
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <LCD_init+0xd4>
    1bce:	88 ec       	ldi	r24, 0xC8	; 200
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	98 a3       	std	Y+32, r25	; 0x20
    1bd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_init+0xc2>
    1bde:	98 a3       	std	Y+32, r25	; 0x20
    1be0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	89 a1       	ldd	r24, Y+33	; 0x21
    1bee:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <LCD_init+0xb6>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <LCD_init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c10:	8d 8f       	std	Y+29, r24	; 0x1d
    1c12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_init+0xfe>
    1c1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_sendCommand(LCD_GO_TO_HOME);
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a0 e8       	ldi	r26, 0x80	; 128
    1c2a:	bf e3       	ldi	r27, 0x3F	; 63
    1c2c:	89 8f       	std	Y+25, r24	; 0x19
    1c2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c30:	ab 8f       	std	Y+27, r26	; 0x1b
    1c32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	69 8d       	ldd	r22, Y+25	; 0x19
    1c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a ef       	ldi	r20, 0xFA	; 250
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8d 8b       	std	Y+21, r24	; 0x15
    1c4e:	9e 8b       	std	Y+22, r25	; 0x16
    1c50:	af 8b       	std	Y+23, r26	; 0x17
    1c52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c54:	6d 89       	ldd	r22, Y+21	; 0x15
    1c56:	7e 89       	ldd	r23, Y+22	; 0x16
    1c58:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <LCD_init+0x15e>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <LCD_init+0x1dc>
	else if (__tmp > 65535)
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <LCD_init+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9c 8b       	std	Y+20, r25	; 0x14
    1cb4:	8b 8b       	std	Y+19, r24	; 0x13
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <LCD_init+0x1be>
    1cb8:	88 ec       	ldi	r24, 0xC8	; 200
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9a 8b       	std	Y+18, r25	; 0x12
    1cbe:	89 8b       	std	Y+17, r24	; 0x11
    1cc0:	89 89       	ldd	r24, Y+17	; 0x11
    1cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_init+0x1ac>
    1cc8:	9a 8b       	std	Y+18, r25	; 0x12
    1cca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <LCD_init+0x1a0>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <LCD_init+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9c 8b       	std	Y+20, r25	; 0x14
    1cf2:	8b 8b       	std	Y+19, r24	; 0x13
    1cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf8:	98 8b       	std	Y+16, r25	; 0x10
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	98 89       	ldd	r25, Y+16	; 0x10
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_init+0x1e8>
    1d04:	98 8b       	std	Y+16, r25	; 0x10
    1d06:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
	_delay_ms(1);
#endif
#ifdef FOUR_BIT_MODE
	DATA_DIR |=0xF0;
    1d08:	aa e3       	ldi	r26, 0x3A	; 58
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ea e3       	ldi	r30, 0x3A	; 58
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	80 6f       	ori	r24, 0xF0	; 240
    1d14:	8c 93       	st	X, r24

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1d16:	88 e2       	ldi	r24, 0x28	; 40
    1d18:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	8b 87       	std	Y+11, r24	; 0x0b
    1d26:	9c 87       	std	Y+12, r25	; 0x0c
    1d28:	ad 87       	std	Y+13, r26	; 0x0d
    1d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8f 83       	std	Y+7, r24	; 0x07
    1d46:	98 87       	std	Y+8, r25	; 0x08
    1d48:	a9 87       	std	Y+9, r26	; 0x09
    1d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <LCD_init+0x256>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <LCD_init+0x2d4>
	else if (__tmp > 65535)
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d82:	18 16       	cp	r1, r24
    1d84:	4c f5       	brge	.+82     	; 0x1dd8 <LCD_init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_init+0x2b6>
    1db0:	88 ec       	ldi	r24, 0xC8	; 200
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	8b 83       	std	Y+3, r24	; 0x03
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_init+0x2a4>
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <LCD_init+0x298>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <LCD_init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_init+0x2e0>
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
	LCD_sendCommand(LCD_CURSOR_ON);
    1e00:	8e e0       	ldi	r24, 0x0E	; 14
    1e02:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>


}
    1e06:	aa 96       	adiw	r28, 0x2a	; 42
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <LCD_sendCommand>:
void LCD_sendCommand(unsigned char command){
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	6d 97       	sbiw	r28, 0x1d	; 29
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	8d 8f       	std	Y+29, r24	; 0x1d
	CTRL_PORT &=~((1<<RS)|(1<<RW));
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8c 7f       	andi	r24, 0xFC	; 252
    1e3a:	8c 93       	st	X, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e8       	ldi	r26, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	89 8f       	std	Y+25, r24	; 0x19
    1e46:	9a 8f       	std	Y+26, r25	; 0x1a
    1e48:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8d 8b       	std	Y+21, r24	; 0x15
    1e66:	9e 8b       	std	Y+22, r25	; 0x16
    1e68:	af 8b       	std	Y+23, r26	; 0x17
    1e6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e70:	8f 89       	ldd	r24, Y+23	; 0x17
    1e72:	98 8d       	ldd	r25, Y+24	; 0x18
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_sendCommand+0x76>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9c 8b       	std	Y+20, r25	; 0x14
    1e8a:	8b 8b       	std	Y+19, r24	; 0x13
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_sendCommand+0xf4>
	else if (__tmp > 65535)
    1e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e90:	7e 89       	ldd	r23, Y+22	; 0x16
    1e92:	8f 89       	ldd	r24, Y+23	; 0x17
    1e94:	98 8d       	ldd	r25, Y+24	; 0x18
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_sendCommand+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9c 8b       	std	Y+20, r25	; 0x14
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_sendCommand+0xd6>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9a 8b       	std	Y+18, r25	; 0x12
    1ed6:	89 8b       	std	Y+17, r24	; 0x11
    1ed8:	89 89       	ldd	r24, Y+17	; 0x11
    1eda:	9a 89       	ldd	r25, Y+18	; 0x12
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_sendCommand+0xc4>
    1ee0:	9a 8b       	std	Y+18, r25	; 0x12
    1ee2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_sendCommand+0xb8>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <LCD_sendCommand+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9c 8b       	std	Y+20, r25	; 0x14
    1f0a:	8b 8b       	std	Y+19, r24	; 0x13
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	98 8b       	std	Y+16, r25	; 0x10
    1f12:	8f 87       	std	Y+15, r24	; 0x0f
    1f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f16:	98 89       	ldd	r25, Y+16	; 0x10
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_sendCommand+0x100>
    1f1c:	98 8b       	std	Y+16, r25	; 0x10
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
#ifdef EIGHT_BIT_MODE
	DATA_PORT = command;
#endif
#ifdef FOUR_BIT_MODE
	DATA_PORT = (DATA_PORT &0x0F) |(command &0xF0);
    1f20:	ab e3       	ldi	r26, 0x3B	; 59
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	eb e3       	ldi	r30, 0x3B	; 59
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	98 2f       	mov	r25, r24
    1f2c:	9f 70       	andi	r25, 0x0F	; 15
    1f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f30:	80 7f       	andi	r24, 0xF0	; 240
    1f32:	89 2b       	or	r24, r25
    1f34:	8c 93       	st	X, r24
	EN_PULS();
    1f36:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <EN_PULS>
	DATA_PORT = (DATA_PORT &0x0F) |(command <<4);
    1f3a:	ab e3       	ldi	r26, 0x3B	; 59
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	eb e3       	ldi	r30, 0x3B	; 59
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	28 2f       	mov	r18, r24
    1f46:	2f 70       	andi	r18, 0x0F	; 15
    1f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	82 95       	swap	r24
    1f50:	92 95       	swap	r25
    1f52:	90 7f       	andi	r25, 0xF0	; 240
    1f54:	98 27       	eor	r25, r24
    1f56:	80 7f       	andi	r24, 0xF0	; 240
    1f58:	98 27       	eor	r25, r24
    1f5a:	82 2b       	or	r24, r18
    1f5c:	8c 93       	st	X, r24
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a0 e8       	ldi	r26, 0x80	; 128
    1f64:	bf e3       	ldi	r27, 0x3F	; 63
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	ad 87       	std	Y+13, r26	; 0x0d
    1f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a ef       	ldi	r20, 0xFA	; 250
    1f7c:	54 e4       	ldi	r21, 0x44	; 68
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f 83       	std	Y+7, r24	; 0x07
    1f88:	98 87       	std	Y+8, r25	; 0x08
    1f8a:	a9 87       	std	Y+9, r26	; 0x09
    1f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <LCD_sendCommand+0x198>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <LCD_sendCommand+0x216>
	else if (__tmp > 65535)
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <LCD_sendCommand+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <LCD_sendCommand+0x1f8>
    1ff2:	88 ec       	ldi	r24, 0xC8	; 200
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_sendCommand+0x1e6>
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <LCD_sendCommand+0x1da>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <LCD_sendCommand+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_sendCommand+0x222>
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
	EN_PULS();
    2042:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <EN_PULS>

}
    2046:	6d 96       	adiw	r28, 0x1d	; 29
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <LCD_sendCharcter>:

void LCD_sendCharcter(char data){
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	6d 97       	sbiw	r28, 0x1d	; 29
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	8d 8f       	std	Y+29, r24	; 0x1d
	CTRL_PORT |=((1<<RS));
    206e:	a8 e3       	ldi	r26, 0x38	; 56
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e8 e3       	ldi	r30, 0x38	; 56
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	8c 93       	st	X, r24
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	89 8f       	std	Y+25, r24	; 0x19
    2086:	9a 8f       	std	Y+26, r25	; 0x1a
    2088:	ab 8f       	std	Y+27, r26	; 0x1b
    208a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	69 8d       	ldd	r22, Y+25	; 0x19
    208e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8d 8b       	std	Y+21, r24	; 0x15
    20a6:	9e 8b       	std	Y+22, r25	; 0x16
    20a8:	af 8b       	std	Y+23, r26	; 0x17
    20aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_sendCharcter+0x76>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9c 8b       	std	Y+20, r25	; 0x14
    20ca:	8b 8b       	std	Y+19, r24	; 0x13
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_sendCharcter+0xf4>
	else if (__tmp > 65535)
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_sendCharcter+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	69 8d       	ldd	r22, Y+25	; 0x19
    20e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9c 8b       	std	Y+20, r25	; 0x14
    210c:	8b 8b       	std	Y+19, r24	; 0x13
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_sendCharcter+0xd6>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9a 8b       	std	Y+18, r25	; 0x12
    2116:	89 8b       	std	Y+17, r24	; 0x11
    2118:	89 89       	ldd	r24, Y+17	; 0x11
    211a:	9a 89       	ldd	r25, Y+18	; 0x12
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCharcter+0xc4>
    2120:	9a 8b       	std	Y+18, r25	; 0x12
    2122:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8b 89       	ldd	r24, Y+19	; 0x13
    2126:	9c 89       	ldd	r25, Y+20	; 0x14
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8b 89       	ldd	r24, Y+19	; 0x13
    2130:	9c 89       	ldd	r25, Y+20	; 0x14
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_sendCharcter+0xb8>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_sendCharcter+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6d 89       	ldd	r22, Y+21	; 0x15
    213a:	7e 89       	ldd	r23, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
    214c:	8b 89       	ldd	r24, Y+19	; 0x13
    214e:	9c 89       	ldd	r25, Y+20	; 0x14
    2150:	98 8b       	std	Y+16, r25	; 0x10
    2152:	8f 87       	std	Y+15, r24	; 0x0f
    2154:	8f 85       	ldd	r24, Y+15	; 0x0f
    2156:	98 89       	ldd	r25, Y+16	; 0x10
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_sendCharcter+0x100>
    215c:	98 8b       	std	Y+16, r25	; 0x10
    215e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
#ifdef EIGHT_BIT_MODE
	DATA_PORT = data;
#endif
#ifdef FOUR_BIT_MODE
	DATA_PORT = (DATA_PORT &0x0F) |(data &0xF0);
    2160:	ab e3       	ldi	r26, 0x3B	; 59
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	eb e3       	ldi	r30, 0x3B	; 59
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	98 2f       	mov	r25, r24
    216c:	9f 70       	andi	r25, 0x0F	; 15
    216e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2170:	80 7f       	andi	r24, 0xF0	; 240
    2172:	89 2b       	or	r24, r25
    2174:	8c 93       	st	X, r24
	EN_PULS();
    2176:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <EN_PULS>
	DATA_PORT = (DATA_PORT &0x0F) |(data <<4);
    217a:	ab e3       	ldi	r26, 0x3B	; 59
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	eb e3       	ldi	r30, 0x3B	; 59
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	2f 70       	andi	r18, 0x0F	; 15
    2188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	82 95       	swap	r24
    2190:	92 95       	swap	r25
    2192:	90 7f       	andi	r25, 0xF0	; 240
    2194:	98 27       	eor	r25, r24
    2196:	80 7f       	andi	r24, 0xF0	; 240
    2198:	98 27       	eor	r25, r24
    219a:	82 2b       	or	r24, r18
    219c:	8c 93       	st	X, r24
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e8       	ldi	r26, 0x80	; 128
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
    21a8:	9c 87       	std	Y+12, r25	; 0x0c
    21aa:	ad 87       	std	Y+13, r26	; 0x0d
    21ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a ef       	ldi	r20, 0xFA	; 250
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	a9 87       	std	Y+9, r26	; 0x09
    21cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_sendCharcter+0x198>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_sendCharcter+0x216>
	else if (__tmp > 65535)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_sendCharcter+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_sendCharcter+0x1f8>
    2232:	88 ec       	ldi	r24, 0xC8	; 200
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_sendCharcter+0x1e6>
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_sendCharcter+0x1da>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_sendCharcter+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_sendCharcter+0x222>
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(1);
	EN_PULS();
    2282:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <EN_PULS>

}
    2286:	6d 96       	adiw	r28, 0x1d	; 29
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <LCD_sendString>:

void LCD_sendString(char *data){
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <LCD_sendString+0x6>
    229e:	0f 92       	push	r0
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	9b 83       	std	Y+3, r25	; 0x03
    22a6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char counter=0;
    22a8:	19 82       	std	Y+1, r1	; 0x01
    22aa:	16 c0       	rjmp	.+44     	; 0x22d8 <LCD_sendString+0x40>
	while(*data != 0){
		counter++;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	89 83       	std	Y+1, r24	; 0x01
		if(!(counter >=0 && counter <=16)){
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	81 31       	cpi	r24, 0x11	; 17
    22b6:	28 f0       	brcs	.+10     	; 0x22c2 <LCD_sendString+0x2a>
			counter=0;
    22b8:	19 82       	std	Y+1, r1	; 0x01
			LCD_moveCURSER(1,0);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	0e 94 77 11 	call	0x22ee	; 0x22ee <LCD_moveCURSER>
		}
		LCD_sendCharcter(*data++);
    22c2:	ea 81       	ldd	r30, Y+2	; 0x02
    22c4:	fb 81       	ldd	r31, Y+3	; 0x03
    22c6:	20 81       	ld	r18, Z
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	9b 83       	std	Y+3, r25	; 0x03
    22d0:	8a 83       	std	Y+2, r24	; 0x02
    22d2:	82 2f       	mov	r24, r18
    22d4:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_sendCharcter>

}

void LCD_sendString(char *data){
	unsigned char counter=0;
	while(*data != 0){
    22d8:	ea 81       	ldd	r30, Y+2	; 0x02
    22da:	fb 81       	ldd	r31, Y+3	; 0x03
    22dc:	80 81       	ld	r24, Z
    22de:	88 23       	and	r24, r24
    22e0:	29 f7       	brne	.-54     	; 0x22ac <LCD_sendString+0x14>

	}



}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <LCD_moveCURSER>:
void LCD_moveCURSER(unsigned char row,unsigned char col){
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <LCD_moveCURSER+0x6>
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <LCD_moveCURSER+0x8>
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(row){
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	3c 83       	std	Y+4, r19	; 0x04
    2306:	2b 83       	std	Y+3, r18	; 0x03
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	31 f0       	breq	.+12     	; 0x231c <LCD_moveCURSER+0x2e>
    2310:	2b 81       	ldd	r18, Y+3	; 0x03
    2312:	3c 81       	ldd	r19, Y+4	; 0x04
    2314:	21 30       	cpi	r18, 0x01	; 1
    2316:	31 05       	cpc	r19, r1
    2318:	49 f0       	breq	.+18     	; 0x232c <LCD_moveCURSER+0x3e>
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_moveCURSER+0x4c>
		case 0:
			if(col >= 0 && col <=16)
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	81 31       	cpi	r24, 0x11	; 17
    2320:	60 f4       	brcc	.+24     	; 0x233a <LCD_moveCURSER+0x4c>
				LCD_sendCommand(0x80+col);
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	80 58       	subi	r24, 0x80	; 128
    2326:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>
    232a:	07 c0       	rjmp	.+14     	; 0x233a <LCD_moveCURSER+0x4c>
			break;
		case 1:
			if(col >= 0 && col <=16)
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	81 31       	cpi	r24, 0x11	; 17
    2330:	20 f4       	brcc	.+8      	; 0x233a <LCD_moveCURSER+0x4c>
				LCD_sendCommand(0xC0+col);
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	80 54       	subi	r24, 0x40	; 64
    2336:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>
			break;
	}


}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <LCD_clearScreen>:
void LCD_clearScreen(){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_sendCommand>
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_intgerToString>:

void LCD_intgerToString(unsigned int num){
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	a2 97       	sbiw	r28, 0x22	; 34
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	9a a3       	std	Y+34, r25	; 0x22
    2372:	89 a3       	std	Y+33, r24	; 0x21
	int buff[16];
	itoa(num,buff,10);
    2374:	89 a1       	ldd	r24, Y+33	; 0x21
    2376:	9a a1       	ldd	r25, Y+34	; 0x22
    2378:	9e 01       	movw	r18, r28
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	b9 01       	movw	r22, r18
    2380:	4a e0       	ldi	r20, 0x0A	; 10
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 b5 12 	call	0x256a	; 0x256a <itoa>
	LCD_sendString(buff);
    2388:	ce 01       	movw	r24, r28
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_sendString>


}
    2390:	a2 96       	adiw	r28, 0x22	; 34
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <main>:

#include "TC74.h"
#include "LCD_I2C.h"
#include <util/delay.h>
#define F_CPU 8000000UL
void main(void){
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	60 97       	sbiw	r28, 0x10	; 16
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
	unsigned char i=0,LED=0x0F;
    23b6:	18 8a       	std	Y+16, r1	; 0x10
    23b8:	8f e0       	ldi	r24, 0x0F	; 15
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
	I2C_init();
    23bc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <I2C_init>
	I2C_LCD_init();
    23c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_LCD_init>
	I2C_LCD_sendString("TC74:   C");
    23c4:	80 e6       	ldi	r24, 0x60	; 96
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <I2C_LCD_sendString>
	TC74_WRITE_ON_REG(0x01,0x00);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <TC74_WRITE_ON_REG>
//	I2C_PACKET_TRANSSEMET(0x4D,0x00,0x00);
	while(1){
//		LED^=0xFF;
//		I2C_PACKET_TRANSSEMET(0b0111000,LED);
//		I2C_PACKET_TRANSSEMET(0x4D,0x00,0x00);
		TC74_Read_TEMP(&i);
    23d4:	ce 01       	movw	r24, r28
    23d6:	40 96       	adiw	r24, 0x10	; 16
    23d8:	0e 94 21 0b 	call	0x1642	; 0x1642 <TC74_Read_TEMP>
		if(i<10){
    23dc:	88 89       	ldd	r24, Y+16	; 0x10
    23de:	8a 30       	cpi	r24, 0x0A	; 10
    23e0:	38 f4       	brcc	.+14     	; 0x23f0 <main+0x4e>
			I2C_LCD_moveCURSER(0, 6);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	66 e0       	ldi	r22, 0x06	; 6
    23e6:	0e 94 88 0a 	call	0x1510	; 0x1510 <I2C_LCD_moveCURSER>
			I2C_LCD_sendCharcter(' ');
    23ea:	80 e2       	ldi	r24, 0x20	; 32
    23ec:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_LCD_sendCharcter>
		}
		if(i<100){
    23f0:	88 89       	ldd	r24, Y+16	; 0x10
    23f2:	84 36       	cpi	r24, 0x64	; 100
    23f4:	38 f4       	brcc	.+14     	; 0x2404 <main+0x62>
			I2C_LCD_moveCURSER(0, 7);
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	67 e0       	ldi	r22, 0x07	; 7
    23fa:	0e 94 88 0a 	call	0x1510	; 0x1510 <I2C_LCD_moveCURSER>
			I2C_LCD_sendCharcter(' ');
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	0e 94 0e 09 	call	0x121c	; 0x121c <I2C_LCD_sendCharcter>

		}
		I2C_LCD_moveCURSER(0, 5);
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	65 e0       	ldi	r22, 0x05	; 5
    2408:	0e 94 88 0a 	call	0x1510	; 0x1510 <I2C_LCD_moveCURSER>
		I2C_LCD_intgerToString(i);
    240c:	88 89       	ldd	r24, Y+16	; 0x10
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 bf 0a 	call	0x157e	; 0x157e <I2C_LCD_intgerToString>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	aa e7       	ldi	r26, 0x7A	; 122
    241c:	b4 e4       	ldi	r27, 0x44	; 68
    241e:	8b 87       	std	Y+11, r24	; 0x0b
    2420:	9c 87       	std	Y+12, r25	; 0x0c
    2422:	ad 87       	std	Y+13, r26	; 0x0d
    2424:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8f 83       	std	Y+7, r24	; 0x07
    2440:	98 87       	std	Y+8, r25	; 0x08
    2442:	a9 87       	std	Y+9, r26	; 0x09
    2444:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <main+0xc6>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <main+0x144>
	else if (__tmp > 65535)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6b 85       	ldd	r22, Y+11	; 0x0b
    2482:	7c 85       	ldd	r23, Y+12	; 0x0c
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	9e 85       	ldd	r25, Y+14	; 0x0e
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <main+0x126>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <main+0x114>
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <main+0x108>
    24d0:	81 cf       	rjmp	.-254    	; 0x23d4 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x150>
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	6c cf       	rjmp	.-296    	; 0x23d4 <main+0x32>

000024fc <__prologue_saves__>:
    24fc:	2f 92       	push	r2
    24fe:	3f 92       	push	r3
    2500:	4f 92       	push	r4
    2502:	5f 92       	push	r5
    2504:	6f 92       	push	r6
    2506:	7f 92       	push	r7
    2508:	8f 92       	push	r8
    250a:	9f 92       	push	r9
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	cf 92       	push	r12
    2512:	df 92       	push	r13
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	ca 1b       	sub	r28, r26
    2526:	db 0b       	sbc	r29, r27
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	09 94       	ijmp

00002534 <__epilogue_restores__>:
    2534:	2a 88       	ldd	r2, Y+18	; 0x12
    2536:	39 88       	ldd	r3, Y+17	; 0x11
    2538:	48 88       	ldd	r4, Y+16	; 0x10
    253a:	5f 84       	ldd	r5, Y+15	; 0x0f
    253c:	6e 84       	ldd	r6, Y+14	; 0x0e
    253e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2540:	8c 84       	ldd	r8, Y+12	; 0x0c
    2542:	9b 84       	ldd	r9, Y+11	; 0x0b
    2544:	aa 84       	ldd	r10, Y+10	; 0x0a
    2546:	b9 84       	ldd	r11, Y+9	; 0x09
    2548:	c8 84       	ldd	r12, Y+8	; 0x08
    254a:	df 80       	ldd	r13, Y+7	; 0x07
    254c:	ee 80       	ldd	r14, Y+6	; 0x06
    254e:	fd 80       	ldd	r15, Y+5	; 0x05
    2550:	0c 81       	ldd	r16, Y+4	; 0x04
    2552:	1b 81       	ldd	r17, Y+3	; 0x03
    2554:	aa 81       	ldd	r26, Y+2	; 0x02
    2556:	b9 81       	ldd	r27, Y+1	; 0x01
    2558:	ce 0f       	add	r28, r30
    255a:	d1 1d       	adc	r29, r1
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	ed 01       	movw	r28, r26
    2568:	08 95       	ret

0000256a <itoa>:
    256a:	fb 01       	movw	r30, r22
    256c:	9f 01       	movw	r18, r30
    256e:	e8 94       	clt
    2570:	42 30       	cpi	r20, 0x02	; 2
    2572:	c4 f0       	brlt	.+48     	; 0x25a4 <itoa+0x3a>
    2574:	45 32       	cpi	r20, 0x25	; 37
    2576:	b4 f4       	brge	.+44     	; 0x25a4 <itoa+0x3a>
    2578:	4a 30       	cpi	r20, 0x0A	; 10
    257a:	29 f4       	brne	.+10     	; 0x2586 <itoa+0x1c>
    257c:	97 fb       	bst	r25, 7
    257e:	1e f4       	brtc	.+6      	; 0x2586 <itoa+0x1c>
    2580:	90 95       	com	r25
    2582:	81 95       	neg	r24
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	64 2f       	mov	r22, r20
    2588:	77 27       	eor	r23, r23
    258a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__udivmodhi4>
    258e:	80 5d       	subi	r24, 0xD0	; 208
    2590:	8a 33       	cpi	r24, 0x3A	; 58
    2592:	0c f0       	brlt	.+2      	; 0x2596 <itoa+0x2c>
    2594:	89 5d       	subi	r24, 0xD9	; 217
    2596:	81 93       	st	Z+, r24
    2598:	cb 01       	movw	r24, r22
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	a1 f7       	brne	.-24     	; 0x2586 <itoa+0x1c>
    259e:	16 f4       	brtc	.+4      	; 0x25a4 <itoa+0x3a>
    25a0:	5d e2       	ldi	r21, 0x2D	; 45
    25a2:	51 93       	st	Z+, r21
    25a4:	10 82       	st	Z, r1
    25a6:	c9 01       	movw	r24, r18
    25a8:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <strrev>

000025ac <strrev>:
    25ac:	dc 01       	movw	r26, r24
    25ae:	fc 01       	movw	r30, r24
    25b0:	67 2f       	mov	r22, r23
    25b2:	71 91       	ld	r23, Z+
    25b4:	77 23       	and	r23, r23
    25b6:	e1 f7       	brne	.-8      	; 0x25b0 <strrev+0x4>
    25b8:	32 97       	sbiw	r30, 0x02	; 2
    25ba:	04 c0       	rjmp	.+8      	; 0x25c4 <strrev+0x18>
    25bc:	7c 91       	ld	r23, X
    25be:	6d 93       	st	X+, r22
    25c0:	70 83       	st	Z, r23
    25c2:	62 91       	ld	r22, -Z
    25c4:	ae 17       	cp	r26, r30
    25c6:	bf 07       	cpc	r27, r31
    25c8:	c8 f3       	brcs	.-14     	; 0x25bc <strrev+0x10>
    25ca:	08 95       	ret

000025cc <__udivmodhi4>:
    25cc:	aa 1b       	sub	r26, r26
    25ce:	bb 1b       	sub	r27, r27
    25d0:	51 e1       	ldi	r21, 0x11	; 17
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <__udivmodhi4_ep>

000025d4 <__udivmodhi4_loop>:
    25d4:	aa 1f       	adc	r26, r26
    25d6:	bb 1f       	adc	r27, r27
    25d8:	a6 17       	cp	r26, r22
    25da:	b7 07       	cpc	r27, r23
    25dc:	10 f0       	brcs	.+4      	; 0x25e2 <__udivmodhi4_ep>
    25de:	a6 1b       	sub	r26, r22
    25e0:	b7 0b       	sbc	r27, r23

000025e2 <__udivmodhi4_ep>:
    25e2:	88 1f       	adc	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	5a 95       	dec	r21
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <__udivmodhi4_loop>
    25ea:	80 95       	com	r24
    25ec:	90 95       	com	r25
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	08 95       	ret

000025f4 <_exit>:
    25f4:	f8 94       	cli

000025f6 <__stop_program>:
    25f6:	ff cf       	rjmp	.-2      	; 0x25f6 <__stop_program>
