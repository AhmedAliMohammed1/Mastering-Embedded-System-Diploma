
EXTI_Driver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001058  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c4  080011c4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080011c4  080011c4  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c4  080011c4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080011cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200000c4  08001290  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08001290  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002352  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000947  00000000  00000000  00022482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000d98  00000000  00000000  00022dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000248  00000000  00000000  00023b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001f0  00000000  00000000  00023db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000035d9  00000000  00000000  00023fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002b2b  00000000  00000000  00027579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ffed  00000000  00000000  0002a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000075c  00000000  00000000  0003a094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c4 	.word	0x200000c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001170 	.word	0x08001170

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000c8 	.word	0x200000c8
 800016c:	08001170 	.word	0x08001170

08000170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	db0a      	blt.n	800019a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	; (80001bc <__NVIC_SetPriority+0x4c>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	0152      	lsls	r2, r2, #5
 8000190:	b2d2      	uxtb	r2, r2
 8000192:	440b      	add	r3, r1
 8000194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000198:	e00a      	b.n	80001b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4908      	ldr	r1, [pc, #32]	; (80001c0 <__NVIC_SetPriority+0x50>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 030f 	and.w	r3, r3, #15
 80001a6:	3b04      	subs	r3, #4
 80001a8:	0152      	lsls	r2, r2, #5
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	761a      	strb	r2, [r3, #24]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000e100 	.word	0xe000e100
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <SVC_Handler>:

#include "Cortex_Mx_Os_Porting.h"
__attribute((naked))void SVC_Handler(){
	//	OS_SWITCH_PREV_UnPREV(Privileged);
	//1.The stacking happend and i need to know where is the stack (MSP/PSP)
	__asm("TST LR,#0x04 \n\t"//LR NOW HAVE THE EXECUTE_RET and if i compared it with 0x04
 80001c4:	f01e 0f04 	tst.w	lr, #4
 80001c8:	bf0c      	ite	eq
 80001ca:	f3ef 8008 	mrseq	r0, MSP
 80001ce:	f3ef 8009 	mrsne	r0, PSP
 80001d2:	f000 bc9f 	b.w	8000b14 <OS_SVC_ACTION>
			"MRSEQ R0,MSP \n\t"//if equal so the 3rd bit is 1 so put the msp in r0
			"MRSNE R0,PSP \n\t"
			"B OS_SVC_ACTION");


}
 80001d6:	bf00      	nop

080001d8 <HW_init>:

void HW_init(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	__NVIC_SetPriority(PendSV_IRQn,15);
 80001dc:	210f      	movs	r1, #15
 80001de:	f06f 0001 	mvn.w	r0, #1
 80001e2:	f7ff ffc5 	bl	8000170 <__NVIC_SetPriority>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <SET_PendSV>:
void SET_PendSV(){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SET_PendSV+0x18>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <SET_PendSV+0x18>)
 80001f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001fa:	6053      	str	r3, [r2, #4]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <NMI_Handler>:
void NMI_Handler(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <HardFault_Handler>:

void HardFault_Handler(){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <MemManage_Handler>:
void MemManage_Handler(){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <BusFault_Handler>:
void BusFault_Handler(){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <UsageFault_Handler>:
void UsageFault_Handler(){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <FIFO_init>:
 *  Created on: May 15, 2023
 *      Author: Ahmed
 */
#include "MY_RTOS_fifo.h"
FIFO_status FIFO_init(FIFO_t *FIFO,element_type *buff,uint32_t length)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
	if(buff==NULL)
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d101      	bne.n	800025a <FIFO_init+0x16>
		return FIFO_null;
 8000256:	2303      	movs	r3, #3
 8000258:	e00f      	b.n	800027a <FIFO_init+0x36>
	FIFO->base=buff;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	68ba      	ldr	r2, [r7, #8]
 800025e:	609a      	str	r2, [r3, #8]
	FIFO->head=buff;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	605a      	str	r2, [r3, #4]
	FIFO->tail=buff;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	60da      	str	r2, [r3, #12]
	FIFO->length=length;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
	FIFO->count=0;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
	return FIFO_no_error;
 8000278:	2300      	movs	r3, #0

}
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FIFO_PUSH>:
FIFO_status FIFO_PUSH(FIFO_t *FIFO,element_type item)
{
 8000284:	b480      	push	{r7}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
	uint32_t size1= sizeof(element_type);
 800028e:	2304      	movs	r3, #4
 8000290:	617b      	str	r3, [r7, #20]
	uint32_t size2= (FIFO->length);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	613b      	str	r3, [r7, #16]
	uint32_t size =((uint32_t)(FIFO->base) + (size1*size2));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4619      	mov	r1, r3
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	fb02 f303 	mul.w	r3, r2, r3
 80002a6:	440b      	add	r3, r1
 80002a8:	60fb      	str	r3, [r7, #12]
	//check if fifo has been init befor or not
	if(!FIFO->base || !FIFO->head || !FIFO->tail)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d007      	beq.n	80002c2 <FIFO_PUSH+0x3e>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <FIFO_PUSH+0x3e>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_PUSH+0x42>
		return FIFO_null;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e049      	b.n	800035a <FIFO_PUSH+0xd6>
	//check if FIFO is full or not
	if((FIFO->count==FIFO->length))
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	691a      	ldr	r2, [r3, #16]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d101      	bne.n	80002d6 <FIFO_PUSH+0x52>
		return FIFO_FULL;
 80002d2:	2301      	movs	r3, #1
 80002d4:	e041      	b.n	800035a <FIFO_PUSH+0xd6>
	if((FIFO->head < (element_type*)size)&(FIFO->count<=FIFO->length)){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	429a      	cmp	r2, r3
 80002de:	bf34      	ite	cc
 80002e0:	2301      	movcc	r3, #1
 80002e2:	2300      	movcs	r3, #0
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6919      	ldr	r1, [r3, #16]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4299      	cmp	r1, r3
 80002f0:	bf94      	ite	ls
 80002f2:	2301      	movls	r3, #1
 80002f4:	2300      	movhi	r3, #0
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4013      	ands	r3, r2
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00e      	beq.n	800031e <FIFO_PUSH+0x9a>
		*(FIFO->head)=item;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	601a      	str	r2, [r3, #0]
		FIFO->head++;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	1d1a      	adds	r2, r3, #4
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	605a      	str	r2, [r3, #4]
		FIFO->count++;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	e01c      	b.n	8000358 <FIFO_PUSH+0xd4>
	}else{
		if(FIFO->tail > FIFO->base){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	68da      	ldr	r2, [r3, #12]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	429a      	cmp	r2, r3
 8000328:	d912      	bls.n	8000350 <FIFO_PUSH+0xcc>
			FIFO->head=FIFO->base;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	605a      	str	r2, [r3, #4]
			*(FIFO->head)=item;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	601a      	str	r2, [r3, #0]
			FIFO->head++;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	1d1a      	adds	r2, r3, #4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	605a      	str	r2, [r3, #4]
			FIFO->count++;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	e003      	b.n	8000358 <FIFO_PUSH+0xd4>
		}else{
			FIFO->head=FIFO->base;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	605a      	str	r2, [r3, #4]

		}
	}
	return FIFO_no_error;
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	371c      	adds	r7, #28
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <FIFO_POP>:
FIFO_status FIFO_POP(FIFO_t *FIFO,element_type *item)
{
 8000364:	b480      	push	{r7}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
	uint32_t size1= sizeof(element_type);
 800036e:	2304      	movs	r3, #4
 8000370:	617b      	str	r3, [r7, #20]
	uint32_t size2= (FIFO->length);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	613b      	str	r3, [r7, #16]
	uint32_t size =((uint32_t)(FIFO->base) + (size1*size2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	4619      	mov	r1, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	693a      	ldr	r2, [r7, #16]
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	440b      	add	r3, r1
 8000388:	60fb      	str	r3, [r7, #12]
	//check if fifo has been init befor or not
	if(!FIFO->base || !FIFO->head || !FIFO->tail)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d007      	beq.n	80003a2 <FIFO_POP+0x3e>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <FIFO_POP+0x3e>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <FIFO_POP+0x42>
		return FIFO_null;
 80003a2:	2303      	movs	r3, #3
 80003a4:	e04d      	b.n	8000442 <FIFO_POP+0xde>
	//check if FIFO emty of not
	if(FIFO->count==0){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d109      	bne.n	80003c2 <FIFO_POP+0x5e>
		FIFO->head=FIFO->base;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	605a      	str	r2, [r3, #4]
		FIFO->tail=FIFO->base;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60da      	str	r2, [r3, #12]
		return FIFO_empty;
 80003be:	2302      	movs	r3, #2
 80003c0:	e03f      	b.n	8000442 <FIFO_POP+0xde>

	}
	if((FIFO->tail < (element_type*)size )&& (FIFO->count!=0)){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d217      	bcs.n	80003fc <FIFO_POP+0x98>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d013      	beq.n	80003fc <FIFO_POP+0x98>
		*item=*(FIFO->tail);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	601a      	str	r2, [r3, #0]
		*(FIFO->tail)=0;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		FIFO->tail++;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	1d1a      	adds	r2, r3, #4
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
		FIFO->count--;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	611a      	str	r2, [r3, #16]
 80003fa:	e021      	b.n	8000440 <FIFO_POP+0xdc>
	}else{
		if(FIFO->head > FIFO->base){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	429a      	cmp	r2, r3
 8000406:	d917      	bls.n	8000438 <FIFO_POP+0xd4>
			FIFO->tail=FIFO->base;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689a      	ldr	r2, [r3, #8]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60da      	str	r2, [r3, #12]
			*item=*(FIFO->tail);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	601a      	str	r2, [r3, #0]
			*(FIFO->tail)=0;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
			FIFO->tail++;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	1d1a      	adds	r2, r3, #4
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	60da      	str	r2, [r3, #12]
			FIFO->count--;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	611a      	str	r2, [r3, #16]
 8000436:	e003      	b.n	8000440 <FIFO_POP+0xdc>
		}else{
			FIFO->tail=FIFO->base;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689a      	ldr	r2, [r3, #8]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	60da      	str	r2, [r3, #12]

		}
	}
	return FIFO_no_error;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	371c      	adds	r7, #28
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <__NVIC_SetPriority>:
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045c:	2b00      	cmp	r3, #0
 800045e:	db0a      	blt.n	8000476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	b2da      	uxtb	r2, r3
 8000464:	490c      	ldr	r1, [pc, #48]	; (8000498 <__NVIC_SetPriority+0x4c>)
 8000466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046a:	0152      	lsls	r2, r2, #5
 800046c:	b2d2      	uxtb	r2, r2
 800046e:	440b      	add	r3, r1
 8000470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000474:	e00a      	b.n	800048c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4908      	ldr	r1, [pc, #32]	; (800049c <__NVIC_SetPriority+0x50>)
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	f003 030f 	and.w	r3, r3, #15
 8000482:	3b04      	subs	r3, #4
 8000484:	0152      	lsls	r2, r2, #5
 8000486:	b2d2      	uxtb	r2, r2
 8000488:	440b      	add	r3, r1
 800048a:	761a      	strb	r2, [r3, #24]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000e100 	.word	0xe000e100
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004b0:	d301      	bcc.n	80004b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004b2:	2301      	movs	r3, #1
 80004b4:	e00f      	b.n	80004d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <SysTick_Config+0x40>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004be:	2107      	movs	r1, #7
 80004c0:	f04f 30ff 	mov.w	r0, #4294967295
 80004c4:	f7ff ffc2 	bl	800044c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SysTick_Config+0x40>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SysTick_Config+0x40>)
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	e000e010 	.word	0xe000e010

080004e4 <PendSV_Handler>:
extern uint32_t _eheap;


__attribute ((naked)) void PendSV_Handler(){
	/***********Save The last stack of the crrunt task***********/
	GET_PSP((MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80004e4:	4b6e      	ldr	r3, [pc, #440]	; (80006a0 <PendSV_Handler+0x1bc>)
 80004e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ea:	f3ef 8209 	mrs	r2, PSP
 80004ee:	621a      	str	r2, [r3, #32]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 80004f0:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <PendSV_Handler+0x1bc>)
 80004f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f6:	6a1a      	ldr	r2, [r3, #32]
 80004f8:	3a04      	subs	r2, #4
 80004fa:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r4":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80004fc:	4b68      	ldr	r3, [pc, #416]	; (80006a0 <PendSV_Handler+0x1bc>)
 80004fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4622      	mov	r2, r4
 8000506:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000508:	4b65      	ldr	r3, [pc, #404]	; (80006a0 <PendSV_Handler+0x1bc>)
 800050a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050e:	6a1a      	ldr	r2, [r3, #32]
 8000510:	3a04      	subs	r2, #4
 8000512:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r5":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000514:	4b62      	ldr	r3, [pc, #392]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000516:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	462a      	mov	r2, r5
 800051e:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000520:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000522:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000526:	6a1a      	ldr	r2, [r3, #32]
 8000528:	3a04      	subs	r2, #4
 800052a:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r6":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 800052c:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <PendSV_Handler+0x1bc>)
 800052e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000532:	6a1b      	ldr	r3, [r3, #32]
 8000534:	4632      	mov	r2, r6
 8000536:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000538:	4b59      	ldr	r3, [pc, #356]	; (80006a0 <PendSV_Handler+0x1bc>)
 800053a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053e:	6a1a      	ldr	r2, [r3, #32]
 8000540:	3a04      	subs	r2, #4
 8000542:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r7":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000544:	4b56      	ldr	r3, [pc, #344]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000546:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054a:	6a1b      	ldr	r3, [r3, #32]
 800054c:	463a      	mov	r2, r7
 800054e:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000550:	4b53      	ldr	r3, [pc, #332]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000552:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000556:	6a1a      	ldr	r2, [r3, #32]
 8000558:	3a04      	subs	r2, #4
 800055a:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r8":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 800055c:	4b50      	ldr	r3, [pc, #320]	; (80006a0 <PendSV_Handler+0x1bc>)
 800055e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	4642      	mov	r2, r8
 8000566:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000568:	4b4d      	ldr	r3, [pc, #308]	; (80006a0 <PendSV_Handler+0x1bc>)
 800056a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056e:	6a1a      	ldr	r2, [r3, #32]
 8000570:	3a04      	subs	r2, #4
 8000572:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r9":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000574:	4b4a      	ldr	r3, [pc, #296]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000576:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	464a      	mov	r2, r9
 800057e:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000580:	4b47      	ldr	r3, [pc, #284]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000582:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000586:	6a1a      	ldr	r2, [r3, #32]
 8000588:	3a04      	subs	r2, #4
 800058a:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r10":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 800058c:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <PendSV_Handler+0x1bc>)
 800058e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4652      	mov	r2, sl
 8000596:	601a      	str	r2, [r3, #0]
	MAIN_OS_Controller.Current_TASK->Current_PSP_ --;
 8000598:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <PendSV_Handler+0x1bc>)
 800059a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059e:	6a1a      	ldr	r2, [r3, #32]
 80005a0:	3a04      	subs	r2, #4
 80005a2:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov %[out1],r11":[out1] "=r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80005a4:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	465a      	mov	r2, fp
 80005ae:	601a      	str	r2, [r3, #0]


	/***********************Restor the data of the next mov ***********************/
	if (MAIN_OS_Controller.NEXT_TASK != NULL){
 80005b0:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005b2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d009      	beq.n	80005ce <PendSV_Handler+0xea>
		MAIN_OS_Controller.Current_TASK = MAIN_OS_Controller.NEXT_TASK ;
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005c0:	4a37      	ldr	r2, [pc, #220]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005c2:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		MAIN_OS_Controller.NEXT_TASK = NULL ;
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile ("mov r11,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d4:	6a1b      	ldr	r3, [r3, #32]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	469b      	mov	fp, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e0:	6a1a      	ldr	r2, [r3, #32]
 80005e2:	3204      	adds	r2, #4
 80005e4:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r10,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ec:	6a1b      	ldr	r3, [r3, #32]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	469a      	mov	sl, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <PendSV_Handler+0x1bc>)
 80005f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005f8:	6a1a      	ldr	r2, [r3, #32]
 80005fa:	3204      	adds	r2, #4
 80005fc:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r9,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000600:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4699      	mov	r9, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <PendSV_Handler+0x1bc>)
 800060c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000610:	6a1a      	ldr	r2, [r3, #32]
 8000612:	3204      	adds	r2, #4
 8000614:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r8,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000618:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800061c:	6a1b      	ldr	r3, [r3, #32]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4698      	mov	r8, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000624:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	3204      	adds	r2, #4
 800062c:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r7,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000630:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000634:	6a1b      	ldr	r3, [r3, #32]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	461f      	mov	r7, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <PendSV_Handler+0x1bc>)
 800063c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000640:	6a1a      	ldr	r2, [r3, #32]
 8000642:	3204      	adds	r2, #4
 8000644:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r6,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000648:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	461e      	mov	r6, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000654:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	3204      	adds	r2, #4
 800065c:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r5,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000660:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000664:	6a1b      	ldr	r3, [r3, #32]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	461d      	mov	r5, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <PendSV_Handler+0x1bc>)
 800066c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000670:	6a1a      	ldr	r2, [r3, #32]
 8000672:	3204      	adds	r2, #4
 8000674:	621a      	str	r2, [r3, #32]
	__asm volatile ("mov r4,%[in1]": :[in1] "r" (*MAIN_OS_Controller.Current_TASK->Current_PSP_));
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000678:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	461c      	mov	r4, r3
	MAIN_OS_Controller.Current_TASK->Current_PSP_ ++;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000684:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000688:	6a1a      	ldr	r2, [r3, #32]
 800068a:	3204      	adds	r2, #4
 800068c:	621a      	str	r2, [r3, #32]
	SET_PSP(MAIN_OS_Controller.Current_TASK->Current_PSP_);
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <PendSV_Handler+0x1bc>)
 8000690:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	f383 8809 	msr	PSP, r3



	__asm volatile ("BX LR");
 800069a:	4770      	bx	lr





}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	200000e4 	.word	0x200000e4

080006a4 <Create_main_stack>:
ERROR_id Create_main_stack(){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	ERROR_id ERROR=NO_Error;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]

	MAIN_OS_Controller._S_MSP_=((uint32_t)(&_estack));
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <Create_main_stack+0x4c>)
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <Create_main_stack+0x50>)
 80006b2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	MAIN_OS_Controller._E_MSP_=(MAIN_OS_Controller._S_MSP_ -MAIN_stack_size);
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <Create_main_stack+0x50>)
 80006b8:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80006bc:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <Create_main_stack+0x50>)
 80006c2:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	MAIN_OS_Controller._PSP_LOCATIOR =(MAIN_OS_Controller._E_MSP_ -8);
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <Create_main_stack+0x50>)
 80006c8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80006cc:	3b08      	subs	r3, #8
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <Create_main_stack+0x50>)
 80006d0:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	if(MAIN_OS_Controller._E_MSP_ <((uint32_t)(&_eheap)))
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <Create_main_stack+0x50>)
 80006d6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <Create_main_stack+0x54>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d201      	bcs.n	80006e4 <Create_main_stack+0x40>
		ERROR=Create_stack_error;
 80006e0:	2301      	movs	r3, #1
 80006e2:	71fb      	strb	r3, [r7, #7]

	return ERROR;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20002800 	.word	0x20002800
 80006f4:	200000e4 	.word	0x200000e4
 80006f8:	20000aa0 	.word	0x20000aa0

080006fc <RTOS_Create_Task_Stack>:
void RTOS_Create_Task_Stack(Task_sitting_t* TASKx){
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	 * R3
	 * R2
	 * R1
	 * R0
	 * */
	TASKx->Current_PSP_ = (uint32_t *)TASKx->_S_PSP_;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	621a      	str	r2, [r3, #32]
	/*********************xPSR*********************/
	*TASKx->Current_PSP_ =0x01000000;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000716:	601a      	str	r2, [r3, #0]
	TASKx->Current_PSP_--;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	1f1a      	subs	r2, r3, #4
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	621a      	str	r2, [r3, #32]
	/*********************PC*********************/
	*(TASKx->Current_PSP_)=((uint32_t )TASKx->p_function);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	601a      	str	r2, [r3, #0]
	TASKx->Current_PSP_--;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a1b      	ldr	r3, [r3, #32]
 8000730:	1f1a      	subs	r2, r3, #4
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	621a      	str	r2, [r3, #32]
	/*********************LR*********************/
	*TASKx->Current_PSP_=0xFFFFFFFD;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6a1b      	ldr	r3, [r3, #32]
 800073a:	f06f 0202 	mvn.w	r2, #2
 800073e:	601a      	str	r2, [r3, #0]
	TASKx->Current_PSP_--;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	1f1a      	subs	r2, r3, #4
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	621a      	str	r2, [r3, #32]
	/*********************GP_REG*********************/
	for(int i=0;i<12;i++){
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e00b      	b.n	8000768 <RTOS_Create_Task_Stack+0x6c>
		*TASKx->Current_PSP_=0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a1b      	ldr	r3, [r3, #32]
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
		TASKx->Current_PSP_--;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a1b      	ldr	r3, [r3, #32]
 800075c:	1f1a      	subs	r2, r3, #4
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	621a      	str	r2, [r3, #32]
	for(int i=0;i<12;i++){
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b0b      	cmp	r3, #11
 800076c:	ddf0      	ble.n	8000750 <RTOS_Create_Task_Stack+0x54>
	}

}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
	...

0800077c <RTOS_Create_Task>:
ERROR_id RTOS_Create_Task(Task_sitting_t* TASKx){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	ERROR_id ERROR=NO_Error;
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
	//create the  stack boundry of the task
	TASKx->_S_PSP_= MAIN_OS_Controller._PSP_LOCATIOR;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <RTOS_Create_Task+0x70>)
 800078a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	619a      	str	r2, [r3, #24]
	TASKx->_E_PSP_ =(TASKx->_S_PSP_ -(TASKx ->task_size));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	88d2      	ldrh	r2, [r2, #6]
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	61da      	str	r2, [r3, #28]
	MAIN_OS_Controller._PSP_LOCATIOR=(TASKx->_E_PSP_ -8);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	3b08      	subs	r3, #8
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <RTOS_Create_Task+0x70>)
 80007a8:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	if(TASKx->_E_PSP_ <((uint32_t)(&_eheap)))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <RTOS_Create_Task+0x74>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d201      	bcs.n	80007ba <RTOS_Create_Task+0x3e>
		ERROR=Create_stack_error;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]

	//Create Frame Task
	RTOS_Create_Task_Stack(TASKx);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff9e 	bl	80006fc <RTOS_Create_Task_Stack>
	//update Schadulr
	MAIN_OS_Controller.TASKs[MAIN_OS_Controller.N_of_Active_Tasks++]=TASKx;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <RTOS_Create_Task+0x70>)
 80007c2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	b2d1      	uxtb	r1, r2
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <RTOS_Create_Task+0x70>)
 80007cc:	f882 119c 	strb.w	r1, [r2, #412]	; 0x19c
 80007d0:	4619      	mov	r1, r3
 80007d2:	4a06      	ldr	r2, [pc, #24]	; (80007ec <RTOS_Create_Task+0x70>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]



	//update task state
	TASKx->TSK_state=Suspend; //the beganning is Suspend state
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	751a      	strb	r2, [r3, #20]

	return	ERROR;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	20000aa0 	.word	0x20000aa0

080007f4 <RTOS_ideal_task>:
void RTOS_ideal_task(){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	while(1){
		idel_task_LED ^=1;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <RTOS_ideal_task+0x14>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b01      	ldr	r3, [pc, #4]	; (8000808 <RTOS_ideal_task+0x14>)
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e7f7      	b.n	80007f8 <RTOS_ideal_task+0x4>
 8000808:	200000e0 	.word	0x200000e0

0800080c <RTOS_init>:
	}
}
ERROR_id RTOS_init(){
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
	ERROR_id ERROR=NO_Error;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//at first the os in PWOER_SAVING mode
	MAIN_OS_Controller.MODE=POWER_SAVE;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <RTOS_init+0x70>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//create the main stack boundry of my os
	if(Create_main_stack() !=NO_Error )
 8000820:	f7ff ff40 	bl	80006a4 <Create_main_stack>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <RTOS_init+0x22>
		return Create_stack_error;
 800082a:	2301      	movs	r3, #1
 800082c:	e022      	b.n	8000874 <RTOS_init+0x68>
	//creat the queue
	if(FIFO_init(&Ready_FIFO,TASKs,100)!= FIFO_no_error)
 800082e:	2264      	movs	r2, #100	; 0x64
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <RTOS_init+0x74>)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <RTOS_init+0x78>)
 8000834:	f7ff fd06 	bl	8000244 <FIFO_init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <RTOS_init+0x36>
		return FIFO_ERROR;
 800083e:	2302      	movs	r3, #2
 8000840:	e018      	b.n	8000874 <RTOS_init+0x68>
	//create the ideal task
	MYRTOS_idleTask=(Task_sitting_t){"Ideal_TASK",255,1024,RTOS_ideal_task};
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <RTOS_init+0x7c>)
 8000844:	4618      	mov	r0, r3
 8000846:	2324      	movs	r3, #36	; 0x24
 8000848:	461a      	mov	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f000 fc63 	bl	8001116 <memset>
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <RTOS_init+0x7c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <RTOS_init+0x80>)
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <RTOS_init+0x7c>)
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	711a      	strb	r2, [r3, #4]
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <RTOS_init+0x7c>)
 800085e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000862:	80da      	strh	r2, [r3, #6]
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <RTOS_init+0x7c>)
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <RTOS_init+0x84>)
 8000868:	609a      	str	r2, [r3, #8]
	RTOS_Create_Task(&MYRTOS_idleTask);
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <RTOS_init+0x7c>)
 800086c:	f7ff ff86 	bl	800077c <RTOS_Create_Task>
	return	ERROR;
 8000870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000874:	4618      	mov	r0, r3
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000e4 	.word	0x200000e4
 8000880:	200002a4 	.word	0x200002a4
 8000884:	20000290 	.word	0x20000290
 8000888:	20000434 	.word	0x20000434
 800088c:	08001188 	.word	0x08001188
 8000890:	080007f5 	.word	0x080007f5

08000894 <OS_set_SVC>:
void OS_set_SVC(uint8_t SVC_id){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	switch(SVC_id){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d817      	bhi.n	80008d4 <OS_set_SVC+0x40>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <OS_set_SVC+0x18>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008c1 	.word	0x080008c1
 80008b0:	080008c5 	.word	0x080008c5
 80008b4:	080008c9 	.word	0x080008c9
 80008b8:	080008cd 	.word	0x080008cd
 80008bc:	080008d1 	.word	0x080008d1
	case SVC_ACTIVE_:
		__asm("SVC #0x00");
 80008c0:	df00      	svc	0
		break;
 80008c2:	e007      	b.n	80008d4 <OS_set_SVC+0x40>
	case SVC_TERMINATE_:
		__asm("SVC #0x01");
 80008c4:	df01      	svc	1
		break;
 80008c6:	e005      	b.n	80008d4 <OS_set_SVC+0x40>
	case SVC_Task_WAIT:
		__asm("SVC #0x02");
 80008c8:	df02      	svc	2
		break;
 80008ca:	e003      	b.n	80008d4 <OS_set_SVC+0x40>
	case SVC_Acquire_Mutex:
		__asm("SVC #0x03");
 80008cc:	df03      	svc	3
		break;
 80008ce:	e001      	b.n	80008d4 <OS_set_SVC+0x40>
	case SVC_Release_Mutex:
		__asm("SVC #0x04");
 80008d0:	df04      	svc	4
		break;
 80008d2:	bf00      	nop
	}
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <Swap>:
void Swap(Task_sitting_t **arg1,Task_sitting_t** arg2){
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	Task_sitting_t   *temp=NULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
	temp=(*arg1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	60fb      	str	r3, [r7, #12]
	(*arg1)=(*arg2);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
	(*arg2)=temp;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Selection_sort>:
void Selection_sort(){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	uint8_t n=MAIN_OS_Controller.N_of_Active_Tasks,min;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <Selection_sort+0x7c>)
 8000914:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000918:	713b      	strb	r3, [r7, #4]

	for(uint8_t i=0;i<(n);i++){
 800091a:	2300      	movs	r3, #0
 800091c:	71bb      	strb	r3, [r7, #6]
 800091e:	e029      	b.n	8000974 <Selection_sort+0x68>
		min=i;
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	71fb      	strb	r3, [r7, #7]
		for(uint8_t j=i+1;j<(n);j++){
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	3301      	adds	r3, #1
 8000928:	717b      	strb	r3, [r7, #5]
 800092a:	e010      	b.n	800094e <Selection_sort+0x42>
			if(MAIN_OS_Controller.TASKs[j]->priority <MAIN_OS_Controller.TASKs[min]->priority){
 800092c:	797b      	ldrb	r3, [r7, #5]
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <Selection_sort+0x7c>)
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	791a      	ldrb	r2, [r3, #4]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4913      	ldr	r1, [pc, #76]	; (8000988 <Selection_sort+0x7c>)
 800093a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d201      	bcs.n	8000948 <Selection_sort+0x3c>
				min=j;
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	71fb      	strb	r3, [r7, #7]
		for(uint8_t j=i+1;j<(n);j++){
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	3301      	adds	r3, #1
 800094c:	717b      	strb	r3, [r7, #5]
 800094e:	797a      	ldrb	r2, [r7, #5]
 8000950:	793b      	ldrb	r3, [r7, #4]
 8000952:	429a      	cmp	r2, r3
 8000954:	d3ea      	bcc.n	800092c <Selection_sort+0x20>
			}
		}
		Swap(&MAIN_OS_Controller.TASKs[i],&MAIN_OS_Controller.TASKs[min]);
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <Selection_sort+0x7c>)
 800095c:	441a      	add	r2, r3
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <Selection_sort+0x7c>)
 8000964:	440b      	add	r3, r1
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f7ff ffb9 	bl	80008e0 <Swap>
	for(uint8_t i=0;i<(n);i++){
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	3301      	adds	r3, #1
 8000972:	71bb      	strb	r3, [r7, #6]
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	793b      	ldrb	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	d3d1      	bcc.n	8000920 <Selection_sort+0x14>

	}

}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e4 	.word	0x200000e4

0800098c <Re_Arrange_Queue_Buffer>:
void Re_Arrange_Queue_Buffer(){ // accourding to sch. TABLe
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
	Task_sitting_t *P_task;
	Task_sitting_t *P_next_task;

	for(uint8_t i=0;i<MAIN_OS_Controller.N_of_Active_Tasks;i++){
 8000992:	2300      	movs	r3, #0
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e038      	b.n	8000a0a <Re_Arrange_Queue_Buffer+0x7e>
		P_task=(MAIN_OS_Controller.TASKs[i]);
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <Re_Arrange_Queue_Buffer+0x94>)
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	60bb      	str	r3, [r7, #8]
		P_next_task=MAIN_OS_Controller.TASKs[i+1];
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <Re_Arrange_Queue_Buffer+0x94>)
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	607b      	str	r3, [r7, #4]



		if(P_task->TSK_state!=Suspend){
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	7d1b      	ldrb	r3, [r3, #20]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d026      	beq.n	8000a04 <Re_Arrange_Queue_Buffer+0x78>
			if(P_next_task->TSK_state==Suspend){ //reached to last of queue
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7d1b      	ldrb	r3, [r3, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d107      	bne.n	80009ce <Re_Arrange_Queue_Buffer+0x42>
				P_task->TSK_state=ready;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	2201      	movs	r2, #1
 80009c2:	751a      	strb	r2, [r3, #20]
				FIFO_PUSH(&Ready_FIFO, P_task);
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <Re_Arrange_Queue_Buffer+0x98>)
 80009c8:	f7ff fc5c 	bl	8000284 <FIFO_PUSH>
				break;
 80009cc:	e024      	b.n	8000a18 <Re_Arrange_Queue_Buffer+0x8c>
			} if(P_task->priority==P_next_task->priority){
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	791a      	ldrb	r2, [r3, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d106      	bne.n	80009e8 <Re_Arrange_Queue_Buffer+0x5c>
				P_task->TSK_state=ready;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2201      	movs	r2, #1
 80009de:	751a      	strb	r2, [r3, #20]
				FIFO_PUSH(&Ready_FIFO, P_task);
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	4810      	ldr	r0, [pc, #64]	; (8000a24 <Re_Arrange_Queue_Buffer+0x98>)
 80009e4:	f7ff fc4e 	bl	8000284 <FIFO_PUSH>

			}
			if(P_task->priority<P_next_task->priority){
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	791a      	ldrb	r2, [r3, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <Re_Arrange_Queue_Buffer+0x78>
				P_task->TSK_state=ready;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2201      	movs	r2, #1
 80009f8:	751a      	strb	r2, [r3, #20]
				FIFO_PUSH(&Ready_FIFO, P_task);
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <Re_Arrange_Queue_Buffer+0x98>)
 80009fe:	f7ff fc41 	bl	8000284 <FIFO_PUSH>
				break;
 8000a02:	e009      	b.n	8000a18 <Re_Arrange_Queue_Buffer+0x8c>
	for(uint8_t i=0;i<MAIN_OS_Controller.N_of_Active_Tasks;i++){
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	3301      	adds	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <Re_Arrange_Queue_Buffer+0x94>)
 8000a0c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000a10:	7bfa      	ldrb	r2, [r7, #15]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3c0      	bcc.n	8000998 <Re_Arrange_Queue_Buffer+0xc>
			//			}
		}
		else{
		}
	}
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000e4 	.word	0x200000e4
 8000a24:	20000290 	.word	0x20000290

08000a28 <Decide_Who_next>:

void Decide_Who_next(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	if(Ready_FIFO.count ==0 && MAIN_OS_Controller.Current_TASK->TSK_state != Suspend){
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <Decide_Who_next+0xb0>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d118      	bne.n	8000a66 <Decide_Who_next+0x3e>
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <Decide_Who_next+0xb4>)
 8000a36:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3a:	7d1b      	ldrb	r3, [r3, #20]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d012      	beq.n	8000a66 <Decide_Who_next+0x3e>
		MAIN_OS_Controller.Current_TASK->TSK_state =Running;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <Decide_Who_next+0xb4>)
 8000a42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a46:	2203      	movs	r2, #3
 8000a48:	751a      	strb	r2, [r3, #20]
		FIFO_PUSH(&Ready_FIFO, MAIN_OS_Controller.NEXT_TASK);
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <Decide_Who_next+0xb4>)
 8000a4c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <Decide_Who_next+0xb0>)
 8000a54:	f7ff fc16 	bl	8000284 <FIFO_PUSH>
		MAIN_OS_Controller.NEXT_TASK =MAIN_OS_Controller.Current_TASK;
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <Decide_Who_next+0xb4>)
 8000a5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <Decide_Who_next+0xb4>)
 8000a60:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		}else{

		}

	}
}
 8000a64:	e035      	b.n	8000ad2 <Decide_Who_next+0xaa>
		MAIN_OS_Controller.NEXT_TASK->TSK_state =Running;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Decide_Who_next+0xb4>)
 8000a68:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	751a      	strb	r2, [r3, #20]
		FIFO_POP(&Ready_FIFO, &MAIN_OS_Controller.NEXT_TASK);
 8000a70:	491b      	ldr	r1, [pc, #108]	; (8000ae0 <Decide_Who_next+0xb8>)
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <Decide_Who_next+0xb0>)
 8000a74:	f7ff fc76 	bl	8000364 <FIFO_POP>
		if(MAIN_OS_Controller.Current_TASK ==MAIN_OS_Controller.NEXT_TASK){
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <Decide_Who_next+0xb4>)
 8000a7a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <Decide_Who_next+0xb4>)
 8000a80:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d108      	bne.n	8000a9a <Decide_Who_next+0x72>
			MAIN_OS_Controller.Current_TASK->TSK_state =ready;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <Decide_Who_next+0xb4>)
 8000a8a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a8e:	2201      	movs	r2, #1
 8000a90:	751a      	strb	r2, [r3, #20]
			FIFO_POP(&Ready_FIFO, &MAIN_OS_Controller.NEXT_TASK);
 8000a92:	4913      	ldr	r1, [pc, #76]	; (8000ae0 <Decide_Who_next+0xb8>)
 8000a94:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <Decide_Who_next+0xb0>)
 8000a96:	f7ff fc65 	bl	8000364 <FIFO_POP>
		if(MAIN_OS_Controller.Current_TASK->priority == MAIN_OS_Controller.NEXT_TASK->priority && MAIN_OS_Controller.Current_TASK->TSK_state != Suspend){
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <Decide_Who_next+0xb4>)
 8000a9c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aa0:	791a      	ldrb	r2, [r3, #4]
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <Decide_Who_next+0xb4>)
 8000aa4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d111      	bne.n	8000ad2 <Decide_Who_next+0xaa>
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <Decide_Who_next+0xb4>)
 8000ab0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ab4:	7d1b      	ldrb	r3, [r3, #20]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <Decide_Who_next+0xaa>
			MAIN_OS_Controller.Current_TASK->TSK_state =ready;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <Decide_Who_next+0xb4>)
 8000abc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	751a      	strb	r2, [r3, #20]
			FIFO_PUSH(&Ready_FIFO, MAIN_OS_Controller.Current_TASK);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <Decide_Who_next+0xb4>)
 8000ac6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <Decide_Who_next+0xb0>)
 8000ace:	f7ff fbd9 	bl	8000284 <FIFO_PUSH>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000290 	.word	0x20000290
 8000adc:	200000e4 	.word	0x200000e4
 8000ae0:	20000288 	.word	0x20000288

08000ae4 <OS_UPdate_Scadular_TABLE>:
void OS_UPdate_Scadular_TABLE(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	Task_sitting_t *temp=NULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]

	//Selection_sort for the active os tacks
	Selection_sort();
 8000aee:	f7ff ff0d 	bl	800090c <Selection_sort>
	//free queue
	while(FIFO_POP(&Ready_FIFO,&temp)!=FIFO_empty);
 8000af2:	bf00      	nop
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <OS_UPdate_Scadular_TABLE+0x2c>)
 8000afa:	f7ff fc33 	bl	8000364 <FIFO_POP>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d1f7      	bne.n	8000af4 <OS_UPdate_Scadular_TABLE+0x10>
	//fill the queue accourding to the os tasks after shorting
	Re_Arrange_Queue_Buffer();
 8000b04:	f7ff ff42 	bl	800098c <Re_Arrange_Queue_Buffer>


}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000290 	.word	0x20000290

08000b14 <OS_SVC_ACTION>:
void OS_SVC_ACTION(uint32_t *Frame_Stack_pointer){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t SVC_num=0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

	//now i have the frame stack pointer SP->r0->(MSP/PSP)
	//The stacking is R0,R1,R2,R3,R12,LR,PC,xPSR and i need the pc to go back and know what is the SVC number
	SVC_num=*((char *)(((char *)Frame_Stack_pointer[6])-2));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3318      	adds	r3, #24
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3b02      	subs	r3, #2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	73fb      	strb	r3, [r7, #15]
	switch(SVC_num){
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d838      	bhi.n	8000ba4 <OS_SVC_ACTION+0x90>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <OS_SVC_ACTION+0x24>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b4d 	.word	0x08000b4d
 8000b3c:	08000b4d 	.word	0x08000b4d
 8000b40:	08000b65 	.word	0x08000b65
 8000b44:	08000b6b 	.word	0x08000b6b
 8000b48:	08000b83 	.word	0x08000b83
	case SVC_ACTIVE_:
	case SVC_TERMINATE_:

		OS_UPdate_Scadular_TABLE();
 8000b4c:	f7ff ffca 	bl	8000ae4 <OS_UPdate_Scadular_TABLE>

		//check if th os is running or not
		if(MAIN_OS_Controller.MODE==RUINNG){
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <OS_SVC_ACTION+0x98>)
 8000b52:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d11f      	bne.n	8000b9a <OS_SVC_ACTION+0x86>
			//DECIDE WITCH TASK SHOULD GO TO QUEUE
			Decide_Who_next();
 8000b5a:	f7ff ff65 	bl	8000a28 <Decide_Who_next>
			//SWITCH CONTEXT (PendSV)
			SET_PendSV();
 8000b5e:	f7ff fb45 	bl	80001ec <SET_PendSV>
		}
		break;
 8000b62:	e01a      	b.n	8000b9a <OS_SVC_ACTION+0x86>
	case SVC_Task_WAIT:
		OS_UPdate_Scadular_TABLE();
 8000b64:	f7ff ffbe 	bl	8000ae4 <OS_UPdate_Scadular_TABLE>

		break;
 8000b68:	e01c      	b.n	8000ba4 <OS_SVC_ACTION+0x90>
	case SVC_Acquire_Mutex:
		OS_UPdate_Scadular_TABLE();
 8000b6a:	f7ff ffbb 	bl	8000ae4 <OS_UPdate_Scadular_TABLE>
		if(MAIN_OS_Controller.MODE==RUINNG){
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <OS_SVC_ACTION+0x98>)
 8000b70:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d112      	bne.n	8000b9e <OS_SVC_ACTION+0x8a>
			//DECIDE WITCH TASK SHOULD GO TO QUEUE
			Decide_Who_next();
 8000b78:	f7ff ff56 	bl	8000a28 <Decide_Who_next>
			//SWITCH CONTEXT (PendSV)
			SET_PendSV();
 8000b7c:	f7ff fb36 	bl	80001ec <SET_PendSV>
		}
		break;
 8000b80:	e00d      	b.n	8000b9e <OS_SVC_ACTION+0x8a>

	case SVC_Release_Mutex:
		OS_UPdate_Scadular_TABLE();
 8000b82:	f7ff ffaf 	bl	8000ae4 <OS_UPdate_Scadular_TABLE>
		if(MAIN_OS_Controller.MODE==RUINNG){
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <OS_SVC_ACTION+0x98>)
 8000b88:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d108      	bne.n	8000ba2 <OS_SVC_ACTION+0x8e>
			//DECIDE WITCH TASK SHOULD GO TO QUEUE
			Decide_Who_next();
 8000b90:	f7ff ff4a 	bl	8000a28 <Decide_Who_next>
			//SWITCH CONTEXT (PendSV)
			SET_PendSV();
 8000b94:	f7ff fb2a 	bl	80001ec <SET_PendSV>
		}
		break;
 8000b98:	e003      	b.n	8000ba2 <OS_SVC_ACTION+0x8e>
		break;
 8000b9a:	bf00      	nop
 8000b9c:	e002      	b.n	8000ba4 <OS_SVC_ACTION+0x90>
		break;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <OS_SVC_ACTION+0x90>
		break;
 8000ba2:	bf00      	nop

	}

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000e4 	.word	0x200000e4

08000bb0 <OS_Active_TASK>:
void OS_Active_TASK(Task_sitting_t* TASKx){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	(TASKx->TSK_state)=Wait;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2202      	movs	r2, #2
 8000bbc:	751a      	strb	r2, [r3, #20]
	OS_set_SVC(SVC_ACTIVE_);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe68 	bl	8000894 <OS_set_SVC>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <OS_Ticker_Start>:
void OS_TERMINATE_TASK(Task_sitting_t* TASKx){
	(TASKx->TSK_state)=Suspend;
	OS_set_SVC(SVC_TERMINATE_);
}
void OS_Ticker_Start(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	//F_CPU 8000000UL
	//1 tick = 0.125us so if i need 1ms interrupt so i need 8000 tick
	SysTick_Config(8000);
 8000bd0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000bd4:	f7ff fc64 	bl	80004a0 <SysTick_Config>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <OS_TASK_wait>:
void OS_TASK_wait(Task_sitting_t* TASKx,uint32_t TIME){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	TASKx->TIM_wait.Blocking=Enable;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	731a      	strb	r2, [r3, #12]
	TASKx->TIM_wait.Ticks_Count=TIME;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	611a      	str	r2, [r3, #16]
	TASKx->TSK_state=Suspend;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	751a      	strb	r2, [r3, #20]
	OS_set_SVC(SVC_Task_WAIT);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fe4b 	bl	8000894 <OS_set_SVC>

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <Acquire_Mutex>:


Mutex_ERROR Acquire_Mutex(Mutex_sitting* MUTEX,Task_sitting_t* TASKx)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
	if(MUTEX->Current_Task ==NULL){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d103      	bne.n	8000c20 <Acquire_Mutex+0x1a>
		MUTEX->Current_Task =TASKx;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	e015      	b.n	8000c4c <Acquire_Mutex+0x46>

	}else if(MUTEX->Next_TASK == NULL && (MUTEX->Current_Task != TASKx) ){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <Acquire_Mutex+0x42>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d00a      	beq.n	8000c48 <Acquire_Mutex+0x42>
		MUTEX->Next_TASK =TASKx;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	60da      	str	r2, [r3, #12]
		MUTEX->Next_TASK->TSK_state =Suspend;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	751a      	strb	r2, [r3, #20]
		OS_set_SVC(SVC_Acquire_Mutex);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fe27 	bl	8000894 <OS_set_SVC>
 8000c46:	e001      	b.n	8000c4c <Acquire_Mutex+0x46>
	}else{
		return Mutex_OverLoad_Acquire;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <Acquire_Mutex+0x48>
	}

	return Mutex_NO_ERROR;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <OS_TIME_CHECK>:
		return Mutex_Release_ERROR;
	}

	return Mutex_NO_ERROR;
}
void OS_TIME_CHECK(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<MAIN_OS_Controller.N_of_Active_Tasks;i++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	e032      	b.n	8000cca <OS_TIME_CHECK+0x72>
		if(MAIN_OS_Controller.TASKs[i]->TSK_state ==Suspend){
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	7d1b      	ldrb	r3, [r3, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d128      	bne.n	8000cc4 <OS_TIME_CHECK+0x6c>
			if(MAIN_OS_Controller.TASKs[i]->TIM_wait.Blocking == Enable ){
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d121      	bne.n	8000cc4 <OS_TIME_CHECK+0x6c>
				if(MAIN_OS_Controller.TASKs[i]->TIM_wait.Ticks_Count ==0){
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d113      	bne.n	8000cb6 <OS_TIME_CHECK+0x5e>
					MAIN_OS_Controller.TASKs[i]->TIM_wait.Blocking=Disable;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c96:	2200      	movs	r2, #0
 8000c98:	731a      	strb	r2, [r3, #12]
					MAIN_OS_Controller.TASKs[i]->TSK_state=ready;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	751a      	strb	r2, [r3, #20]
					OS_Active_TASK(MAIN_OS_Controller.TASKs[i]);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff7e 	bl	8000bb0 <OS_Active_TASK>
 8000cb4:	e006      	b.n	8000cc4 <OS_TIME_CHECK+0x6c>

				}else{
					MAIN_OS_Controller.TASKs[i]->TIM_wait.Ticks_Count --;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
	for(uint8_t i=0;i<MAIN_OS_Controller.N_of_Active_Tasks;i++){
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <OS_TIME_CHECK+0x88>)
 8000ccc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3c6      	bcc.n	8000c64 <OS_TIME_CHECK+0xc>
				}
			}
		}
	}

}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000e4 	.word	0x200000e4

08000ce4 <SysTick_Handler>:
void SysTick_Handler(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	SYSTICK_LED^=1;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <SysTick_Handler+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Handler+0x24>)
 8000cf4:	701a      	strb	r2, [r3, #0]
	OS_TIME_CHECK(); // IF THERE IS A WAITING TASK
 8000cf6:	f7ff ffaf 	bl	8000c58 <OS_TIME_CHECK>
	Decide_Who_next();
 8000cfa:	f7ff fe95 	bl	8000a28 <Decide_Who_next>
	SET_PendSV();
 8000cfe:	f7ff fa75 	bl	80001ec <SET_PendSV>

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000e1 	.word	0x200000e1

08000d0c <OS_start>:

void OS_start(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	// change the mode of the OS
	MAIN_OS_Controller.MODE=RUINNG;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <OS_start+0x58>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	MAIN_OS_Controller.Current_TASK=&MYRTOS_idleTask;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <OS_start+0x58>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <OS_start+0x5c>)
 8000d1c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	SET_PSP(MAIN_OS_Controller.Current_TASK->Current_PSP_);
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <OS_start+0x58>)
 8000d22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	f383 8809 	msr	PSP, r3
	OS_SWITCH_SP(PSP);
 8000d2c:	f3ef 8314 	mrs	r3, CONTROL
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f383 8814 	msr	CONTROL, r3
	OS_Ticker_Start();
 8000d38:	f7ff ff48 	bl	8000bcc <OS_Ticker_Start>
	OS_SWITCH_PREV_UnPREV(Unprivileged);
 8000d3c:	f3ef 8314 	mrs	r3, CONTROL
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f383 8814 	msr	CONTROL, r3
	OS_Active_TASK(MAIN_OS_Controller.Current_TASK);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <OS_start+0x58>)
 8000d4a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff2e 	bl	8000bb0 <OS_Active_TASK>
	MAIN_OS_Controller.Current_TASK->p_function();
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <OS_start+0x58>)
 8000d56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4798      	blx	r3
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000e4 	.word	0x200000e4
 8000d68:	20000434 	.word	0x20000434

08000d6c <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <EXTI0_IRQHandler+0x1c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <EXTI0_IRQHandler+0x20>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <EXTI0_IRQHandler+0x20>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6153      	str	r3, [r2, #20]
	}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000458 	.word	0x20000458
 8000d8c:	40010400 	.word	0x40010400

08000d90 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <EXTI1_IRQHandler+0x1c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <EXTI1_IRQHandler+0x20>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <EXTI1_IRQHandler+0x20>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6153      	str	r3, [r2, #20]

	}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000458 	.word	0x20000458
 8000db0:	40010400 	.word	0x40010400

08000db4 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <EXTI2_IRQHandler+0x1c>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <EXTI2_IRQHandler+0x20>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <EXTI2_IRQHandler+0x20>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6153      	str	r3, [r2, #20]

	}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000458 	.word	0x20000458
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <EXTI3_IRQHandler+0x1c>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <EXTI3_IRQHandler+0x20>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <EXTI3_IRQHandler+0x20>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6153      	str	r3, [r2, #20]

	}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000458 	.word	0x20000458
 8000df8:	40010400 	.word	0x40010400

08000dfc <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <EXTI4_IRQHandler+0x1c>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <EXTI4_IRQHandler+0x20>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <EXTI4_IRQHandler+0x20>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	6153      	str	r3, [r2, #20]

	}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000458 	.word	0x20000458
 8000e1c:	40010400 	.word	0x40010400

08000e20 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d008      	beq.n	8000e42 <EXTI9_5_IRQHandler+0x22>
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	6153      	str	r3, [r2, #20]
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <EXTI9_5_IRQHandler+0xa4>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <EXTI9_5_IRQHandler+0x40>
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <EXTI9_5_IRQHandler+0xa4>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <EXTI9_5_IRQHandler+0x5e>
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e76:	6153      	str	r3, [r2, #20]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <EXTI9_5_IRQHandler+0xa4>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d008      	beq.n	8000e9c <EXTI9_5_IRQHandler+0x7c>
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <EXTI9_5_IRQHandler+0xa4>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <EXTI9_5_IRQHandler+0x9a>
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <EXTI9_5_IRQHandler+0xa0>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6153      	str	r3, [r2, #20]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <EXTI9_5_IRQHandler+0xa4>)
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	4798      	blx	r3
	}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40010400 	.word	0x40010400
 8000ec4:	20000458 	.word	0x20000458

08000ec8 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <EXTI15_10_IRQHandler+0x22>
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6153      	str	r3, [r2, #20]
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <EXTI15_10_IRQHandler+0x40>
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d008      	beq.n	8000f26 <EXTI15_10_IRQHandler+0x5e>
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1e:	6153      	str	r3, [r2, #20]
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d008      	beq.n	8000f44 <EXTI15_10_IRQHandler+0x7c>
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <EXTI15_10_IRQHandler+0x9a>
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5a:	6153      	str	r3, [r2, #20]
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f60:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <EXTI15_10_IRQHandler+0xb8>
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <EXTI15_10_IRQHandler+0xbc>)
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <EXTI15_10_IRQHandler+0xc0>)
 8000f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7e:	4798      	blx	r3

	}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010400 	.word	0x40010400
 8000f88:	20000458 	.word	0x20000458

08000f8c <TASKA_Handler>:
Task_sitting_t TASKB={"TASKB",10,1024,TASKB_Handler};
Task_sitting_t TASKC={"TASKC",10,1024,TASKC_Handler};
Task_sitting_t TASKD={"TASKD",10,1024,TASKD_Handler};
Task_sitting_t TASKE={"TASKE",1,1024,TASKE_Handler};
Mutex_sitting MUTEX1={"USART"};
void TASKA_Handler(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	 uint32_t counter=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]

	while(1){
		TASKA_LED^=1;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <TASKA_Handler+0x2c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <TASKA_Handler+0x2c>)
 8000fa2:	701a      	strb	r2, [r3, #0]
		if (counter++ ==0xFF){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	2bff      	cmp	r3, #255	; 0xff
 8000fac:	d1f3      	bne.n	8000f96 <TASKA_Handler+0xa>
		Acquire_Mutex(&MUTEX1,&TASKA);
 8000fae:	4903      	ldr	r1, [pc, #12]	; (8000fbc <TASKA_Handler+0x30>)
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <TASKA_Handler+0x34>)
 8000fb2:	f7ff fe28 	bl	8000c06 <Acquire_Mutex>
		TASKA_LED^=1;
 8000fb6:	e7ee      	b.n	8000f96 <TASKA_Handler+0xa>
 8000fb8:	20000494 	.word	0x20000494
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <TASKB_Handler>:
		}
	}
}
void TASKB_Handler(){
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

	while(1){
		TASKB_LED^=1;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <TASKB_Handler+0x14>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <TASKB_Handler+0x14>)
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e7f7      	b.n	8000fc8 <TASKB_Handler+0x4>
 8000fd8:	20000495 	.word	0x20000495

08000fdc <TASKC_Handler>:

	}
}
void TASKC_Handler(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	while(1)		TASKC_LED^=1;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <TASKC_Handler+0x14>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <TASKC_Handler+0x14>)
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e7f7      	b.n	8000fe0 <TASKC_Handler+0x4>
 8000ff0:	20000496 	.word	0x20000496

08000ff4 <TASKD_Handler>:

}
void TASKD_Handler(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	while(1)		TASKD_LED^=1;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <TASKD_Handler+0x14>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b01      	ldr	r3, [pc, #4]	; (8001008 <TASKD_Handler+0x14>)
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e7f7      	b.n	8000ff8 <TASKD_Handler+0x4>
 8001008:	20000497 	.word	0x20000497

0800100c <TASKE_Handler>:

}
void TASKE_Handler(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	 uint32_t counter=0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
	while(1)	{
		TASKE_LED^=1;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <TASKE_Handler+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <TASKE_Handler+0x40>)
 8001022:	701a      	strb	r2, [r3, #0]
		if(counter++ ==0xFF){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d104      	bne.n	8001038 <TASKE_Handler+0x2c>
			OS_TASK_wait(&TASKE, 100);
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <TASKE_Handler+0x44>)
 8001032:	f7ff fdd3 	bl	8000bdc <OS_TASK_wait>
 8001036:	e7ee      	b.n	8001016 <TASKE_Handler+0xa>
		}else if(counter == 0xfFf){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800103e:	4293      	cmp	r3, r2
 8001040:	d1e9      	bne.n	8001016 <TASKE_Handler+0xa>
			Acquire_Mutex(&MUTEX1,&TASKE);
 8001042:	4903      	ldr	r1, [pc, #12]	; (8001050 <TASKE_Handler+0x44>)
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <TASKE_Handler+0x48>)
 8001046:	f7ff fdde 	bl	8000c06 <Acquire_Mutex>
		TASKE_LED^=1;
 800104a:	e7e4      	b.n	8001016 <TASKE_Handler+0xa>
 800104c:	20000498 	.word	0x20000498
 8001050:	20000090 	.word	0x20000090
 8001054:	200000b4 	.word	0x200000b4

08001058 <main>:



}
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HW_init();
 800105c:	f7ff f8bc 	bl	80001d8 <HW_init>
	if(RTOS_init()!=NO_Error)
 8001060:	f7ff fbd4 	bl	800080c <RTOS_init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <main+0x14>
		while(1);
 800106a:	e7fe      	b.n	800106a <main+0x12>
	RTOS_Create_Task(&TASKA);
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <main+0x58>)
 800106e:	f7ff fb85 	bl	800077c <RTOS_Create_Task>
	RTOS_Create_Task(&TASKB);
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <main+0x5c>)
 8001074:	f7ff fb82 	bl	800077c <RTOS_Create_Task>
	RTOS_Create_Task(&TASKC);
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <main+0x60>)
 800107a:	f7ff fb7f 	bl	800077c <RTOS_Create_Task>
	RTOS_Create_Task(&TASKD);
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <main+0x64>)
 8001080:	f7ff fb7c 	bl	800077c <RTOS_Create_Task>
	RTOS_Create_Task(&TASKE);
 8001084:	480e      	ldr	r0, [pc, #56]	; (80010c0 <main+0x68>)
 8001086:	f7ff fb79 	bl	800077c <RTOS_Create_Task>


	OS_Active_TASK(&TASKA);
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <main+0x58>)
 800108c:	f7ff fd90 	bl	8000bb0 <OS_Active_TASK>
	OS_Active_TASK(&TASKB);
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <main+0x5c>)
 8001092:	f7ff fd8d 	bl	8000bb0 <OS_Active_TASK>
	OS_Active_TASK(&TASKC);
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <main+0x60>)
 8001098:	f7ff fd8a 	bl	8000bb0 <OS_Active_TASK>
	OS_Active_TASK(&TASKD);
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <main+0x64>)
 800109e:	f7ff fd87 	bl	8000bb0 <OS_Active_TASK>
	OS_Active_TASK(&TASKE);
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <main+0x68>)
 80010a4:	f7ff fd84 	bl	8000bb0 <OS_Active_TASK>


	OS_start();
 80010a8:	f7ff fe30 	bl	8000d0c <OS_start>

	//	Main_OS();

	/* Loop forever */
	for(;;);
 80010ac:	e7fe      	b.n	80010ac <main+0x54>
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000024 	.word	0x20000024
 80010b8:	20000048 	.word	0x20000048
 80010bc:	2000006c 	.word	0x2000006c
 80010c0:	20000090 	.word	0x20000090

080010c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f2:	f000 f819 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff ffaf 	bl	8001058 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001108:	080011cc 	.word	0x080011cc
  ldr r2, =_sbss
 800110c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001110:	2000049c 	.word	0x2000049c

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <memset>:
 8001116:	4603      	mov	r3, r0
 8001118:	4402      	add	r2, r0
 800111a:	4293      	cmp	r3, r2
 800111c:	d100      	bne.n	8001120 <memset+0xa>
 800111e:	4770      	bx	lr
 8001120:	f803 1b01 	strb.w	r1, [r3], #1
 8001124:	e7f9      	b.n	800111a <memset+0x4>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	2600      	movs	r6, #0
 800112c:	4d0c      	ldr	r5, [pc, #48]	; (8001160 <__libc_init_array+0x38>)
 800112e:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	42a6      	cmp	r6, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	f000 f81a 	bl	8001170 <_init>
 800113c:	2600      	movs	r6, #0
 800113e:	4d0a      	ldr	r5, [pc, #40]	; (8001168 <__libc_init_array+0x40>)
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <__libc_init_array+0x44>)
 8001142:	1b64      	subs	r4, r4, r5
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	42a6      	cmp	r6, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001150:	4798      	blx	r3
 8001152:	3601      	adds	r6, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f855 3b04 	ldr.w	r3, [r5], #4
 800115a:	4798      	blx	r3
 800115c:	3601      	adds	r6, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	080011c4 	.word	0x080011c4
 8001164:	080011c4 	.word	0x080011c4
 8001168:	080011c4 	.word	0x080011c4
 800116c:	080011c8 	.word	0x080011c8

08001170 <_init>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr

0800117c <_fini>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr
