
uart_bug.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080010f8  080010f8  000110f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001120  08001120  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001120  08001120  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001120  08001120  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000018  08001140  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001140  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005e27  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e13  00000000  00000000  00025eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000013d4  00000000  00000000  00026cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000318  00000000  00000000  00028098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000290  00000000  00000000  000283b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000866  00000000  00000000  00028640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003fb9  00000000  00000000  00028ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006e5f  00000000  00000000  0002ce5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a50  00000000  00000000  00033cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	080010e0 	.word	0x080010e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	080010e0 	.word	0x080010e0

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000034 	.word	0x20000034
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000034 	.word	0x20000034
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000034 	.word	0x20000034
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000034 	.word	0x20000034
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000034 	.word	0x20000034
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000034 	.word	0x20000034

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000034 	.word	0x20000034

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e004      	b.n	80003b2 <Get_PIN_Positon+0x22>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	3b08      	subs	r3, #8
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b4:	89fb      	ldrh	r3, [r7, #14]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a6b      	ldr	r2, [pc, #428]	; (800057c <MCAL_GPIO_init+0x1bc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <MCAL_GPIO_init+0x20>
 80003d2:	4b6b      	ldr	r3, [pc, #428]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a6a      	ldr	r2, [pc, #424]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	e02a      	b.n	8000436 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a68      	ldr	r2, [pc, #416]	; (8000584 <MCAL_GPIO_init+0x1c4>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <MCAL_GPIO_init+0x36>
 80003e8:	4b65      	ldr	r3, [pc, #404]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a64      	ldr	r2, [pc, #400]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	e01f      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a63      	ldr	r2, [pc, #396]	; (8000588 <MCAL_GPIO_init+0x1c8>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <MCAL_GPIO_init+0x4c>
 80003fe:	4b60      	ldr	r3, [pc, #384]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a5f      	ldr	r2, [pc, #380]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	e014      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a5f      	ldr	r2, [pc, #380]	; (800058c <MCAL_GPIO_init+0x1cc>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <MCAL_GPIO_init+0x62>
 8000414:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a59      	ldr	r2, [pc, #356]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	e009      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a5a      	ldr	r2, [pc, #360]	; (8000590 <MCAL_GPIO_init+0x1d0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d105      	bne.n	8000436 <MCAL_GPIO_init+0x76>
 800042a:	4b55      	ldr	r3, [pc, #340]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a54      	ldr	r2, [pc, #336]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000434:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	b29b      	uxth	r3, r3
 800043c:	2b07      	cmp	r3, #7
 800043e:	d801      	bhi.n	8000444 <MCAL_GPIO_init+0x84>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	e001      	b.n	8000448 <MCAL_GPIO_init+0x88>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3304      	adds	r3, #4
 8000448:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff9d 	bl	8000390 <Get_PIN_Positon>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	230f      	movs	r3, #15
 800045c:	4093      	lsls	r3, r2
 800045e:	43da      	mvns	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	401a      	ands	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	789b      	ldrb	r3, [r3, #2]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00e      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b01      	cmp	r3, #1
 800047c:	d009      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b02      	cmp	r3, #2
 8000486:	d004      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b03      	cmp	r3, #3
 8000490:	d156      	bne.n	8000540 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	789b      	ldrb	r3, [r3, #2]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b03      	cmp	r3, #3
 800049a:	d11c      	bne.n	80004d6 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff74 	bl	8000390 <Get_PIN_Positon>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	2308      	movs	r3, #8
 80004ae:	fa03 f202 	lsl.w	r2, r3, r2
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	431a      	orrs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	2301      	movs	r3, #1
 80004c6:	4093      	lsls	r3, r2
 80004c8:	43da      	mvns	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004d4:	e04d      	b.n	8000572 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d11c      	bne.n	800051a <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff52 	bl	8000390 <Get_PIN_Positon>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	2308      	movs	r3, #8
 80004f2:	fa03 f202 	lsl.w	r2, r3, r2
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	431a      	orrs	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2301      	movs	r3, #1
 800050a:	fa03 f202 	lsl.w	r2, r3, r2
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000518:	e02b      	b.n	8000572 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	009c      	lsls	r4, r3, #2
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Get_PIN_Positon>
 800052e:	4603      	mov	r3, r0
 8000530:	fa04 f203 	lsl.w	r2, r4, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	431a      	orrs	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 800053e:	e018      	b.n	8000572 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3b04      	subs	r3, #4
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	78d2      	ldrb	r2, [r2, #3]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	ea43 0402 	orr.w	r4, r3, r2
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff18 	bl	8000390 <Get_PIN_Positon>
 8000560:	4603      	mov	r3, r0
 8000562:	fa04 f203 	lsl.w	r2, r4, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	431a      	orrs	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]

	}

}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	40010800 	.word	0x40010800
 8000580:	40021000 	.word	0x40021000
 8000584:	40010c00 	.word	0x40010c00
 8000588:	40011000 	.word	0x40011000
 800058c:	40011400 	.word	0x40011400
 8000590:	40011800 	.word	0x40011800

08000594 <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 800059a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d00b      	beq.n	80005c2 <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7813      	ldrb	r3, [r2, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	6913      	ldr	r3, [r2, #16]
 80005ba:	f36f 0300 	bfc	r3, #0, #1
 80005be:	6113      	str	r3, [r2, #16]
 80005c0:	e04e      	b.n	8000660 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00b      	beq.n	80005ea <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7813      	ldrb	r3, [r2, #0]
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 80005dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e0:	6913      	ldr	r3, [r2, #16]
 80005e2:	f36f 0341 	bfc	r3, #1, #1
 80005e6:	6113      	str	r3, [r2, #16]
 80005e8:	e03a      	b.n	8000660 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00b      	beq.n	8000612 <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7813      	ldrb	r3, [r2, #0]
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	6913      	ldr	r3, [r2, #16]
 800060a:	f36f 0382 	bfc	r3, #2, #1
 800060e:	6113      	str	r3, [r2, #16]
 8000610:	e026      	b.n	8000660 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8000612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00b      	beq.n	800063a <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7813      	ldrb	r3, [r2, #0]
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 800062c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000630:	6913      	ldr	r3, [r2, #16]
 8000632:	f36f 03c3 	bfc	r3, #3, #1
 8000636:	6113      	str	r3, [r2, #16]
 8000638:	e012      	b.n	8000660 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 800063a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00a      	beq.n	8000660 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7813      	ldrb	r3, [r2, #0]
 800064e:	f043 0310 	orr.w	r3, r3, #16
 8000652:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8000654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000658:	6913      	ldr	r3, [r2, #16]
 800065a:	f36f 1304 	bfc	r3, #4, #1
 800065e:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <TIM2_IRQHandler+0xdc>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4798      	blx	r3

}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000070 	.word	0x20000070

08000674 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <TIM3_IRQHandler+0xc8>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00a      	beq.n	800069e <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7813      	ldrb	r3, [r2, #0]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8000692:	4a2a      	ldr	r2, [pc, #168]	; (800073c <TIM3_IRQHandler+0xc8>)
 8000694:	6913      	ldr	r3, [r2, #16]
 8000696:	f36f 0300 	bfc	r3, #0, #1
 800069a:	6113      	str	r3, [r2, #16]
 800069c:	e046      	b.n	800072c <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <TIM3_IRQHandler+0xc8>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00a      	beq.n	80006c2 <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7813      	ldrb	r3, [r2, #0]
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 80006b6:	4a21      	ldr	r2, [pc, #132]	; (800073c <TIM3_IRQHandler+0xc8>)
 80006b8:	6913      	ldr	r3, [r2, #16]
 80006ba:	f36f 0341 	bfc	r3, #1, #1
 80006be:	6113      	str	r3, [r2, #16]
 80006c0:	e034      	b.n	800072c <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <TIM3_IRQHandler+0xc8>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7813      	ldrb	r3, [r2, #0]
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <TIM3_IRQHandler+0xc8>)
 80006dc:	6913      	ldr	r3, [r2, #16]
 80006de:	f36f 0382 	bfc	r3, #2, #1
 80006e2:	6113      	str	r3, [r2, #16]
 80006e4:	e022      	b.n	800072c <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <TIM3_IRQHandler+0xc8>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00a      	beq.n	800070a <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	7813      	ldrb	r3, [r2, #0]
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <TIM3_IRQHandler+0xc8>)
 8000700:	6913      	ldr	r3, [r2, #16]
 8000702:	f36f 03c3 	bfc	r3, #3, #1
 8000706:	6113      	str	r3, [r2, #16]
 8000708:	e010      	b.n	800072c <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <TIM3_IRQHandler+0xc8>)
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d009      	beq.n	800072c <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7813      	ldrb	r3, [r2, #0]
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <TIM3_IRQHandler+0xc8>)
 8000724:	6913      	ldr	r3, [r2, #16]
 8000726:	f36f 1304 	bfc	r3, #4, #1
 800072a:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <TIM3_IRQHandler+0xcc>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40000400 	.word	0x40000400
 8000740:	20000070 	.word	0x20000070

08000744 <TIM4_IRQHandler>:
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <TIM4_IRQHandler+0xd4>)
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8000762:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <TIM4_IRQHandler+0xd4>)
 8000764:	6913      	ldr	r3, [r2, #16]
 8000766:	f36f 0300 	bfc	r3, #0, #1
 800076a:	6113      	str	r3, [r2, #16]
 800076c:	e04b      	b.n	8000806 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <TIM4_IRQHandler+0xd4>)
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00a      	beq.n	8000792 <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7813      	ldrb	r3, [r2, #0]
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <TIM4_IRQHandler+0xd4>)
 8000788:	6913      	ldr	r3, [r2, #16]
 800078a:	f36f 0341 	bfc	r3, #1, #1
 800078e:	6113      	str	r3, [r2, #16]
 8000790:	e039      	b.n	8000806 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <TIM4_IRQHandler+0xd4>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00f      	beq.n	80007c0 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7813      	ldrb	r3, [r2, #0]
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <TIM4_IRQHandler+0xd4>)
 80007ac:	6913      	ldr	r3, [r2, #16]
 80007ae:	f36f 0382 	bfc	r3, #2, #1
 80007b2:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7813      	ldrb	r3, [r2, #0]
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	7013      	strb	r3, [r2, #0]
 80007be:	e022      	b.n	8000806 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <TIM4_IRQHandler+0xd4>)
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	7813      	ldrb	r3, [r2, #0]
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <TIM4_IRQHandler+0xd4>)
 80007da:	6913      	ldr	r3, [r2, #16]
 80007dc:	f36f 03c3 	bfc	r3, #3, #1
 80007e0:	6113      	str	r3, [r2, #16]
 80007e2:	e010      	b.n	8000806 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <TIM4_IRQHandler+0xd4>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d009      	beq.n	8000806 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7813      	ldrb	r3, [r2, #0]
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <TIM4_IRQHandler+0xd4>)
 80007fe:	6913      	ldr	r3, [r2, #16]
 8000800:	f36f 1304 	bfc	r3, #4, #1
 8000804:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <TIM4_IRQHandler+0xd8>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	4798      	blx	r3


}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40000800 	.word	0x40000800
 800081c:	20000070 	.word	0x20000070

08000820 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MCAL_GET_SYS_CLCK+0x34>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	089b      	lsrs	r3, r3, #2
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b02      	cmp	r3, #2
 8000830:	d00a      	beq.n	8000848 <MCAL_GET_SYS_CLCK+0x28>
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80a      	bhi.n	800084c <MCAL_GET_SYS_CLCK+0x2c>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <MCAL_GET_SYS_CLCK+0x20>
 800083a:	2b01      	cmp	r3, #1
 800083c:	d002      	beq.n	8000844 <MCAL_GET_SYS_CLCK+0x24>
 800083e:	e005      	b.n	800084c <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MCAL_GET_SYS_CLCK+0x38>)
 8000842:	e003      	b.n	800084c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <MCAL_GET_SYS_CLCK+0x3c>)
 8000846:	e001      	b.n	800084c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <MCAL_GET_SYS_CLCK+0x3c>)
 800084a:	e7ff      	b.n	800084c <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	007a1200 	.word	0x007a1200
 800085c:	00f42400 	.word	0x00f42400

08000860 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000864:	f7ff ffdc 	bl	8000820 <MCAL_GET_SYS_CLCK>
 8000868:	4602      	mov	r2, r0
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <MCAL_GET_H_CLCK+0x20>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	091b      	lsrs	r3, r3, #4
 8000870:	f003 030f 	and.w	r3, r3, #15
 8000874:	4903      	ldr	r1, [pc, #12]	; (8000884 <MCAL_GET_H_CLCK+0x24>)
 8000876:	5ccb      	ldrb	r3, [r1, r3]
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	20000000 	.word	0x20000000

08000888 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 800088c:	f7ff ffe8 	bl	8000860 <MCAL_GET_H_CLCK>
 8000890:	4602      	mov	r2, r0
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MCAL_GET_PCLCK1+0x20>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	4903      	ldr	r1, [pc, #12]	; (80008ac <MCAL_GET_PCLCK1+0x24>)
 800089e:	5ccb      	ldrb	r3, [r1, r3]
 80008a0:	fa22 f303 	lsr.w	r3, r2, r3

}
 80008a4:	4618      	mov	r0, r3
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	20000000 	.word	0x20000000

080008b0 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80008b4:	f7ff ffd4 	bl	8000860 <MCAL_GET_H_CLCK>
 80008b8:	4602      	mov	r2, r0
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MCAL_GET_PCLCK2+0x20>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	0adb      	lsrs	r3, r3, #11
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	4903      	ldr	r1, [pc, #12]	; (80008d4 <MCAL_GET_PCLCK2+0x24>)
 80008c6:	5ccb      	ldrb	r3, [r1, r3]
 80008c8:	fa22 f303 	lsr.w	r3, r2, r3

}
 80008cc:	4618      	mov	r0, r3
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	20000000 	.word	0x20000000

080008d8 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4905      	ldr	r1, [pc, #20]	; (80008f8 <SPI1_IRQHandler+0x20>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f80c 	bl	8000900 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SPI1_IRQHandler+0x24>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	7938      	ldrb	r0, [r7, #4]
 80008ee:	4798      	blx	r3
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	200000a0 	.word	0x200000a0

08000900 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00f      	beq.n	8000938 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	7813      	ldrb	r3, [r2, #0]
 800091c:	f36f 0300 	bfc	r3, #0, #1
 8000920:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7813      	ldrb	r3, [r2, #0]
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	7913      	ldrb	r3, [r2, #4]
 8000930:	f36f 1386 	bfc	r3, #6, #1
 8000934:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8000936:	e015      	b.n	8000964 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00e      	beq.n	8000964 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	7813      	ldrb	r3, [r2, #0]
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	7813      	ldrb	r3, [r2, #0]
 8000954:	f36f 0341 	bfc	r3, #1, #1
 8000958:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	7913      	ldrb	r3, [r2, #4]
 800095e:	f36f 13c7 	bfc	r3, #7, #1
 8000962:	7113      	strb	r3, [r2, #4]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
	...

08000970 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <TIM1_UP_IRQHandler+0x1c>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <TIM1_UP_IRQHandler+0x20>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	6913      	ldr	r3, [r2, #16]
 8000980:	f36f 0300 	bfc	r3, #0, #1
 8000984:	6113      	str	r3, [r2, #16]

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000c0 	.word	0x200000c0
 8000990:	200000d0 	.word	0x200000d0

08000994 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <TIM1_CC_IRQHandler+0x1c>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <TIM1_CC_IRQHandler+0x20>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	6913      	ldr	r3, [r2, #16]
 80009a4:	f36f 0341 	bfc	r3, #1, #1
 80009a8:	6113      	str	r3, [r2, #16]

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000c0 	.word	0x200000c0
 80009b4:	200000d0 	.word	0x200000d0

080009b8 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <TIM1_BRK_IRQHandler+0x1c>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <TIM1_BRK_IRQHandler+0x20>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	6913      	ldr	r3, [r2, #16]
 80009c8:	f36f 0300 	bfc	r3, #0, #1
 80009cc:	6113      	str	r3, [r2, #16]

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000c0 	.word	0x200000c0
 80009d8:	200000d0 	.word	0x200000d0

080009dc <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <TIM1_TRG_COM_IRQHandler+0x1c>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <TIM1_TRG_COM_IRQHandler+0x20>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	6913      	ldr	r3, [r2, #16]
 80009ec:	f36f 0300 	bfc	r3, #0, #1
 80009f0:	6113      	str	r3, [r2, #16]

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000c0 	.word	0x200000c0
 80009fc:	200000d0 	.word	0x200000d0

08000a00 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a8d      	ldr	r2, [pc, #564]	; (8000c44 <MCAL_USART_init+0x244>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10c      	bne.n	8000a2c <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8000a12:	4a8d      	ldr	r2, [pc, #564]	; (8000c48 <MCAL_USART_init+0x248>)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	4614      	mov	r4, r2
 8000a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8000a1e:	4b8b      	ldr	r3, [pc, #556]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a8a      	ldr	r2, [pc, #552]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	e024      	b.n	8000a76 <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a88      	ldr	r2, [pc, #544]	; (8000c50 <MCAL_USART_init+0x250>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d10e      	bne.n	8000a52 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8000a34:	4b84      	ldr	r3, [pc, #528]	; (8000c48 <MCAL_USART_init+0x248>)
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	f103 0410 	add.w	r4, r3, #16
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8000a44:	4b81      	ldr	r3, [pc, #516]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a80      	ldr	r2, [pc, #512]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	e011      	b.n	8000a76 <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a7f      	ldr	r2, [pc, #508]	; (8000c54 <MCAL_USART_init+0x254>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10d      	bne.n	8000a76 <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 8000a5a:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <MCAL_USART_init+0x248>)
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	f103 0420 	add.w	r4, r3, #32
 8000a62:	4613      	mov	r3, r2
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 8000a6a:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a77      	ldr	r2, [pc, #476]	; (8000c4c <MCAL_USART_init+0x24c>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	7912      	ldrb	r2, [r2, #4]
 8000a8a:	0312      	lsls	r2, r2, #12
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	79d2      	ldrb	r2, [r2, #7]
 8000a9a:	0312      	lsls	r2, r2, #12
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	7a5b      	ldrb	r3, [r3, #9]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10b      	bne.n	8000ac2 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f043 0208 	orr.w	r2, r3, #8
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	f043 0204 	orr.w	r2, r3, #4
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	7a1b      	ldrb	r3, [r3, #8]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d826      	bhi.n	8000b18 <MCAL_USART_init+0x118>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <MCAL_USART_init+0xd0>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000aef 	.word	0x08000aef
 8000ad8:	08000afd 	.word	0x08000afd
 8000adc:	08000b0b 	.word	0x08000b0b
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	615a      	str	r2, [r3, #20]
		break;
 8000aec:	e014      	b.n	8000b18 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	615a      	str	r2, [r3, #20]
		break;
 8000afa:	e00d      	b.n	8000b18 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	615a      	str	r2, [r3, #20]
		break;
 8000b08:	e006      	b.n	8000b18 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	615a      	str	r2, [r3, #20]
		break;
 8000b16:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	7952      	ldrb	r2, [r2, #5]
 8000b20:	0252      	lsls	r2, r2, #9
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	799b      	ldrb	r3, [r3, #6]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d125      	bne.n	8000b7c <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <MCAL_USART_init+0x244>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8000b38:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e014      	b.n	8000b70 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <MCAL_USART_init+0x250>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a41      	ldr	r2, [pc, #260]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e009      	b.n	8000b70 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <MCAL_USART_init+0x254>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d105      	bne.n	8000b70 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8000b64:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a3b      	ldr	r2, [pc, #236]	; (8000c58 <MCAL_USART_init+0x258>)
 8000b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6e:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	f043 0220 	orr.w	r2, r3, #32
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <MCAL_USART_init+0x244>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d12d      	bne.n	8000be0 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8000b84:	f7ff fe94 	bl	80008b0 <MCAL_GET_PCLCK2>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	011c      	lsls	r4, r3, #4
 8000b96:	f7ff fe8b 	bl	80008b0 <MCAL_GET_PCLCK2>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	009a      	lsls	r2, r3, #2
 8000ba4:	441a      	add	r2, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fbb2 f5f3 	udiv	r5, r2, r3
 8000bb0:	f7ff fe7e 	bl	80008b0 <MCAL_GET_PCLCK2>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	2264      	movs	r2, #100	; 0x64
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	1aeb      	subs	r3, r5, r3
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MCAL_USART_init+0x25c>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	095b      	lsrs	r3, r3, #5
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	ea44 0203 	orr.w	r2, r4, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	e070      	b.n	8000cc2 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MCAL_USART_init+0x250>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d13b      	bne.n	8000c60 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000be8:	f7ff fe4e 	bl	8000888 <MCAL_GET_PCLCK1>
 8000bec:	4602      	mov	r2, r0
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf8:	011c      	lsls	r4, r3, #4
 8000bfa:	f7ff fe45 	bl	8000888 <MCAL_GET_PCLCK1>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009a      	lsls	r2, r3, #2
 8000c08:	441a      	add	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c14:	f7ff fe38 	bl	8000888 <MCAL_GET_PCLCK1>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	fb02 f303 	mul.w	r3, r2, r3
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MCAL_USART_init+0x25c>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	ea44 0203 	orr.w	r2, r4, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	e03e      	b.n	8000cc2 <MCAL_USART_init+0x2c2>
 8000c44:	40013800 	.word	0x40013800
 8000c48:	200000d4 	.word	0x200000d4
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40004800 	.word	0x40004800
 8000c58:	e000e104 	.word	0xe000e104
 8000c5c:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <MCAL_USART_init+0x2d0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d12c      	bne.n	8000cc2 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8000c68:	f7ff fe0e 	bl	8000888 <MCAL_GET_PCLCK1>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	011c      	lsls	r4, r3, #4
 8000c7a:	f7ff fe05 	bl	8000888 <MCAL_GET_PCLCK1>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	009a      	lsls	r2, r3, #2
 8000c88:	441a      	add	r2, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c94:	f7ff fdf8 	bl	8000888 <MCAL_GET_PCLCK1>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	2264      	movs	r2, #100	; 0x64
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	1aeb      	subs	r3, r5, r3
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <MCAL_USART_init+0x2d4>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	095b      	lsrs	r3, r3, #5
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	ea44 0203 	orr.w	r2, r4, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f852 	bl	8000d6c <SET_GPIO>
	}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd0:	40004800 	.word	0x40004800
 8000cd4:	51eb851f 	.word	0x51eb851f

08000cd8 <MCAL_USART_ReciveData>:
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MCAL_USART_ReciveData+0x7c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d102      	bne.n	8000cf2 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MCAL_USART_ReciveData+0x80>)
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e00c      	b.n	8000d0c <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <MCAL_USART_ReciveData+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d102      	bne.n	8000d00 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MCAL_USART_ReciveData+0x88>)
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e005      	b.n	8000d0c <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <MCAL_USART_ReciveData+0x8c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MCAL_USART_ReciveData+0x90>)
 8000d0a:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	799b      	ldrb	r3, [r3, #6]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d107      	bne.n	8000d24 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 8000d14:	bf00      	nop
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <MCAL_USART_ReciveData+0x3e>
 8000d22:	e002      	b.n	8000d2a <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	799b      	ldrb	r3, [r3, #6]
 8000d28:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	795b      	ldrb	r3, [r3, #5]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d104      	bne.n	8000d3c <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	e006      	b.n	8000d4a <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d48:	b29b      	uxth	r3, r3

		}

}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40013800 	.word	0x40013800
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	200000e4 	.word	0x200000e4
 8000d64:	40004800 	.word	0x40004800
 8000d68:	200000f4 	.word	0x200000f4

08000d6c <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <SET_GPIO+0xbc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <SET_GPIO+0xc0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d115      	bne.n	8000dae <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <SET_GPIO+0xc4>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <SET_GPIO+0xc4>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4827      	ldr	r0, [pc, #156]	; (8000e34 <SET_GPIO+0xc8>)
 8000d96:	f7ff fb13 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <SET_GPIO+0xcc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4823      	ldr	r0, [pc, #140]	; (8000e34 <SET_GPIO+0xc8>)
 8000da8:	f7ff fb0a 	bl	80003c0 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8000dac:	e038      	b.n	8000e20 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <SET_GPIO+0xd0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d118      	bne.n	8000de8 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <SET_GPIO+0xc4>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <SET_GPIO+0xc4>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <SET_GPIO+0xd4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <SET_GPIO+0xc8>)
 8000dd0:	f7ff faf6 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <SET_GPIO+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4814      	ldr	r0, [pc, #80]	; (8000e34 <SET_GPIO+0xc8>)
 8000de2:	f7ff faed 	bl	80003c0 <MCAL_GPIO_init>
}
 8000de6:	e01b      	b.n	8000e20 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <SET_GPIO+0xdc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d117      	bne.n	8000e20 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <SET_GPIO+0xc4>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <SET_GPIO+0xc4>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SET_GPIO+0xe0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <SET_GPIO+0xe4>)
 8000e0a:	f7ff fad9 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <SET_GPIO+0xe8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <SET_GPIO+0xe4>)
 8000e1c:	f7ff fad0 	bl	80003c0 <MCAL_GPIO_init>
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	080010f8 	.word	0x080010f8
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	080010fc 	.word	0x080010fc
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	08001100 	.word	0x08001100
 8000e44:	08001104 	.word	0x08001104
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	08001108 	.word	0x08001108
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	0800110c 	.word	0x0800110c

08000e58 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4798      	blx	r3
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000d4 	.word	0x200000d4

08000e6c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <USART2_IRQHandler+0x10>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000d4 	.word	0x200000d4

08000e80 <USART3_IRQHandler>:
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <USART3_IRQHandler+0x10>)
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	4798      	blx	r3
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000d4 	.word	0x200000d4

08000e94 <call_Back>:
////////////////////////////
uint8_t FACE_START_Flag='-'; //'-'
uint8_t FACE_END_Flag='+';// '+'
uint16_t GR_FACE_FLAG_=0;
uint8_t GR_FACE_FLAG_send=0;
void call_Back(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if(	USART1->SR &(1<<5)){
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <call_Back+0x164>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <call_Back+0x1e>
		PC_Uart_Flag=	MCAL_USART_ReciveData(USART1);
 8000ea4:	4854      	ldr	r0, [pc, #336]	; (8000ff8 <call_Back+0x164>)
 8000ea6:	f7ff ff17 	bl	8000cd8 <MCAL_USART_ReciveData>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <call_Back+0x168>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	0x0008

	0x0000 | 0x0008
	0x0008
	 */
	switch(PC_Uart_Flag){
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <call_Back+0x168>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3b23      	subs	r3, #35	; 0x23
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	d829      	bhi.n	8000f10 <call_Back+0x7c>
 8000ebc:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <call_Back+0x30>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ef1 	.word	0x08000ef1
 8000ec8:	08000f11 	.word	0x08000f11
 8000ecc:	08000f11 	.word	0x08000f11
 8000ed0:	08000f11 	.word	0x08000f11
 8000ed4:	08000f11 	.word	0x08000f11
 8000ed8:	08000f11 	.word	0x08000f11
 8000edc:	08000f11 	.word	0x08000f11
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000f09 	.word	0x08000f09
 8000ee8:	08000f11 	.word	0x08000f11
 8000eec:	08000f01 	.word	0x08000f01
	case '#':
		TSR_START_Flag=1;
 8000ef0:	4b43      	ldr	r3, [pc, #268]	; (8001000 <call_Back+0x16c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
		break;
 8000ef6:	e00b      	b.n	8000f10 <call_Back+0x7c>
	case '*':
		TSR_END_Flag=1;
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <call_Back+0x170>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
		break;
 8000efe:	e007      	b.n	8000f10 <call_Back+0x7c>
	case '-':
		FACE_START_Flag=1;
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <call_Back+0x174>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
		break;
 8000f06:	e003      	b.n	8000f10 <call_Back+0x7c>
	case '+':
		FACE_END_Flag=1;
 8000f08:	4b40      	ldr	r3, [pc, #256]	; (800100c <call_Back+0x178>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
		break;
 8000f0e:	bf00      	nop
	}

	if(TSR_START_Flag){
 8000f10:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <call_Back+0x16c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d034      	beq.n	8000f82 <call_Back+0xee>
		if(TSR_END_Flag ==0){
 8000f18:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <call_Back+0x170>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10c      	bne.n	8000f3a <call_Back+0xa6>
			GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <call_Back+0x17c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <call_Back+0x168>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <call_Back+0x17c>)
 8000f36:	801a      	strh	r2, [r3, #0]





}
 8000f38:	e05b      	b.n	8000ff2 <call_Back+0x15e>
			GR_TSR_FLAG_OLED &=0x0F0F;
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <call_Back+0x17c>)
 8000f3c:	881a      	ldrh	r2, [r3, #0]
 8000f3e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000f42:	4013      	ands	r3, r2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <call_Back+0x17c>)
 8000f48:	801a      	strh	r2, [r3, #0]
			GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <call_Back+0x17c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	111b      	asrs	r3, r3, #4
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f023 030f 	bic.w	r3, r3, #15
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <call_Back+0x17c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <call_Back+0x180>)
 8000f6c:	701a      	strb	r2, [r3, #0]
			GR_TSR_FLAG_OLED=0;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <call_Back+0x17c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	801a      	strh	r2, [r3, #0]
			TSR_END_Flag=0;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <call_Back+0x170>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			TSR_START_Flag=0;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <call_Back+0x16c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	e037      	b.n	8000ff2 <call_Back+0x15e>
	}else if (FACE_START_Flag){
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <call_Back+0x174>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d033      	beq.n	8000ff2 <call_Back+0x15e>
		if(FACE_END_Flag ==0){
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <call_Back+0x178>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <call_Back+0x118>
			GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <call_Back+0x184>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <call_Back+0x168>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <call_Back+0x184>)
 8000fa8:	801a      	strh	r2, [r3, #0]
}
 8000faa:	e022      	b.n	8000ff2 <call_Back+0x15e>
			GR_FACE_FLAG_ &=0x0F0F;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <call_Back+0x184>)
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <call_Back+0x184>)
 8000fba:	801a      	strh	r2, [r3, #0]
			GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <call_Back+0x184>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	111b      	asrs	r3, r3, #4
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	f023 030f 	bic.w	r3, r3, #15
 8000fc8:	b25a      	sxtb	r2, r3
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <call_Back+0x184>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <call_Back+0x188>)
 8000fde:	701a      	strb	r2, [r3, #0]
			GR_FACE_FLAG_=0;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <call_Back+0x184>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
			FACE_START_Flag=0;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <call_Back+0x174>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
			FACE_END_Flag=0;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <call_Back+0x178>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	20000107 	.word	0x20000107
 8001000:	20000011 	.word	0x20000011
 8001004:	20000012 	.word	0x20000012
 8001008:	20000013 	.word	0x20000013
 800100c:	20000014 	.word	0x20000014
 8001010:	20000104 	.word	0x20000104
 8001014:	20000106 	.word	0x20000106
 8001018:	20000108 	.word	0x20000108
 800101c:	2000010a 	.word	0x2000010a

08001020 <main>:

int main(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
		USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,call_Back};
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <main+0x1c>)
 8001028:	463c      	mov	r4, r7
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		MCAL_USART_init(USART1, &UART1_CON);
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <main+0x20>)
 8001036:	f7ff fce3 	bl	8000a00 <MCAL_USART_init>

	for(;;){
 800103a:	e7fe      	b.n	800103a <main+0x1a>
 800103c:	08001110 	.word	0x08001110
 8001040:	40013800 	.word	0x40013800

08001044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001046:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001048:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001072:	f000 f811 	bl	8001098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001076:	f7ff ffd3 	bl	8001020 <main>

0800107a <LoopForever>:

LoopForever:
  b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   r0, =_estack
 800107c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001088:	08001128 	.word	0x08001128
  ldr r2, =_sbss
 800108c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001090:	2000010c 	.word	0x2000010c

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <__libc_init_array>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	2600      	movs	r6, #0
 800109c:	4d0c      	ldr	r5, [pc, #48]	; (80010d0 <__libc_init_array+0x38>)
 800109e:	4c0d      	ldr	r4, [pc, #52]	; (80010d4 <__libc_init_array+0x3c>)
 80010a0:	1b64      	subs	r4, r4, r5
 80010a2:	10a4      	asrs	r4, r4, #2
 80010a4:	42a6      	cmp	r6, r4
 80010a6:	d109      	bne.n	80010bc <__libc_init_array+0x24>
 80010a8:	f000 f81a 	bl	80010e0 <_init>
 80010ac:	2600      	movs	r6, #0
 80010ae:	4d0a      	ldr	r5, [pc, #40]	; (80010d8 <__libc_init_array+0x40>)
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <__libc_init_array+0x44>)
 80010b2:	1b64      	subs	r4, r4, r5
 80010b4:	10a4      	asrs	r4, r4, #2
 80010b6:	42a6      	cmp	r6, r4
 80010b8:	d105      	bne.n	80010c6 <__libc_init_array+0x2e>
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c0:	4798      	blx	r3
 80010c2:	3601      	adds	r6, #1
 80010c4:	e7ee      	b.n	80010a4 <__libc_init_array+0xc>
 80010c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ca:	4798      	blx	r3
 80010cc:	3601      	adds	r6, #1
 80010ce:	e7f2      	b.n	80010b6 <__libc_init_array+0x1e>
 80010d0:	08001120 	.word	0x08001120
 80010d4:	08001120 	.word	0x08001120
 80010d8:	08001120 	.word	0x08001120
 80010dc:	08001124 	.word	0x08001124

080010e0 <_init>:
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e2:	bf00      	nop
 80010e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e6:	bc08      	pop	{r3}
 80010e8:	469e      	mov	lr, r3
 80010ea:	4770      	bx	lr

080010ec <_fini>:
 80010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ee:	bf00      	nop
 80010f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f2:	bc08      	pop	{r3}
 80010f4:	469e      	mov	lr, r3
 80010f6:	4770      	bx	lr
