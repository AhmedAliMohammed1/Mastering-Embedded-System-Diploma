
uart_bug.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800185c  0800185c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800185c  0800185c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800185c  0800185c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000014  08001878  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001878  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061c7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cd0  00000000  00000000  00026204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ac  00000000  00000000  00026ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000318  00000000  00000000  00028280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000290  00000000  00000000  00028598  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000854  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002d25  00000000  00000000  0002907c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006ccc  00000000  00000000  0002bda1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032a6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a48  00000000  00000000  00032ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	080017e0 	.word	0x080017e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	080017e0 	.word	0x080017e0

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000058 	.word	0x20000058
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000058 	.word	0x20000058
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000058 	.word	0x20000058
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000058 	.word	0x20000058
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000058 	.word	0x20000058
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000058 	.word	0x20000058

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000058 	.word	0x20000058

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e006      	b.n	80003b6 <Get_PIN_Positon+0x26>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80003ae:	3338      	adds	r3, #56	; 0x38
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a6a      	ldr	r2, [pc, #424]	; (800057c <MCAL_GPIO_init+0x1b8>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <MCAL_GPIO_init+0x20>
 80003d6:	4b6a      	ldr	r3, [pc, #424]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a69      	ldr	r2, [pc, #420]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	e02a      	b.n	800043a <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a67      	ldr	r2, [pc, #412]	; (8000584 <MCAL_GPIO_init+0x1c0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <MCAL_GPIO_init+0x36>
 80003ec:	4b64      	ldr	r3, [pc, #400]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a63      	ldr	r2, [pc, #396]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	e01f      	b.n	800043a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a62      	ldr	r2, [pc, #392]	; (8000588 <MCAL_GPIO_init+0x1c4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <MCAL_GPIO_init+0x4c>
 8000402:	4b5f      	ldr	r3, [pc, #380]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a5e      	ldr	r2, [pc, #376]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	e014      	b.n	800043a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a5e      	ldr	r2, [pc, #376]	; (800058c <MCAL_GPIO_init+0x1c8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <MCAL_GPIO_init+0x62>
 8000418:	4b59      	ldr	r3, [pc, #356]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a58      	ldr	r2, [pc, #352]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	e009      	b.n	800043a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a59      	ldr	r2, [pc, #356]	; (8000590 <MCAL_GPIO_init+0x1cc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d105      	bne.n	800043a <MCAL_GPIO_init+0x76>
 800042e:	4b54      	ldr	r3, [pc, #336]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a53      	ldr	r2, [pc, #332]	; (8000580 <MCAL_GPIO_init+0x1bc>)
 8000434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000438:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	b29b      	uxth	r3, r3
 8000440:	2b07      	cmp	r3, #7
 8000442:	d801      	bhi.n	8000448 <MCAL_GPIO_init+0x84>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	e001      	b.n	800044c <MCAL_GPIO_init+0x88>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3304      	adds	r3, #4
 800044c:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	b29b      	uxth	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff9b 	bl	8000390 <Get_PIN_Positon>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	230f      	movs	r3, #15
 8000460:	4093      	lsls	r3, r2
 8000462:	43da      	mvns	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	401a      	ands	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789b      	ldrb	r3, [r3, #2]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00e      	beq.n	8000496 <MCAL_GPIO_init+0xd2>
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b01      	cmp	r3, #1
 8000480:	d009      	beq.n	8000496 <MCAL_GPIO_init+0xd2>
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	789b      	ldrb	r3, [r3, #2]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b02      	cmp	r3, #2
 800048a:	d004      	beq.n	8000496 <MCAL_GPIO_init+0xd2>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b03      	cmp	r3, #3
 8000494:	d156      	bne.n	8000544 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b03      	cmp	r3, #3
 800049e:	d11c      	bne.n	80004da <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff72 	bl	8000390 <Get_PIN_Positon>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	2308      	movs	r3, #8
 80004b2:	fa03 f202 	lsl.w	r2, r3, r2
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	2301      	movs	r3, #1
 80004ca:	4093      	lsls	r3, r2
 80004cc:	43da      	mvns	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004d8:	e04c      	b.n	8000574 <MCAL_GPIO_init+0x1b0>
		}

		else if(PINx->MODE == INPUT_PU){
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	789b      	ldrb	r3, [r3, #2]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d11c      	bne.n	800051e <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff50 	bl	8000390 <Get_PIN_Positon>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	2308      	movs	r3, #8
 80004f6:	fa03 f202 	lsl.w	r2, r3, r2
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	431a      	orrs	r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b29b      	uxth	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	2301      	movs	r3, #1
 800050e:	fa03 f202 	lsl.w	r2, r3, r2
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	431a      	orrs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 800051c:	e02a      	b.n	8000574 <MCAL_GPIO_init+0x1b0>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	009c      	lsls	r4, r3, #2
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff2f 	bl	8000390 <Get_PIN_Positon>
 8000532:	4603      	mov	r3, r0
 8000534:	fa04 f203 	lsl.w	r2, r4, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	431a      	orrs	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8000542:	e017      	b.n	8000574 <MCAL_GPIO_init+0x1b0>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	789b      	ldrb	r3, [r3, #2]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	3b04      	subs	r3, #4
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	78d2      	ldrb	r2, [r2, #3]
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	ea43 0402 	orr.w	r4, r3, r2
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff16 	bl	8000390 <Get_PIN_Positon>
 8000564:	4603      	mov	r3, r0
 8000566:	fa04 f203 	lsl.w	r2, r4, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	431a      	orrs	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	601a      	str	r2, [r3, #0]

	}

}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	40010800 	.word	0x40010800
 8000580:	40021000 	.word	0x40021000
 8000584:	40010c00 	.word	0x40010c00
 8000588:	40011000 	.word	0x40011000
 800058c:	40011400 	.word	0x40011400
 8000590:	40011800 	.word	0x40011800

08000594 <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	while(1);
 8000598:	e7fe      	b.n	8000598 <GP_ERROR_HANDLER+0x4>
	...

0800059c <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
 80005a8:	4613      	mov	r3, r2
 80005aa:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b2:	f040 8084 	bne.w	80006be <MCAL_SET_GP_TIMx_GPIO+0x122>
		switch (MODE) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d005      	beq.n	80005c8 <MCAL_SET_GP_TIMx_GPIO+0x2c>
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d03f      	beq.n	8000640 <MCAL_SET_GP_TIMx_GPIO+0xa4>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 81ab 	beq.w	800091c <MCAL_SET_GP_TIMx_GPIO+0x380>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80005c6:	e1b0      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			switch(CHx){
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d833      	bhi.n	8000638 <MCAL_SET_GP_TIMx_GPIO+0x9c>
 80005d0:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <MCAL_SET_GP_TIMx_GPIO+0x3c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	080005fd 	.word	0x080005fd
 80005e0:	08000611 	.word	0x08000611
 80005e4:	08000625 	.word	0x08000625
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 80005e8:	4baf      	ldr	r3, [pc, #700]	; (80008a8 <MCAL_SET_GP_TIMx_GPIO+0x30c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	48ad      	ldr	r0, [pc, #692]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 80005f6:	f7ff fee5 	bl	80003c4 <MCAL_GPIO_init>
				break;
 80005fa:	e020      	b.n	800063e <MCAL_SET_GP_TIMx_GPIO+0xa2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 80005fc:	4bac      	ldr	r3, [pc, #688]	; (80008b0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	48a8      	ldr	r0, [pc, #672]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 800060a:	f7ff fedb 	bl	80003c4 <MCAL_GPIO_init>
				break;
 800060e:	e016      	b.n	800063e <MCAL_SET_GP_TIMx_GPIO+0xa2>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 8000610:	4ba8      	ldr	r3, [pc, #672]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	48a3      	ldr	r0, [pc, #652]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 800061e:	f7ff fed1 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000622:	e00c      	b.n	800063e <MCAL_SET_GP_TIMx_GPIO+0xa2>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8000624:	4ba4      	ldr	r3, [pc, #656]	; (80008b8 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	489e      	ldr	r0, [pc, #632]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 8000632:	f7ff fec7 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000636:	e002      	b.n	800063e <MCAL_SET_GP_TIMx_GPIO+0xa2>
				ERROR_HANDLER();
 8000638:	f000 fd29 	bl	800108e <ERROR_HANDLER>
			break;
 800063c:	e175      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 800063e:	e174      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
				switch(CHx){
 8000640:	78bb      	ldrb	r3, [r7, #2]
 8000642:	3b01      	subs	r3, #1
 8000644:	2b03      	cmp	r3, #3
 8000646:	d836      	bhi.n	80006b6 <MCAL_SET_GP_TIMx_GPIO+0x11a>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <MCAL_SET_GP_TIMx_GPIO+0xb4>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000661 	.word	0x08000661
 8000654:	0800067b 	.word	0x0800067b
 8000658:	0800068f 	.word	0x0800068f
 800065c:	080006a3 	.word	0x080006a3
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8000660:	2300      	movs	r3, #0
 8000662:	81bb      	strh	r3, [r7, #12]
 8000664:	2301      	movs	r3, #1
 8000666:	73bb      	strb	r3, [r7, #14]
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_init(GPIOA, &pin);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	488e      	ldr	r0, [pc, #568]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 8000674:	f7ff fea6 	bl	80003c4 <MCAL_GPIO_init>
					break;
 8000678:	e020      	b.n	80006bc <MCAL_SET_GP_TIMx_GPIO+0x120>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 800067a:	4b90      	ldr	r3, [pc, #576]	; (80008bc <MCAL_SET_GP_TIMx_GPIO+0x320>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOA, &pin);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4889      	ldr	r0, [pc, #548]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 8000688:	f7ff fe9c 	bl	80003c4 <MCAL_GPIO_init>
					break;
 800068c:	e016      	b.n	80006bc <MCAL_SET_GP_TIMx_GPIO+0x120>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 800068e:	4b8c      	ldr	r3, [pc, #560]	; (80008c0 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOA, &pin);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	4884      	ldr	r0, [pc, #528]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 800069c:	f7ff fe92 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80006a0:	e00c      	b.n	80006bc <MCAL_SET_GP_TIMx_GPIO+0x120>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 80006a2:	4b88      	ldr	r3, [pc, #544]	; (80008c4 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOA, &pin);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	487f      	ldr	r0, [pc, #508]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 80006b0:	f7ff fe88 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80006b4:	e002      	b.n	80006bc <MCAL_SET_GP_TIMx_GPIO+0x120>
					ERROR_HANDLER();
 80006b6:	f000 fcea 	bl	800108e <ERROR_HANDLER>
				break;
 80006ba:	e136      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 80006bc:	e135      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
		}

	}else if(TIMx ==TIM3){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a81      	ldr	r2, [pc, #516]	; (80008c8 <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	f040 8083 	bne.w	80007ce <MCAL_SET_GP_TIMx_GPIO+0x232>
		switch (MODE) {
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d005      	beq.n	80006da <MCAL_SET_GP_TIMx_GPIO+0x13e>
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d03e      	beq.n	8000750 <MCAL_SET_GP_TIMx_GPIO+0x1b4>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 8124 	beq.w	8000920 <MCAL_SET_GP_TIMx_GPIO+0x384>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80006d8:	e127      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			switch(CHx){
 80006da:	78bb      	ldrb	r3, [r7, #2]
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d832      	bhi.n	8000748 <MCAL_SET_GP_TIMx_GPIO+0x1ac>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <MCAL_SET_GP_TIMx_GPIO+0x14c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	0800070d 	.word	0x0800070d
 80006f0:	08000721 	.word	0x08000721
 80006f4:	08000735 	.word	0x08000735
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 80006f8:	4b74      	ldr	r3, [pc, #464]	; (80008cc <MCAL_SET_GP_TIMx_GPIO+0x330>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	4869      	ldr	r0, [pc, #420]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 8000706:	f7ff fe5d 	bl	80003c4 <MCAL_GPIO_init>
				break;
 800070a:	e020      	b.n	800074e <MCAL_SET_GP_TIMx_GPIO+0x1b2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 800070c:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOA, &pin);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4864      	ldr	r0, [pc, #400]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 800071a:	f7ff fe53 	bl	80003c4 <MCAL_GPIO_init>
				break;
 800071e:	e016      	b.n	800074e <MCAL_SET_GP_TIMx_GPIO+0x1b2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8000720:	4b61      	ldr	r3, [pc, #388]	; (80008a8 <MCAL_SET_GP_TIMx_GPIO+0x30c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4869      	ldr	r0, [pc, #420]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800072e:	f7ff fe49 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000732:	e00c      	b.n	800074e <MCAL_SET_GP_TIMx_GPIO+0x1b2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8000734:	4b5e      	ldr	r3, [pc, #376]	; (80008b0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4864      	ldr	r0, [pc, #400]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000742:	f7ff fe3f 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000746:	e002      	b.n	800074e <MCAL_SET_GP_TIMx_GPIO+0x1b2>
				ERROR_HANDLER();
 8000748:	f000 fca1 	bl	800108e <ERROR_HANDLER>
			break;
 800074c:	e0ed      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 800074e:	e0ec      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
				switch(CHx){
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	3b01      	subs	r3, #1
 8000754:	2b03      	cmp	r3, #3
 8000756:	d836      	bhi.n	80007c6 <MCAL_SET_GP_TIMx_GPIO+0x22a>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <MCAL_SET_GP_TIMx_GPIO+0x1c4>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000785 	.word	0x08000785
 8000768:	08000799 	.word	0x08000799
 800076c:	080007b3 	.word	0x080007b3
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOA, &pin);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	484b      	ldr	r0, [pc, #300]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 800077e:	f7ff fe21 	bl	80003c4 <MCAL_GPIO_init>
					break;
 8000782:	e023      	b.n	80007cc <MCAL_SET_GP_TIMx_GPIO+0x230>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8000784:	4b55      	ldr	r3, [pc, #340]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOA, &pin);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4846      	ldr	r0, [pc, #280]	; (80008ac <MCAL_SET_GP_TIMx_GPIO+0x310>)
 8000792:	f7ff fe17 	bl	80003c4 <MCAL_GPIO_init>
					break;
 8000796:	e019      	b.n	80007cc <MCAL_SET_GP_TIMx_GPIO+0x230>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8000798:	2300      	movs	r3, #0
 800079a:	81bb      	strh	r3, [r7, #12]
 800079c:	2301      	movs	r3, #1
 800079e:	73bb      	strb	r3, [r7, #14]
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_init(GPIOB, &pin);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	484a      	ldr	r0, [pc, #296]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 80007ac:	f7ff fe0a 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80007b0:	e00c      	b.n	80007cc <MCAL_SET_GP_TIMx_GPIO+0x230>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 80007b2:	4b42      	ldr	r3, [pc, #264]	; (80008bc <MCAL_SET_GP_TIMx_GPIO+0x320>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOB, &pin);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4845      	ldr	r0, [pc, #276]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 80007c0:	f7ff fe00 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80007c4:	e002      	b.n	80007cc <MCAL_SET_GP_TIMx_GPIO+0x230>
					ERROR_HANDLER();
 80007c6:	f000 fc62 	bl	800108e <ERROR_HANDLER>
				break;
 80007ca:	e0ae      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 80007cc:	e0ad      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
		}



	}else if(TIMx ==TIM4){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	f040 80a6 	bne.w	8000924 <MCAL_SET_GP_TIMx_GPIO+0x388>
		switch (MODE) {
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d005      	beq.n	80007ea <MCAL_SET_GP_TIMx_GPIO+0x24e>
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d03e      	beq.n	8000860 <MCAL_SET_GP_TIMx_GPIO+0x2c4>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80a0 	beq.w	8000928 <MCAL_SET_GP_TIMx_GPIO+0x38c>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80007e8:	e09f      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			switch(CHx){
 80007ea:	78bb      	ldrb	r3, [r7, #2]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d832      	bhi.n	8000858 <MCAL_SET_GP_TIMx_GPIO+0x2bc>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <MCAL_SET_GP_TIMx_GPIO+0x25c>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000809 	.word	0x08000809
 80007fc:	0800081d 	.word	0x0800081d
 8000800:	08000831 	.word	0x08000831
 8000804:	08000845 	.word	0x08000845
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MCAL_SET_GP_TIMx_GPIO+0x330>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000816:	f7ff fdd5 	bl	80003c4 <MCAL_GPIO_init>
				break;
 800081a:	e020      	b.n	800085e <MCAL_SET_GP_TIMx_GPIO+0x2c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	482a      	ldr	r0, [pc, #168]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800082a:	f7ff fdcb 	bl	80003c4 <MCAL_GPIO_init>
				break;
 800082e:	e016      	b.n	800085e <MCAL_SET_GP_TIMx_GPIO+0x2c2>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <MCAL_SET_GP_TIMx_GPIO+0x348>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800083e:	f7ff fdc1 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000842:	e00c      	b.n	800085e <MCAL_SET_GP_TIMx_GPIO+0x2c2>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
				MCAL_GPIO_init(GPIOB, &pin);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4820      	ldr	r0, [pc, #128]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000852:	f7ff fdb7 	bl	80003c4 <MCAL_GPIO_init>
				break;
 8000856:	e002      	b.n	800085e <MCAL_SET_GP_TIMx_GPIO+0x2c2>
				ERROR_HANDLER();
 8000858:	f000 fc19 	bl	800108e <ERROR_HANDLER>
			break;
 800085c:	e065      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 800085e:	e064      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
				switch(CHx){
 8000860:	78bb      	ldrb	r3, [r7, #2]
 8000862:	3b01      	subs	r3, #1
 8000864:	2b03      	cmp	r3, #3
 8000866:	d855      	bhi.n	8000914 <MCAL_SET_GP_TIMx_GPIO+0x378>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <MCAL_SET_GP_TIMx_GPIO+0x2d4>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000881 	.word	0x08000881
 8000874:	08000895 	.word	0x08000895
 8000878:	080008ed 	.word	0x080008ed
 800087c:	08000901 	.word	0x08000901
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOB, &pin);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800088e:	f7ff fd99 	bl	80003c4 <MCAL_GPIO_init>
					break;
 8000892:	e042      	b.n	800091a <MCAL_SET_GP_TIMx_GPIO+0x37e>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOB, &pin);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 80008a2:	f7ff fd8f 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80008a6:	e038      	b.n	800091a <MCAL_SET_GP_TIMx_GPIO+0x37e>
 80008a8:	080017f8 	.word	0x080017f8
 80008ac:	40010800 	.word	0x40010800
 80008b0:	080017fc 	.word	0x080017fc
 80008b4:	08001800 	.word	0x08001800
 80008b8:	08001804 	.word	0x08001804
 80008bc:	08001808 	.word	0x08001808
 80008c0:	0800180c 	.word	0x0800180c
 80008c4:	08001810 	.word	0x08001810
 80008c8:	40000400 	.word	0x40000400
 80008cc:	08001814 	.word	0x08001814
 80008d0:	08001818 	.word	0x08001818
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	0800181c 	.word	0x0800181c
 80008dc:	08001820 	.word	0x08001820
 80008e0:	40000800 	.word	0x40000800
 80008e4:	08001824 	.word	0x08001824
 80008e8:	08001828 	.word	0x08001828
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MCAL_SET_GP_TIMx_GPIO+0x398>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOB, &pin);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MCAL_SET_GP_TIMx_GPIO+0x39c>)
 80008fa:	f7ff fd63 	bl	80003c4 <MCAL_GPIO_init>
					break;
 80008fe:	e00c      	b.n	800091a <MCAL_SET_GP_TIMx_GPIO+0x37e>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MCAL_SET_GP_TIMx_GPIO+0x3a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
					MCAL_GPIO_init(GPIOB, &pin);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <MCAL_SET_GP_TIMx_GPIO+0x39c>)
 800090e:	f7ff fd59 	bl	80003c4 <MCAL_GPIO_init>
					break;
 8000912:	e002      	b.n	800091a <MCAL_SET_GP_TIMx_GPIO+0x37e>
					ERROR_HANDLER();
 8000914:	f000 fbbb 	bl	800108e <ERROR_HANDLER>
				break;
 8000918:	e007      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
 800091a:	e006      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			break;
 800091c:	bf00      	nop
 800091e:	e004      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			break;
 8000920:	bf00      	nop
 8000922:	e002      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
		}
		//////////



	}
 8000924:	bf00      	nop
 8000926:	e000      	b.n	800092a <MCAL_SET_GP_TIMx_GPIO+0x38e>
			break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	0800182c 	.word	0x0800182c
 8000938:	40010c00 	.word	0x40010c00
 800093c:	08001830 	.word	0x08001830

08000940 <GP_TIMx_start>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_TIMx_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_NORMAL_config* NORMAL_SITTING){
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==NORMAL){
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	7a5b      	ldrb	r3, [r3, #9]
 8000950:	2b00      	cmp	r3, #0
 8000952:	f040 80bd 	bne.w	8000ad0 <GP_TIMx_start+0x190>
		GP_TIMx_Deint(TIMx);
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f8cc 	bl	8000af4 <GP_TIMx_Deint>

		g_GP_TIMX=TIMx;
 800095c:	4a5f      	ldr	r2, [pc, #380]	; (8000adc <GP_TIMx_start+0x19c>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6013      	str	r3, [r2, #0]
		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000968:	d10c      	bne.n	8000984 <GP_TIMx_start+0x44>
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a5c      	ldr	r2, [pc, #368]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4a5b      	ldr	r2, [pc, #364]	; (8000ae4 <GP_TIMx_start+0x1a4>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4614      	mov	r4, r2
 800097c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000982:	e024      	b.n	80009ce <GP_TIMx_start+0x8e>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4a58      	ldr	r2, [pc, #352]	; (8000ae8 <GP_TIMx_start+0x1a8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d10e      	bne.n	80009aa <GP_TIMx_start+0x6a>
 800098c:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4a53      	ldr	r2, [pc, #332]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <GP_TIMx_start+0x1a4>)
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f103 0410 	add.w	r4, r3, #16
 80009a0:	4613      	mov	r3, r2
 80009a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009a8:	e011      	b.n	80009ce <GP_TIMx_start+0x8e>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4a4f      	ldr	r2, [pc, #316]	; (8000aec <GP_TIMx_start+0x1ac>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10d      	bne.n	80009ce <GP_TIMx_start+0x8e>
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a4a      	ldr	r2, [pc, #296]	; (8000ae0 <GP_TIMx_start+0x1a0>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <GP_TIMx_start+0x1a4>)
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	f103 0420 	add.w	r4, r3, #32
 80009c6:	4613      	mov	r3, r2
 80009c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	885b      	ldrh	r3, [r3, #2]
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	889b      	ldrh	r3, [r3, #4]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30

		if(Sitting->TIME_RCR)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	889b      	ldrh	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <GP_TIMx_start+0xbe>
			TIMx->CR1.BIT_NAME.ARPE=1;
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6013      	str	r3, [r2, #0]

		//1.Select the mode CMS[1:0]
		switch(NORMAL_SITTING->NORMAL_MODE){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d00e      	beq.n	8000a24 <GP_TIMx_start+0xe4>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d017      	beq.n	8000a3a <GP_TIMx_start+0xfa>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11b      	bne.n	8000a46 <GP_TIMx_start+0x106>
		case Up:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	f36f 1346 	bfc	r3, #5, #2
 8000a16:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f36f 1304 	bfc	r3, #4, #1
 8000a20:	6013      	str	r3, [r2, #0]
			break;
 8000a22:	e013      	b.n	8000a4c <GP_TIMx_start+0x10c>
		case DOWN:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	f36f 1346 	bfc	r3, #5, #2
 8000a2c:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
			break;
 8000a38:	e008      	b.n	8000a4c <GP_TIMx_start+0x10c>
		case Up_Down:
			TIMx->CR1.BIT_NAME.CMS=0b11;
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	6813      	ldr	r3, [r2, #0]
 8000a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a42:	6013      	str	r3, [r2, #0]
			/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
			break;
 8000a44:	e002      	b.n	8000a4c <GP_TIMx_start+0x10c>
		default:
			GP_ERROR_HANDLER();
 8000a46:	f7ff fda5 	bl	8000594 <GP_ERROR_HANDLER>
			break;
 8000a4a:	bf00      	nop
		}
		MCAL_SET_GP_TIMx_GPIO(TIMx,NORMAL,0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fda3 	bl	800059c <MCAL_SET_GP_TIMx_GPIO>
		TIMx->CR1.BIT_NAME.CEN=1;
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	7a1b      	ldrb	r3, [r3, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d125      	bne.n	8000ab4 <GP_TIMx_start+0x174>
			TIMx->DIER.BIT_NAME.UIE=1;
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	68d3      	ldr	r3, [r2, #12]
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	60d3      	str	r3, [r2, #12]
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d106      	bne.n	8000a88 <GP_TIMx_start+0x148>
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6013      	str	r3, [r2, #0]
			TIMx->SR.BIT_NAME.UIF=0;
		}
	}else{
		GP_ERROR_HANDLER();
	}
}
 8000a86:	e025      	b.n	8000ad4 <GP_TIMx_start+0x194>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <GP_TIMx_start+0x1a8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <GP_TIMx_start+0x15e>
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	e01a      	b.n	8000ad4 <GP_TIMx_start+0x194>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <GP_TIMx_start+0x1ac>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d116      	bne.n	8000ad4 <GP_TIMx_start+0x194>
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <GP_TIMx_start+0x1b0>)
 8000aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ab0:	6013      	str	r3, [r2, #0]
}
 8000ab2:	e00f      	b.n	8000ad4 <GP_TIMx_start+0x194>
			while(!TIMx->SR.BIT_NAME.UIF);
 8000ab4:	bf00      	nop
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f8      	beq.n	8000ab6 <GP_TIMx_start+0x176>
			TIMx->SR.BIT_NAME.UIF=0;
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	6913      	ldr	r3, [r2, #16]
 8000ac8:	f36f 0300 	bfc	r3, #0, #1
 8000acc:	6113      	str	r3, [r2, #16]
}
 8000ace:	e001      	b.n	8000ad4 <GP_TIMx_start+0x194>
		GP_ERROR_HANDLER();
 8000ad0:	f7ff fd60 	bl	8000594 <GP_ERROR_HANDLER>
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	200000cc 	.word	0x200000cc
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	20000094 	.word	0x20000094
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40000800 	.word	0x40000800
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <GP_TIMx_Deint>:

void GP_TIMX_Clear(GP_TIMx_REG* TIMx){

	TIMx->CNT=0;
}
void GP_TIMx_Deint(GP_TIMx_REG* TIMx){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	if(TIMx== TIM2)			{RCC->APB1ENR|=(1<<0);			}
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b02:	d106      	bne.n	8000b12 <GP_TIMx_Deint+0x1e>
 8000b04:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	61d3      	str	r3, [r2, #28]
 8000b10:	e014      	b.n	8000b3c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM3)	{RCC->APB1ENR|=(1<<1);			}
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a38      	ldr	r2, [pc, #224]	; (8000bf8 <GP_TIMx_Deint+0x104>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d106      	bne.n	8000b28 <GP_TIMx_Deint+0x34>
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	e009      	b.n	8000b3c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM4)	{RCC->APB1ENR|=(1<<2);		}
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <GP_TIMx_Deint+0x108>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d105      	bne.n	8000b3c <GP_TIMx_Deint+0x48>
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	61d3      	str	r3, [r2, #28]

	TIMx->CR1.ALL_BITS=0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
	TIMx->ARR=0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER.ALL_BITS=0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
	TIMx->CCMR1.ALL_BITS=0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	TIMx->CCMR2.ALL_BITS=0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	TIMx->CCR1=0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2=0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3=0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4=0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CNT=0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR2.ALL_BITS=0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
	TIMx->PSC=0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8a:	d10c      	bne.n	8000ba6 <GP_TIMx_Deint+0xb2>
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6113      	str	r3, [r2, #16]
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6113      	str	r3, [r2, #16]
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}
 8000ba4:	e020      	b.n	8000be8 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <GP_TIMx_Deint+0x104>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10c      	bne.n	8000bc8 <GP_TIMx_Deint+0xd4>
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6113      	str	r3, [r2, #16]
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bc0:	f023 0302 	bic.w	r3, r3, #2
 8000bc4:	6113      	str	r3, [r2, #16]
}
 8000bc6:	e00f      	b.n	8000be8 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <GP_TIMx_Deint+0x108>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10b      	bne.n	8000be8 <GP_TIMx_Deint+0xf4>
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6113      	str	r3, [r2, #16]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <GP_TIMx_Deint+0x100>)
 8000be2:	f023 0304 	bic.w	r3, r3, #4
 8000be6:	6113      	str	r3, [r2, #16]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40000400 	.word	0x40000400
 8000bfc:	40000800 	.word	0x40000800

08000c00 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8000c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00b      	beq.n	8000c2e <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	7813      	ldrb	r3, [r2, #0]
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8000c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c24:	6913      	ldr	r3, [r2, #16]
 8000c26:	f36f 0300 	bfc	r3, #0, #1
 8000c2a:	6113      	str	r3, [r2, #16]
 8000c2c:	e04e      	b.n	8000ccc <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8000c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00b      	beq.n	8000c56 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7813      	ldrb	r3, [r2, #0]
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8000c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4c:	6913      	ldr	r3, [r2, #16]
 8000c4e:	f36f 0341 	bfc	r3, #1, #1
 8000c52:	6113      	str	r3, [r2, #16]
 8000c54:	e03a      	b.n	8000ccc <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8000c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00b      	beq.n	8000c7e <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	7813      	ldrb	r3, [r2, #0]
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c74:	6913      	ldr	r3, [r2, #16]
 8000c76:	f36f 0382 	bfc	r3, #2, #1
 8000c7a:	6113      	str	r3, [r2, #16]
 8000c7c:	e026      	b.n	8000ccc <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00b      	beq.n	8000ca6 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	6913      	ldr	r3, [r2, #16]
 8000c9e:	f36f 03c3 	bfc	r3, #3, #1
 8000ca2:	6113      	str	r3, [r2, #16]
 8000ca4:	e012      	b.n	8000ccc <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	7813      	ldrb	r3, [r2, #0]
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8000cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc4:	6913      	ldr	r3, [r2, #16]
 8000cc6:	f36f 1304 	bfc	r3, #4, #1
 8000cca:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <TIM2_IRQHandler+0xdc>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	4798      	blx	r3

}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000094 	.word	0x20000094

08000ce0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00a      	beq.n	8000d0a <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	7813      	ldrb	r3, [r2, #0]
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d00:	6913      	ldr	r3, [r2, #16]
 8000d02:	f36f 0300 	bfc	r3, #0, #1
 8000d06:	6113      	str	r3, [r2, #16]
 8000d08:	e046      	b.n	8000d98 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	7813      	ldrb	r3, [r2, #0]
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d24:	6913      	ldr	r3, [r2, #16]
 8000d26:	f36f 0341 	bfc	r3, #1, #1
 8000d2a:	6113      	str	r3, [r2, #16]
 8000d2c:	e034      	b.n	8000d98 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00a      	beq.n	8000d52 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	7813      	ldrb	r3, [r2, #0]
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d48:	6913      	ldr	r3, [r2, #16]
 8000d4a:	f36f 0382 	bfc	r3, #2, #1
 8000d4e:	6113      	str	r3, [r2, #16]
 8000d50:	e022      	b.n	8000d98 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00a      	beq.n	8000d76 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	7813      	ldrb	r3, [r2, #0]
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d6c:	6913      	ldr	r3, [r2, #16]
 8000d6e:	f36f 03c3 	bfc	r3, #3, #1
 8000d72:	6113      	str	r3, [r2, #16]
 8000d74:	e010      	b.n	8000d98 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d009      	beq.n	8000d98 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7813      	ldrb	r3, [r2, #0]
 8000d88:	f043 0310 	orr.w	r3, r3, #16
 8000d8c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <TIM3_IRQHandler+0xc8>)
 8000d90:	6913      	ldr	r3, [r2, #16]
 8000d92:	f36f 1304 	bfc	r3, #4, #1
 8000d96:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <TIM3_IRQHandler+0xcc>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40000400 	.word	0x40000400
 8000dac:	20000094 	.word	0x20000094

08000db0 <TIM4_IRQHandler>:
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00a      	beq.n	8000dda <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	7813      	ldrb	r3, [r2, #0]
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000dd0:	6913      	ldr	r3, [r2, #16]
 8000dd2:	f36f 0300 	bfc	r3, #0, #1
 8000dd6:	6113      	str	r3, [r2, #16]
 8000dd8:	e04b      	b.n	8000e72 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00a      	beq.n	8000dfe <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	7813      	ldrb	r3, [r2, #0]
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8000df2:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000df4:	6913      	ldr	r3, [r2, #16]
 8000df6:	f36f 0341 	bfc	r3, #1, #1
 8000dfa:	6113      	str	r3, [r2, #16]
 8000dfc:	e039      	b.n	8000e72 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00f      	beq.n	8000e2c <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	7813      	ldrb	r3, [r2, #0]
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e18:	6913      	ldr	r3, [r2, #16]
 8000e1a:	f36f 0382 	bfc	r3, #2, #1
 8000e1e:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	7813      	ldrb	r3, [r2, #0]
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	7013      	strb	r3, [r2, #0]
 8000e2a:	e022      	b.n	8000e72 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00a      	beq.n	8000e50 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	7813      	ldrb	r3, [r2, #0]
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e46:	6913      	ldr	r3, [r2, #16]
 8000e48:	f36f 03c3 	bfc	r3, #3, #1
 8000e4c:	6113      	str	r3, [r2, #16]
 8000e4e:	e010      	b.n	8000e72 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	7813      	ldrb	r3, [r2, #0]
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <TIM4_IRQHandler+0xd4>)
 8000e6a:	6913      	ldr	r3, [r2, #16]
 8000e6c:	f36f 1304 	bfc	r3, #4, #1
 8000e70:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <TIM4_IRQHandler+0xd8>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	4798      	blx	r3


}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40000800 	.word	0x40000800
 8000e88:	20000094 	.word	0x20000094

08000e8c <_delay_us>:


void _delay_us(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
	uint16_t PRE_scal=(F_CPU/1000000UL);
 8000e98:	2308      	movs	r3, #8
 8000e9a:	83fb      	strh	r3, [r7, #30]
	if(PRE_scal!=1) PRE_scal--; //The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
 8000e9c:	8bfb      	ldrh	r3, [r7, #30]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d002      	beq.n	8000ea8 <_delay_us+0x1c>
 8000ea2:	8bfb      	ldrh	r3, [r7, #30]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	83fb      	strh	r3, [r7, #30]
	GP_TIMERx_config l_t_delay={PRE_scal,delay,0,0,INT_DIS,NORMAL,NULL};
 8000ea8:	8bfb      	ldrh	r3, [r7, #30]
 8000eaa:	81bb      	strh	r3, [r7, #12]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	823b      	strh	r3, [r7, #16]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	827b      	strh	r3, [r7, #18]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	753b      	strb	r3, [r7, #20]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	757b      	strb	r3, [r7, #21]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
	GP_TIMERx_NORMAL_config NORMAL_SIT={Up};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	723b      	strb	r3, [r7, #8]
	GP_TIMx_start(TIMx,&l_t_delay,&NORMAL_SIT);
 8000ec8:	f107 0208 	add.w	r2, r7, #8
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fd34 	bl	8000940 <GP_TIMx_start>

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_delay_ms>:


void _delay_ms(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e007      	b.n	8000f02 <_delay_ms+0x22>
		_delay_us(TIMx,1000);
 8000ef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffc8 	bl	8000e8c <_delay_us>
	for(uint32_t i=0;i<delay;i++)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3f3      	bcc.n	8000ef2 <_delay_ms+0x12>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_delay_s>:
void _delay_s(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e007      	b.n	8000f34 <_delay_s+0x22>
		_delay_ms(TIMx,1000);
 8000f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffd9 	bl	8000ee0 <_delay_ms>
	for(uint32_t i=0;i<delay;i++)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f3      	bcc.n	8000f24 <_delay_s+0x12>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MCAL_GET_SYS_CLCK+0x30>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d006      	beq.n	8000f64 <MCAL_GET_SYS_CLCK+0x20>
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d302      	bcc.n	8000f60 <MCAL_GET_SYS_CLCK+0x1c>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d004      	beq.n	8000f68 <MCAL_GET_SYS_CLCK+0x24>
 8000f5e:	e005      	b.n	8000f6c <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <MCAL_GET_SYS_CLCK+0x34>)
 8000f62:	e003      	b.n	8000f6c <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MCAL_GET_SYS_CLCK+0x38>)
 8000f66:	e001      	b.n	8000f6c <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <MCAL_GET_SYS_CLCK+0x38>)
 8000f6a:	e7ff      	b.n	8000f6c <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	007a1200 	.word	0x007a1200
 8000f7c:	00f42400 	.word	0x00f42400

08000f80 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000f84:	f7ff ffde 	bl	8000f44 <MCAL_GET_SYS_CLCK>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <MCAL_GET_H_CLCK+0x20>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <MCAL_GET_H_CLCK+0x24>)
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8000fac:	f7ff ffe8 	bl	8000f80 <MCAL_GET_H_CLCK>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MCAL_GET_PCLCK1+0x20>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <MCAL_GET_PCLCK1+0x24>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8000fd4:	f7ff ffd4 	bl	8000f80 <MCAL_GET_H_CLCK>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <MCAL_GET_PCLCK2+0x20>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	0adb      	lsrs	r3, r3, #11
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <MCAL_GET_PCLCK2+0x24>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000fec:	4618      	mov	r0, r3
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4905      	ldr	r1, [pc, #20]	; (8001018 <SPI1_IRQHandler+0x20>)
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f80c 	bl	8001020 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SPI1_IRQHandler+0x24>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	7938      	ldrb	r0, [r7, #4]
 800100e:	4798      	blx	r3
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013000 	.word	0x40013000
 800101c:	20000030 	.word	0x20000030

08001020 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00f      	beq.n	8001058 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	7813      	ldrb	r3, [r2, #0]
 800103c:	f36f 0300 	bfc	r3, #0, #1
 8001040:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	7813      	ldrb	r3, [r2, #0]
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	7913      	ldrb	r3, [r2, #4]
 8001050:	f36f 1386 	bfc	r3, #6, #1
 8001054:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8001056:	e015      	b.n	8001084 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00e      	beq.n	8001084 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	7813      	ldrb	r3, [r2, #0]
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f36f 0341 	bfc	r3, #1, #1
 8001078:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	7913      	ldrb	r3, [r2, #4]
 800107e:	f36f 13c7 	bfc	r3, #7, #1
 8001082:	7113      	strb	r3, [r2, #4]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <ERROR_HANDLER>:


#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;
void ERROR_HANDLER(){
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
	while(1);
 8001092:	e7fe      	b.n	8001092 <ERROR_HANDLER+0x4>

08001094 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <TIM1_UP_IRQHandler+0x1c>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <TIM1_UP_IRQHandler+0x20>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	6913      	ldr	r3, [r2, #16]
 80010a4:	f36f 0300 	bfc	r3, #0, #1
 80010a8:	6113      	str	r3, [r2, #16]

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000d0 	.word	0x200000d0
 80010b4:	200000e0 	.word	0x200000e0

080010b8 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <TIM1_CC_IRQHandler+0x1c>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <TIM1_CC_IRQHandler+0x20>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	6913      	ldr	r3, [r2, #16]
 80010c8:	f36f 0341 	bfc	r3, #1, #1
 80010cc:	6113      	str	r3, [r2, #16]

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000d0 	.word	0x200000d0
 80010d8:	200000e0 	.word	0x200000e0

080010dc <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <TIM1_BRK_IRQHandler+0x1c>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <TIM1_BRK_IRQHandler+0x20>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	6913      	ldr	r3, [r2, #16]
 80010ec:	f36f 0300 	bfc	r3, #0, #1
 80010f0:	6113      	str	r3, [r2, #16]

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000d0 	.word	0x200000d0
 80010fc:	200000e0 	.word	0x200000e0

08001100 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <TIM1_TRG_COM_IRQHandler+0x1c>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <TIM1_TRG_COM_IRQHandler+0x20>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	6913      	ldr	r3, [r2, #16]
 8001110:	f36f 0300 	bfc	r3, #0, #1
 8001114:	6113      	str	r3, [r2, #16]

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000d0 	.word	0x200000d0
 8001120:	200000e0 	.word	0x200000e0

08001124 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4aa9      	ldr	r2, [pc, #676]	; (80013d8 <MCAL_USART_init+0x2b4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10c      	bne.n	8001150 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8001136:	4aa9      	ldr	r2, [pc, #676]	; (80013dc <MCAL_USART_init+0x2b8>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4614      	mov	r4, r2
 800113c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8001142:	4ba7      	ldr	r3, [pc, #668]	; (80013e0 <MCAL_USART_init+0x2bc>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4aa6      	ldr	r2, [pc, #664]	; (80013e0 <MCAL_USART_init+0x2bc>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	e024      	b.n	800119a <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4aa4      	ldr	r2, [pc, #656]	; (80013e4 <MCAL_USART_init+0x2c0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d10e      	bne.n	8001176 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8001158:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <MCAL_USART_init+0x2b8>)
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	f103 0410 	add.w	r4, r3, #16
 8001160:	4613      	mov	r3, r2
 8001162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8001168:	4b9d      	ldr	r3, [pc, #628]	; (80013e0 <MCAL_USART_init+0x2bc>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	4a9c      	ldr	r2, [pc, #624]	; (80013e0 <MCAL_USART_init+0x2bc>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001172:	61d3      	str	r3, [r2, #28]
 8001174:	e011      	b.n	800119a <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a9b      	ldr	r2, [pc, #620]	; (80013e8 <MCAL_USART_init+0x2c4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10d      	bne.n	800119a <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 800117e:	4b97      	ldr	r3, [pc, #604]	; (80013dc <MCAL_USART_init+0x2b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	f103 0420 	add.w	r4, r3, #32
 8001186:	4613      	mov	r3, r2
 8001188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 800118e:	4b94      	ldr	r3, [pc, #592]	; (80013e0 <MCAL_USART_init+0x2bc>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a93      	ldr	r2, [pc, #588]	; (80013e0 <MCAL_USART_init+0x2bc>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	7912      	ldrb	r2, [r2, #4]
 80011ae:	0312      	lsls	r2, r2, #12
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	79d2      	ldrb	r2, [r2, #7]
 80011be:	0312      	lsls	r2, r2, #12
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	7a5b      	ldrb	r3, [r3, #9]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10b      	bne.n	80011e6 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f043 0208 	orr.w	r2, r3, #8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f043 0204 	orr.w	r2, r3, #4
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d826      	bhi.n	800123c <MCAL_USART_init+0x118>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <MCAL_USART_init+0xd0>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001213 	.word	0x08001213
 80011fc:	08001221 	.word	0x08001221
 8001200:	0800122f 	.word	0x0800122f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	615a      	str	r2, [r3, #20]
		break;
 8001210:	e014      	b.n	800123c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	615a      	str	r2, [r3, #20]
		break;
 800121e:	e00d      	b.n	800123c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	615a      	str	r2, [r3, #20]
		break;
 800122c:	e006      	b.n	800123c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	615a      	str	r2, [r3, #20]
		break;
 800123a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	7952      	ldrb	r2, [r2, #5]
 8001244:	0252      	lsls	r2, r2, #9
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	799b      	ldrb	r3, [r3, #6]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d125      	bne.n	80012a0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a60      	ldr	r2, [pc, #384]	; (80013d8 <MCAL_USART_init+0x2b4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d106      	bne.n	800126a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <MCAL_USART_init+0x2c8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a62      	ldr	r2, [pc, #392]	; (80013ec <MCAL_USART_init+0x2c8>)
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e014      	b.n	8001294 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <MCAL_USART_init+0x2c0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d106      	bne.n	8001280 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8001272:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <MCAL_USART_init+0x2c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <MCAL_USART_init+0x2c8>)
 8001278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e009      	b.n	8001294 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a59      	ldr	r2, [pc, #356]	; (80013e8 <MCAL_USART_init+0x2c4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d105      	bne.n	8001294 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <MCAL_USART_init+0x2c8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a57      	ldr	r2, [pc, #348]	; (80013ec <MCAL_USART_init+0x2c8>)
 800128e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001292:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f043 0220 	orr.w	r2, r3, #32
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <MCAL_USART_init+0x2b4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d12d      	bne.n	8001304 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80012a8:	f7ff fe92 	bl	8000fd0 <MCAL_GET_PCLCK2>
 80012ac:	4602      	mov	r2, r0
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	011c      	lsls	r4, r3, #4
 80012ba:	f7ff fe89 	bl	8000fd0 <MCAL_GET_PCLCK2>
 80012be:	4602      	mov	r2, r0
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009a      	lsls	r2, r3, #2
 80012c8:	441a      	add	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80012d4:	f7ff fe7c 	bl	8000fd0 <MCAL_GET_PCLCK2>
 80012d8:	4602      	mov	r2, r0
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	1aeb      	subs	r3, r5, r3
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <MCAL_USART_init+0x2cc>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	095b      	lsrs	r3, r3, #5
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	ea44 0203 	orr.w	r2, r4, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	e062      	b.n	80013ca <MCAL_USART_init+0x2a6>
			}else if(USARTx==USART2){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <MCAL_USART_init+0x2c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d12d      	bne.n	8001368 <MCAL_USART_init+0x244>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800130c:	f7ff fe4c 	bl	8000fa8 <MCAL_GET_PCLCK1>
 8001310:	4602      	mov	r2, r0
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	011c      	lsls	r4, r3, #4
 800131e:	f7ff fe43 	bl	8000fa8 <MCAL_GET_PCLCK1>
 8001322:	4602      	mov	r2, r0
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009a      	lsls	r2, r3, #2
 800132c:	441a      	add	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fbb2 f5f3 	udiv	r5, r2, r3
 8001338:	f7ff fe36 	bl	8000fa8 <MCAL_GET_PCLCK1>
 800133c:	4602      	mov	r2, r0
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	2264      	movs	r2, #100	; 0x64
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	1aeb      	subs	r3, r5, r3
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <MCAL_USART_init+0x2cc>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	ea44 0203 	orr.w	r2, r4, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	e030      	b.n	80013ca <MCAL_USART_init+0x2a6>

		}else if(USARTx==USART3){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <MCAL_USART_init+0x2c4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12c      	bne.n	80013ca <MCAL_USART_init+0x2a6>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001370:	f7ff fe1a 	bl	8000fa8 <MCAL_GET_PCLCK1>
 8001374:	4602      	mov	r2, r0
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	011c      	lsls	r4, r3, #4
 8001382:	f7ff fe11 	bl	8000fa8 <MCAL_GET_PCLCK1>
 8001386:	4602      	mov	r2, r0
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009a      	lsls	r2, r3, #2
 8001390:	441a      	add	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fbb2 f5f3 	udiv	r5, r2, r3
 800139c:	f7ff fe04 	bl	8000fa8 <MCAL_GET_PCLCK1>
 80013a0:	4602      	mov	r2, r0
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	2264      	movs	r2, #100	; 0x64
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	1aeb      	subs	r3, r5, r3
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <MCAL_USART_init+0x2cc>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	095b      	lsrs	r3, r3, #5
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	ea44 0203 	orr.w	r2, r4, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f89c 	bl	8001508 <SET_GPIO>
	}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	40013800 	.word	0x40013800
 80013dc:	200000e4 	.word	0x200000e4
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40004800 	.word	0x40004800
 80013ec:	e000e104 	.word	0xe000e104
 80013f0:	51eb851f 	.word	0x51eb851f

080013f4 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <MCAL_USART_SendData+0x68>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d102      	bne.n	8001412 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MCAL_USART_SendData+0x6c>)
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e00c      	b.n	800142c <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a13      	ldr	r2, [pc, #76]	; (8001464 <MCAL_USART_SendData+0x70>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d102      	bne.n	8001420 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MCAL_USART_SendData+0x74>)
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e005      	b.n	800142c <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MCAL_USART_SendData+0x78>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MCAL_USART_SendData+0x7c>)
 800142a:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 800142c:	bf00      	nop
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f9      	beq.n	800142e <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d103      	bne.n	800144a <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8001448:	e002      	b.n	8001450 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40013800 	.word	0x40013800
 8001460:	200000e4 	.word	0x200000e4
 8001464:	40004400 	.word	0x40004400
 8001468:	200000f4 	.word	0x200000f4
 800146c:	40004800 	.word	0x40004800
 8001470:	20000104 	.word	0x20000104

08001474 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MCAL_USART_ReciveData+0x7c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MCAL_USART_ReciveData+0x80>)
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e00c      	b.n	80014a8 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <MCAL_USART_ReciveData+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d102      	bne.n	800149c <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MCAL_USART_ReciveData+0x88>)
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e005      	b.n	80014a8 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <MCAL_USART_ReciveData+0x8c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MCAL_USART_ReciveData+0x90>)
 80014a6:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	799b      	ldrb	r3, [r3, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80014b0:	bf00      	nop
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f9      	beq.n	80014b2 <MCAL_USART_ReciveData+0x3e>
 80014be:	e002      	b.n	80014c6 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	799b      	ldrb	r3, [r3, #6]
 80014c4:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d104      	bne.n	80014d8 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	e006      	b.n	80014e6 <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e4:	b29b      	uxth	r3, r3

		}

}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40013800 	.word	0x40013800
 80014f4:	200000e4 	.word	0x200000e4
 80014f8:	40004400 	.word	0x40004400
 80014fc:	200000f4 	.word	0x200000f4
 8001500:	40004800 	.word	0x40004800
 8001504:	20000104 	.word	0x20000104

08001508 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <SET_GPIO+0xbc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <SET_GPIO+0xc0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d115      	bne.n	800154a <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <SET_GPIO+0xc4>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <SET_GPIO+0xc4>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <SET_GPIO+0xc8>)
 8001532:	f7fe ff47 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <SET_GPIO+0xcc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <SET_GPIO+0xc8>)
 8001544:	f7fe ff3e 	bl	80003c4 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8001548:	e038      	b.n	80015bc <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <SET_GPIO+0xd0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d118      	bne.n	8001584 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <SET_GPIO+0xc4>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <SET_GPIO+0xc4>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <SET_GPIO+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	4819      	ldr	r0, [pc, #100]	; (80015d0 <SET_GPIO+0xc8>)
 800156c:	f7fe ff2a 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <SET_GPIO+0xd8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4814      	ldr	r0, [pc, #80]	; (80015d0 <SET_GPIO+0xc8>)
 800157e:	f7fe ff21 	bl	80003c4 <MCAL_GPIO_init>
}
 8001582:	e01b      	b.n	80015bc <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <SET_GPIO+0xdc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d117      	bne.n	80015bc <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <SET_GPIO+0xc4>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <SET_GPIO+0xc4>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <SET_GPIO+0xe0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <SET_GPIO+0xe4>)
 80015a6:	f7fe ff0d 	bl	80003c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SET_GPIO+0xe8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <SET_GPIO+0xe4>)
 80015b8:	f7fe ff04 	bl	80003c4 <MCAL_GPIO_init>
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	08001834 	.word	0x08001834
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800
 80015d4:	08001838 	.word	0x08001838
 80015d8:	40004400 	.word	0x40004400
 80015dc:	0800183c 	.word	0x0800183c
 80015e0:	08001840 	.word	0x08001840
 80015e4:	40004800 	.word	0x40004800
 80015e8:	08001844 	.word	0x08001844
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	08001848 	.word	0x08001848

080015f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <USART1_IRQHandler+0x10>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4798      	blx	r3
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000e4 	.word	0x200000e4

08001608 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000e4 	.word	0x200000e4

0800161c <USART3_IRQHandler>:
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <USART3_IRQHandler+0x10>)
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	4798      	blx	r3
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000e4 	.word	0x200000e4

08001630 <call_Back>:
uint8_t temp2=0;

uint8_t i=0;
uint8_t GR_TSR_FLAG_START=0xFF;

void call_Back(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	if(	USART1->SR &(1<<5)){
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <call_Back+0x94>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <call_Back+0x2c>
		GR_TSR_FLAG_rec=	MCAL_USART_ReciveData(USART1);
 8001640:	4820      	ldr	r0, [pc, #128]	; (80016c4 <call_Back+0x94>)
 8001642:	f7ff ff17 	bl	8001474 <MCAL_USART_ReciveData>
 8001646:	4603      	mov	r3, r0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <call_Back+0x98>)
 800164c:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_rec &=0x0F;
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <call_Back+0x98>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <call_Back+0x98>)
 800165a:	701a      	strb	r2, [r3, #0]

	}
	if(i<2)
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <call_Back+0x9c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d81f      	bhi.n	80016a4 <call_Back+0x74>
	{
//		MCAL_USART_SendData(USART1,GR_TSR_FLAG_rec);
		GR_TSR_FLAG_OLED= (GR_TSR_FLAG_OLED<<4) | (GR_TSR_FLAG_rec);
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <call_Back+0xa0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	b25a      	sxtb	r2, r3
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <call_Back+0x98>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <call_Back+0xa0>)
 800167a:	701a      	strb	r2, [r3, #0]
		temp = ((GR_TSR_FLAG_OLED >>4) |((GR_TSR_FLAG_OLED <<4)));
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <call_Back+0xa0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b25a      	sxtb	r2, r3
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <call_Back+0xa0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <call_Back+0xa4>)
 8001696:	701a      	strb	r2, [r3, #0]
		i++;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <call_Back+0x9c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <call_Back+0x9c>)
 80016a2:	701a      	strb	r2, [r3, #0]

	}

	if(i>=2){
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <call_Back+0x9c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d909      	bls.n	80016c0 <call_Back+0x90>
		i=0;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <call_Back+0x9c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED_send=(temp);
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <call_Back+0xa4>)
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <call_Back+0xa8>)
 80016b8:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED=0;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <call_Back+0xa0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
	}

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013800 	.word	0x40013800
 80016c8:	20000050 	.word	0x20000050
 80016cc:	20000054 	.word	0x20000054
 80016d0:	20000051 	.word	0x20000051
 80016d4:	20000053 	.word	0x20000053
 80016d8:	20000052 	.word	0x20000052

080016dc <TSR_START>:
void TSR_START(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	MCAL_USART_SendData(USART1, GR_TSR_FLAG_START);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <TSR_START+0x14>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <TSR_START+0x18>)
 80016e8:	f7ff fe84 	bl	80013f4 <MCAL_USART_SendData>

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000011 	.word	0x20000011
 80016f4:	40013800 	.word	0x40013800

080016f8 <main>:
int main(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,call_Back};
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <main+0x3c>)
 8001700:	463c      	mov	r4, r7
 8001702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(USART1, &UART1_CON);
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <main+0x40>)
 800170e:	f7ff fd09 	bl	8001124 <MCAL_USART_init>
	/* Loop forever */
	GR_TSR_FLAG_START=0x01;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <main+0x44>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]

	for(;;){
		TSR_START();
 8001718:	f7ff ffe0 	bl	80016dc <TSR_START>

			MCAL_USART_SendData(USART1,GR_TSR_FLAG_OLED_send);
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <main+0x48>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <main+0x40>)
 8001724:	f7ff fe66 	bl	80013f4 <MCAL_USART_SendData>

			_delay_s(TIM2, 1);
 8001728:	2101      	movs	r1, #1
 800172a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800172e:	f7ff fbf0 	bl	8000f12 <_delay_s>
		TSR_START();
 8001732:	e7f1      	b.n	8001718 <main+0x20>
 8001734:	0800184c 	.word	0x0800184c
 8001738:	40013800 	.word	0x40013800
 800173c:	20000011 	.word	0x20000011
 8001740:	20000052 	.word	0x20000052

08001744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001746:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001772:	f000 f811 	bl	8001798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff ffbf 	bl	80016f8 <main>

0800177a <LoopForever>:

LoopForever:
  b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   r0, =_estack
 800177c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001788:	08001864 	.word	0x08001864
  ldr r2, =_sbss
 800178c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001790:	20000114 	.word	0x20000114

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <__libc_init_array>:
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	2500      	movs	r5, #0
 800179c:	4e0c      	ldr	r6, [pc, #48]	; (80017d0 <__libc_init_array+0x38>)
 800179e:	4c0d      	ldr	r4, [pc, #52]	; (80017d4 <__libc_init_array+0x3c>)
 80017a0:	1ba4      	subs	r4, r4, r6
 80017a2:	10a4      	asrs	r4, r4, #2
 80017a4:	42a5      	cmp	r5, r4
 80017a6:	d109      	bne.n	80017bc <__libc_init_array+0x24>
 80017a8:	f000 f81a 	bl	80017e0 <_init>
 80017ac:	2500      	movs	r5, #0
 80017ae:	4e0a      	ldr	r6, [pc, #40]	; (80017d8 <__libc_init_array+0x40>)
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <__libc_init_array+0x44>)
 80017b2:	1ba4      	subs	r4, r4, r6
 80017b4:	10a4      	asrs	r4, r4, #2
 80017b6:	42a5      	cmp	r5, r4
 80017b8:	d105      	bne.n	80017c6 <__libc_init_array+0x2e>
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
 80017bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017c0:	4798      	blx	r3
 80017c2:	3501      	adds	r5, #1
 80017c4:	e7ee      	b.n	80017a4 <__libc_init_array+0xc>
 80017c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ca:	4798      	blx	r3
 80017cc:	3501      	adds	r5, #1
 80017ce:	e7f2      	b.n	80017b6 <__libc_init_array+0x1e>
 80017d0:	0800185c 	.word	0x0800185c
 80017d4:	0800185c 	.word	0x0800185c
 80017d8:	0800185c 	.word	0x0800185c
 80017dc:	08001860 	.word	0x08001860

080017e0 <_init>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	bf00      	nop
 80017e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e6:	bc08      	pop	{r3}
 80017e8:	469e      	mov	lr, r3
 80017ea:	4770      	bx	lr

080017ec <_fini>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr
