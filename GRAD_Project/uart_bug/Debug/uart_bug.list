
uart_bug.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001668  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017fc  080017fc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080017fc  080017fc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017fc  080017fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000018  0800181c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800181c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006877  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000eb0  00000000  00000000  000268fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001384  00000000  00000000  000277ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000310  00000000  00000000  00028b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000288  00000000  00000000  00028e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000854  00000000  00000000  000290c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003f25  00000000  00000000  0002991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006d3f  00000000  00000000  0002d841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a2c  00000000  00000000  00034580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001780 	.word	0x08001780

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001780 	.word	0x08001780

08000170 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]
	}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000034 	.word	0x20000034
 8000190:	40010400 	.word	0x40010400

08000194 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	695b      	ldr	r3, [r3, #20]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6153      	str	r3, [r2, #20]

	}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000034 	.word	0x20000034
 80001b4:	40010400 	.word	0x40010400

080001b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	695b      	ldr	r3, [r3, #20]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6153      	str	r3, [r2, #20]

	}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000034 	.word	0x20000034
 80001d8:	40010400 	.word	0x40010400

080001dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6153      	str	r3, [r2, #20]

	}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000034 	.word	0x20000034
 80001fc:	40010400 	.word	0x40010400

08000200 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6153      	str	r3, [r2, #20]

	}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000034 	.word	0x20000034
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000034 	.word	0x20000034

080002cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000034 	.word	0x20000034

08000390 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d803      	bhi.n	80003a8 <Get_PIN_Positon+0x18>
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	e004      	b.n	80003b2 <Get_PIN_Positon+0x22>
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	3b08      	subs	r3, #8
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	81fb      	strh	r3, [r7, #14]
return positon;
 80003b4:	89fb      	ldrh	r3, [r7, #14]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a6b      	ldr	r2, [pc, #428]	; (800057c <MCAL_GPIO_init+0x1bc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <MCAL_GPIO_init+0x20>
 80003d2:	4b6b      	ldr	r3, [pc, #428]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a6a      	ldr	r2, [pc, #424]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	e02a      	b.n	8000436 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a68      	ldr	r2, [pc, #416]	; (8000584 <MCAL_GPIO_init+0x1c4>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <MCAL_GPIO_init+0x36>
 80003e8:	4b65      	ldr	r3, [pc, #404]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a64      	ldr	r2, [pc, #400]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	e01f      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a63      	ldr	r2, [pc, #396]	; (8000588 <MCAL_GPIO_init+0x1c8>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <MCAL_GPIO_init+0x4c>
 80003fe:	4b60      	ldr	r3, [pc, #384]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a5f      	ldr	r2, [pc, #380]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	e014      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a5f      	ldr	r2, [pc, #380]	; (800058c <MCAL_GPIO_init+0x1cc>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <MCAL_GPIO_init+0x62>
 8000414:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a59      	ldr	r2, [pc, #356]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	e009      	b.n	8000436 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a5a      	ldr	r2, [pc, #360]	; (8000590 <MCAL_GPIO_init+0x1d0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d105      	bne.n	8000436 <MCAL_GPIO_init+0x76>
 800042a:	4b55      	ldr	r3, [pc, #340]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a54      	ldr	r2, [pc, #336]	; (8000580 <MCAL_GPIO_init+0x1c0>)
 8000430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000434:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	b29b      	uxth	r3, r3
 800043c:	2b07      	cmp	r3, #7
 800043e:	d801      	bhi.n	8000444 <MCAL_GPIO_init+0x84>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	e001      	b.n	8000448 <MCAL_GPIO_init+0x88>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3304      	adds	r3, #4
 8000448:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff9d 	bl	8000390 <Get_PIN_Positon>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	230f      	movs	r3, #15
 800045c:	4093      	lsls	r3, r2
 800045e:	43da      	mvns	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	401a      	ands	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	789b      	ldrb	r3, [r3, #2]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00e      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b01      	cmp	r3, #1
 800047c:	d009      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	2b02      	cmp	r3, #2
 8000486:	d004      	beq.n	8000492 <MCAL_GPIO_init+0xd2>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b03      	cmp	r3, #3
 8000490:	d156      	bne.n	8000540 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	789b      	ldrb	r3, [r3, #2]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b03      	cmp	r3, #3
 800049a:	d11c      	bne.n	80004d6 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff74 	bl	8000390 <Get_PIN_Positon>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	2308      	movs	r3, #8
 80004ae:	fa03 f202 	lsl.w	r2, r3, r2
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	431a      	orrs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	2301      	movs	r3, #1
 80004c6:	4093      	lsls	r3, r2
 80004c8:	43da      	mvns	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80004d4:	e04d      	b.n	8000572 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d11c      	bne.n	800051a <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff52 	bl	8000390 <Get_PIN_Positon>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	2308      	movs	r3, #8
 80004f2:	fa03 f202 	lsl.w	r2, r3, r2
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	431a      	orrs	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2301      	movs	r3, #1
 800050a:	fa03 f202 	lsl.w	r2, r3, r2
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000518:	e02b      	b.n	8000572 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	009c      	lsls	r4, r3, #2
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Get_PIN_Positon>
 800052e:	4603      	mov	r3, r0
 8000530:	fa04 f203 	lsl.w	r2, r4, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	431a      	orrs	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 800053e:	e018      	b.n	8000572 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3b04      	subs	r3, #4
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	78d2      	ldrb	r2, [r2, #3]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	ea43 0402 	orr.w	r4, r3, r2
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff18 	bl	8000390 <Get_PIN_Positon>
 8000560:	4603      	mov	r3, r0
 8000562:	fa04 f203 	lsl.w	r2, r4, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	431a      	orrs	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]

	}

}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	40010800 	.word	0x40010800
 8000580:	40021000 	.word	0x40021000
 8000584:	40010c00 	.word	0x40010c00
 8000588:	40011000 	.word	0x40011000
 800058c:	40011400 	.word	0x40011400
 8000590:	40011800 	.word	0x40011800

08000594 <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	while(1);
 8000598:	e7fe      	b.n	8000598 <GP_ERROR_HANDLER+0x4>
	...

0800059c <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 800059c:	b580      	push	{r7, lr}
 800059e:	b09c      	sub	sp, #112	; 0x70
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
 80005a8:	4613      	mov	r3, r2
 80005aa:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b2:	f040 8089 	bne.w	80006c8 <MCAL_SET_GP_TIMx_GPIO+0x12c>
		switch (MODE) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d043      	beq.n	8000644 <MCAL_SET_GP_TIMx_GPIO+0xa8>
 80005bc:	2b02      	cmp	r3, #2
 80005be:	f300 81bb 	bgt.w	8000938 <MCAL_SET_GP_TIMx_GPIO+0x39c>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f000 81ba 	beq.w	800093c <MCAL_SET_GP_TIMx_GPIO+0x3a0>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d000      	beq.n	80005ce <MCAL_SET_GP_TIMx_GPIO+0x32>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80005cc:	e1b4      	b.n	8000938 <MCAL_SET_GP_TIMx_GPIO+0x39c>
			switch(CHx){
 80005ce:	78bb      	ldrb	r3, [r7, #2]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d832      	bhi.n	800063c <MCAL_SET_GP_TIMx_GPIO+0xa0>
 80005d6:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <MCAL_SET_GP_TIMx_GPIO+0x40>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080005ed 	.word	0x080005ed
 80005e0:	08000601 	.word	0x08000601
 80005e4:	08000615 	.word	0x08000615
 80005e8:	08000629 	.word	0x08000629
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 80005ec:	4bb0      	ldr	r3, [pc, #704]	; (80008b0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 80005f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005f6:	4619      	mov	r1, r3
 80005f8:	48ae      	ldr	r0, [pc, #696]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80005fa:	f7ff fee1 	bl	80003c0 <MCAL_GPIO_init>
				break;
 80005fe:	e020      	b.n	8000642 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8000600:	4bad      	ldr	r3, [pc, #692]	; (80008b8 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000606:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800060a:	4619      	mov	r1, r3
 800060c:	48a9      	ldr	r0, [pc, #676]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800060e:	f7ff fed7 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000612:	e016      	b.n	8000642 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 8000614:	4ba9      	ldr	r3, [pc, #676]	; (80008bc <MCAL_SET_GP_TIMx_GPIO+0x320>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800061a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800061e:	4619      	mov	r1, r3
 8000620:	48a4      	ldr	r0, [pc, #656]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000622:	f7ff fecd 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000626:	e00c      	b.n	8000642 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8000628:	4ba5      	ldr	r3, [pc, #660]	; (80008c0 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800062e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000632:	4619      	mov	r1, r3
 8000634:	489f      	ldr	r0, [pc, #636]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000636:	f7ff fec3 	bl	80003c0 <MCAL_GPIO_init>
				break;
 800063a:	e002      	b.n	8000642 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				ERROR_HANDLER();
 800063c:	f000 fd43 	bl	80010c6 <ERROR_HANDLER>
			break;
 8000640:	e185      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000642:	e184      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	3b01      	subs	r3, #1
 8000648:	2b03      	cmp	r3, #3
 800064a:	d839      	bhi.n	80006c0 <MCAL_SET_GP_TIMx_GPIO+0x124>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <MCAL_SET_GP_TIMx_GPIO+0xb8>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000665 	.word	0x08000665
 8000658:	08000685 	.word	0x08000685
 800065c:	08000699 	.word	0x08000699
 8000660:	080006ad 	.word	0x080006ad
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8000664:	2300      	movs	r3, #0
 8000666:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800066a:	2301      	movs	r3, #1
 800066c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000670:	2300      	movs	r3, #0
 8000672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOA, &pin);
 8000676:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800067a:	4619      	mov	r1, r3
 800067c:	488d      	ldr	r0, [pc, #564]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800067e:	f7ff fe9f 	bl	80003c0 <MCAL_GPIO_init>
					break;
 8000682:	e020      	b.n	80006c6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8000684:	4b8f      	ldr	r3, [pc, #572]	; (80008c4 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 800068a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800068e:	4619      	mov	r1, r3
 8000690:	4888      	ldr	r0, [pc, #544]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000692:	f7ff fe95 	bl	80003c0 <MCAL_GPIO_init>
					break;
 8000696:	e016      	b.n	80006c6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 8000698:	4b8b      	ldr	r3, [pc, #556]	; (80008c8 <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 800069e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006a2:	4619      	mov	r1, r3
 80006a4:	4883      	ldr	r0, [pc, #524]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80006a6:	f7ff fe8b 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80006aa:	e00c      	b.n	80006c6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 80006ac:	4b87      	ldr	r3, [pc, #540]	; (80008cc <MCAL_SET_GP_TIMx_GPIO+0x330>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80006b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006b6:	4619      	mov	r1, r3
 80006b8:	487e      	ldr	r0, [pc, #504]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80006ba:	f7ff fe81 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80006be:	e002      	b.n	80006c6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					ERROR_HANDLER();
 80006c0:	f000 fd01 	bl	80010c6 <ERROR_HANDLER>
				break;
 80006c4:	e143      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80006c6:	e142      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}

	}else if(TIMx ==TIM3){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a81      	ldr	r2, [pc, #516]	; (80008d0 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	f040 8089 	bne.w	80007e4 <MCAL_SET_GP_TIMx_GPIO+0x248>
		switch (MODE) {
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d043      	beq.n	8000760 <MCAL_SET_GP_TIMx_GPIO+0x1c4>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	f300 8131 	bgt.w	8000940 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f000 8130 	beq.w	8000944 <MCAL_SET_GP_TIMx_GPIO+0x3a8>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d000      	beq.n	80006ea <MCAL_SET_GP_TIMx_GPIO+0x14e>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80006e8:	e12a      	b.n	8000940 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
			switch(CHx){
 80006ea:	78bb      	ldrb	r3, [r7, #2]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d832      	bhi.n	8000758 <MCAL_SET_GP_TIMx_GPIO+0x1bc>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <MCAL_SET_GP_TIMx_GPIO+0x15c>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000709 	.word	0x08000709
 80006fc:	0800071d 	.word	0x0800071d
 8000700:	08000731 	.word	0x08000731
 8000704:	08000745 	.word	0x08000745
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000708:	4b72      	ldr	r3, [pc, #456]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800070e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000712:	4619      	mov	r1, r3
 8000714:	4867      	ldr	r0, [pc, #412]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000716:	f7ff fe53 	bl	80003c0 <MCAL_GPIO_init>
				break;
 800071a:	e020      	b.n	800075e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 800071c:	4b6e      	ldr	r3, [pc, #440]	; (80008d8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000722:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000726:	4619      	mov	r1, r3
 8000728:	4862      	ldr	r0, [pc, #392]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800072a:	f7ff fe49 	bl	80003c0 <MCAL_GPIO_init>
				break;
 800072e:	e016      	b.n	800075e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000736:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800073a:	4619      	mov	r1, r3
 800073c:	4867      	ldr	r0, [pc, #412]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800073e:	f7ff fe3f 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000742:	e00c      	b.n	800075e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8000744:	4b5c      	ldr	r3, [pc, #368]	; (80008b8 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800074a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800074e:	4619      	mov	r1, r3
 8000750:	4862      	ldr	r0, [pc, #392]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000752:	f7ff fe35 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000756:	e002      	b.n	800075e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				ERROR_HANDLER();
 8000758:	f000 fcb5 	bl	80010c6 <ERROR_HANDLER>
			break;
 800075c:	e0f7      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800075e:	e0f6      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8000760:	78bb      	ldrb	r3, [r7, #2]
 8000762:	3b01      	subs	r3, #1
 8000764:	2b03      	cmp	r3, #3
 8000766:	d839      	bhi.n	80007dc <MCAL_SET_GP_TIMx_GPIO+0x240>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <MCAL_SET_GP_TIMx_GPIO+0x1d4>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000781 	.word	0x08000781
 8000774:	08000795 	.word	0x08000795
 8000778:	080007a9 	.word	0x080007a9
 800077c:	080007c9 	.word	0x080007c9
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8000780:	4b57      	ldr	r3, [pc, #348]	; (80008e0 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000786:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800078a:	4619      	mov	r1, r3
 800078c:	4849      	ldr	r0, [pc, #292]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800078e:	f7ff fe17 	bl	80003c0 <MCAL_GPIO_init>
					break;
 8000792:	e026      	b.n	80007e2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <MCAL_SET_GP_TIMx_GPIO+0x348>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 800079a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800079e:	4619      	mov	r1, r3
 80007a0:	4844      	ldr	r0, [pc, #272]	; (80008b4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80007a2:	f7ff fe0d 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80007a6:	e01c      	b.n	80007e2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80007ae:	2301      	movs	r3, #1
 80007b0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOB, &pin);
 80007ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007be:	4619      	mov	r1, r3
 80007c0:	4846      	ldr	r0, [pc, #280]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80007c2:	f7ff fdfd 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80007c6:	e00c      	b.n	80007e2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 80007c8:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 80007ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007d2:	4619      	mov	r1, r3
 80007d4:	4841      	ldr	r0, [pc, #260]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80007d6:	f7ff fdf3 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80007da:	e002      	b.n	80007e2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					ERROR_HANDLER();
 80007dc:	f000 fc73 	bl	80010c6 <ERROR_HANDLER>
				break;
 80007e0:	e0b5      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80007e2:	e0b4      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}



	}else if(TIMx ==TIM4){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a40      	ldr	r2, [pc, #256]	; (80008e8 <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	f040 80b0 	bne.w	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		switch (MODE) {
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d043      	beq.n	800087c <MCAL_SET_GP_TIMx_GPIO+0x2e0>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	f300 80a7 	bgt.w	8000948 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 80a6 	beq.w	800094c <MCAL_SET_GP_TIMx_GPIO+0x3b0>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d000      	beq.n	8000806 <MCAL_SET_GP_TIMx_GPIO+0x26a>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8000804:	e0a0      	b.n	8000948 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
			switch(CHx){
 8000806:	78bb      	ldrb	r3, [r7, #2]
 8000808:	3b01      	subs	r3, #1
 800080a:	2b03      	cmp	r3, #3
 800080c:	d832      	bhi.n	8000874 <MCAL_SET_GP_TIMx_GPIO+0x2d8>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <MCAL_SET_GP_TIMx_GPIO+0x278>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	08000825 	.word	0x08000825
 8000818:	08000839 	.word	0x08000839
 800081c:	0800084d 	.word	0x0800084d
 8000820:	08000861 	.word	0x08000861
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800082a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800082e:	4619      	mov	r1, r3
 8000830:	482a      	ldr	r0, [pc, #168]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000832:	f7ff fdc5 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000836:	e020      	b.n	800087a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800083e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000842:	4619      	mov	r1, r3
 8000844:	4825      	ldr	r0, [pc, #148]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000846:	f7ff fdbb 	bl	80003c0 <MCAL_GPIO_init>
				break;
 800084a:	e016      	b.n	800087a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MCAL_SET_GP_TIMx_GPIO+0x350>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000852:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000856:	4619      	mov	r1, r3
 8000858:	4820      	ldr	r0, [pc, #128]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800085a:	f7ff fdb1 	bl	80003c0 <MCAL_GPIO_init>
				break;
 800085e:	e00c      	b.n	800087a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MCAL_SET_GP_TIMx_GPIO+0x354>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000866:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800086a:	4619      	mov	r1, r3
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800086e:	f7ff fda7 	bl	80003c0 <MCAL_GPIO_init>
				break;
 8000872:	e002      	b.n	800087a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				ERROR_HANDLER();
 8000874:	f000 fc27 	bl	80010c6 <ERROR_HANDLER>
			break;
 8000878:	e069      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800087a:	e068      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 800087c:	78bb      	ldrb	r3, [r7, #2]
 800087e:	3b01      	subs	r3, #1
 8000880:	2b03      	cmp	r3, #3
 8000882:	d855      	bhi.n	8000930 <MCAL_SET_GP_TIMx_GPIO+0x394>
 8000884:	a201      	add	r2, pc, #4	; (adr r2, 800088c <MCAL_SET_GP_TIMx_GPIO+0x2f0>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008f5 	.word	0x080008f5
 8000894:	08000909 	.word	0x08000909
 8000898:	0800091d 	.word	0x0800091d
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 80008a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80008aa:	f7ff fd89 	bl	80003c0 <MCAL_GPIO_init>
					break;
 80008ae:	e042      	b.n	8000936 <MCAL_SET_GP_TIMx_GPIO+0x39a>
 80008b0:	08001798 	.word	0x08001798
 80008b4:	40010800 	.word	0x40010800
 80008b8:	0800179c 	.word	0x0800179c
 80008bc:	080017a0 	.word	0x080017a0
 80008c0:	080017a4 	.word	0x080017a4
 80008c4:	080017a8 	.word	0x080017a8
 80008c8:	080017ac 	.word	0x080017ac
 80008cc:	080017b0 	.word	0x080017b0
 80008d0:	40000400 	.word	0x40000400
 80008d4:	080017b4 	.word	0x080017b4
 80008d8:	080017b8 	.word	0x080017b8
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	080017bc 	.word	0x080017bc
 80008e4:	080017c0 	.word	0x080017c0
 80008e8:	40000800 	.word	0x40000800
 80008ec:	080017c4 	.word	0x080017c4
 80008f0:	080017c8 	.word	0x080017c8
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MCAL_SET_GP_TIMx_GPIO+0x3bc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 80008fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008fe:	4619      	mov	r1, r3
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8000902:	f7ff fd5d 	bl	80003c0 <MCAL_GPIO_init>
					break;
 8000906:	e016      	b.n	8000936 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MCAL_SET_GP_TIMx_GPIO+0x3c4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 800090e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8000916:	f7ff fd53 	bl	80003c0 <MCAL_GPIO_init>
					break;
 800091a:	e00c      	b.n	8000936 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MCAL_SET_GP_TIMx_GPIO+0x3c8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000922:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 800092a:	f7ff fd49 	bl	80003c0 <MCAL_GPIO_init>
					break;
 800092e:	e002      	b.n	8000936 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					ERROR_HANDLER();
 8000930:	f000 fbc9 	bl	80010c6 <ERROR_HANDLER>
				break;
 8000934:	e00b      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000936:	e00a      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000938:	bf00      	nop
 800093a:	e008      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 800093c:	bf00      	nop
 800093e:	e006      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000940:	bf00      	nop
 8000942:	e004      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8000944:	bf00      	nop
 8000946:	e002      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000948:	bf00      	nop
 800094a:	e000      	b.n	800094e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 800094c:	bf00      	nop
		//////////



	}
}
 800094e:	bf00      	nop
 8000950:	3770      	adds	r7, #112	; 0x70
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	080017c0 	.word	0x080017c0
 800095c:	40010c00 	.word	0x40010c00
 8000960:	080017cc 	.word	0x080017cc
 8000964:	080017d0 	.word	0x080017d0

08000968 <GP_TIMx_start>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_TIMx_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_NORMAL_config* NORMAL_SITTING){
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==NORMAL){
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f040 80c0 	bne.w	8000afe <GP_TIMx_start+0x196>
		GP_TIMx_Deint(TIMx);
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f8d0 	bl	8000b24 <GP_TIMx_Deint>

		g_GP_TIMX=TIMx;
 8000984:	4a61      	ldr	r2, [pc, #388]	; (8000b0c <GP_TIMx_start+0x1a4>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6013      	str	r3, [r2, #0]
		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000990:	d10c      	bne.n	80009ac <GP_TIMx_start+0x44>
 8000992:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <GP_TIMx_start+0x1a8>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a5e      	ldr	r2, [pc, #376]	; (8000b10 <GP_TIMx_start+0x1a8>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4a5d      	ldr	r2, [pc, #372]	; (8000b14 <GP_TIMx_start+0x1ac>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4614      	mov	r4, r2
 80009a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009aa:	e024      	b.n	80009f6 <GP_TIMx_start+0x8e>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4a5a      	ldr	r2, [pc, #360]	; (8000b18 <GP_TIMx_start+0x1b0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d10e      	bne.n	80009d2 <GP_TIMx_start+0x6a>
 80009b4:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <GP_TIMx_start+0x1a8>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a55      	ldr	r2, [pc, #340]	; (8000b10 <GP_TIMx_start+0x1a8>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	61d3      	str	r3, [r2, #28]
 80009c0:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <GP_TIMx_start+0x1ac>)
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f103 0410 	add.w	r4, r3, #16
 80009c8:	4613      	mov	r3, r2
 80009ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009d0:	e011      	b.n	80009f6 <GP_TIMx_start+0x8e>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4a51      	ldr	r2, [pc, #324]	; (8000b1c <GP_TIMx_start+0x1b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d10d      	bne.n	80009f6 <GP_TIMx_start+0x8e>
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <GP_TIMx_start+0x1a8>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <GP_TIMx_start+0x1a8>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <GP_TIMx_start+0x1ac>)
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	f103 0420 	add.w	r4, r3, #32
 80009ee:	4613      	mov	r3, r2
 80009f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30

		if(Sitting->TIME_RCR)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d004      	beq.n	8000a26 <GP_TIMx_start+0xbe>
			TIMx->CR1.BIT_NAME.ARPE=1;
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6013      	str	r3, [r2, #0]

		//1.Select the mode CMS[1:0]
		switch(NORMAL_SITTING->NORMAL_MODE){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d01c      	beq.n	8000a68 <GP_TIMx_start+0x100>
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	dc20      	bgt.n	8000a74 <GP_TIMx_start+0x10c>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <GP_TIMx_start+0xd4>
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d00b      	beq.n	8000a52 <GP_TIMx_start+0xea>
 8000a3a:	e01b      	b.n	8000a74 <GP_TIMx_start+0x10c>
		case Up:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	f36f 1346 	bfc	r3, #5, #2
 8000a44:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f36f 1304 	bfc	r3, #4, #1
 8000a4e:	6013      	str	r3, [r2, #0]
			break;
 8000a50:	e013      	b.n	8000a7a <GP_TIMx_start+0x112>
		case DOWN:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f36f 1346 	bfc	r3, #5, #2
 8000a5a:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6013      	str	r3, [r2, #0]
			break;
 8000a66:	e008      	b.n	8000a7a <GP_TIMx_start+0x112>
		case Up_Down:
			TIMx->CR1.BIT_NAME.CMS=0b11;
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a70:	6013      	str	r3, [r2, #0]
			/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
			break;
 8000a72:	e002      	b.n	8000a7a <GP_TIMx_start+0x112>
		default:
			GP_ERROR_HANDLER();
 8000a74:	f7ff fd8e 	bl	8000594 <GP_ERROR_HANDLER>
			break;
 8000a78:	bf00      	nop
		}
		MCAL_SET_GP_TIMx_GPIO(TIMx,NORMAL,0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fd8c 	bl	800059c <MCAL_SET_GP_TIMx_GPIO>
		TIMx->CR1.BIT_NAME.CEN=1;
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d125      	bne.n	8000ae2 <GP_TIMx_start+0x17a>
			TIMx->DIER.BIT_NAME.UIE=1;
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	68d3      	ldr	r3, [r2, #12]
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	60d3      	str	r3, [r2, #12]
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa6:	d106      	bne.n	8000ab6 <GP_TIMx_start+0x14e>
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6013      	str	r3, [r2, #0]
			TIMx->SR.BIT_NAME.UIF=0;
		}
	}else{
		GP_ERROR_HANDLER();
	}
}
 8000ab4:	e025      	b.n	8000b02 <GP_TIMx_start+0x19a>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <GP_TIMx_start+0x1b0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <GP_TIMx_start+0x164>
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	e01a      	b.n	8000b02 <GP_TIMx_start+0x19a>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <GP_TIMx_start+0x1b4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d116      	bne.n	8000b02 <GP_TIMx_start+0x19a>
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <GP_TIMx_start+0x1b8>)
 8000ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	e00f      	b.n	8000b02 <GP_TIMx_start+0x19a>
			while(!TIMx->SR.BIT_NAME.UIF);
 8000ae2:	bf00      	nop
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f8      	beq.n	8000ae4 <GP_TIMx_start+0x17c>
			TIMx->SR.BIT_NAME.UIF=0;
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	6913      	ldr	r3, [r2, #16]
 8000af6:	f36f 0300 	bfc	r3, #0, #1
 8000afa:	6113      	str	r3, [r2, #16]
}
 8000afc:	e001      	b.n	8000b02 <GP_TIMx_start+0x19a>
		GP_ERROR_HANDLER();
 8000afe:	f7ff fd49 	bl	8000594 <GP_ERROR_HANDLER>
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000a0 	.word	0x200000a0
 8000b10:	40021000 	.word	0x40021000
 8000b14:	20000070 	.word	0x20000070
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	40000800 	.word	0x40000800
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <GP_TIMx_Deint>:

void GP_TIMX_Clear(GP_TIMx_REG* TIMx){

	TIMx->CNT=0;
}
void GP_TIMx_Deint(GP_TIMx_REG* TIMx){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(TIMx== TIM2)			{RCC->APB1ENR|=(1<<0);			}
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b32:	d106      	bne.n	8000b42 <GP_TIMx_Deint+0x1e>
 8000b34:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a3a      	ldr	r2, [pc, #232]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	61d3      	str	r3, [r2, #28]
 8000b40:	e014      	b.n	8000b6c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM3)	{RCC->APB1ENR|=(1<<1);			}
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a38      	ldr	r2, [pc, #224]	; (8000c28 <GP_TIMx_Deint+0x104>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <GP_TIMx_Deint+0x34>
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a35      	ldr	r2, [pc, #212]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	e009      	b.n	8000b6c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM4)	{RCC->APB1ENR|=(1<<2);		}
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <GP_TIMx_Deint+0x108>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d105      	bne.n	8000b6c <GP_TIMx_Deint+0x48>
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	4a2f      	ldr	r2, [pc, #188]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	61d3      	str	r3, [r2, #28]

	TIMx->CR1.ALL_BITS=0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	TIMx->ARR=0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER.ALL_BITS=0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
	TIMx->CCMR1.ALL_BITS=0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
	TIMx->CCMR2.ALL_BITS=0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
	TIMx->CCR1=0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2=0;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3=0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4=0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CNT=0;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR2.ALL_BITS=0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
	TIMx->PSC=0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bba:	d10c      	bne.n	8000bd6 <GP_TIMx_Deint+0xb2>
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6113      	str	r3, [r2, #16]
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bce:	f023 0301 	bic.w	r3, r3, #1
 8000bd2:	6113      	str	r3, [r2, #16]
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}
 8000bd4:	e020      	b.n	8000c18 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <GP_TIMx_Deint+0x104>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10c      	bne.n	8000bf8 <GP_TIMx_Deint+0xd4>
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6113      	str	r3, [r2, #16]
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000bf0:	f023 0302 	bic.w	r3, r3, #2
 8000bf4:	6113      	str	r3, [r2, #16]
}
 8000bf6:	e00f      	b.n	8000c18 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <GP_TIMx_Deint+0x108>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d10b      	bne.n	8000c18 <GP_TIMx_Deint+0xf4>
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6113      	str	r3, [r2, #16]
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <GP_TIMx_Deint+0x100>)
 8000c12:	f023 0304 	bic.w	r3, r3, #4
 8000c16:	6113      	str	r3, [r2, #16]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	40000800 	.word	0x40000800

08000c30 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8000c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	7813      	ldrb	r3, [r2, #0]
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	6913      	ldr	r3, [r2, #16]
 8000c56:	f36f 0300 	bfc	r3, #0, #1
 8000c5a:	6113      	str	r3, [r2, #16]
 8000c5c:	e04e      	b.n	8000cfc <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	7813      	ldrb	r3, [r2, #0]
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7c:	6913      	ldr	r3, [r2, #16]
 8000c7e:	f36f 0341 	bfc	r3, #1, #1
 8000c82:	6113      	str	r3, [r2, #16]
 8000c84:	e03a      	b.n	8000cfc <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8000c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	7813      	ldrb	r3, [r2, #0]
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca4:	6913      	ldr	r3, [r2, #16]
 8000ca6:	f36f 0382 	bfc	r3, #2, #1
 8000caa:	6113      	str	r3, [r2, #16]
 8000cac:	e026      	b.n	8000cfc <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8000cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	7813      	ldrb	r3, [r2, #0]
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ccc:	6913      	ldr	r3, [r2, #16]
 8000cce:	f36f 03c3 	bfc	r3, #3, #1
 8000cd2:	6113      	str	r3, [r2, #16]
 8000cd4:	e012      	b.n	8000cfc <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8000cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00a      	beq.n	8000cfc <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	7813      	ldrb	r3, [r2, #0]
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf4:	6913      	ldr	r3, [r2, #16]
 8000cf6:	f36f 1304 	bfc	r3, #4, #1
 8000cfa:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <TIM2_IRQHandler+0xdc>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3

}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000070 	.word	0x20000070

08000d10 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	7813      	ldrb	r3, [r2, #0]
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d30:	6913      	ldr	r3, [r2, #16]
 8000d32:	f36f 0300 	bfc	r3, #0, #1
 8000d36:	6113      	str	r3, [r2, #16]
 8000d38:	e046      	b.n	8000dc8 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	7813      	ldrb	r3, [r2, #0]
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d54:	6913      	ldr	r3, [r2, #16]
 8000d56:	f36f 0341 	bfc	r3, #1, #1
 8000d5a:	6113      	str	r3, [r2, #16]
 8000d5c:	e034      	b.n	8000dc8 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00a      	beq.n	8000d82 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	7813      	ldrb	r3, [r2, #0]
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d78:	6913      	ldr	r3, [r2, #16]
 8000d7a:	f36f 0382 	bfc	r3, #2, #1
 8000d7e:	6113      	str	r3, [r2, #16]
 8000d80:	e022      	b.n	8000dc8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00a      	beq.n	8000da6 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	7813      	ldrb	r3, [r2, #0]
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000d9c:	6913      	ldr	r3, [r2, #16]
 8000d9e:	f36f 03c3 	bfc	r3, #3, #1
 8000da2:	6113      	str	r3, [r2, #16]
 8000da4:	e010      	b.n	8000dc8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d009      	beq.n	8000dc8 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	7813      	ldrb	r3, [r2, #0]
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8000dbe:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <TIM3_IRQHandler+0xc8>)
 8000dc0:	6913      	ldr	r3, [r2, #16]
 8000dc2:	f36f 1304 	bfc	r3, #4, #1
 8000dc6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <TIM3_IRQHandler+0xcc>)
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40000400 	.word	0x40000400
 8000ddc:	20000070 	.word	0x20000070

08000de0 <TIM4_IRQHandler>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00a      	beq.n	8000e0a <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7813      	ldrb	r3, [r2, #0]
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e00:	6913      	ldr	r3, [r2, #16]
 8000e02:	f36f 0300 	bfc	r3, #0, #1
 8000e06:	6113      	str	r3, [r2, #16]
 8000e08:	e04b      	b.n	8000ea2 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00a      	beq.n	8000e2e <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	7813      	ldrb	r3, [r2, #0]
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8000e22:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e24:	6913      	ldr	r3, [r2, #16]
 8000e26:	f36f 0341 	bfc	r3, #1, #1
 8000e2a:	6113      	str	r3, [r2, #16]
 8000e2c:	e039      	b.n	8000ea2 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00f      	beq.n	8000e5c <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7813      	ldrb	r3, [r2, #0]
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e48:	6913      	ldr	r3, [r2, #16]
 8000e4a:	f36f 0382 	bfc	r3, #2, #1
 8000e4e:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	7813      	ldrb	r3, [r2, #0]
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	7013      	strb	r3, [r2, #0]
 8000e5a:	e022      	b.n	8000ea2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00a      	beq.n	8000e80 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7813      	ldrb	r3, [r2, #0]
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e76:	6913      	ldr	r3, [r2, #16]
 8000e78:	f36f 03c3 	bfc	r3, #3, #1
 8000e7c:	6113      	str	r3, [r2, #16]
 8000e7e:	e010      	b.n	8000ea2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	7813      	ldrb	r3, [r2, #0]
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <TIM4_IRQHandler+0xd4>)
 8000e9a:	6913      	ldr	r3, [r2, #16]
 8000e9c:	f36f 1304 	bfc	r3, #4, #1
 8000ea0:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <TIM4_IRQHandler+0xd8>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3


}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	20000070 	.word	0x20000070

08000ebc <_delay_us>:


void _delay_us(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
	uint16_t PRE_scal=(F_CPU/1000000UL);
 8000ec8:	2308      	movs	r3, #8
 8000eca:	83fb      	strh	r3, [r7, #30]
	if(PRE_scal!=1) PRE_scal--; //The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
 8000ecc:	8bfb      	ldrh	r3, [r7, #30]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d002      	beq.n	8000ed8 <_delay_us+0x1c>
 8000ed2:	8bfb      	ldrh	r3, [r7, #30]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	83fb      	strh	r3, [r7, #30]
	GP_TIMERx_config l_t_delay={PRE_scal,delay,0,0,INT_DIS,NORMAL,NULL};
 8000ed8:	8bfb      	ldrh	r3, [r7, #30]
 8000eda:	81bb      	strh	r3, [r7, #12]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	823b      	strh	r3, [r7, #16]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	827b      	strh	r3, [r7, #18]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	753b      	strb	r3, [r7, #20]
 8000eec:	2300      	movs	r3, #0
 8000eee:	757b      	strb	r3, [r7, #21]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
	GP_TIMERx_NORMAL_config NORMAL_SIT={Up};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	723b      	strb	r3, [r7, #8]
	GP_TIMx_start(TIMx,&l_t_delay,&NORMAL_SIT);
 8000ef8:	f107 0208 	add.w	r2, r7, #8
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fd30 	bl	8000968 <GP_TIMx_start>

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_delay_ms>:


void _delay_ms(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e007      	b.n	8000f32 <_delay_ms+0x22>
		_delay_us(TIMx,1000);
 8000f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffc8 	bl	8000ebc <_delay_us>
	for(uint32_t i=0;i<delay;i++)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3f3      	bcc.n	8000f22 <_delay_ms+0x12>
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_delay_s>:
void _delay_s(GP_TIMx_REG* TIMx ,uint16_t delay){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e007      	b.n	8000f66 <_delay_s+0x22>
		_delay_ms(TIMx,1000);
 8000f56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffd8 	bl	8000f10 <_delay_ms>
	for(uint32_t i=0;i<delay;i++)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d3f3      	bcc.n	8000f56 <_delay_s+0x12>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MCAL_GET_SYS_CLCK+0x34>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d00a      	beq.n	8000fa0 <MCAL_GET_SYS_CLCK+0x28>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d80a      	bhi.n	8000fa4 <MCAL_GET_SYS_CLCK+0x2c>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <MCAL_GET_SYS_CLCK+0x20>
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d002      	beq.n	8000f9c <MCAL_GET_SYS_CLCK+0x24>
 8000f96:	e005      	b.n	8000fa4 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <MCAL_GET_SYS_CLCK+0x38>)
 8000f9a:	e003      	b.n	8000fa4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MCAL_GET_SYS_CLCK+0x3c>)
 8000f9e:	e001      	b.n	8000fa4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <MCAL_GET_SYS_CLCK+0x3c>)
 8000fa2:	e7ff      	b.n	8000fa4 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	007a1200 	.word	0x007a1200
 8000fb4:	00f42400 	.word	0x00f42400

08000fb8 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8000fbc:	f7ff ffdc 	bl	8000f78 <MCAL_GET_SYS_CLCK>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <MCAL_GET_H_CLCK+0x20>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	4903      	ldr	r1, [pc, #12]	; (8000fdc <MCAL_GET_H_CLCK+0x24>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8000fe4:	f7ff ffe8 	bl	8000fb8 <MCAL_GET_H_CLCK>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <MCAL_GET_PCLCK1+0x20>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	4903      	ldr	r1, [pc, #12]	; (8001004 <MCAL_GET_PCLCK1+0x24>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	20000000 	.word	0x20000000

08001008 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 800100c:	f7ff ffd4 	bl	8000fb8 <MCAL_GET_H_CLCK>
 8001010:	4602      	mov	r2, r0
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <MCAL_GET_PCLCK2+0x20>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	0adb      	lsrs	r3, r3, #11
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	4903      	ldr	r1, [pc, #12]	; (800102c <MCAL_GET_PCLCK2+0x24>)
 800101e:	5ccb      	ldrb	r3, [r1, r3]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3

}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	20000000 	.word	0x20000000

08001030 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4905      	ldr	r1, [pc, #20]	; (8001050 <SPI1_IRQHandler+0x20>)
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f80c 	bl	8001058 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SPI1_IRQHandler+0x24>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	7938      	ldrb	r0, [r7, #4]
 8001046:	4798      	blx	r3
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40013000 	.word	0x40013000
 8001054:	200000a4 	.word	0x200000a4

08001058 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00f      	beq.n	8001090 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f36f 0300 	bfc	r3, #0, #1
 8001078:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	7813      	ldrb	r3, [r2, #0]
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	7913      	ldrb	r3, [r2, #4]
 8001088:	f36f 1386 	bfc	r3, #6, #1
 800108c:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 800108e:	e015      	b.n	80010bc <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00e      	beq.n	80010bc <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	7813      	ldrb	r3, [r2, #0]
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7813      	ldrb	r3, [r2, #0]
 80010ac:	f36f 0341 	bfc	r3, #1, #1
 80010b0:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	7913      	ldrb	r3, [r2, #4]
 80010b6:	f36f 13c7 	bfc	r3, #7, #1
 80010ba:	7113      	strb	r3, [r2, #4]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <ERROR_HANDLER>:


#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;
void ERROR_HANDLER(){
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
	while(1);
 80010ca:	e7fe      	b.n	80010ca <ERROR_HANDLER+0x4>

080010cc <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <TIM1_UP_IRQHandler+0x1c>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <TIM1_UP_IRQHandler+0x20>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	6913      	ldr	r3, [r2, #16]
 80010dc:	f36f 0300 	bfc	r3, #0, #1
 80010e0:	6113      	str	r3, [r2, #16]

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000c4 	.word	0x200000c4
 80010ec:	200000d4 	.word	0x200000d4

080010f0 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <TIM1_CC_IRQHandler+0x1c>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <TIM1_CC_IRQHandler+0x20>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	6913      	ldr	r3, [r2, #16]
 8001100:	f36f 0341 	bfc	r3, #1, #1
 8001104:	6113      	str	r3, [r2, #16]

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000c4 	.word	0x200000c4
 8001110:	200000d4 	.word	0x200000d4

08001114 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <TIM1_BRK_IRQHandler+0x1c>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <TIM1_BRK_IRQHandler+0x20>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	6913      	ldr	r3, [r2, #16]
 8001124:	f36f 0300 	bfc	r3, #0, #1
 8001128:	6113      	str	r3, [r2, #16]

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000c4 	.word	0x200000c4
 8001134:	200000d4 	.word	0x200000d4

08001138 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <TIM1_TRG_COM_IRQHandler+0x20>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	6913      	ldr	r3, [r2, #16]
 8001148:	f36f 0300 	bfc	r3, #0, #1
 800114c:	6113      	str	r3, [r2, #16]

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000c4 	.word	0x200000c4
 8001158:	200000d4 	.word	0x200000d4

0800115c <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a8d      	ldr	r2, [pc, #564]	; (80013a0 <MCAL_USART_init+0x244>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 800116e:	4a8d      	ldr	r2, [pc, #564]	; (80013a4 <MCAL_USART_init+0x248>)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4614      	mov	r4, r2
 8001174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <MCAL_USART_init+0x24c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a8a      	ldr	r2, [pc, #552]	; (80013a8 <MCAL_USART_init+0x24c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	e024      	b.n	80011d2 <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a88      	ldr	r2, [pc, #544]	; (80013ac <MCAL_USART_init+0x250>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d10e      	bne.n	80011ae <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8001190:	4b84      	ldr	r3, [pc, #528]	; (80013a4 <MCAL_USART_init+0x248>)
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	f103 0410 	add.w	r4, r3, #16
 8001198:	4613      	mov	r3, r2
 800119a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <MCAL_USART_init+0x24c>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <MCAL_USART_init+0x24c>)
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011aa:	61d3      	str	r3, [r2, #28]
 80011ac:	e011      	b.n	80011d2 <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a7f      	ldr	r2, [pc, #508]	; (80013b0 <MCAL_USART_init+0x254>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10d      	bne.n	80011d2 <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80011b6:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <MCAL_USART_init+0x248>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	f103 0420 	add.w	r4, r3, #32
 80011be:	4613      	mov	r3, r2
 80011c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80011c6:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <MCAL_USART_init+0x24c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <MCAL_USART_init+0x24c>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	7912      	ldrb	r2, [r2, #4]
 80011e6:	0312      	lsls	r2, r2, #12
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	79d2      	ldrb	r2, [r2, #7]
 80011f6:	0312      	lsls	r2, r2, #12
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	7a5b      	ldrb	r3, [r3, #9]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10b      	bne.n	800121e <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f043 0208 	orr.w	r2, r3, #8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f043 0204 	orr.w	r2, r3, #4
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7a1b      	ldrb	r3, [r3, #8]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d826      	bhi.n	8001274 <MCAL_USART_init+0x118>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <MCAL_USART_init+0xd0>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	0800123d 	.word	0x0800123d
 8001230:	0800124b 	.word	0x0800124b
 8001234:	08001259 	.word	0x08001259
 8001238:	08001267 	.word	0x08001267
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	615a      	str	r2, [r3, #20]
		break;
 8001248:	e014      	b.n	8001274 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	615a      	str	r2, [r3, #20]
		break;
 8001256:	e00d      	b.n	8001274 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
		break;
 8001264:	e006      	b.n	8001274 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	615a      	str	r2, [r3, #20]
		break;
 8001272:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	7952      	ldrb	r2, [r2, #5]
 800127c:	0252      	lsls	r2, r2, #9
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	799b      	ldrb	r3, [r3, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d125      	bne.n	80012d8 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <MCAL_USART_init+0x244>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <MCAL_USART_init+0x258>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <MCAL_USART_init+0x258>)
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e014      	b.n	80012cc <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a41      	ldr	r2, [pc, #260]	; (80013ac <MCAL_USART_init+0x250>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d106      	bne.n	80012b8 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80012aa:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <MCAL_USART_init+0x258>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a41      	ldr	r2, [pc, #260]	; (80013b4 <MCAL_USART_init+0x258>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e009      	b.n	80012cc <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <MCAL_USART_init+0x254>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d105      	bne.n	80012cc <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MCAL_USART_init+0x258>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a3b      	ldr	r2, [pc, #236]	; (80013b4 <MCAL_USART_init+0x258>)
 80012c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ca:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f043 0220 	orr.w	r2, r3, #32
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <MCAL_USART_init+0x244>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d12d      	bne.n	800133c <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80012e0:	f7ff fe92 	bl	8001008 <MCAL_GET_PCLCK2>
 80012e4:	4602      	mov	r2, r0
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f0:	011c      	lsls	r4, r3, #4
 80012f2:	f7ff fe89 	bl	8001008 <MCAL_GET_PCLCK2>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009a      	lsls	r2, r3, #2
 8001300:	441a      	add	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fbb2 f5f3 	udiv	r5, r2, r3
 800130c:	f7ff fe7c 	bl	8001008 <MCAL_GET_PCLCK2>
 8001310:	4602      	mov	r2, r0
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	1aeb      	subs	r3, r5, r3
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <MCAL_USART_init+0x25c>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	ea44 0203 	orr.w	r2, r4, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	e070      	b.n	800141e <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <MCAL_USART_init+0x250>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d13b      	bne.n	80013bc <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8001344:	f7ff fe4c 	bl	8000fe0 <MCAL_GET_PCLCK1>
 8001348:	4602      	mov	r2, r0
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	011c      	lsls	r4, r3, #4
 8001356:	f7ff fe43 	bl	8000fe0 <MCAL_GET_PCLCK1>
 800135a:	4602      	mov	r2, r0
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	441a      	add	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001370:	f7ff fe36 	bl	8000fe0 <MCAL_GET_PCLCK1>
 8001374:	4602      	mov	r2, r0
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	2264      	movs	r2, #100	; 0x64
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	1aeb      	subs	r3, r5, r3
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MCAL_USART_init+0x25c>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	095b      	lsrs	r3, r3, #5
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	ea44 0203 	orr.w	r2, r4, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	e03e      	b.n	800141e <MCAL_USART_init+0x2c2>
 80013a0:	40013800 	.word	0x40013800
 80013a4:	200000d8 	.word	0x200000d8
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40004800 	.word	0x40004800
 80013b4:	e000e104 	.word	0xe000e104
 80013b8:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <MCAL_USART_init+0x2d0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12c      	bne.n	800141e <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80013c4:	f7ff fe0c 	bl	8000fe0 <MCAL_GET_PCLCK1>
 80013c8:	4602      	mov	r2, r0
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	011c      	lsls	r4, r3, #4
 80013d6:	f7ff fe03 	bl	8000fe0 <MCAL_GET_PCLCK1>
 80013da:	4602      	mov	r2, r0
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009a      	lsls	r2, r3, #2
 80013e4:	441a      	add	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80013f0:	f7ff fdf6 	bl	8000fe0 <MCAL_GET_PCLCK1>
 80013f4:	4602      	mov	r2, r0
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	2264      	movs	r2, #100	; 0x64
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	1aeb      	subs	r3, r5, r3
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <MCAL_USART_init+0x2d4>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	ea44 0203 	orr.w	r2, r4, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f892 	bl	8001548 <SET_GPIO>
	}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	40004800 	.word	0x40004800
 8001430:	51eb851f 	.word	0x51eb851f

08001434 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MCAL_USART_SendData+0x68>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d102      	bne.n	8001452 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MCAL_USART_SendData+0x6c>)
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e00c      	b.n	800146c <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MCAL_USART_SendData+0x70>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d102      	bne.n	8001460 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MCAL_USART_SendData+0x74>)
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e005      	b.n	800146c <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MCAL_USART_SendData+0x78>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MCAL_USART_SendData+0x7c>)
 800146a:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 800146c:	bf00      	nop
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f9      	beq.n	800146e <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	791b      	ldrb	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d103      	bne.n	800148a <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8001488:	e002      	b.n	8001490 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40013800 	.word	0x40013800
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	40004400 	.word	0x40004400
 80014a8:	200000e8 	.word	0x200000e8
 80014ac:	40004800 	.word	0x40004800
 80014b0:	200000f8 	.word	0x200000f8

080014b4 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MCAL_USART_ReciveData+0x7c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MCAL_USART_ReciveData+0x80>)
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e00c      	b.n	80014e8 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <MCAL_USART_ReciveData+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d102      	bne.n	80014dc <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MCAL_USART_ReciveData+0x88>)
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e005      	b.n	80014e8 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <MCAL_USART_ReciveData+0x8c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MCAL_USART_ReciveData+0x90>)
 80014e6:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80014f0:	bf00      	nop
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f9      	beq.n	80014f2 <MCAL_USART_ReciveData+0x3e>
 80014fe:	e002      	b.n	8001506 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	795b      	ldrb	r3, [r3, #5]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	e006      	b.n	8001526 <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	b29b      	uxth	r3, r3

		}

}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40013800 	.word	0x40013800
 8001534:	200000d8 	.word	0x200000d8
 8001538:	40004400 	.word	0x40004400
 800153c:	200000e8 	.word	0x200000e8
 8001540:	40004800 	.word	0x40004800
 8001544:	200000f8 	.word	0x200000f8

08001548 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <SET_GPIO+0xbc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <SET_GPIO+0xc0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d115      	bne.n	800158a <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <SET_GPIO+0xc4>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <SET_GPIO+0xc4>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4827      	ldr	r0, [pc, #156]	; (8001610 <SET_GPIO+0xc8>)
 8001572:	f7fe ff25 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <SET_GPIO+0xcc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <SET_GPIO+0xc8>)
 8001584:	f7fe ff1c 	bl	80003c0 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8001588:	e038      	b.n	80015fc <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <SET_GPIO+0xd0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d118      	bne.n	80015c4 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <SET_GPIO+0xc4>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <SET_GPIO+0xc4>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SET_GPIO+0xd4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4819      	ldr	r0, [pc, #100]	; (8001610 <SET_GPIO+0xc8>)
 80015ac:	f7fe ff08 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <SET_GPIO+0xd8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <SET_GPIO+0xc8>)
 80015be:	f7fe feff 	bl	80003c0 <MCAL_GPIO_init>
}
 80015c2:	e01b      	b.n	80015fc <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <SET_GPIO+0xdc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d117      	bne.n	80015fc <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <SET_GPIO+0xc4>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <SET_GPIO+0xc4>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <SET_GPIO+0xe0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <SET_GPIO+0xe4>)
 80015e6:	f7fe feeb 	bl	80003c0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <SET_GPIO+0xe8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <SET_GPIO+0xe4>)
 80015f8:	f7fe fee2 	bl	80003c0 <MCAL_GPIO_init>
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	080017d4 	.word	0x080017d4
 8001608:	40013800 	.word	0x40013800
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800
 8001614:	080017d8 	.word	0x080017d8
 8001618:	40004400 	.word	0x40004400
 800161c:	080017dc 	.word	0x080017dc
 8001620:	080017e0 	.word	0x080017e0
 8001624:	40004800 	.word	0x40004800
 8001628:	080017e4 	.word	0x080017e4
 800162c:	40010c00 	.word	0x40010c00
 8001630:	080017e8 	.word	0x080017e8

08001634 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <USART1_IRQHandler+0x10>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4798      	blx	r3
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000d8 	.word	0x200000d8

08001648 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <USART2_IRQHandler+0x10>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000d8 	.word	0x200000d8

0800165c <USART3_IRQHandler>:
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <USART3_IRQHandler+0x10>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	4798      	blx	r3
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200000d8 	.word	0x200000d8

08001670 <call_Back>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
uint16_t GR_TSR_FLAG_OLED=0xFF;
uint16_t GR_TSR_FLAG_START=0xFF;

void call_Back(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	if(	USART1->SR &(1<<5)){
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <call_Back+0x24>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <call_Back+0x1e>
		GR_TSR_FLAG_OLED=	MCAL_USART_ReciveData(USART1);
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <call_Back+0x24>)
 8001682:	f7ff ff17 	bl	80014b4 <MCAL_USART_ReciveData>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <call_Back+0x28>)
 800168c:	801a      	strh	r2, [r3, #0]

	}

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800
 8001698:	20000012 	.word	0x20000012

0800169c <main>:
int main(void)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,call_Back};
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <main+0x3c>)
 80016a4:	463c      	mov	r4, r7
 80016a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(USART1, &UART1_CON);
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <main+0x40>)
 80016b2:	f7ff fd53 	bl	800115c <MCAL_USART_init>
	/* Loop forever */
	GR_TSR_FLAG_START=0x01;
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <main+0x44>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	801a      	strh	r2, [r3, #0]
	for(;;){

			MCAL_USART_SendData(USART1, GR_TSR_FLAG_START);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <main+0x44>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <main+0x40>)
 80016c6:	f7ff feb5 	bl	8001434 <MCAL_USART_SendData>
			_delay_s(TIM2, 1);
 80016ca:	2101      	movs	r1, #1
 80016cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016d0:	f7ff fc38 	bl	8000f44 <_delay_s>
			MCAL_USART_SendData(USART1, GR_TSR_FLAG_START);
 80016d4:	e7f2      	b.n	80016bc <main+0x20>
 80016d6:	bf00      	nop
 80016d8:	080017ec 	.word	0x080017ec
 80016dc:	40013800 	.word	0x40013800
 80016e0:	20000014 	.word	0x20000014

080016e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	; (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001712:	f000 f811 	bl	8001738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001716:	f7ff ffc1 	bl	800169c <main>

0800171a <LoopForever>:

LoopForever:
  b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   r0, =_estack
 800171c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001728:	08001804 	.word	0x08001804
  ldr r2, =_sbss
 800172c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001730:	20000108 	.word	0x20000108

08001734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>
	...

08001738 <__libc_init_array>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	2600      	movs	r6, #0
 800173c:	4d0c      	ldr	r5, [pc, #48]	; (8001770 <__libc_init_array+0x38>)
 800173e:	4c0d      	ldr	r4, [pc, #52]	; (8001774 <__libc_init_array+0x3c>)
 8001740:	1b64      	subs	r4, r4, r5
 8001742:	10a4      	asrs	r4, r4, #2
 8001744:	42a6      	cmp	r6, r4
 8001746:	d109      	bne.n	800175c <__libc_init_array+0x24>
 8001748:	f000 f81a 	bl	8001780 <_init>
 800174c:	2600      	movs	r6, #0
 800174e:	4d0a      	ldr	r5, [pc, #40]	; (8001778 <__libc_init_array+0x40>)
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <__libc_init_array+0x44>)
 8001752:	1b64      	subs	r4, r4, r5
 8001754:	10a4      	asrs	r4, r4, #2
 8001756:	42a6      	cmp	r6, r4
 8001758:	d105      	bne.n	8001766 <__libc_init_array+0x2e>
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001760:	4798      	blx	r3
 8001762:	3601      	adds	r6, #1
 8001764:	e7ee      	b.n	8001744 <__libc_init_array+0xc>
 8001766:	f855 3b04 	ldr.w	r3, [r5], #4
 800176a:	4798      	blx	r3
 800176c:	3601      	adds	r6, #1
 800176e:	e7f2      	b.n	8001756 <__libc_init_array+0x1e>
 8001770:	080017fc 	.word	0x080017fc
 8001774:	080017fc 	.word	0x080017fc
 8001778:	080017fc 	.word	0x080017fc
 800177c:	08001800 	.word	0x08001800

08001780 <_init>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	bf00      	nop
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr

0800178c <_fini>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr
