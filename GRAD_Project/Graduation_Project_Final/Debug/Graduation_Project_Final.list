
Graduation_Project_Final.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800300c  0800300c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800300c  0800300c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002168  2000001c  08003030  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002184  08003030  00022184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b514  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000190d  00000000  00000000  0002b559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003358  00000000  00000000  0002ce66  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006f0  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000608  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000147f  00000000  00000000  00030eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000064d6  00000000  00000000  00032337  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012920  00000000  00000000  0003880d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004b12d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001994  00000000  00000000  0004b1a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002f6c 	.word	0x08002f6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08002f6c 	.word	0x08002f6c

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000292:	2301      	movs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d063      	beq.n	8000368 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d05f      	beq.n	8000368 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b0:	2000      	movs	r0, #0
 80002b2:	fba2 1203 	umull	r1, r2, r2, r3
 80002b6:	f04f 0300 	mov.w	r3, #0
 80002ba:	f04f 0400 	mov.w	r4, #0
 80002be:	0013      	movs	r3, r2
 80002c0:	2400      	movs	r4, #0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d000      	beq.n	80002c8 <xQueueGenericReset+0x40>
 80002c6:	2001      	movs	r0, #1
 80002c8:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14c      	bne.n	8000368 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80002ce:	f001 fa5d 	bl	800178c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002da:	68b9      	ldr	r1, [r7, #8]
 80002dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002de:	fb01 f303 	mul.w	r3, r1, r3
 80002e2:	441a      	add	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2200      	movs	r2, #0
 80002ec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002fe:	3b01      	subs	r3, #1
 8000300:	68b9      	ldr	r1, [r7, #8]
 8000302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000304:	fb01 f303 	mul.w	r3, r1, r3
 8000308:	441a      	add	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	22ff      	movs	r2, #255	; 0xff
 8000312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	22ff      	movs	r2, #255	; 0xff
 800031a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d114      	bne.n	800034e <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d01a      	beq.n	8000362 <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	3310      	adds	r3, #16
 8000330:	4618      	mov	r0, r3
 8000332:	f000 feb9 	bl	80010a8 <xTaskRemoveFromEventList>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d012      	beq.n	8000362 <xQueueGenericReset+0xda>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <xQueueGenericReset+0xf0>)
 800033e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	f3bf 8f4f 	dsb	sy
 8000348:	f3bf 8f6f 	isb	sy
 800034c:	e009      	b.n	8000362 <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	3310      	adds	r3, #16
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff0c 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3324      	adds	r3, #36	; 0x24
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff07 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000362:	f001 fa2b 	bl	80017bc <vPortExitCritical>
 8000366:	e001      	b.n	800036c <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800036c:	68fb      	ldr	r3, [r7, #12]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bd90      	pop	{r4, r7, pc}
 8000376:	bf00      	nop
 8000378:	e000ed04 	.word	0xe000ed04

0800037c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b08b      	sub	sp, #44	; 0x2c
 8000380:	af02      	add	r7, sp, #8
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	4613      	mov	r3, r2
 8000388:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d033      	beq.n	80003fc <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000394:	2000      	movs	r0, #0
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	fba2 1203 	umull	r1, r2, r2, r3
 800039e:	f04f 0300 	mov.w	r3, #0
 80003a2:	f04f 0400 	mov.w	r4, #0
 80003a6:	0013      	movs	r3, r2
 80003a8:	2400      	movs	r4, #0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d000      	beq.n	80003b0 <xQueueGenericCreate+0x34>
 80003ae:	2001      	movs	r0, #1
 80003b0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d122      	bne.n	80003fc <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	68ba      	ldr	r2, [r7, #8]
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003be:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003c2:	d81b      	bhi.n	80003fc <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	fb02 f303 	mul.w	r3, r2, r3
 80003cc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	3348      	adds	r3, #72	; 0x48
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fa6a 	bl	80018ac <pvPortMalloc>
 80003d8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00d      	beq.n	80003fc <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3348      	adds	r3, #72	; 0x48
 80003e8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	4613      	mov	r3, r2
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f000 f805 	bl	8000406 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80003fc:	69fb      	ldr	r3, [r7, #28]
    }
 80003fe:	4618      	mov	r0, r3
 8000400:	3724      	adds	r7, #36	; 0x24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd90      	pop	{r4, r7, pc}

08000406 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d103      	bne.n	8000422 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	69ba      	ldr	r2, [r7, #24]
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	e002      	b.n	8000428 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000428:	69bb      	ldr	r3, [r7, #24]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000434:	2101      	movs	r1, #1
 8000436:	69b8      	ldr	r0, [r7, #24]
 8000438:	f7ff ff26 	bl	8000288 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
 8000450:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800045a:	f001 f997 	bl	800178c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000462:	6a3b      	ldr	r3, [r7, #32]
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	429a      	cmp	r2, r3
 8000468:	d302      	bcc.n	8000470 <xQueueGenericSend+0x2c>
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d129      	bne.n	80004c4 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	68b9      	ldr	r1, [r7, #8]
 8000474:	6a38      	ldr	r0, [r7, #32]
 8000476:	f000 f931 	bl	80006dc <prvCopyDataToQueue>
 800047a:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	2b00      	cmp	r3, #0
 8000482:	d010      	beq.n	80004a6 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000484:	6a3b      	ldr	r3, [r7, #32]
 8000486:	3324      	adds	r3, #36	; 0x24
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fe0d 	bl	80010a8 <xTaskRemoveFromEventList>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000494:	4b3f      	ldr	r3, [pc, #252]	; (8000594 <xQueueGenericSend+0x150>)
 8000496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	f3bf 8f6f 	isb	sy
 80004a4:	e00a      	b.n	80004bc <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80004ac:	4b39      	ldr	r3, [pc, #228]	; (8000594 <xQueueGenericSend+0x150>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004bc:	f001 f97e 	bl	80017bc <vPortExitCritical>
                return pdPASS;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e063      	b.n	800058c <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d103      	bne.n	80004d2 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004ca:	f001 f977 	bl	80017bc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e05c      	b.n	800058c <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d106      	bne.n	80004e6 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 feab 	bl	8001238 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004e6:	f001 f969 	bl	80017bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004ea:	f000 fb81 	bl	8000bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004ee:	f001 f94d 	bl	800178c <vPortEnterCritical>
 80004f2:	6a3b      	ldr	r3, [r7, #32]
 80004f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004fe:	d103      	bne.n	8000508 <xQueueGenericSend+0xc4>
 8000500:	6a3b      	ldr	r3, [r7, #32]
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800050e:	b25b      	sxtb	r3, r3
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000514:	d103      	bne.n	800051e <xQueueGenericSend+0xda>
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800051e:	f001 f94d 	bl	80017bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fe9a 	bl	8001264 <xTaskCheckForTimeOut>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d124      	bne.n	8000580 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000536:	6a38      	ldr	r0, [r7, #32]
 8000538:	f000 f9c8 	bl	80008cc <prvIsQueueFull>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d018      	beq.n	8000574 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000542:	6a3b      	ldr	r3, [r7, #32]
 8000544:	3310      	adds	r3, #16
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fd96 	bl	800107c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000550:	6a38      	ldr	r0, [r7, #32]
 8000552:	f000 f953 	bl	80007fc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000556:	f000 fb59 	bl	8000c0c <xTaskResumeAll>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	f47f af7c 	bne.w	800045a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <xQueueGenericSend+0x150>)
 8000564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	f3bf 8f4f 	dsb	sy
 800056e:	f3bf 8f6f 	isb	sy
 8000572:	e772      	b.n	800045a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000574:	6a38      	ldr	r0, [r7, #32]
 8000576:	f000 f941 	bl	80007fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800057a:	f000 fb47 	bl	8000c0c <xTaskResumeAll>
 800057e:	e76c      	b.n	800045a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000580:	6a38      	ldr	r0, [r7, #32]
 8000582:	f000 f93b 	bl	80007fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000586:	f000 fb41 	bl	8000c0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800058a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800058c:	4618      	mov	r0, r3
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	e000ed04 	.word	0xe000ed04

08000598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005ac:	f001 f8ee 	bl	800178c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01f      	beq.n	80005fc <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	6a38      	ldr	r0, [r7, #32]
 80005c0:	f000 f8f6 	bl	80007b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00f      	beq.n	80005f4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005d4:	6a3b      	ldr	r3, [r7, #32]
 80005d6:	3310      	adds	r3, #16
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fd65 	bl	80010a8 <xTaskRemoveFromEventList>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d007      	beq.n	80005f4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005e4:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <xQueueReceive+0x140>)
 80005e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005f4:	f001 f8e2 	bl	80017bc <vPortExitCritical>
                return pdPASS;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e069      	b.n	80006d0 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000602:	f001 f8db 	bl	80017bc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000606:	2300      	movs	r3, #0
 8000608:	e062      	b.n	80006d0 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	2b00      	cmp	r3, #0
 800060e:	d106      	bne.n	800061e <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fe0f 	bl	8001238 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800061a:	2301      	movs	r3, #1
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800061e:	f001 f8cd 	bl	80017bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000622:	f000 fae5 	bl	8000bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000626:	f001 f8b1 	bl	800178c <vPortEnterCritical>
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000630:	b25b      	sxtb	r3, r3
 8000632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000636:	d103      	bne.n	8000640 <xQueueReceive+0xa8>
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000646:	b25b      	sxtb	r3, r3
 8000648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800064c:	d103      	bne.n	8000656 <xQueueReceive+0xbe>
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000656:	f001 f8b1 	bl	80017bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800065a:	1d3a      	adds	r2, r7, #4
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fdfe 	bl	8001264 <xTaskCheckForTimeOut>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d123      	bne.n	80006b6 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800066e:	6a38      	ldr	r0, [r7, #32]
 8000670:	f000 f916 	bl	80008a0 <prvIsQueueEmpty>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d017      	beq.n	80006aa <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	3324      	adds	r3, #36	; 0x24
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4611      	mov	r1, r2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fcfa 	bl	800107c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000688:	6a38      	ldr	r0, [r7, #32]
 800068a:	f000 f8b7 	bl	80007fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800068e:	f000 fabd 	bl	8000c0c <xTaskResumeAll>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d189      	bne.n	80005ac <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <xQueueReceive+0x140>)
 800069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	f3bf 8f4f 	dsb	sy
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	e780      	b.n	80005ac <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80006aa:	6a38      	ldr	r0, [r7, #32]
 80006ac:	f000 f8a6 	bl	80007fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006b0:	f000 faac 	bl	8000c0c <xTaskResumeAll>
 80006b4:	e77a      	b.n	80005ac <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80006b6:	6a38      	ldr	r0, [r7, #32]
 80006b8:	f000 f8a0 	bl	80007fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006bc:	f000 faa6 	bl	8000c0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006c0:	6a38      	ldr	r0, [r7, #32]
 80006c2:	f000 f8ed 	bl	80008a0 <prvIsQueueEmpty>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f43f af6f 	beq.w	80005ac <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	e000ed04 	.word	0xe000ed04

080006dc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10d      	bne.n	8000716 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d14d      	bne.n	800079e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 feb0 	bl	800146c <xTaskPriorityDisinherit>
 800070c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	e043      	b.n	800079e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d119      	bne.n	8000750 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6858      	ldr	r0, [r3, #4]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	461a      	mov	r2, r3
 8000726:	68b9      	ldr	r1, [r7, #8]
 8000728:	f002 fc0c 	bl	8002f44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	441a      	add	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	429a      	cmp	r2, r3
 8000744:	d32b      	bcc.n	800079e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	e026      	b.n	800079e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	68d8      	ldr	r0, [r3, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	461a      	mov	r2, r3
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	f002 fbf2 	bl	8002f44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	425b      	negs	r3, r3
 800076a:	441a      	add	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	425b      	negs	r3, r3
 8000786:	441a      	add	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d105      	bne.n	800079e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	3b01      	subs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80007a6:	697b      	ldr	r3, [r7, #20]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d018      	beq.n	80007f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	441a      	add	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d303      	bcc.n	80007e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68d9      	ldr	r1, [r3, #12]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	461a      	mov	r2, r3
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f002 fba8 	bl	8002f44 <memcpy>
    }
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000804:	f000 ffc2 	bl	800178c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800080e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000810:	e011      	b.n	8000836 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	2b00      	cmp	r3, #0
 8000818:	d012      	beq.n	8000840 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3324      	adds	r3, #36	; 0x24
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fc42 	bl	80010a8 <xTaskRemoveFromEventList>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800082a:	f000 fd65 	bl	80012f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	3b01      	subs	r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	2b00      	cmp	r3, #0
 800083c:	dce9      	bgt.n	8000812 <prvUnlockQueue+0x16>
 800083e:	e000      	b.n	8000842 <prvUnlockQueue+0x46>
                    break;
 8000840:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	22ff      	movs	r2, #255	; 0xff
 8000846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800084a:	f000 ffb7 	bl	80017bc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800084e:	f000 ff9d 	bl	800178c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000858:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800085a:	e011      	b.n	8000880 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d012      	beq.n	800088a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3310      	adds	r3, #16
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fc1d 	bl	80010a8 <xTaskRemoveFromEventList>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000874:	f000 fd40 	bl	80012f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	3b01      	subs	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dce9      	bgt.n	800085c <prvUnlockQueue+0x60>
 8000888:	e000      	b.n	800088c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800088a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000894:	f000 ff92 	bl	80017bc <vPortExitCritical>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80008a8:	f000 ff70 	bl	800178c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e001      	b.n	80008be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008be:	f000 ff7d 	bl	80017bc <vPortExitCritical>

    return xReturn;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80008d4:	f000 ff5a 	bl	800178c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d102      	bne.n	80008ea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e001      	b.n	80008ee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008ee:	f000 ff65 	bl	80017bc <vPortExitCritical>

    return xReturn;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af04      	add	r7, sp, #16
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4618      	mov	r0, r3
 8000912:	f000 ffcb 	bl	80018ac <pvPortMalloc>
 8000916:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d013      	beq.n	8000946 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800091e:	2054      	movs	r0, #84	; 0x54
 8000920:	f000 ffc4 	bl	80018ac <pvPortMalloc>
 8000924:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800092c:	2254      	movs	r2, #84	; 0x54
 800092e:	2100      	movs	r1, #0
 8000930:	69f8      	ldr	r0, [r7, #28]
 8000932:	f002 fb12 	bl	8002f5a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
 800093c:	e005      	b.n	800094a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f001 f806 	bl	8001950 <vPortFree>
 8000944:	e001      	b.n	800094a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d013      	beq.n	8000978 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	2300      	movs	r3, #0
 8000954:	9303      	str	r3, [sp, #12]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f000 f80e 	bl	8000988 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800096c:	69f8      	ldr	r0, [r7, #28]
 800096e:	f000 f873 	bl	8000a58 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	e002      	b.n	800097e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800097e:	69bb      	ldr	r3, [r7, #24]
    }
 8000980:	4618      	mov	r0, r3
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009a0:	3b01      	subs	r3, #1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	f023 0307 	bic.w	r3, r3, #7
 80009ae:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d01e      	beq.n	80009f4 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e012      	b.n	80009e2 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	4413      	add	r3, r2
 80009c2:	7819      	ldrb	r1, [r3, #0]
 80009c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	4413      	add	r3, r2
 80009ca:	3334      	adds	r3, #52	; 0x34
 80009cc:	460a      	mov	r2, r1
 80009ce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d006      	beq.n	80009ea <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d9e9      	bls.n	80009bc <prvInitialiseNewTask+0x34>
 80009e8:	e000      	b.n	80009ec <prvInitialiseNewTask+0x64>
            {
                break;
 80009ea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d901      	bls.n	80009fe <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009fa:	2304      	movs	r3, #4
 80009fc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	6a3a      	ldr	r2, [r7, #32]
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	6a3a      	ldr	r2, [r7, #32]
 8000a08:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbcd 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	3318      	adds	r3, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fbc8 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a22:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	f1c3 0205 	rsb	r2, r3, #5
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	68f9      	ldr	r1, [r7, #12]
 8000a38:	6938      	ldr	r0, [r7, #16]
 8000a3a:	f000 fe19 	bl	8001670 <pxPortInitialiseStack>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a4e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a60:	f000 fe94 	bl	800178c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a64:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <prvAddNewTaskToReadyList+0x108>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a3d      	ldr	r2, [pc, #244]	; (8000b60 <prvAddNewTaskToReadyList+0x108>)
 8000a6c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <prvAddNewTaskToReadyList+0x10c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d109      	bne.n	8000a8a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a76:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <prvAddNewTaskToReadyList+0x10c>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <prvAddNewTaskToReadyList+0x108>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d110      	bne.n	8000aa6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a84:	f000 fc5c 	bl	8001340 <prvInitialiseTaskLists>
 8000a88:	e00d      	b.n	8000aa6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a8a:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <prvAddNewTaskToReadyList+0x110>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d109      	bne.n	8000aa6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <prvAddNewTaskToReadyList+0x10c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d802      	bhi.n	8000aa6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000aa0:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <prvAddNewTaskToReadyList+0x10c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000aa6:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <prvAddNewTaskToReadyList+0x114>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <prvAddNewTaskToReadyList+0x114>)
 8000aae:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <prvAddNewTaskToReadyList+0x118>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <prvAddNewTaskToReadyList+0x118>)
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac6:	492b      	ldr	r1, [pc, #172]	; (8000b74 <prvAddNewTaskToReadyList+0x11c>)
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	3204      	adds	r2, #4
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <prvAddNewTaskToReadyList+0x11c>)
 8000b06:	441a      	add	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	4918      	ldr	r1, [pc, #96]	; (8000b74 <prvAddNewTaskToReadyList+0x11c>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1c59      	adds	r1, r3, #1
 8000b20:	4814      	ldr	r0, [pc, #80]	; (8000b74 <prvAddNewTaskToReadyList+0x11c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4403      	add	r3, r0
 8000b2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b2e:	f000 fe45 	bl	80017bc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <prvAddNewTaskToReadyList+0x110>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00e      	beq.n	8000b58 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <prvAddNewTaskToReadyList+0x10c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <prvAddNewTaskToReadyList+0x120>)
 8000b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	f3bf 8f4f 	dsb	sy
 8000b54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000110 	.word	0x20000110
 8000b64:	20000038 	.word	0x20000038
 8000b68:	2000011c 	.word	0x2000011c
 8000b6c:	2000012c 	.word	0x2000012c
 8000b70:	20000118 	.word	0x20000118
 8000b74:	2000003c 	.word	0x2000003c
 8000b78:	e000ed04 	.word	0xe000ed04

08000b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <vTaskStartScheduler+0x58>)
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	4912      	ldr	r1, [pc, #72]	; (8000bd8 <vTaskStartScheduler+0x5c>)
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <vTaskStartScheduler+0x60>)
 8000b92:	f7ff feb3 	bl	80008fc <xTaskCreate>
 8000b96:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d114      	bne.n	8000bc8 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	603b      	str	r3, [r7, #0]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <vTaskStartScheduler+0x64>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <vTaskStartScheduler+0x68>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <vTaskStartScheduler+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000bc4:	f000 fdc2 	bl	800174c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <vTaskStartScheduler+0x70>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000134 	.word	0x20000134
 8000bd8:	08002f84 	.word	0x08002f84
 8000bdc:	08001311 	.word	0x08001311
 8000be0:	20000130 	.word	0x20000130
 8000be4:	2000011c 	.word	0x2000011c
 8000be8:	20000114 	.word	0x20000114
 8000bec:	20000000 	.word	0x20000000

08000bf0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <vTaskSuspendAll+0x18>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <vTaskSuspendAll+0x18>)
 8000bfc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000138 	.word	0x20000138

08000c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c1a:	f000 fdb7 	bl	800178c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c1e:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <xTaskResumeAll+0x1b4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <xTaskResumeAll+0x1b4>)
 8000c26:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c28:	4b65      	ldr	r3, [pc, #404]	; (8000dc0 <xTaskResumeAll+0x1b4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f040 80c0 	bne.w	8000db2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c32:	4b64      	ldr	r3, [pc, #400]	; (8000dc4 <xTaskResumeAll+0x1b8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80bb 	beq.w	8000db2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c3c:	e08a      	b.n	8000d54 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c3e:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <xTaskResumeAll+0x1bc>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	6a12      	ldr	r2, [r2, #32]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	69d2      	ldr	r2, [r2, #28]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3318      	adds	r3, #24
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d103      	bne.n	8000c74 <xTaskResumeAll+0x68>
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	6a1a      	ldr	r2, [r3, #32]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	68d2      	ldr	r2, [r2, #12]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	6892      	ldr	r2, [r2, #8]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d103      	bne.n	8000cb2 <xTaskResumeAll+0xa6>
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <xTaskResumeAll+0x1c0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	4a3e      	ldr	r2, [pc, #248]	; (8000dcc <xTaskResumeAll+0x1c0>)
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd8:	493d      	ldr	r1, [pc, #244]	; (8000dd0 <xTaskResumeAll+0x1c4>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	3204      	adds	r2, #4
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	1d1a      	adds	r2, r3, #4
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <xTaskResumeAll+0x1c4>)
 8000d18:	441a      	add	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d22:	492b      	ldr	r1, [pc, #172]	; (8000dd0 <xTaskResumeAll+0x1c4>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1c59      	adds	r1, r3, #1
 8000d32:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <xTaskResumeAll+0x1c4>)
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4403      	add	r3, r0
 8000d3e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <xTaskResumeAll+0x1c8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d302      	bcc.n	8000d54 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <xTaskResumeAll+0x1cc>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <xTaskResumeAll+0x1bc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f47f af70 	bne.w	8000c3e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d64:	f000 fb68 	bl	8001438 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <xTaskResumeAll+0x1d0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d010      	beq.n	8000d96 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d74:	f000 f836 	bl	8000de4 <xTaskIncrementTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <xTaskResumeAll+0x1cc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f1      	bne.n	8000d74 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <xTaskResumeAll+0x1d0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <xTaskResumeAll+0x1cc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <xTaskResumeAll+0x1d4>)
 8000da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000db2:	f000 fd03 	bl	80017bc <vPortExitCritical>

    return xAlreadyYielded;
 8000db6:	693b      	ldr	r3, [r7, #16]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000138 	.word	0x20000138
 8000dc4:	20000110 	.word	0x20000110
 8000dc8:	200000d0 	.word	0x200000d0
 8000dcc:	20000118 	.word	0x20000118
 8000dd0:	2000003c 	.word	0x2000003c
 8000dd4:	20000038 	.word	0x20000038
 8000dd8:	20000124 	.word	0x20000124
 8000ddc:	20000120 	.word	0x20000120
 8000de0:	e000ed04 	.word	0xe000ed04

08000de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dee:	4b75      	ldr	r3, [pc, #468]	; (8000fc4 <xTaskIncrementTick+0x1e0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 80dc 	bne.w	8000fb0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000df8:	4b73      	ldr	r3, [pc, #460]	; (8000fc8 <xTaskIncrementTick+0x1e4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000e00:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <xTaskIncrementTick+0x1e4>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d110      	bne.n	8000e2e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000e0c:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <xTaskIncrementTick+0x1e8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <xTaskIncrementTick+0x1ec>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a6d      	ldr	r2, [pc, #436]	; (8000fcc <xTaskIncrementTick+0x1e8>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4a6d      	ldr	r2, [pc, #436]	; (8000fd0 <xTaskIncrementTick+0x1ec>)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b6c      	ldr	r3, [pc, #432]	; (8000fd4 <xTaskIncrementTick+0x1f0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a6b      	ldr	r2, [pc, #428]	; (8000fd4 <xTaskIncrementTick+0x1f0>)
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	f000 fb05 	bl	8001438 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e2e:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <xTaskIncrementTick+0x1f4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f0c0 80a6 	bcc.w	8000f86 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <xTaskIncrementTick+0x1e8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e44:	4b64      	ldr	r3, [pc, #400]	; (8000fd8 <xTaskIncrementTick+0x1f4>)
 8000e46:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4a:	601a      	str	r2, [r3, #0]
                    break;
 8000e4c:	e09b      	b.n	8000f86 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <xTaskIncrementTick+0x1e8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d203      	bcs.n	8000e6e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e66:	4a5c      	ldr	r2, [pc, #368]	; (8000fd8 <xTaskIncrementTick+0x1f4>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e6c:	e08b      	b.n	8000f86 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68d2      	ldr	r2, [r2, #12]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	6892      	ldr	r2, [r2, #8]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d103      	bne.n	8000e9c <xTaskIncrementTick+0xb8>
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01e      	beq.n	8000ef2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	6a12      	ldr	r2, [r2, #32]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	69d2      	ldr	r2, [r2, #28]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d103      	bne.n	8000ee2 <xTaskIncrementTick+0xfe>
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6a1a      	ldr	r2, [r3, #32]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <xTaskIncrementTick+0x1f8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <xTaskIncrementTick+0x1f8>)
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <xTaskIncrementTick+0x1fc>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3304      	adds	r3, #4
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	3204      	adds	r2, #4
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1d1a      	adds	r2, r3, #4
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <xTaskIncrementTick+0x1fc>)
 8000f48:	441a      	add	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f52:	4923      	ldr	r1, [pc, #140]	; (8000fe0 <xTaskIncrementTick+0x1fc>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1c59      	adds	r1, r3, #1
 8000f62:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <xTaskIncrementTick+0x1fc>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4403      	add	r3, r0
 8000f6e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <xTaskIncrementTick+0x200>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	f67f af5d 	bls.w	8000e3a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f84:	e759      	b.n	8000e3a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <xTaskIncrementTick+0x200>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	4914      	ldr	r1, [pc, #80]	; (8000fe0 <xTaskIncrementTick+0x1fc>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d901      	bls.n	8000fa2 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <xTaskIncrementTick+0x204>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e004      	b.n	8000fba <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <xTaskIncrementTick+0x208>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <xTaskIncrementTick+0x208>)
 8000fb8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000fba:	69fb      	ldr	r3, [r7, #28]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000138 	.word	0x20000138
 8000fc8:	20000114 	.word	0x20000114
 8000fcc:	200000c8 	.word	0x200000c8
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	20000128 	.word	0x20000128
 8000fd8:	20000130 	.word	0x20000130
 8000fdc:	20000118 	.word	0x20000118
 8000fe0:	2000003c 	.word	0x2000003c
 8000fe4:	20000038 	.word	0x20000038
 8000fe8:	20000124 	.word	0x20000124
 8000fec:	20000120 	.word	0x20000120

08000ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <vTaskSwitchContext+0x78>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <vTaskSwitchContext+0x7c>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001004:	e02a      	b.n	800105c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <vTaskSwitchContext+0x7c>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <vTaskSwitchContext+0x80>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f1c3 031f 	rsb	r3, r3, #31
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <vTaskSwitchContext+0x84>)
 800102e:	4413      	add	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3308      	adds	r3, #8
 8001044:	429a      	cmp	r2, r3
 8001046:	d104      	bne.n	8001052 <vTaskSwitchContext+0x62>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <vTaskSwitchContext+0x88>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000138 	.word	0x20000138
 800106c:	20000124 	.word	0x20000124
 8001070:	20000118 	.word	0x20000118
 8001074:	2000003c 	.word	0x2000003c
 8001078:	20000038 	.word	0x20000038

0800107c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <vTaskPlaceOnEventList+0x28>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3318      	adds	r3, #24
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f899 	bl	80001c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001094:	2101      	movs	r1, #1
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f000 fa6a 	bl	8001570 <prvAddCurrentTaskToDelayedList>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000038 	.word	0x20000038

080010a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	6a12      	ldr	r2, [r2, #32]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	69d2      	ldr	r2, [r2, #28]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3318      	adds	r3, #24
 80010da:	429a      	cmp	r2, r3
 80010dc:	d103      	bne.n	80010e6 <xTaskRemoveFromEventList+0x3e>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <xTaskRemoveFromEventList+0x178>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d15e      	bne.n	80011bc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	6892      	ldr	r2, [r2, #8]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	3304      	adds	r3, #4
 8001120:	429a      	cmp	r2, r3
 8001122:	d103      	bne.n	800112c <xTaskRemoveFromEventList+0x84>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	2201      	movs	r2, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <xTaskRemoveFromEventList+0x17c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4313      	orrs	r3, r2
 800114a:	4a36      	ldr	r2, [pc, #216]	; (8001224 <xTaskRemoveFromEventList+0x17c>)
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001152:	4935      	ldr	r1, [pc, #212]	; (8001228 <xTaskRemoveFromEventList+0x180>)
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	3204      	adds	r2, #4
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1d1a      	adds	r2, r3, #4
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <xTaskRemoveFromEventList+0x180>)
 8001192:	441a      	add	r2, r3
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119c:	4922      	ldr	r1, [pc, #136]	; (8001228 <xTaskRemoveFromEventList+0x180>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1c59      	adds	r1, r3, #1
 80011ac:	481e      	ldr	r0, [pc, #120]	; (8001228 <xTaskRemoveFromEventList+0x180>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4403      	add	r3, r0
 80011b8:	6019      	str	r1, [r3, #0]
 80011ba:	e01b      	b.n	80011f4 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <xTaskRemoveFromEventList+0x184>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	61da      	str	r2, [r3, #28]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	3218      	adds	r2, #24
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f103 0218 	add.w	r2, r3, #24
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <xTaskRemoveFromEventList+0x184>)
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <xTaskRemoveFromEventList+0x184>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <xTaskRemoveFromEventList+0x184>)
 80011f2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <xTaskRemoveFromEventList+0x188>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	429a      	cmp	r2, r3
 8001200:	d905      	bls.n	800120e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <xTaskRemoveFromEventList+0x18c>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e001      	b.n	8001212 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001212:	69fb      	ldr	r3, [r7, #28]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3724      	adds	r7, #36	; 0x24
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000138 	.word	0x20000138
 8001224:	20000118 	.word	0x20000118
 8001228:	2000003c 	.word	0x2000003c
 800122c:	200000d0 	.word	0x200000d0
 8001230:	20000038 	.word	0x20000038
 8001234:	20000124 	.word	0x20000124

08001238 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <vTaskInternalSetTimeOutState+0x24>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <vTaskInternalSetTimeOutState+0x28>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	605a      	str	r2, [r3, #4]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000128 	.word	0x20000128
 8001260:	20000114 	.word	0x20000114

08001264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800126e:	f000 fa8d 	bl	800178c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <xTaskCheckForTimeOut+0x8c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d102      	bne.n	8001292 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e026      	b.n	80012e0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <xTaskCheckForTimeOut+0x90>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d00a      	beq.n	80012b4 <xTaskCheckForTimeOut+0x50>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d305      	bcc.n	80012b4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e015      	b.n	80012e0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d20b      	bcs.n	80012d6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb4 	bl	8001238 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e004      	b.n	80012e0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80012e0:	f000 fa6c 	bl	80017bc <vPortExitCritical>

    return xReturn;
 80012e4:	697b      	ldr	r3, [r7, #20]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000114 	.word	0x20000114
 80012f4:	20000128 	.word	0x20000128

080012f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <vTaskMissedYield+0x14>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000124 	.word	0x20000124

08001310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001318:	f000 f852 	bl	80013c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <prvIdleTask+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d9f9      	bls.n	8001318 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <prvIdleTask+0x2c>)
 8001326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	f3bf 8f4f 	dsb	sy
 8001330:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001334:	e7f0      	b.n	8001318 <prvIdleTask+0x8>
 8001336:	bf00      	nop
 8001338:	2000003c 	.word	0x2000003c
 800133c:	e000ed04 	.word	0xe000ed04

08001340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e00c      	b.n	8001366 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <prvInitialiseTaskLists+0x60>)
 8001358:	4413      	add	r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ff08 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d9ef      	bls.n	800134c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <prvInitialiseTaskLists+0x64>)
 800136e:	f7fe feff 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <prvInitialiseTaskLists+0x68>)
 8001374:	f7fe fefc 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <prvInitialiseTaskLists+0x6c>)
 800137a:	f7fe fef9 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <prvInitialiseTaskLists+0x70>)
 8001380:	f7fe fef6 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <prvInitialiseTaskLists+0x74>)
 8001386:	f7fe fef3 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <prvInitialiseTaskLists+0x78>)
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <prvInitialiseTaskLists+0x64>)
 800138e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <prvInitialiseTaskLists+0x7c>)
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <prvInitialiseTaskLists+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	200000a0 	.word	0x200000a0
 80013a8:	200000b4 	.word	0x200000b4
 80013ac:	200000d0 	.word	0x200000d0
 80013b0:	200000e4 	.word	0x200000e4
 80013b4:	200000fc 	.word	0x200000fc
 80013b8:	200000c8 	.word	0x200000c8
 80013bc:	200000cc 	.word	0x200000cc

080013c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013c6:	e019      	b.n	80013fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80013c8:	f000 f9e0 	bl	800178c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <prvCheckTasksWaitingTermination+0x4c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3304      	adds	r3, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff2c 	bl	8000236 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <prvCheckTasksWaitingTermination+0x50>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <prvCheckTasksWaitingTermination+0x50>)
 80013e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <prvCheckTasksWaitingTermination+0x54>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <prvCheckTasksWaitingTermination+0x54>)
 80013f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80013f2:	f000 f9e3 	bl	80017bc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f80e 	bl	8001418 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <prvCheckTasksWaitingTermination+0x54>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e1      	bne.n	80013c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000e4 	.word	0x200000e4
 8001410:	20000110 	.word	0x20000110
 8001414:	200000f8 	.word	0x200000f8

08001418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fa93 	bl	8001950 <vPortFree>
            vPortFree( pxTCB );
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa90 	bl	8001950 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <prvResetNextTaskUnblockTime+0x2c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d104      	bne.n	8001450 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <prvResetNextTaskUnblockTime+0x30>)
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800144e:	e005      	b.n	800145c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <prvResetNextTaskUnblockTime+0x2c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <prvResetNextTaskUnblockTime+0x30>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200000c8 	.word	0x200000c8
 8001468:	20000130 	.word	0x20000130

0800146c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d06c      	beq.n	800155c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	429a      	cmp	r2, r3
 8001496:	d061      	beq.n	800155c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d15d      	bne.n	800155c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	3304      	adds	r3, #4
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fec6 	bl	8000236 <uxListRemove>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2201      	movs	r2, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <xTaskPriorityDisinherit+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4013      	ands	r3, r2
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <xTaskPriorityDisinherit+0xfc>)
 80014c4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f1c3 0205 	rsb	r2, r3, #5
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	2201      	movs	r2, #1
 80014e0:	409a      	lsls	r2, r3
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <xTaskPriorityDisinherit+0xfc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <xTaskPriorityDisinherit+0xfc>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	491e      	ldr	r1, [pc, #120]	; (800156c <xTaskPriorityDisinherit+0x100>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	3204      	adds	r2, #4
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <xTaskPriorityDisinherit+0x100>)
 8001530:	441a      	add	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <xTaskPriorityDisinherit+0x100>)
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <xTaskPriorityDisinherit+0x100>)
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4403      	add	r3, r0
 8001556:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800155c:	697b      	ldr	r3, [r7, #20]
    }
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000118 	.word	0x20000118
 800156c:	2000003c 	.word	0x2000003c

08001570 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <prvAddCurrentTaskToDelayedList+0xe4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3304      	adds	r3, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe55 	bl	8000236 <uxListRemove>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10b      	bne.n	80015aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2201      	movs	r2, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <prvAddCurrentTaskToDelayedList+0xec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4013      	ands	r3, r2
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <prvAddCurrentTaskToDelayedList+0xec>)
 80015a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d124      	bne.n	80015fc <prvAddCurrentTaskToDelayedList+0x8c>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d021      	beq.n	80015fc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	6892      	ldr	r2, [r2, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	3204      	adds	r2, #4
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1d1a      	adds	r2, r3, #4
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80015fa:	e026      	b.n	800164a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	d209      	bcs.n	8001628 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7fe fdd0 	bl	80001c6 <vListInsert>
}
 8001626:	e010      	b.n	800164a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <prvAddCurrentTaskToDelayedList+0xf8>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <prvAddCurrentTaskToDelayedList+0xe8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f7fe fdc6 	bl	80001c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <prvAddCurrentTaskToDelayedList+0xfc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d202      	bcs.n	800164a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001644:	4a09      	ldr	r2, [pc, #36]	; (800166c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6013      	str	r3, [r2, #0]
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000114 	.word	0x20000114
 8001658:	20000038 	.word	0x20000038
 800165c:	20000118 	.word	0x20000118
 8001660:	200000fc 	.word	0x200000fc
 8001664:	200000cc 	.word	0x200000cc
 8001668:	200000c8 	.word	0x200000c8
 800166c:	20000130 	.word	0x20000130

08001670 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3b04      	subs	r3, #4
 8001680:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001688:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3b04      	subs	r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f023 0201 	bic.w	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3b04      	subs	r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <pxPortInitialiseStack+0x54>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3b14      	subs	r3, #20
 80016aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3b20      	subs	r3, #32
 80016b6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	080016c9 	.word	0x080016c9

080016c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80016d2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80016e4:	bf00      	nop
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0fc      	beq.n	80016e6 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

08001700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <pxCurrentTCBConst2>)
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	6808      	ldr	r0, [r1, #0]
 8001706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800170a:	f380 8809 	msr	PSP, r0
 800170e:	f3bf 8f6f 	isb	sy
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f380 8811 	msr	BASEPRI, r0
 800171a:	f04e 0e0d 	orr.w	lr, lr, #13
 800171e:	4770      	bx	lr

08001720 <pxCurrentTCBConst2>:
 8001720:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop

08001728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <prvPortStartFirstTask+0x1c>)
 800172a:	6800      	ldr	r0, [r0, #0]
 800172c:	6800      	ldr	r0, [r0, #0]
 800172e:	f380 8808 	msr	MSP, r0
 8001732:	b662      	cpsie	i
 8001734:	b661      	cpsie	f
 8001736:	f3bf 8f4f 	dsb	sy
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	df00      	svc	0
 8001740:	bf00      	nop
 8001742:	0000      	.short	0x0000
 8001744:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop

0800174c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <xPortStartScheduler+0x38>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <xPortStartScheduler+0x38>)
 8001756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800175a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <xPortStartScheduler+0x38>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <xPortStartScheduler+0x38>)
 8001762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001766:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001768:	f000 f886 	bl	8001878 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <xPortStartScheduler+0x3c>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001772:	f7ff ffd9 	bl	8001728 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001776:	f7ff fc3b 	bl	8000ff0 <vTaskSwitchContext>
    prvTaskExitError();
 800177a:	f7ff ffa5 	bl	80016c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	e000ed20 	.word	0xe000ed20
 8001788:	20000004 	.word	0x20000004

0800178c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <vPortEnterCritical+0x2c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <vPortEnterCritical+0x2c>)
 80017ac:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000004 	.word	0x20000004

080017bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <vPortExitCritical+0x2c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <vPortExitCritical+0x2c>)
 80017ca:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <vPortExitCritical+0x2c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <vPortExitCritical+0x22>
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000004 	.word	0x20000004
 80017ec:	00000000 	.word	0x00000000

080017f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80017f0:	f3ef 8009 	mrs	r0, PSP
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <pxCurrentTCBConst>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001800:	6010      	str	r0, [r2, #0]
 8001802:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001806:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800180a:	f380 8811 	msr	BASEPRI, r0
 800180e:	f7ff fbef 	bl	8000ff0 <vTaskSwitchContext>
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f380 8811 	msr	BASEPRI, r0
 800181a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	6808      	ldr	r0, [r1, #0]
 8001822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001826:	f380 8809 	msr	PSP, r0
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	4770      	bx	lr

08001830 <pxCurrentTCBConst>:
 8001830:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop

08001838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
        __asm volatile
 800183e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001850:	f7ff fac8 	bl	8000de4 <xTaskIncrementTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SysTick_Handler+0x3c>)
 800185c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	e000ed04 	.word	0xe000ed04

08001878 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <vPortSetupTimerInterrupt+0x28>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <vPortSetupTimerInterrupt+0x2c>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <vPortSetupTimerInterrupt+0x30>)
 800188a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800188e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <vPortSetupTimerInterrupt+0x28>)
 8001892:	2207      	movs	r2, #7
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010
 80018a4:	e000e018 	.word	0xe000e018
 80018a8:	e000e014 	.word	0xe000e014

080018ac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00e      	beq.n	80018e0 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f023 0307 	bic.w	r3, r3, #7
 80018c8:	3308      	adds	r3, #8
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d205      	bcs.n	80018dc <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f023 0307 	bic.w	r3, r3, #7
 80018d6:	3308      	adds	r3, #8
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e001      	b.n	80018e0 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80018e0:	f7ff f986 	bl	8000bf0 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <pvPortMalloc+0x98>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <pvPortMalloc+0x9c>)
 80018ee:	f023 0307 	bic.w	r3, r3, #7
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <pvPortMalloc+0x98>)
 80018f6:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01b      	beq.n	8001936 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <pvPortMalloc+0xa0>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001906:	f641 7237 	movw	r2, #7991	; 0x1f37
 800190a:	4293      	cmp	r3, r2
 800190c:	d813      	bhi.n	8001936 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <pvPortMalloc+0xa0>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	441a      	add	r2, r3
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <pvPortMalloc+0xa0>)
 8001918:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800191a:	429a      	cmp	r2, r3
 800191c:	d90b      	bls.n	8001936 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <pvPortMalloc+0x98>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <pvPortMalloc+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <pvPortMalloc+0xa0>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <pvPortMalloc+0xa0>)
 8001934:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001936:	f7ff f969 	bl	8000c0c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20002080 	.word	0x20002080
 8001948:	20000143 	.word	0x20000143
 800194c:	2000207c 	.word	0x2000207c

08001950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <LUNA_CallBack+0x17c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8001970:	485c      	ldr	r0, [pc, #368]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001972:	f000 ffff 	bl	8002974 <MCAL_USART_ReciveData>
 8001976:	4603      	mov	r3, r0
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	f040 80ae 	bne.w	8001ada <LUNA_CallBack+0x176>
			x++;
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001988:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 800198a:	e0a6      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==1){
 800198c:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <LUNA_CallBack+0x17c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10d      	bne.n	80019b0 <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8001994:	4853      	ldr	r0, [pc, #332]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001996:	f000 ffed 	bl	8002974 <MCAL_USART_ReciveData>
 800199a:	4603      	mov	r3, r0
 800199c:	2b59      	cmp	r3, #89	; 0x59
 800199e:	f040 809c 	bne.w	8001ada <LUNA_CallBack+0x176>
		x++;
 80019a2:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019ac:	701a      	strb	r2, [r3, #0]
}
 80019ae:	e094      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==2){
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d10d      	bne.n	80019d4 <LUNA_CallBack+0x70>
		x++;
 80019b8:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019c2:	701a      	strb	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80019c4:	4847      	ldr	r0, [pc, #284]	; (8001ae4 <LUNA_CallBack+0x180>)
 80019c6:	f000 ffd5 	bl	8002974 <MCAL_USART_ReciveData>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <LUNA_CallBack+0x184>)
 80019d0:	801a      	strh	r2, [r3, #0]
}
 80019d2:	e082      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==3){
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d114      	bne.n	8001a06 <LUNA_CallBack+0xa2>
		x++;
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <LUNA_CallBack+0x17c>)
 80019e6:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80019e8:	483e      	ldr	r0, [pc, #248]	; (8001ae4 <LUNA_CallBack+0x180>)
 80019ea:	f000 ffc3 	bl	8002974 <MCAL_USART_ReciveData>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <LUNA_CallBack+0x184>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <LUNA_CallBack+0x184>)
 8001a02:	801a      	strh	r2, [r3, #0]
}
 8001a04:	e069      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==4){
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d110      	bne.n	8001a30 <LUNA_CallBack+0xcc>
		x++;
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a18:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <LUNA_CallBack+0x188>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a20:	4830      	ldr	r0, [pc, #192]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001a22:	f000 ffa7 	bl	8002974 <MCAL_USART_ReciveData>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <LUNA_CallBack+0x188>)
 8001a2c:	801a      	strh	r2, [r3, #0]
}
 8001a2e:	e054      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==5){
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d114      	bne.n	8001a62 <LUNA_CallBack+0xfe>
		x++;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a42:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001a46:	f000 ff95 	bl	8002974 <MCAL_USART_ReciveData>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <LUNA_CallBack+0x188>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <LUNA_CallBack+0x188>)
 8001a5e:	801a      	strh	r2, [r3, #0]
}
 8001a60:	e03b      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==6){
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d110      	bne.n	8001a8c <LUNA_CallBack+0x128>
		x++;
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a74:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <LUNA_CallBack+0x18c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a7c:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001a7e:	f000 ff79 	bl	8002974 <MCAL_USART_ReciveData>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <LUNA_CallBack+0x18c>)
 8001a88:	801a      	strh	r2, [r3, #0]
}
 8001a8a:	e026      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==7){
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b07      	cmp	r3, #7
 8001a92:	d114      	bne.n	8001abe <LUNA_CallBack+0x15a>
		x++;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001a9e:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001aa2:	f000 ff67 	bl	8002974 <MCAL_USART_ReciveData>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <LUNA_CallBack+0x18c>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <LUNA_CallBack+0x18c>)
 8001aba:	801a      	strh	r2, [r3, #0]
}
 8001abc:	e00d      	b.n	8001ada <LUNA_CallBack+0x176>
	}else if(x==8){
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d109      	bne.n	8001ada <LUNA_CallBack+0x176>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <LUNA_CallBack+0x180>)
 8001ac8:	f000 ff54 	bl	8002974 <MCAL_USART_ReciveData>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <LUNA_CallBack+0x190>)
 8001ad2:	701a      	strb	r2, [r3, #0]
		x=0;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <LUNA_CallBack+0x17c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000208b 	.word	0x2000208b
 8001ae4:	40004800 	.word	0x40004800
 8001ae8:	20002084 	.word	0x20002084
 8001aec:	20002086 	.word	0x20002086
 8001af0:	20002088 	.word	0x20002088
 8001af4:	2000208a 	.word	0x2000208a

08001af8 <LUNA_INIT>:

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8001b08:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <LUNA_INIT+0x248>)
 8001b0a:	f107 0408 	add.w	r4, r7, #8
 8001b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4619      	mov	r1, r3
 8001b1a:	488a      	ldr	r0, [pc, #552]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b1c:	f000 fd82 	bl	8002624 <MCAL_USART_init>
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b20:	215a      	movs	r1, #90	; 0x5a
 8001b22:	4888      	ldr	r0, [pc, #544]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b24:	f000 fee6 	bl	80028f4 <MCAL_USART_SendData>
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4886      	ldr	r0, [pc, #536]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b2c:	f000 fee2 	bl	80028f4 <MCAL_USART_SendData>
 8001b30:	2106      	movs	r1, #6
 8001b32:	4884      	ldr	r0, [pc, #528]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b34:	f000 fede 	bl	80028f4 <MCAL_USART_SendData>
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4882      	ldr	r0, [pc, #520]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b3c:	f000 feda 	bl	80028f4 <MCAL_USART_SendData>
 8001b40:	21c2      	movs	r1, #194	; 0xc2
 8001b42:	4880      	ldr	r0, [pc, #512]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b44:	f000 fed6 	bl	80028f4 <MCAL_USART_SendData>
 8001b48:	2101      	movs	r1, #1
 8001b4a:	487e      	ldr	r0, [pc, #504]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b4c:	f000 fed2 	bl	80028f4 <MCAL_USART_SendData>
 8001b50:	2100      	movs	r1, #0
 8001b52:	487c      	ldr	r0, [pc, #496]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b54:	f000 fece 	bl	80028f4 <MCAL_USART_SendData>
 8001b58:	2100      	movs	r1, #0
 8001b5a:	487a      	ldr	r0, [pc, #488]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b5c:	f000 feca 	bl	80028f4 <MCAL_USART_SendData>
	switch (mode){
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d01c      	beq.n	8001ba0 <LUNA_INIT+0xa8>
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d043      	beq.n	8001bf2 <LUNA_INIT+0xfa>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d152      	bne.n	8001c14 <LUNA_INIT+0x11c>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b6e:	215a      	movs	r1, #90	; 0x5a
 8001b70:	4874      	ldr	r0, [pc, #464]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b72:	f000 febf 	bl	80028f4 <MCAL_USART_SendData>
 8001b76:	2106      	movs	r1, #6
 8001b78:	4872      	ldr	r0, [pc, #456]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b7a:	f000 febb 	bl	80028f4 <MCAL_USART_SendData>
 8001b7e:	2103      	movs	r1, #3
 8001b80:	4870      	ldr	r0, [pc, #448]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b82:	f000 feb7 	bl	80028f4 <MCAL_USART_SendData>
 8001b86:	2164      	movs	r1, #100	; 0x64
 8001b88:	486e      	ldr	r0, [pc, #440]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b8a:	f000 feb3 	bl	80028f4 <MCAL_USART_SendData>
 8001b8e:	2100      	movs	r1, #0
 8001b90:	486c      	ldr	r0, [pc, #432]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b92:	f000 feaf 	bl	80028f4 <MCAL_USART_SendData>
 8001b96:	2100      	movs	r1, #0
 8001b98:	486a      	ldr	r0, [pc, #424]	; (8001d44 <LUNA_INIT+0x24c>)
 8001b9a:	f000 feab 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001b9e:	e039      	b.n	8001c14 <LUNA_INIT+0x11c>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001ba0:	215a      	movs	r1, #90	; 0x5a
 8001ba2:	4868      	ldr	r0, [pc, #416]	; (8001d44 <LUNA_INIT+0x24c>)
 8001ba4:	f000 fea6 	bl	80028f4 <MCAL_USART_SendData>
 8001ba8:	2106      	movs	r1, #6
 8001baa:	4866      	ldr	r0, [pc, #408]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bac:	f000 fea2 	bl	80028f4 <MCAL_USART_SendData>
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	4864      	ldr	r0, [pc, #400]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bb4:	f000 fe9e 	bl	80028f4 <MCAL_USART_SendData>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4862      	ldr	r0, [pc, #392]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bbc:	f000 fe9a 	bl	80028f4 <MCAL_USART_SendData>
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4860      	ldr	r0, [pc, #384]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bc4:	f000 fe96 	bl	80028f4 <MCAL_USART_SendData>
 8001bc8:	2100      	movs	r1, #0
 8001bca:	485e      	ldr	r0, [pc, #376]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bcc:	f000 fe92 	bl	80028f4 <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bd0:	215a      	movs	r1, #90	; 0x5a
 8001bd2:	485c      	ldr	r0, [pc, #368]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bd4:	f000 fe8e 	bl	80028f4 <MCAL_USART_SendData>
 8001bd8:	2104      	movs	r1, #4
 8001bda:	485a      	ldr	r0, [pc, #360]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bdc:	f000 fe8a 	bl	80028f4 <MCAL_USART_SendData>
 8001be0:	2104      	movs	r1, #4
 8001be2:	4858      	ldr	r0, [pc, #352]	; (8001d44 <LUNA_INIT+0x24c>)
 8001be4:	f000 fe86 	bl	80028f4 <MCAL_USART_SendData>
 8001be8:	2100      	movs	r1, #0
 8001bea:	4856      	ldr	r0, [pc, #344]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bec:	f000 fe82 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001bf0:	e010      	b.n	8001c14 <LUNA_INIT+0x11c>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bf2:	215a      	movs	r1, #90	; 0x5a
 8001bf4:	4853      	ldr	r0, [pc, #332]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bf6:	f000 fe7d 	bl	80028f4 <MCAL_USART_SendData>
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4851      	ldr	r0, [pc, #324]	; (8001d44 <LUNA_INIT+0x24c>)
 8001bfe:	f000 fe79 	bl	80028f4 <MCAL_USART_SendData>
 8001c02:	213b      	movs	r1, #59	; 0x3b
 8001c04:	484f      	ldr	r0, [pc, #316]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c06:	f000 fe75 	bl	80028f4 <MCAL_USART_SendData>
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	484d      	ldr	r0, [pc, #308]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c0e:	f000 fe71 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001c12:	bf00      	nop
	}
	switch (format)
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	f200 808e 	bhi.w	8001d38 <LUNA_INIT+0x240>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <LUNA_INIT+0x12c>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c67 	.word	0x08001c67
 8001c2c:	08001c91 	.word	0x08001c91
 8001c30:	08001cbb 	.word	0x08001cbb
 8001c34:	08001ce5 	.word	0x08001ce5
 8001c38:	08001d0f 	.word	0x08001d0f
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c3c:	215a      	movs	r1, #90	; 0x5a
 8001c3e:	4841      	ldr	r0, [pc, #260]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c40:	f000 fe58 	bl	80028f4 <MCAL_USART_SendData>
 8001c44:	2105      	movs	r1, #5
 8001c46:	483f      	ldr	r0, [pc, #252]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c48:	f000 fe54 	bl	80028f4 <MCAL_USART_SendData>
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	483d      	ldr	r0, [pc, #244]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c50:	f000 fe50 	bl	80028f4 <MCAL_USART_SendData>
 8001c54:	2101      	movs	r1, #1
 8001c56:	483b      	ldr	r0, [pc, #236]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c58:	f000 fe4c 	bl	80028f4 <MCAL_USART_SendData>
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4839      	ldr	r0, [pc, #228]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c60:	f000 fe48 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001c64:	e068      	b.n	8001d38 <LUNA_INIT+0x240>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c66:	215a      	movs	r1, #90	; 0x5a
 8001c68:	4836      	ldr	r0, [pc, #216]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c6a:	f000 fe43 	bl	80028f4 <MCAL_USART_SendData>
 8001c6e:	2105      	movs	r1, #5
 8001c70:	4834      	ldr	r0, [pc, #208]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c72:	f000 fe3f 	bl	80028f4 <MCAL_USART_SendData>
 8001c76:	2105      	movs	r1, #5
 8001c78:	4832      	ldr	r0, [pc, #200]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c7a:	f000 fe3b 	bl	80028f4 <MCAL_USART_SendData>
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4830      	ldr	r0, [pc, #192]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c82:	f000 fe37 	bl	80028f4 <MCAL_USART_SendData>
 8001c86:	2100      	movs	r1, #0
 8001c88:	482e      	ldr	r0, [pc, #184]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c8a:	f000 fe33 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001c8e:	e053      	b.n	8001d38 <LUNA_INIT+0x240>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c90:	215a      	movs	r1, #90	; 0x5a
 8001c92:	482c      	ldr	r0, [pc, #176]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c94:	f000 fe2e 	bl	80028f4 <MCAL_USART_SendData>
 8001c98:	2105      	movs	r1, #5
 8001c9a:	482a      	ldr	r0, [pc, #168]	; (8001d44 <LUNA_INIT+0x24c>)
 8001c9c:	f000 fe2a 	bl	80028f4 <MCAL_USART_SendData>
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	4828      	ldr	r0, [pc, #160]	; (8001d44 <LUNA_INIT+0x24c>)
 8001ca4:	f000 fe26 	bl	80028f4 <MCAL_USART_SendData>
 8001ca8:	2106      	movs	r1, #6
 8001caa:	4826      	ldr	r0, [pc, #152]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cac:	f000 fe22 	bl	80028f4 <MCAL_USART_SendData>
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4824      	ldr	r0, [pc, #144]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cb4:	f000 fe1e 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001cb8:	e03e      	b.n	8001d38 <LUNA_INIT+0x240>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001cba:	215a      	movs	r1, #90	; 0x5a
 8001cbc:	4821      	ldr	r0, [pc, #132]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cbe:	f000 fe19 	bl	80028f4 <MCAL_USART_SendData>
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	481f      	ldr	r0, [pc, #124]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cc6:	f000 fe15 	bl	80028f4 <MCAL_USART_SendData>
 8001cca:	2105      	movs	r1, #5
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cce:	f000 fe11 	bl	80028f4 <MCAL_USART_SendData>
 8001cd2:	2107      	movs	r1, #7
 8001cd4:	481b      	ldr	r0, [pc, #108]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cd6:	f000 fe0d 	bl	80028f4 <MCAL_USART_SendData>
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4819      	ldr	r0, [pc, #100]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cde:	f000 fe09 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001ce2:	e029      	b.n	8001d38 <LUNA_INIT+0x240>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001ce4:	215a      	movs	r1, #90	; 0x5a
 8001ce6:	4817      	ldr	r0, [pc, #92]	; (8001d44 <LUNA_INIT+0x24c>)
 8001ce8:	f000 fe04 	bl	80028f4 <MCAL_USART_SendData>
 8001cec:	2105      	movs	r1, #5
 8001cee:	4815      	ldr	r0, [pc, #84]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cf0:	f000 fe00 	bl	80028f4 <MCAL_USART_SendData>
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	4813      	ldr	r0, [pc, #76]	; (8001d44 <LUNA_INIT+0x24c>)
 8001cf8:	f000 fdfc 	bl	80028f4 <MCAL_USART_SendData>
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4811      	ldr	r0, [pc, #68]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d00:	f000 fdf8 	bl	80028f4 <MCAL_USART_SendData>
 8001d04:	2100      	movs	r1, #0
 8001d06:	480f      	ldr	r0, [pc, #60]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d08:	f000 fdf4 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001d0c:	e014      	b.n	8001d38 <LUNA_INIT+0x240>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001d0e:	215a      	movs	r1, #90	; 0x5a
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d12:	f000 fdef 	bl	80028f4 <MCAL_USART_SendData>
 8001d16:	2105      	movs	r1, #5
 8001d18:	480a      	ldr	r0, [pc, #40]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d1a:	f000 fdeb 	bl	80028f4 <MCAL_USART_SendData>
 8001d1e:	2105      	movs	r1, #5
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d22:	f000 fde7 	bl	80028f4 <MCAL_USART_SendData>
 8001d26:	2109      	movs	r1, #9
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d2a:	f000 fde3 	bl	80028f4 <MCAL_USART_SendData>
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <LUNA_INIT+0x24c>)
 8001d32:	f000 fddf 	bl	80028f4 <MCAL_USART_SendData>
		break;
 8001d36:	bf00      	nop
	}
}
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	08002f8c 	.word	0x08002f8c
 8001d44:	40004800 	.word	0x40004800

08001d48 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <EXTI0_IRQHandler+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <EXTI0_IRQHandler+0x20>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <EXTI0_IRQHandler+0x20>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6153      	str	r3, [r2, #20]
	}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200020b8 	.word	0x200020b8
 8001d68:	40010400 	.word	0x40010400

08001d6c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <EXTI1_IRQHandler+0x1c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <EXTI1_IRQHandler+0x20>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <EXTI1_IRQHandler+0x20>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6153      	str	r3, [r2, #20]

	}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200020b8 	.word	0x200020b8
 8001d8c:	40010400 	.word	0x40010400

08001d90 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <EXTI2_IRQHandler+0x1c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <EXTI2_IRQHandler+0x20>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <EXTI2_IRQHandler+0x20>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6153      	str	r3, [r2, #20]

	}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200020b8 	.word	0x200020b8
 8001db0:	40010400 	.word	0x40010400

08001db4 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <EXTI3_IRQHandler+0x1c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <EXTI3_IRQHandler+0x20>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <EXTI3_IRQHandler+0x20>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6153      	str	r3, [r2, #20]

	}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200020b8 	.word	0x200020b8
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <EXTI4_IRQHandler+0x1c>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <EXTI4_IRQHandler+0x20>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <EXTI4_IRQHandler+0x20>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	6153      	str	r3, [r2, #20]

	}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200020b8 	.word	0x200020b8
 8001df8:	40010400 	.word	0x40010400

08001dfc <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <EXTI9_5_IRQHandler+0x22>
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e12:	f043 0320 	orr.w	r3, r3, #32
 8001e16:	6153      	str	r3, [r2, #20]
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <EXTI9_5_IRQHandler+0xa4>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <EXTI9_5_IRQHandler+0x40>
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e34:	6153      	str	r3, [r2, #20]
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <EXTI9_5_IRQHandler+0xa4>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <EXTI9_5_IRQHandler+0x5e>
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e52:	6153      	str	r3, [r2, #20]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <EXTI9_5_IRQHandler+0xa4>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <EXTI9_5_IRQHandler+0x7c>
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6153      	str	r3, [r2, #20]
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <EXTI9_5_IRQHandler+0xa4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <EXTI9_5_IRQHandler+0x9a>
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <EXTI9_5_IRQHandler+0xa0>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6153      	str	r3, [r2, #20]
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <EXTI9_5_IRQHandler+0xa4>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	4798      	blx	r3
	}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	200020b8 	.word	0x200020b8

08001ea4 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <EXTI15_10_IRQHandler+0x22>
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebe:	6153      	str	r3, [r2, #20]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <EXTI15_10_IRQHandler+0x40>
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <EXTI15_10_IRQHandler+0x5e>
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001efa:	6153      	str	r3, [r2, #20]
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <EXTI15_10_IRQHandler+0x7c>
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f18:	6153      	str	r3, [r2, #20]
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <EXTI15_10_IRQHandler+0x9a>
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f36:	6153      	str	r3, [r2, #20]
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <EXTI15_10_IRQHandler+0xb8>
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <EXTI15_10_IRQHandler+0xbc>)
 8001f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f54:	6153      	str	r3, [r2, #20]
 8001f56:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <EXTI15_10_IRQHandler+0xc0>)
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	4798      	blx	r3

	}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40010400 	.word	0x40010400
 8001f64:	200020b8 	.word	0x200020b8

08001f68 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b07      	cmp	r3, #7
 8001f76:	d803      	bhi.n	8001f80 <Get_PIN_Positon+0x18>
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	e006      	b.n	8001f8e <Get_PIN_Positon+0x26>
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001f86:	3338      	adds	r3, #56	; 0x38
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	81fb      	strh	r3, [r7, #14]
return positon;
 8001f90:	89fb      	ldrh	r3, [r7, #14]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	; (8002154 <MCAL_GPIO_init+0x1b8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d106      	bne.n	8001fbc <MCAL_GPIO_init+0x20>
 8001fae:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4a69      	ldr	r2, [pc, #420]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6193      	str	r3, [r2, #24]
 8001fba:	e02a      	b.n	8002012 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a67      	ldr	r2, [pc, #412]	; (800215c <MCAL_GPIO_init+0x1c0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d106      	bne.n	8001fd2 <MCAL_GPIO_init+0x36>
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a63      	ldr	r2, [pc, #396]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	e01f      	b.n	8002012 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a62      	ldr	r2, [pc, #392]	; (8002160 <MCAL_GPIO_init+0x1c4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d106      	bne.n	8001fe8 <MCAL_GPIO_init+0x4c>
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	e014      	b.n	8002012 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <MCAL_GPIO_init+0x1c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d106      	bne.n	8001ffe <MCAL_GPIO_init+0x62>
 8001ff0:	4b59      	ldr	r3, [pc, #356]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	e009      	b.n	8002012 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a59      	ldr	r2, [pc, #356]	; (8002168 <MCAL_GPIO_init+0x1cc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d105      	bne.n	8002012 <MCAL_GPIO_init+0x76>
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a53      	ldr	r2, [pc, #332]	; (8002158 <MCAL_GPIO_init+0x1bc>)
 800200c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002010:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b07      	cmp	r3, #7
 800201a:	d801      	bhi.n	8002020 <MCAL_GPIO_init+0x84>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	e001      	b.n	8002024 <MCAL_GPIO_init+0x88>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff9b 	bl	8001f68 <Get_PIN_Positon>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	230f      	movs	r3, #15
 8002038:	4093      	lsls	r3, r2
 800203a:	43da      	mvns	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	401a      	ands	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00e      	beq.n	800206e <MCAL_GPIO_init+0xd2>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	789b      	ldrb	r3, [r3, #2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d009      	beq.n	800206e <MCAL_GPIO_init+0xd2>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d004      	beq.n	800206e <MCAL_GPIO_init+0xd2>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	789b      	ldrb	r3, [r3, #2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b03      	cmp	r3, #3
 800206c:	d156      	bne.n	800211c <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	789b      	ldrb	r3, [r3, #2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d11c      	bne.n	80020b2 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff72 	bl	8001f68 <Get_PIN_Positon>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	2308      	movs	r3, #8
 800208a:	fa03 f202 	lsl.w	r2, r3, r2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	2301      	movs	r3, #1
 80020a2:	4093      	lsls	r3, r2
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80020b0:	e04c      	b.n	800214c <MCAL_GPIO_init+0x1b0>
		}

		else if(PINx->MODE == INPUT_PU){
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d11c      	bne.n	80020f6 <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff50 	bl	8001f68 <Get_PIN_Positon>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	2308      	movs	r3, #8
 80020ce:	fa03 f202 	lsl.w	r2, r3, r2
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	fa03 f202 	lsl.w	r2, r3, r2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80020f4:	e02a      	b.n	800214c <MCAL_GPIO_init+0x1b0>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	789b      	ldrb	r3, [r3, #2]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	009c      	lsls	r4, r3, #2
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff2f 	bl	8001f68 <Get_PIN_Positon>
 800210a:	4603      	mov	r3, r0
 800210c:	fa04 f203 	lsl.w	r2, r4, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 800211a:	e017      	b.n	800214c <MCAL_GPIO_init+0x1b0>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	789b      	ldrb	r3, [r3, #2]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3b04      	subs	r3, #4
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	78d2      	ldrb	r2, [r2, #3]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	ea43 0402 	orr.w	r4, r3, r2
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff16 	bl	8001f68 <Get_PIN_Positon>
 800213c:	4603      	mov	r3, r0
 800213e:	fa04 f203 	lsl.w	r2, r4, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	601a      	str	r2, [r3, #0]

	}

}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}
 8002154:	40010800 	.word	0x40010800
 8002158:	40021000 	.word	0x40021000
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	40011800 	.word	0x40011800

0800216c <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10b      	bne.n	800219c <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	2301      	movs	r3, #1
 800218c:	fa03 f202 	lsl.w	r2, r3, r2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60da      	str	r2, [r3, #12]

	}



}
 800219a:	e00a      	b.n	80021b2 <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	4093      	lsls	r3, r2
 80021a6:	43da      	mvns	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60da      	str	r2, [r3, #12]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 80021c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	7813      	ldrb	r3, [r2, #0]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 80021dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e0:	6913      	ldr	r3, [r2, #16]
 80021e2:	f36f 0300 	bfc	r3, #0, #1
 80021e6:	6113      	str	r3, [r2, #16]
 80021e8:	e04e      	b.n	8002288 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 80021ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	7813      	ldrb	r3, [r2, #0]
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8002204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002208:	6913      	ldr	r3, [r2, #16]
 800220a:	f36f 0341 	bfc	r3, #1, #1
 800220e:	6113      	str	r3, [r2, #16]
 8002210:	e03a      	b.n	8002288 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8002212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	7813      	ldrb	r3, [r2, #0]
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 800222c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002230:	6913      	ldr	r3, [r2, #16]
 8002232:	f36f 0382 	bfc	r3, #2, #1
 8002236:	6113      	str	r3, [r2, #16]
 8002238:	e026      	b.n	8002288 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 800223a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	7813      	ldrb	r3, [r2, #0]
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8002254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002258:	6913      	ldr	r3, [r2, #16]
 800225a:	f36f 03c3 	bfc	r3, #3, #1
 800225e:	6113      	str	r3, [r2, #16]
 8002260:	e012      	b.n	8002288 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8002262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	7813      	ldrb	r3, [r2, #0]
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 800227c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002280:	6913      	ldr	r3, [r2, #16]
 8002282:	f36f 1304 	bfc	r3, #4, #1
 8002286:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <TIM2_IRQHandler+0xdc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3

}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200020f4 	.word	0x200020f4

0800229c <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <TIM3_IRQHandler+0xc8>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	7813      	ldrb	r3, [r2, #0]
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <TIM3_IRQHandler+0xc8>)
 80022bc:	6913      	ldr	r3, [r2, #16]
 80022be:	f36f 0300 	bfc	r3, #0, #1
 80022c2:	6113      	str	r3, [r2, #16]
 80022c4:	e046      	b.n	8002354 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <TIM3_IRQHandler+0xc8>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	7813      	ldrb	r3, [r2, #0]
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <TIM3_IRQHandler+0xc8>)
 80022e0:	6913      	ldr	r3, [r2, #16]
 80022e2:	f36f 0341 	bfc	r3, #1, #1
 80022e6:	6113      	str	r3, [r2, #16]
 80022e8:	e034      	b.n	8002354 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <TIM3_IRQHandler+0xc8>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	7813      	ldrb	r3, [r2, #0]
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <TIM3_IRQHandler+0xc8>)
 8002304:	6913      	ldr	r3, [r2, #16]
 8002306:	f36f 0382 	bfc	r3, #2, #1
 800230a:	6113      	str	r3, [r2, #16]
 800230c:	e022      	b.n	8002354 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <TIM3_IRQHandler+0xc8>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	7813      	ldrb	r3, [r2, #0]
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <TIM3_IRQHandler+0xc8>)
 8002328:	6913      	ldr	r3, [r2, #16]
 800232a:	f36f 03c3 	bfc	r3, #3, #1
 800232e:	6113      	str	r3, [r2, #16]
 8002330:	e010      	b.n	8002354 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <TIM3_IRQHandler+0xc8>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	7813      	ldrb	r3, [r2, #0]
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 800234a:	4a06      	ldr	r2, [pc, #24]	; (8002364 <TIM3_IRQHandler+0xc8>)
 800234c:	6913      	ldr	r3, [r2, #16]
 800234e:	f36f 1304 	bfc	r3, #4, #1
 8002352:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <TIM3_IRQHandler+0xcc>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3


}void TIM4_IRQHandler(){
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40000400 	.word	0x40000400
 8002368:	200020f4 	.word	0x200020f4

0800236c <TIM4_IRQHandler>:
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <TIM4_IRQHandler+0xd4>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	7813      	ldrb	r3, [r2, #0]
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 800238a:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <TIM4_IRQHandler+0xd4>)
 800238c:	6913      	ldr	r3, [r2, #16]
 800238e:	f36f 0300 	bfc	r3, #0, #1
 8002392:	6113      	str	r3, [r2, #16]
 8002394:	e04b      	b.n	800242e <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <TIM4_IRQHandler+0xd4>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	7813      	ldrb	r3, [r2, #0]
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <TIM4_IRQHandler+0xd4>)
 80023b0:	6913      	ldr	r3, [r2, #16]
 80023b2:	f36f 0341 	bfc	r3, #1, #1
 80023b6:	6113      	str	r3, [r2, #16]
 80023b8:	e039      	b.n	800242e <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <TIM4_IRQHandler+0xd4>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7813      	ldrb	r3, [r2, #0]
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <TIM4_IRQHandler+0xd4>)
 80023d4:	6913      	ldr	r3, [r2, #16]
 80023d6:	f36f 0382 	bfc	r3, #2, #1
 80023da:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	7813      	ldrb	r3, [r2, #0]
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	7013      	strb	r3, [r2, #0]
 80023e6:	e022      	b.n	800242e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <TIM4_IRQHandler+0xd4>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7813      	ldrb	r3, [r2, #0]
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <TIM4_IRQHandler+0xd4>)
 8002402:	6913      	ldr	r3, [r2, #16]
 8002404:	f36f 03c3 	bfc	r3, #3, #1
 8002408:	6113      	str	r3, [r2, #16]
 800240a:	e010      	b.n	800242e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <TIM4_IRQHandler+0xd4>)
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	7813      	ldrb	r3, [r2, #0]
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <TIM4_IRQHandler+0xd4>)
 8002426:	6913      	ldr	r3, [r2, #16]
 8002428:	f36f 1304 	bfc	r3, #4, #1
 800242c:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <TIM4_IRQHandler+0xd8>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4798      	blx	r3


}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40000800 	.word	0x40000800
 8002444:	200020f4 	.word	0x200020f4

08002448 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <MCAL_GET_SYS_CLCK+0x30>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d006      	beq.n	8002468 <MCAL_GET_SYS_CLCK+0x20>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d302      	bcc.n	8002464 <MCAL_GET_SYS_CLCK+0x1c>
 800245e:	2b02      	cmp	r3, #2
 8002460:	d004      	beq.n	800246c <MCAL_GET_SYS_CLCK+0x24>
 8002462:	e005      	b.n	8002470 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <MCAL_GET_SYS_CLCK+0x34>)
 8002466:	e003      	b.n	8002470 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <MCAL_GET_SYS_CLCK+0x38>)
 800246a:	e001      	b.n	8002470 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <MCAL_GET_SYS_CLCK+0x38>)
 800246e:	e7ff      	b.n	8002470 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200
 8002480:	00f42400 	.word	0x00f42400

08002484 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8002488:	f7ff ffde 	bl	8002448 <MCAL_GET_SYS_CLCK>
 800248c:	4601      	mov	r1, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <MCAL_GET_H_CLCK+0x20>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <MCAL_GET_H_CLCK+0x24>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	20000008 	.word	0x20000008

080024ac <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 80024b0:	f7ff ffe8 	bl	8002484 <MCAL_GET_H_CLCK>
 80024b4:	4601      	mov	r1, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <MCAL_GET_PCLCK1+0x20>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <MCAL_GET_PCLCK1+0x24>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3

}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	20000008 	.word	0x20000008

080024d4 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80024d8:	f7ff ffd4 	bl	8002484 <MCAL_GET_H_CLCK>
 80024dc:	4601      	mov	r1, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <MCAL_GET_PCLCK2+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0adb      	lsrs	r3, r3, #11
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <MCAL_GET_PCLCK2+0x24>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3

}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	20000008 	.word	0x20000008

080024fc <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4905      	ldr	r1, [pc, #20]	; (800251c <SPI1_IRQHandler+0x20>)
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f80c 	bl	8002524 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SPI1_IRQHandler+0x24>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	7938      	ldrb	r0, [r7, #4]
 8002512:	4798      	blx	r3
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013000 	.word	0x40013000
 8002520:	2000208c 	.word	0x2000208c

08002524 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00f      	beq.n	800255c <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	7813      	ldrb	r3, [r2, #0]
 8002540:	f36f 0300 	bfc	r3, #0, #1
 8002544:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	7813      	ldrb	r3, [r2, #0]
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	7913      	ldrb	r3, [r2, #4]
 8002554:	f36f 1386 	bfc	r3, #6, #1
 8002558:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 800255a:	e015      	b.n	8002588 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7813      	ldrb	r3, [r2, #0]
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	7813      	ldrb	r3, [r2, #0]
 8002578:	f36f 0341 	bfc	r3, #1, #1
 800257c:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	7913      	ldrb	r3, [r2, #4]
 8002582:	f36f 13c7 	bfc	r3, #7, #1
 8002586:	7113      	strb	r3, [r2, #4]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <TIM1_UP_IRQHandler+0x1c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <TIM1_UP_IRQHandler+0x20>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	6913      	ldr	r3, [r2, #16]
 80025a4:	f36f 0300 	bfc	r3, #0, #1
 80025a8:	6113      	str	r3, [r2, #16]

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20002130 	.word	0x20002130
 80025b4:	20002140 	.word	0x20002140

080025b8 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <TIM1_CC_IRQHandler+0x1c>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <TIM1_CC_IRQHandler+0x20>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	6913      	ldr	r3, [r2, #16]
 80025c8:	f36f 0341 	bfc	r3, #1, #1
 80025cc:	6113      	str	r3, [r2, #16]

}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20002130 	.word	0x20002130
 80025d8:	20002140 	.word	0x20002140

080025dc <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <TIM1_BRK_IRQHandler+0x1c>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <TIM1_BRK_IRQHandler+0x20>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	6913      	ldr	r3, [r2, #16]
 80025ec:	f36f 0300 	bfc	r3, #0, #1
 80025f0:	6113      	str	r3, [r2, #16]

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20002130 	.word	0x20002130
 80025fc:	20002140 	.word	0x20002140

08002600 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <TIM1_TRG_COM_IRQHandler+0x1c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <TIM1_TRG_COM_IRQHandler+0x20>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	6913      	ldr	r3, [r2, #16]
 8002610:	f36f 0300 	bfc	r3, #0, #1
 8002614:	6113      	str	r3, [r2, #16]

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20002130 	.word	0x20002130
 8002620:	20002140 	.word	0x20002140

08002624 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4aa9      	ldr	r2, [pc, #676]	; (80028d8 <MCAL_USART_init+0x2b4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10c      	bne.n	8002650 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8002636:	4aa9      	ldr	r2, [pc, #676]	; (80028dc <MCAL_USART_init+0x2b8>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4614      	mov	r4, r2
 800263c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8002642:	4ba7      	ldr	r3, [pc, #668]	; (80028e0 <MCAL_USART_init+0x2bc>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	4aa6      	ldr	r2, [pc, #664]	; (80028e0 <MCAL_USART_init+0x2bc>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6193      	str	r3, [r2, #24]
 800264e:	e024      	b.n	800269a <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4aa4      	ldr	r2, [pc, #656]	; (80028e4 <MCAL_USART_init+0x2c0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d10e      	bne.n	8002676 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8002658:	4ba0      	ldr	r3, [pc, #640]	; (80028dc <MCAL_USART_init+0x2b8>)
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	f103 0410 	add.w	r4, r3, #16
 8002660:	4613      	mov	r3, r2
 8002662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8002668:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <MCAL_USART_init+0x2bc>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a9c      	ldr	r2, [pc, #624]	; (80028e0 <MCAL_USART_init+0x2bc>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	e011      	b.n	800269a <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a9b      	ldr	r2, [pc, #620]	; (80028e8 <MCAL_USART_init+0x2c4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 800267e:	4b97      	ldr	r3, [pc, #604]	; (80028dc <MCAL_USART_init+0x2b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	f103 0420 	add.w	r4, r3, #32
 8002686:	4613      	mov	r3, r2
 8002688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 800268e:	4b94      	ldr	r3, [pc, #592]	; (80028e0 <MCAL_USART_init+0x2bc>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <MCAL_USART_init+0x2bc>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	7912      	ldrb	r2, [r2, #4]
 80026ae:	0312      	lsls	r2, r2, #12
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	79d2      	ldrb	r2, [r2, #7]
 80026be:	0312      	lsls	r2, r2, #12
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7a5b      	ldrb	r3, [r3, #9]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f043 0208 	orr.w	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f043 0204 	orr.w	r2, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7a1b      	ldrb	r3, [r3, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d826      	bhi.n	800273c <MCAL_USART_init+0x118>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <MCAL_USART_init+0xd0>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	08002713 	.word	0x08002713
 80026fc:	08002721 	.word	0x08002721
 8002700:	0800272f 	.word	0x0800272f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	615a      	str	r2, [r3, #20]
		break;
 8002710:	e014      	b.n	800273c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	615a      	str	r2, [r3, #20]
		break;
 800271e:	e00d      	b.n	800273c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	615a      	str	r2, [r3, #20]
		break;
 800272c:	e006      	b.n	800273c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	615a      	str	r2, [r3, #20]
		break;
 800273a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	7952      	ldrb	r2, [r2, #5]
 8002744:	0252      	lsls	r2, r2, #9
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	799b      	ldrb	r3, [r3, #6]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d125      	bne.n	80027a0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <MCAL_USART_init+0x2b4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d106      	bne.n	800276a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 800275c:	4b63      	ldr	r3, [pc, #396]	; (80028ec <MCAL_USART_init+0x2c8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <MCAL_USART_init+0x2c8>)
 8002762:	f043 0320 	orr.w	r3, r3, #32
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e014      	b.n	8002794 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a5d      	ldr	r2, [pc, #372]	; (80028e4 <MCAL_USART_init+0x2c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d106      	bne.n	8002780 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8002772:	4b5e      	ldr	r3, [pc, #376]	; (80028ec <MCAL_USART_init+0x2c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5d      	ldr	r2, [pc, #372]	; (80028ec <MCAL_USART_init+0x2c8>)
 8002778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e009      	b.n	8002794 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <MCAL_USART_init+0x2c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d105      	bne.n	8002794 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <MCAL_USART_init+0x2c8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <MCAL_USART_init+0x2c8>)
 800278e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002792:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <MCAL_USART_init+0x2b4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d12d      	bne.n	8002804 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80027a8:	f7ff fe94 	bl	80024d4 <MCAL_GET_PCLCK2>
 80027ac:	4602      	mov	r2, r0
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	011c      	lsls	r4, r3, #4
 80027ba:	f7ff fe8b 	bl	80024d4 <MCAL_GET_PCLCK2>
 80027be:	4602      	mov	r2, r0
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009a      	lsls	r2, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80027d4:	f7ff fe7e 	bl	80024d4 <MCAL_GET_PCLCK2>
 80027d8:	4602      	mov	r2, r0
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	2264      	movs	r2, #100	; 0x64
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	1aeb      	subs	r3, r5, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <MCAL_USART_init+0x2cc>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	ea44 0203 	orr.w	r2, r4, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	e062      	b.n	80028ca <MCAL_USART_init+0x2a6>
			}else if(USARTx==USART2){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <MCAL_USART_init+0x2c0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12d      	bne.n	8002868 <MCAL_USART_init+0x244>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800280c:	f7ff fe4e 	bl	80024ac <MCAL_GET_PCLCK1>
 8002810:	4602      	mov	r2, r0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	011c      	lsls	r4, r3, #4
 800281e:	f7ff fe45 	bl	80024ac <MCAL_GET_PCLCK1>
 8002822:	4602      	mov	r2, r0
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009a      	lsls	r2, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fbb2 f5f3 	udiv	r5, r2, r3
 8002838:	f7ff fe38 	bl	80024ac <MCAL_GET_PCLCK1>
 800283c:	4602      	mov	r2, r0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	2264      	movs	r2, #100	; 0x64
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	1aeb      	subs	r3, r5, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <MCAL_USART_init+0x2cc>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	ea44 0203 	orr.w	r2, r4, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	e030      	b.n	80028ca <MCAL_USART_init+0x2a6>

		}else if(USARTx==USART3){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <MCAL_USART_init+0x2c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12c      	bne.n	80028ca <MCAL_USART_init+0x2a6>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8002870:	f7ff fe1c 	bl	80024ac <MCAL_GET_PCLCK1>
 8002874:	4602      	mov	r2, r0
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	011c      	lsls	r4, r3, #4
 8002882:	f7ff fe13 	bl	80024ac <MCAL_GET_PCLCK1>
 8002886:	4602      	mov	r2, r0
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f5f3 	udiv	r5, r2, r3
 800289c:	f7ff fe06 	bl	80024ac <MCAL_GET_PCLCK1>
 80028a0:	4602      	mov	r2, r0
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	2264      	movs	r2, #100	; 0x64
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	1aeb      	subs	r3, r5, r3
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <MCAL_USART_init+0x2cc>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	ea44 0203 	orr.w	r2, r4, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f89c 	bl	8002a08 <SET_GPIO>
	}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	40013800 	.word	0x40013800
 80028dc:	20002144 	.word	0x20002144
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40004800 	.word	0x40004800
 80028ec:	e000e104 	.word	0xe000e104
 80028f0:	51eb851f 	.word	0x51eb851f

080028f4 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <MCAL_USART_SendData+0x68>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d102      	bne.n	8002912 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MCAL_USART_SendData+0x6c>)
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e00c      	b.n	800292c <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <MCAL_USART_SendData+0x70>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MCAL_USART_SendData+0x74>)
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e005      	b.n	800292c <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <MCAL_USART_SendData+0x78>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MCAL_USART_SendData+0x7c>)
 800292a:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 800292c:	bf00      	nop
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	791b      	ldrb	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d103      	bne.n	800294a <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8002948:	e002      	b.n	8002950 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40013800 	.word	0x40013800
 8002960:	20002144 	.word	0x20002144
 8002964:	40004400 	.word	0x40004400
 8002968:	20002154 	.word	0x20002154
 800296c:	40004800 	.word	0x40004800
 8002970:	20002164 	.word	0x20002164

08002974 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <MCAL_USART_ReciveData+0x7c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d102      	bne.n	800298e <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MCAL_USART_ReciveData+0x80>)
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e00c      	b.n	80029a8 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <MCAL_USART_ReciveData+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d102      	bne.n	800299c <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <MCAL_USART_ReciveData+0x88>)
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e005      	b.n	80029a8 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <MCAL_USART_ReciveData+0x8c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MCAL_USART_ReciveData+0x90>)
 80029a6:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	799b      	ldrb	r3, [r3, #6]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80029b0:	bf00      	nop
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f9      	beq.n	80029b2 <MCAL_USART_ReciveData+0x3e>
 80029be:	e002      	b.n	80029c6 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	799b      	ldrb	r3, [r3, #6]
 80029c4:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	795b      	ldrb	r3, [r3, #5]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	e006      	b.n	80029e6 <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e4:	b29b      	uxth	r3, r3

		}

}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40013800 	.word	0x40013800
 80029f4:	20002144 	.word	0x20002144
 80029f8:	40004400 	.word	0x40004400
 80029fc:	20002154 	.word	0x20002154
 8002a00:	40004800 	.word	0x40004800
 8002a04:	20002164 	.word	0x20002164

08002a08 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <SET_GPIO+0xbc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <SET_GPIO+0xc0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d115      	bne.n	8002a4a <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <SET_GPIO+0xc4>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <SET_GPIO+0xc4>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4827      	ldr	r0, [pc, #156]	; (8002ad0 <SET_GPIO+0xc8>)
 8002a32:	f7ff fab3 	bl	8001f9c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <SET_GPIO+0xcc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4619      	mov	r1, r3
 8002a42:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <SET_GPIO+0xc8>)
 8002a44:	f7ff faaa 	bl	8001f9c <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8002a48:	e038      	b.n	8002abc <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <SET_GPIO+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d118      	bne.n	8002a84 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <SET_GPIO+0xc4>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <SET_GPIO+0xc4>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <SET_GPIO+0xd4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <SET_GPIO+0xc8>)
 8002a6c:	f7ff fa96 	bl	8001f9c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <SET_GPIO+0xd8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <SET_GPIO+0xc8>)
 8002a7e:	f7ff fa8d 	bl	8001f9c <MCAL_GPIO_init>
}
 8002a82:	e01b      	b.n	8002abc <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <SET_GPIO+0xdc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d117      	bne.n	8002abc <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <SET_GPIO+0xc4>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <SET_GPIO+0xc4>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <SET_GPIO+0xe0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4811      	ldr	r0, [pc, #68]	; (8002aec <SET_GPIO+0xe4>)
 8002aa6:	f7ff fa79 	bl	8001f9c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <SET_GPIO+0xe8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <SET_GPIO+0xe4>)
 8002ab8:	f7ff fa70 	bl	8001f9c <MCAL_GPIO_init>
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	08002f9c 	.word	0x08002f9c
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010800 	.word	0x40010800
 8002ad4:	08002fa0 	.word	0x08002fa0
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	08002fa4 	.word	0x08002fa4
 8002ae0:	08002fa8 	.word	0x08002fa8
 8002ae4:	40004800 	.word	0x40004800
 8002ae8:	08002fac 	.word	0x08002fac
 8002aec:	40010c00 	.word	0x40010c00
 8002af0:	08002fb0 	.word	0x08002fb0

08002af4 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <USART1_IRQHandler+0x10>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20002144 	.word	0x20002144

08002b08 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <USART2_IRQHandler+0x10>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20002144 	.word	0x20002144

08002b1c <USART3_IRQHandler>:
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <USART3_IRQHandler+0x10>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4798      	blx	r3
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20002144 	.word	0x20002144

08002b30 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	while(1);
 8002b34:	e7fe      	b.n	8002b34 <Error_Handller+0x4>
	...

08002b38 <TSR_START>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_START(void){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	GR_TSR_FLAG_START=0x01;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <TSR_START+0x1c>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
	MCAL_USART_SendData(TSR_UART_INSTANT, GR_TSR_FLAG_START);
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <TSR_START+0x1c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <TSR_START+0x20>)
 8002b4a:	f7ff fed3 	bl	80028f4 <MCAL_USART_SendData>

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000019 	.word	0x20000019
 8002b58:	40013800 	.word	0x40013800

08002b5c <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	while(1){
		TSR_START();
 8002b60:	f7ff ffea 	bl	8002b38 <TSR_START>
		if(xQueueReceive(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_FINAL,5)==pdTRUE){
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <TSR_Handller_TASK+0x2c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2205      	movs	r2, #5
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <TSR_Handller_TASK+0x30>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fd13 	bl	8000598 <xQueueReceive>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d1f3      	bne.n	8002b60 <TSR_Handller_TASK+0x4>

			switch(GR_TSR_FLAG_OLED_FINAL){
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <TSR_Handller_TASK+0x30>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <TSR_Handller_TASK+0x28>
 8002b80:	2b99      	cmp	r3, #153	; 0x99
			case 0x99:
				break;
 8002b82:	e000      	b.n	8002b86 <TSR_Handller_TASK+0x2a>
			case 0x1:
				break;
 8002b84:	bf00      	nop
		TSR_START();
 8002b86:	e7eb      	b.n	8002b60 <TSR_Handller_TASK+0x4>
 8002b88:	20002174 	.word	0x20002174
 8002b8c:	200020af 	.word	0x200020af

08002b90 <TSR_Flag_Read_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Flag_Read_TASK(){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueSend(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_send,1)==pdTRUE){
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <TSR_Flag_Read_TASK+0x14>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4902      	ldr	r1, [pc, #8]	; (8002ba8 <TSR_Flag_Read_TASK+0x18>)
 8002b9e:	f7fd fc51 	bl	8000444 <xQueueGenericSend>
 8002ba2:	e7f7      	b.n	8002b94 <TSR_Flag_Read_TASK+0x4>
 8002ba4:	20002174 	.word	0x20002174
 8002ba8:	200020ae 	.word	0x200020ae

08002bac <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	if(	TSR_UART_INSTANT->SR &(1<<5)){
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <TSR_call_Back+0x94>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <TSR_call_Back+0x2c>
		GR_TSR_FLAG_rec=	MCAL_USART_ReciveData(TSR_UART_INSTANT);
 8002bbc:	4820      	ldr	r0, [pc, #128]	; (8002c40 <TSR_call_Back+0x94>)
 8002bbe:	f7ff fed9 	bl	8002974 <MCAL_USART_ReciveData>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <TSR_call_Back+0x98>)
 8002bc8:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_rec &=0x0F;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <TSR_call_Back+0x98>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <TSR_call_Back+0x98>)
 8002bd6:	701a      	strb	r2, [r3, #0]

	}
	if(i<2)
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <TSR_call_Back+0x9c>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d81f      	bhi.n	8002c20 <TSR_call_Back+0x74>
	{
		//		MCAL_USART_SendData(TSR_UART_INSTANT,GR_TSR_FLAG_rec);
		GR_TSR_FLAG_OLED= (GR_TSR_FLAG_OLED<<4) | (GR_TSR_FLAG_rec);
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <TSR_call_Back+0xa0>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	b25a      	sxtb	r2, r3
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <TSR_call_Back+0x98>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <TSR_call_Back+0xa0>)
 8002bf6:	701a      	strb	r2, [r3, #0]
		temp = ((GR_TSR_FLAG_OLED >>4) |((GR_TSR_FLAG_OLED <<4)));
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <TSR_call_Back+0xa0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	b25a      	sxtb	r2, r3
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <TSR_call_Back+0xa0>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <TSR_call_Back+0xa4>)
 8002c12:	701a      	strb	r2, [r3, #0]
		i++;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <TSR_call_Back+0x9c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <TSR_call_Back+0x9c>)
 8002c1e:	701a      	strb	r2, [r3, #0]

	}

	if(i>=2){
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <TSR_call_Back+0x9c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d909      	bls.n	8002c3c <TSR_call_Back+0x90>
		i=0;
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <TSR_call_Back+0x9c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED_send=(temp);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <TSR_call_Back+0xa4>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <TSR_call_Back+0xa8>)
 8002c34:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED=0;
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <TSR_call_Back+0xa0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	}

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40013800 	.word	0x40013800
 8002c44:	200020ac 	.word	0x200020ac
 8002c48:	200020b6 	.word	0x200020b6
 8002c4c:	200020ad 	.word	0x200020ad
 8002c50:	200020b0 	.word	0x200020b0
 8002c54:	200020ae 	.word	0x200020ae

08002c58 <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <TSR_init+0x24>)
 8002c60:	463c      	mov	r4, r7
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <TSR_init+0x28>)
 8002c6e:	f7ff fcd9 	bl	8002624 <MCAL_USART_init>
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	08002fb4 	.word	0x08002fb4
 8002c80:	40013800 	.word	0x40013800

08002c84 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <ACC_Handller_TASK+0xa4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4927      	ldr	r1, [pc, #156]	; (8002d2c <ACC_Handller_TASK+0xa8>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc81 	bl	8000598 <xQueueReceive>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d1f5      	bne.n	8002c88 <ACC_Handller_TASK+0x4>
			MCAL_USART_SendData(LUNA_UART_INSTANT, (uint8_t)ACC_AMP);
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <ACC_Handller_TASK+0xa8>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4822      	ldr	r0, [pc, #136]	; (8002d30 <ACC_Handller_TASK+0xac>)
 8002ca6:	f7ff fe25 	bl	80028f4 <MCAL_USART_SendData>
			MCAL_USART_SendData(LUNA_UART_INSTANT, (ACC_AMP>>8));
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <ACC_Handller_TASK+0xa8>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	481e      	ldr	r0, [pc, #120]	; (8002d30 <ACC_Handller_TASK+0xac>)
 8002cb8:	f7ff fe1c 	bl	80028f4 <MCAL_USART_SendData>
			if((ACC_AMP>=100) && (ACC_AMP<=65535) ){
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <ACC_Handller_TASK+0xa8>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	2b63      	cmp	r3, #99	; 0x63
 8002cc2:	d929      	bls.n	8002d18 <ACC_Handller_TASK+0x94>
				if(xQueueReceive(ACC__dis_Queue,&ACC_dis,2)==pdTRUE){
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <ACC_Handller_TASK+0xb0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <ACC_Handller_TASK+0xb4>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc63 	bl	8000598 <xQueueReceive>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d1d7      	bne.n	8002c88 <ACC_Handller_TASK+0x4>
					MCAL_USART_SendData(LUNA_UART_INSTANT, (uint8_t)ACC_dis);
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <ACC_Handller_TASK+0xb4>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4813      	ldr	r0, [pc, #76]	; (8002d30 <ACC_Handller_TASK+0xac>)
 8002ce2:	f7ff fe07 	bl	80028f4 <MCAL_USART_SendData>
					MCAL_USART_SendData(LUNA_UART_INSTANT, (ACC_dis>>8));
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <ACC_Handller_TASK+0xb4>)
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480f      	ldr	r0, [pc, #60]	; (8002d30 <ACC_Handller_TASK+0xac>)
 8002cf4:	f7ff fdfe 	bl	80028f4 <MCAL_USART_SendData>
					if(ACC_dis <= Distance_SET){
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <ACC_Handller_TASK+0xb4>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d805      	bhi.n	8002d0c <ACC_Handller_TASK+0x88>
						// here should send CAN fram to atmega to stop the motor
						MCAL_write_PIN(GPIOA, PIN_0, 1);
 8002d00:	2201      	movs	r2, #1
 8002d02:	2100      	movs	r1, #0
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <ACC_Handller_TASK+0xb8>)
 8002d06:	f7ff fa31 	bl	800216c <MCAL_write_PIN>
 8002d0a:	e7bd      	b.n	8002c88 <ACC_Handller_TASK+0x4>
					}else{
						MCAL_write_PIN(GPIOA, PIN_0, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <ACC_Handller_TASK+0xb8>)
 8002d12:	f7ff fa2b 	bl	800216c <MCAL_write_PIN>
 8002d16:	e7b7      	b.n	8002c88 <ACC_Handller_TASK+0x4>
				}

			}
			// if the Signal strength indicator not strong dequeue its disance value
			else{
				xQueueReceive(ACC__dis_Queue,&ACC_dis,0);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <ACC_Handller_TASK+0xb0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4906      	ldr	r1, [pc, #24]	; (8002d38 <ACC_Handller_TASK+0xb4>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc39 	bl	8000598 <xQueueReceive>
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 8002d26:	e7af      	b.n	8002c88 <ACC_Handller_TASK+0x4>
 8002d28:	20002180 	.word	0x20002180
 8002d2c:	200020b4 	.word	0x200020b4
 8002d30:	40004800 	.word	0x40004800
 8002d34:	2000217c 	.word	0x2000217c
 8002d38:	200020b2 	.word	0x200020b2
 8002d3c:	40010800 	.word	0x40010800

08002d40 <ACC_LUNA_READ_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_LUNA_READ_TASK(){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <ACC_LUNA_READ_TASK+0x24>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4906      	ldr	r1, [pc, #24]	; (8002d68 <ACC_LUNA_READ_TASK+0x28>)
 8002d4e:	f7fd fb79 	bl	8000444 <xQueueGenericSend>
		}else{

		}
		if(xQueueSend(ACC__AMP_Queue,&LUNA_AMP,2)==pdTRUE){
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <ACC_LUNA_READ_TASK+0x2c>)
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4905      	ldr	r1, [pc, #20]	; (8002d70 <ACC_LUNA_READ_TASK+0x30>)
 8002d5c:	f7fd fb72 	bl	8000444 <xQueueGenericSend>
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 8002d60:	e7f0      	b.n	8002d44 <ACC_LUNA_READ_TASK+0x4>
 8002d62:	bf00      	nop
 8002d64:	2000217c 	.word	0x2000217c
 8002d68:	20002084 	.word	0x20002084
 8002d6c:	20002180 	.word	0x20002180
 8002d70:	20002086 	.word	0x20002086

08002d74 <HW_init>:
	}
}



void HW_init(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0

	////////////*********TSR init***************//////////////////
	TSR_init();
 8002d7a:	f7ff ff6d 	bl	8002c58 <TSR_init>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe feb9 	bl	8001af8 <LUNA_INIT>
	PIN_config PINx={PIN_0,OUTPUT_PP,SPEED_10};
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HW_init+0x2c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <HW_init+0x30>)
 8002d92:	f7ff f903 	bl	8001f9c <MCAL_GPIO_init>



}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08002fc4 	.word	0x08002fc4
 8002da4:	40010800 	.word	0x40010800

08002da8 <main>:
int main(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	HW_init();
 8002dae:	f7ff ffe1 	bl	8002d74 <HW_init>
	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8002db2:	2300      	movs	r3, #0
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	2302      	movs	r3, #2
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc0:	492d      	ldr	r1, [pc, #180]	; (8002e78 <main+0xd0>)
 8002dc2:	482e      	ldr	r0, [pc, #184]	; (8002e7c <main+0xd4>)
 8002dc4:	f7fd fd9a 	bl	80008fc <xTaskCreate>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <main+0x2a>
		Error_Handller();
 8002dce:	f7ff feaf 	bl	8002b30 <Error_Handller>
	}

	if(xTaskCreate(TSR_Flag_Read_TASK,"Read_From_UART1",256,NULL,2,NULL)!=pdPASS ){
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de0:	4927      	ldr	r1, [pc, #156]	; (8002e80 <main+0xd8>)
 8002de2:	4828      	ldr	r0, [pc, #160]	; (8002e84 <main+0xdc>)
 8002de4:	f7fd fd8a 	bl	80008fc <xTaskCreate>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <main+0x4a>
		Error_Handller();
 8002dee:	f7ff fe9f 	bl	8002b30 <Error_Handller>
	}
	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8002df2:	2300      	movs	r3, #0
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2302      	movs	r3, #2
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e00:	4921      	ldr	r1, [pc, #132]	; (8002e88 <main+0xe0>)
 8002e02:	4822      	ldr	r0, [pc, #136]	; (8002e8c <main+0xe4>)
 8002e04:	f7fd fd7a 	bl	80008fc <xTaskCreate>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <main+0x6a>
		Error_Handller();
 8002e0e:	f7ff fe8f 	bl	8002b30 <Error_Handller>
	}

	if(xTaskCreate(ACC_LUNA_READ_TASK,"LUNA_READ",256,NULL,2,NULL)!=pdPASS ){
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e20:	491b      	ldr	r1, [pc, #108]	; (8002e90 <main+0xe8>)
 8002e22:	481c      	ldr	r0, [pc, #112]	; (8002e94 <main+0xec>)
 8002e24:	f7fd fd6a 	bl	80008fc <xTaskCreate>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <main+0x8a>
		Error_Handller();
 8002e2e:	f7ff fe7f 	bl	8002b30 <Error_Handller>
	}
	xSemaphore = xSemaphoreCreateBinary();
 8002e32:	2203      	movs	r2, #3
 8002e34:	2100      	movs	r1, #0
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7fd faa0 	bl	800037c <xQueueGenericCreate>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <main+0xf0>)
 8002e40:	601a      	str	r2, [r3, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8002e42:	2200      	movs	r2, #0
 8002e44:	2101      	movs	r1, #1
 8002e46:	200a      	movs	r0, #10
 8002e48:	f7fd fa98 	bl	800037c <xQueueGenericCreate>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <main+0xf4>)
 8002e50:	601a      	str	r2, [r3, #0]
	ACC__dis_Queue=xQueueCreate(10,sizeof(char));
 8002e52:	2200      	movs	r2, #0
 8002e54:	2101      	movs	r1, #1
 8002e56:	200a      	movs	r0, #10
 8002e58:	f7fd fa90 	bl	800037c <xQueueGenericCreate>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <main+0xf8>)
 8002e60:	601a      	str	r2, [r3, #0]
	ACC__AMP_Queue=xQueueCreate(10,sizeof(char));
 8002e62:	2200      	movs	r2, #0
 8002e64:	2101      	movs	r1, #1
 8002e66:	200a      	movs	r0, #10
 8002e68:	f7fd fa88 	bl	800037c <xQueueGenericCreate>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <main+0xfc>)
 8002e70:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8002e72:	f7fd fe83 	bl	8000b7c <vTaskStartScheduler>

	for(;;);
 8002e76:	e7fe      	b.n	8002e76 <main+0xce>
 8002e78:	08002fc8 	.word	0x08002fc8
 8002e7c:	08002b5d 	.word	0x08002b5d
 8002e80:	08002fdc 	.word	0x08002fdc
 8002e84:	08002b91 	.word	0x08002b91
 8002e88:	08002fec 	.word	0x08002fec
 8002e8c:	08002c85 	.word	0x08002c85
 8002e90:	08003000 	.word	0x08003000
 8002e94:	08002d41 	.word	0x08002d41
 8002e98:	20002178 	.word	0x20002178
 8002e9c:	20002174 	.word	0x20002174
 8002ea0:	2000217c 	.word	0x2000217c
 8002ea4:	20002180 	.word	0x20002180

08002ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea8:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ed6:	f000 f811 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eda:	f7ff ff65 	bl	8002da8 <main>

08002ede <LoopForever>:

LoopForever:
  b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   r0, =_estack
 8002ee0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002eec:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 8002ef0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002ef4:	20002184 	.word	0x20002184

08002ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC1_2_IRQHandler>
	...

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	2500      	movs	r5, #0
 8002f00:	4e0c      	ldr	r6, [pc, #48]	; (8002f34 <__libc_init_array+0x38>)
 8002f02:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f04:	1ba4      	subs	r4, r4, r6
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	42a5      	cmp	r5, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	f000 f82e 	bl	8002f6c <_init>
 8002f10:	2500      	movs	r5, #0
 8002f12:	4e0a      	ldr	r6, [pc, #40]	; (8002f3c <__libc_init_array+0x40>)
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <__libc_init_array+0x44>)
 8002f16:	1ba4      	subs	r4, r4, r6
 8002f18:	10a4      	asrs	r4, r4, #2
 8002f1a:	42a5      	cmp	r5, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f24:	4798      	blx	r3
 8002f26:	3501      	adds	r5, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f2e:	4798      	blx	r3
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	0800300c 	.word	0x0800300c
 8002f38:	0800300c 	.word	0x0800300c
 8002f3c:	0800300c 	.word	0x0800300c
 8002f40:	08003010 	.word	0x08003010

08002f44 <memcpy>:
 8002f44:	b510      	push	{r4, lr}
 8002f46:	1e43      	subs	r3, r0, #1
 8002f48:	440a      	add	r2, r1
 8002f4a:	4291      	cmp	r1, r2
 8002f4c:	d100      	bne.n	8002f50 <memcpy+0xc>
 8002f4e:	bd10      	pop	{r4, pc}
 8002f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f58:	e7f7      	b.n	8002f4a <memcpy+0x6>

08002f5a <memset>:
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4402      	add	r2, r0
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d100      	bne.n	8002f64 <memset+0xa>
 8002f62:	4770      	bx	lr
 8002f64:	f803 1b01 	strb.w	r1, [r3], #1
 8002f68:	e7f9      	b.n	8002f5e <memset+0x4>
	...

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	bf00      	nop
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
