
Graduation_Project_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003008  08003008  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003008  08003008  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  2000001c  0800302c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800302c  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ee5  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a64  00000000  00000000  00029f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000335c  00000000  00000000  0002b9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f0  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000608  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000149e  00000000  00000000  0002fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000854c  00000000  00000000  00030ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00012bc5  00000000  00000000  00039412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000198c  00000000  00000000  0004bfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002f68 	.word	0x08002f68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08002f68 	.word	0x08002f68

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000292:	2301      	movs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d05d      	beq.n	800035c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d059      	beq.n	800035c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	fba3 2302 	umull	r2, r3, r3, r2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d000      	beq.n	80002bc <xQueueGenericReset+0x34>
 80002ba:	2101      	movs	r1, #1
 80002bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14c      	bne.n	800035c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80002c2:	f001 fa5b 	bl	800177c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002d2:	fb01 f303 	mul.w	r3, r1, r3
 80002d6:	441a      	add	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	2200      	movs	r2, #0
 80002e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f2:	3b01      	subs	r3, #1
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002f8:	fb01 f303 	mul.w	r3, r1, r3
 80002fc:	441a      	add	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	22ff      	movs	r2, #255	; 0xff
 8000306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	22ff      	movs	r2, #255	; 0xff
 800030e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d114      	bne.n	8000342 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d01a      	beq.n	8000356 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3310      	adds	r3, #16
 8000324:	4618      	mov	r0, r3
 8000326:	f000 feb5 	bl	8001094 <xTaskRemoveFromEventList>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d012      	beq.n	8000356 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <xQueueGenericReset+0xe4>)
 8000332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	f3bf 8f4f 	dsb	sy
 800033c:	f3bf 8f6f 	isb	sy
 8000340:	e009      	b.n	8000356 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3310      	adds	r3, #16
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff12 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	3324      	adds	r3, #36	; 0x24
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff0d 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000356:	f001 fa2b 	bl	80017b0 <vPortExitCritical>
 800035a:	e001      	b.n	8000360 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000360:	68fb      	ldr	r3, [r7, #12]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000ed04 	.word	0xe000ed04

08000370 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af02      	add	r7, sp, #8
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	4613      	mov	r3, r2
 800037c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d02d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000388:	2100      	movs	r1, #0
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	fba3 2302 	umull	r2, r3, r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d000      	beq.n	8000398 <xQueueGenericCreate+0x28>
 8000396:	2101      	movs	r1, #1
 8000398:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800039a:	2b00      	cmp	r3, #0
 800039c:	d122      	bne.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003a6:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003aa:	d81b      	bhi.n	80003e4 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	fb02 f303 	mul.w	r3, r2, r3
 80003b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	3348      	adds	r3, #72	; 0x48
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa78 	bl	80018b0 <pvPortMalloc>
 80003c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d00d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	3348      	adds	r3, #72	; 0x48
 80003d0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	4613      	mov	r3, r2
 80003da:	697a      	ldr	r2, [r7, #20]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f000 f805 	bl	80003ee <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80003e4:	69fb      	ldr	r3, [r7, #28]
    }
 80003e6:	4618      	mov	r0, r3
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
 80003fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	69ba      	ldr	r2, [r7, #24]
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e002      	b.n	8000410 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800041c:	2101      	movs	r1, #1
 800041e:	69b8      	ldr	r0, [r7, #24]
 8000420:	f7ff ff32 	bl	8000288 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
 8000438:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000442:	f001 f99b 	bl	800177c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000446:	6a3b      	ldr	r3, [r7, #32]
 8000448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800044e:	429a      	cmp	r2, r3
 8000450:	d302      	bcc.n	8000458 <xQueueGenericSend+0x2c>
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d129      	bne.n	80004ac <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	6a38      	ldr	r0, [r7, #32]
 800045e:	f000 f931 	bl	80006c4 <prvCopyDataToQueue>
 8000462:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000468:	2b00      	cmp	r3, #0
 800046a:	d010      	beq.n	800048e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800046c:	6a3b      	ldr	r3, [r7, #32]
 800046e:	3324      	adds	r3, #36	; 0x24
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fe0f 	bl	8001094 <xTaskRemoveFromEventList>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d013      	beq.n	80004a4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <xQueueGenericSend+0x150>)
 800047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	f3bf 8f4f 	dsb	sy
 8000488:	f3bf 8f6f 	isb	sy
 800048c:	e00a      	b.n	80004a4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d007      	beq.n	80004a4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000494:	4b39      	ldr	r3, [pc, #228]	; (800057c <xQueueGenericSend+0x150>)
 8000496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004a4:	f001 f984 	bl	80017b0 <vPortExitCritical>
                return pdPASS;
 80004a8:	2301      	movs	r3, #1
 80004aa:	e063      	b.n	8000574 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d103      	bne.n	80004ba <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004b2:	f001 f97d 	bl	80017b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e05c      	b.n	8000574 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d106      	bne.n	80004ce <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fead 	bl	8001224 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004ce:	f001 f96f 	bl	80017b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004d2:	f000 fb83 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004d6:	f001 f951 	bl	800177c <vPortEnterCritical>
 80004da:	6a3b      	ldr	r3, [r7, #32]
 80004dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e6:	d103      	bne.n	80004f0 <xQueueGenericSend+0xc4>
 80004e8:	6a3b      	ldr	r3, [r7, #32]
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004f0:	6a3b      	ldr	r3, [r7, #32]
 80004f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004fc:	d103      	bne.n	8000506 <xQueueGenericSend+0xda>
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000506:	f001 f953 	bl	80017b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800050a:	1d3a      	adds	r2, r7, #4
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fe9c 	bl	8001250 <xTaskCheckForTimeOut>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d124      	bne.n	8000568 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800051e:	6a38      	ldr	r0, [r7, #32]
 8000520:	f000 f9c8 	bl	80008b4 <prvIsQueueFull>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d018      	beq.n	800055c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	3310      	adds	r3, #16
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fd98 	bl	8001068 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000538:	6a38      	ldr	r0, [r7, #32]
 800053a:	f000 f953 	bl	80007e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800053e:	f000 fb5b 	bl	8000bf8 <xTaskResumeAll>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	f47f af7c 	bne.w	8000442 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <xQueueGenericSend+0x150>)
 800054c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	f3bf 8f6f 	isb	sy
 800055a:	e772      	b.n	8000442 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800055c:	6a38      	ldr	r0, [r7, #32]
 800055e:	f000 f941 	bl	80007e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000562:	f000 fb49 	bl	8000bf8 <xTaskResumeAll>
 8000566:	e76c      	b.n	8000442 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000568:	6a38      	ldr	r0, [r7, #32]
 800056a:	f000 f93b 	bl	80007e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800056e:	f000 fb43 	bl	8000bf8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000572:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000574:	4618      	mov	r0, r3
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	e000ed04 	.word	0xe000ed04

08000580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000594:	f001 f8f2 	bl	800177c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000598:	6a3b      	ldr	r3, [r7, #32]
 800059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01f      	beq.n	80005e4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	6a38      	ldr	r0, [r7, #32]
 80005a8:	f000 f8f6 	bl	8000798 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00f      	beq.n	80005dc <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	3310      	adds	r3, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd67 	bl	8001094 <xTaskRemoveFromEventList>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d007      	beq.n	80005dc <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <xQueueReceive+0x140>)
 80005ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005dc:	f001 f8e8 	bl	80017b0 <vPortExitCritical>
                return pdPASS;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e069      	b.n	80006b8 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d103      	bne.n	80005f2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005ea:	f001 f8e1 	bl	80017b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e062      	b.n	80006b8 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d106      	bne.n	8000606 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe11 	bl	8001224 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000602:	2301      	movs	r3, #1
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000606:	f001 f8d3 	bl	80017b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800060a:	f000 fae7 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800060e:	f001 f8b5 	bl	800177c <vPortEnterCritical>
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000618:	b25b      	sxtb	r3, r3
 800061a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061e:	d103      	bne.n	8000628 <xQueueReceive+0xa8>
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800062e:	b25b      	sxtb	r3, r3
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d103      	bne.n	800063e <xQueueReceive+0xbe>
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800063e:	f001 f8b7 	bl	80017b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fe00 	bl	8001250 <xTaskCheckForTimeOut>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d123      	bne.n	800069e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000656:	6a38      	ldr	r0, [r7, #32]
 8000658:	f000 f916 	bl	8000888 <prvIsQueueEmpty>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d017      	beq.n	8000692 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	3324      	adds	r3, #36	; 0x24
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fcfc 	bl	8001068 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000670:	6a38      	ldr	r0, [r7, #32]
 8000672:	f000 f8b7 	bl	80007e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000676:	f000 fabf 	bl	8000bf8 <xTaskResumeAll>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d189      	bne.n	8000594 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <xQueueReceive+0x140>)
 8000682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	e780      	b.n	8000594 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000692:	6a38      	ldr	r0, [r7, #32]
 8000694:	f000 f8a6 	bl	80007e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000698:	f000 faae 	bl	8000bf8 <xTaskResumeAll>
 800069c:	e77a      	b.n	8000594 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800069e:	6a38      	ldr	r0, [r7, #32]
 80006a0:	f000 f8a0 	bl	80007e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006a4:	f000 faa8 	bl	8000bf8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006a8:	6a38      	ldr	r0, [r7, #32]
 80006aa:	f000 f8ed 	bl	8000888 <prvIsQueueEmpty>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f43f af6f 	beq.w	8000594 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006b6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	e000ed04 	.word	0xe000ed04

080006c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d14d      	bne.n	8000786 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 feb4 	bl	800145c <xTaskPriorityDisinherit>
 80006f4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	e043      	b.n	8000786 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d119      	bne.n	8000738 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6858      	ldr	r0, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	461a      	mov	r2, r3
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	f002 fc1c 	bl	8002f4c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	441a      	add	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	429a      	cmp	r2, r3
 800072c:	d32b      	bcc.n	8000786 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	e026      	b.n	8000786 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68d8      	ldr	r0, [r3, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	461a      	mov	r2, r3
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	f002 fc02 	bl	8002f4c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	425b      	negs	r3, r3
 8000752:	441a      	add	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	425b      	negs	r3, r3
 800076e:	441a      	add	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d105      	bne.n	8000786 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	3b01      	subs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800078e:	697b      	ldr	r3, [r7, #20]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d018      	beq.n	80007dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	441a      	add	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d303      	bcc.n	80007cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	461a      	mov	r2, r3
 80007d6:	6838      	ldr	r0, [r7, #0]
 80007d8:	f002 fbb8 	bl	8002f4c <memcpy>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80007ec:	f000 ffc6 	bl	800177c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007f8:	e011      	b.n	800081e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d012      	beq.n	8000828 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3324      	adds	r3, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fc44 	bl	8001094 <xTaskRemoveFromEventList>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000812:	f000 fd67 	bl	80012e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3b01      	subs	r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	2b00      	cmp	r3, #0
 8000824:	dce9      	bgt.n	80007fa <prvUnlockQueue+0x16>
 8000826:	e000      	b.n	800082a <prvUnlockQueue+0x46>
                    break;
 8000828:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000832:	f000 ffbd 	bl	80017b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000836:	f000 ffa1 	bl	800177c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000840:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000842:	e011      	b.n	8000868 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d012      	beq.n	8000872 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3310      	adds	r3, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc1f 	bl	8001094 <xTaskRemoveFromEventList>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800085c:	f000 fd42 	bl	80012e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3b01      	subs	r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dce9      	bgt.n	8000844 <prvUnlockQueue+0x60>
 8000870:	e000      	b.n	8000874 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000872:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800087c:	f000 ff98 	bl	80017b0 <vPortExitCritical>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000890:	f000 ff74 	bl	800177c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800089c:	2301      	movs	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e001      	b.n	80008a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008a6:	f000 ff83 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80008bc:	f000 ff5e 	bl	800177c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d102      	bne.n	80008d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e001      	b.n	80008d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008d6:	f000 ff6b 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 ffd9 	bl	80018b0 <pvPortMalloc>
 80008fe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d013      	beq.n	800092e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000906:	2054      	movs	r0, #84	; 0x54
 8000908:	f000 ffd2 	bl	80018b0 <pvPortMalloc>
 800090c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000914:	2254      	movs	r2, #84	; 0x54
 8000916:	2100      	movs	r1, #0
 8000918:	69f8      	ldr	r0, [r7, #28]
 800091a:	f002 faea 	bl	8002ef2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
 8000924:	e005      	b.n	8000932 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f001 f814 	bl	8001954 <vPortFree>
 800092c:	e001      	b.n	8000932 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d013      	beq.n	8000960 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000938:	88fa      	ldrh	r2, [r7, #6]
 800093a:	2300      	movs	r3, #0
 800093c:	9303      	str	r3, [sp, #12]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f80e 	bl	8000970 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000954:	69f8      	ldr	r0, [r7, #28]
 8000956:	f000 f873 	bl	8000a40 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e002      	b.n	8000966 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000966:	69bb      	ldr	r3, [r7, #24]
    }
 8000968:	4618      	mov	r0, r3
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000988:	3b01      	subs	r3, #1
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	f023 0307 	bic.w	r3, r3, #7
 8000996:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d01e      	beq.n	80009dc <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e012      	b.n	80009ca <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	4413      	add	r3, r2
 80009aa:	7819      	ldrb	r1, [r3, #0]
 80009ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4413      	add	r3, r2
 80009b2:	3334      	adds	r3, #52	; 0x34
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d9e9      	bls.n	80009a4 <prvInitialiseNewTask+0x34>
 80009d0:	e000      	b.n	80009d4 <prvInitialiseNewTask+0x64>
            {
                break;
 80009d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d901      	bls.n	80009e6 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	6a3a      	ldr	r2, [r7, #32]
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	6a3a      	ldr	r2, [r7, #32]
 80009f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	3304      	adds	r3, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbd9 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	3318      	adds	r3, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbd4 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a0a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	f1c3 0205 	rsb	r2, r3, #5
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	6938      	ldr	r0, [r7, #16]
 8000a22:	f000 fe1d 	bl	8001660 <pxPortInitialiseStack>
 8000a26:	4602      	mov	r2, r0
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a36:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a48:	f000 fe98 	bl	800177c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a54:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a56:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a5e:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d110      	bne.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a6c:	f000 fc5e 	bl	800132c <prvInitialiseTaskLists>
 8000a70:	e00d      	b.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <prvAddNewTaskToReadyList+0x110>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d802      	bhi.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <prvAddNewTaskToReadyList+0x114>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <prvAddNewTaskToReadyList+0x114>)
 8000a96:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <prvAddNewTaskToReadyList+0x118>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <prvAddNewTaskToReadyList+0x118>)
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aae:	492b      	ldr	r1, [pc, #172]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	3304      	adds	r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3204      	adds	r2, #4
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000aee:	441a      	add	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	4918      	ldr	r1, [pc, #96]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1c59      	adds	r1, r3, #1
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4403      	add	r3, r0
 8000b14:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b16:	f000 fe4b 	bl	80017b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <prvAddNewTaskToReadyList+0x110>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <prvAddNewTaskToReadyList+0x120>)
 8000b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	20000038 	.word	0x20000038
 8000b50:	2000011c 	.word	0x2000011c
 8000b54:	2000012c 	.word	0x2000012c
 8000b58:	20000118 	.word	0x20000118
 8000b5c:	2000003c 	.word	0x2000003c
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <vTaskStartScheduler+0x5c>)
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	4913      	ldr	r1, [pc, #76]	; (8000bc4 <vTaskStartScheduler+0x60>)
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <vTaskStartScheduler+0x64>)
 8000b7a:	f7ff feb3 	bl	80008e4 <xTaskCreate>
 8000b7e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d115      	bne.n	8000bb2 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b86:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000b98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <vTaskStartScheduler+0x68>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <vTaskStartScheduler+0x6c>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <vTaskStartScheduler+0x70>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000bae:	f000 fdc5 	bl	800173c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <vTaskStartScheduler+0x74>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000134 	.word	0x20000134
 8000bc4:	08002f80 	.word	0x08002f80
 8000bc8:	080012fd 	.word	0x080012fd
 8000bcc:	20000130 	.word	0x20000130
 8000bd0:	2000011c 	.word	0x2000011c
 8000bd4:	20000114 	.word	0x20000114
 8000bd8:	20000000 	.word	0x20000000

08000bdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <vTaskSuspendAll+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <vTaskSuspendAll+0x18>)
 8000be8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000138 	.word	0x20000138

08000bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c06:	f000 fdb9 	bl	800177c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c0a:	4b68      	ldr	r3, [pc, #416]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a66      	ldr	r2, [pc, #408]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c12:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c14:	4b65      	ldr	r3, [pc, #404]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f040 80c0 	bne.w	8000d9e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <xTaskResumeAll+0x1b8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80bb 	beq.w	8000d9e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c28:	e08a      	b.n	8000d40 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c2a:	4b62      	ldr	r3, [pc, #392]	; (8000db4 <xTaskResumeAll+0x1bc>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	6a12      	ldr	r2, [r2, #32]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	69d2      	ldr	r2, [r2, #28]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3318      	adds	r3, #24
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d103      	bne.n	8000c60 <xTaskResumeAll+0x68>
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	6a1a      	ldr	r2, [r3, #32]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	68d2      	ldr	r2, [r2, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	6892      	ldr	r2, [r2, #8]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3304      	adds	r3, #4
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <xTaskResumeAll+0xa6>
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <xTaskResumeAll+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <xTaskResumeAll+0x1c0>)
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	493d      	ldr	r1, [pc, #244]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	3204      	adds	r2, #4
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1d1a      	adds	r2, r3, #4
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d04:	441a      	add	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0e:	492b      	ldr	r1, [pc, #172]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1c59      	adds	r1, r3, #1
 8000d1e:	4827      	ldr	r0, [pc, #156]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4403      	add	r3, r0
 8000d2a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <xTaskResumeAll+0x1c8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d302      	bcc.n	8000d40 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <xTaskResumeAll+0x1bc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f47f af70 	bne.w	8000c2a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d50:	f000 fb6a 	bl	8001428 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <xTaskResumeAll+0x1d0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d60:	f000 f836 	bl	8000dd0 <xTaskIncrementTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f1      	bne.n	8000d60 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <xTaskResumeAll+0x1d0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d009      	beq.n	8000d9e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <xTaskResumeAll+0x1d4>)
 8000d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000d9e:	f000 fd07 	bl	80017b0 <vPortExitCritical>

    return xAlreadyYielded;
 8000da2:	693b      	ldr	r3, [r7, #16]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000138 	.word	0x20000138
 8000db0:	20000110 	.word	0x20000110
 8000db4:	200000d0 	.word	0x200000d0
 8000db8:	20000118 	.word	0x20000118
 8000dbc:	2000003c 	.word	0x2000003c
 8000dc0:	20000038 	.word	0x20000038
 8000dc4:	20000124 	.word	0x20000124
 8000dc8:	20000120 	.word	0x20000120
 8000dcc:	e000ed04 	.word	0xe000ed04

08000dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dda:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <xTaskIncrementTick+0x1e0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 80dc 	bne.w	8000f9c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000de4:	4b73      	ldr	r3, [pc, #460]	; (8000fb4 <xTaskIncrementTick+0x1e4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000dec:	4a71      	ldr	r2, [pc, #452]	; (8000fb4 <xTaskIncrementTick+0x1e4>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d110      	bne.n	8000e1a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <xTaskIncrementTick+0x1ec>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <xTaskIncrementTick+0x1ec>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <xTaskIncrementTick+0x1f0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a6b      	ldr	r2, [pc, #428]	; (8000fc0 <xTaskIncrementTick+0x1f0>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	f000 fb07 	bl	8001428 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f0c0 80a6 	bcc.w	8000f72 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e26:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d104      	bne.n	8000e3a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	601a      	str	r2, [r3, #0]
                    break;
 8000e38:	e09b      	b.n	8000f72 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d203      	bcs.n	8000e5a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e52:	4a5c      	ldr	r2, [pc, #368]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e58:	e08b      	b.n	8000f72 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68d2      	ldr	r2, [r2, #12]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	6892      	ldr	r2, [r2, #8]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d103      	bne.n	8000e88 <xTaskIncrementTick+0xb8>
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01e      	beq.n	8000ede <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	6a12      	ldr	r2, [r2, #32]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	69d2      	ldr	r2, [r2, #28]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d103      	bne.n	8000ece <xTaskIncrementTick+0xfe>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6a1a      	ldr	r2, [r3, #32]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <xTaskIncrementTick+0x1f8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <xTaskIncrementTick+0x1f8>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	3304      	adds	r3, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f34:	441a      	add	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3e:	4923      	ldr	r1, [pc, #140]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1c59      	adds	r1, r3, #1
 8000f4e:	481f      	ldr	r0, [pc, #124]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4403      	add	r3, r0
 8000f5a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <xTaskIncrementTick+0x200>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	429a      	cmp	r2, r3
 8000f68:	f67f af5d 	bls.w	8000e26 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f70:	e759      	b.n	8000e26 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <xTaskIncrementTick+0x200>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f78:	4914      	ldr	r1, [pc, #80]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d901      	bls.n	8000f8e <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <xTaskIncrementTick+0x204>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e004      	b.n	8000fa6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <xTaskIncrementTick+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <xTaskIncrementTick+0x208>)
 8000fa4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000138 	.word	0x20000138
 8000fb4:	20000114 	.word	0x20000114
 8000fb8:	200000c8 	.word	0x200000c8
 8000fbc:	200000cc 	.word	0x200000cc
 8000fc0:	20000128 	.word	0x20000128
 8000fc4:	20000130 	.word	0x20000130
 8000fc8:	20000118 	.word	0x20000118
 8000fcc:	2000003c 	.word	0x2000003c
 8000fd0:	20000038 	.word	0x20000038
 8000fd4:	20000124 	.word	0x20000124
 8000fd8:	20000120 	.word	0x20000120

08000fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <vTaskSwitchContext+0x78>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <vTaskSwitchContext+0x7c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000ff0:	e02a      	b.n	8001048 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <vTaskSwitchContext+0x7c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <vTaskSwitchContext+0x80>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f1c3 031f 	rsb	r3, r3, #31
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <vTaskSwitchContext+0x84>)
 800101a:	4413      	add	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3308      	adds	r3, #8
 8001030:	429a      	cmp	r2, r3
 8001032:	d104      	bne.n	800103e <vTaskSwitchContext+0x62>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <vTaskSwitchContext+0x88>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000138 	.word	0x20000138
 8001058:	20000124 	.word	0x20000124
 800105c:	20000118 	.word	0x20000118
 8001060:	2000003c 	.word	0x2000003c
 8001064:	20000038 	.word	0x20000038

08001068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <vTaskPlaceOnEventList+0x28>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3318      	adds	r3, #24
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f8a3 	bl	80001c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001080:	2101      	movs	r1, #1
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f000 fa6c 	bl	8001560 <prvAddCurrentTaskToDelayedList>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000038 	.word	0x20000038

08001094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	6a12      	ldr	r2, [r2, #32]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	69d2      	ldr	r2, [r2, #28]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	3318      	adds	r3, #24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d103      	bne.n	80010d2 <xTaskRemoveFromEventList+0x3e>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <xTaskRemoveFromEventList+0x178>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d15e      	bne.n	80011a8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	68d2      	ldr	r2, [r2, #12]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	3304      	adds	r3, #4
 800110c:	429a      	cmp	r2, r3
 800110e:	d103      	bne.n	8001118 <xTaskRemoveFromEventList+0x84>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2201      	movs	r2, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <xTaskRemoveFromEventList+0x17c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <xTaskRemoveFromEventList+0x17c>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	4935      	ldr	r1, [pc, #212]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	3204      	adds	r2, #4
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a25      	ldr	r2, [pc, #148]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800117e:	441a      	add	r2, r3
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	4922      	ldr	r1, [pc, #136]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	6019      	str	r1, [r3, #0]
 80011a6:	e01b      	b.n	80011e0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	3218      	adds	r2, #24
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f103 0218 	add.w	r2, r3, #24
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <xTaskRemoveFromEventList+0x188>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d905      	bls.n	80011fa <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <xTaskRemoveFromEventList+0x18c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e001      	b.n	80011fe <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80011fe:	69fb      	ldr	r3, [r7, #28]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000138 	.word	0x20000138
 8001210:	20000118 	.word	0x20000118
 8001214:	2000003c 	.word	0x2000003c
 8001218:	200000d0 	.word	0x200000d0
 800121c:	20000038 	.word	0x20000038
 8001220:	20000124 	.word	0x20000124

08001224 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <vTaskInternalSetTimeOutState+0x24>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <vTaskInternalSetTimeOutState+0x28>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	605a      	str	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000128 	.word	0x20000128
 800124c:	20000114 	.word	0x20000114

08001250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800125a:	f000 fa8f 	bl	800177c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <xTaskCheckForTimeOut+0x8c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001276:	d102      	bne.n	800127e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e026      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <xTaskCheckForTimeOut+0x90>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d00a      	beq.n	80012a0 <xTaskCheckForTimeOut+0x50>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d305      	bcc.n	80012a0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001294:	2301      	movs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e015      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20b      	bcs.n	80012c2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad2      	subs	r2, r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb4 	bl	8001224 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e004      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80012cc:	f000 fa70 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80012d0:	697b      	ldr	r3, [r7, #20]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000114 	.word	0x20000114
 80012e0:	20000128 	.word	0x20000128

080012e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <vTaskMissedYield+0x14>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000124 	.word	0x20000124

080012fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001304:	f000 f852 	bl	80013ac <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <prvIdleTask+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d9f9      	bls.n	8001304 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <prvIdleTask+0x2c>)
 8001312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001320:	e7f0      	b.n	8001304 <prvIdleTask+0x8>
 8001322:	bf00      	nop
 8001324:	2000003c 	.word	0x2000003c
 8001328:	e000ed04 	.word	0xe000ed04

0800132c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e00c      	b.n	8001352 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <prvInitialiseTaskLists+0x60>)
 8001344:	4413      	add	r3, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff12 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d9ef      	bls.n	8001338 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <prvInitialiseTaskLists+0x64>)
 800135a:	f7fe ff09 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <prvInitialiseTaskLists+0x68>)
 8001360:	f7fe ff06 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <prvInitialiseTaskLists+0x6c>)
 8001366:	f7fe ff03 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <prvInitialiseTaskLists+0x70>)
 800136c:	f7fe ff00 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <prvInitialiseTaskLists+0x74>)
 8001372:	f7fe fefd 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <prvInitialiseTaskLists+0x78>)
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <prvInitialiseTaskLists+0x64>)
 800137a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <prvInitialiseTaskLists+0x7c>)
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <prvInitialiseTaskLists+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000003c 	.word	0x2000003c
 8001390:	200000a0 	.word	0x200000a0
 8001394:	200000b4 	.word	0x200000b4
 8001398:	200000d0 	.word	0x200000d0
 800139c:	200000e4 	.word	0x200000e4
 80013a0:	200000fc 	.word	0x200000fc
 80013a4:	200000c8 	.word	0x200000c8
 80013a8:	200000cc 	.word	0x200000cc

080013ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013b2:	e019      	b.n	80013e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80013b4:	f000 f9e2 	bl	800177c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <prvCheckTasksWaitingTermination+0x50>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff36 	bl	8000236 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <prvCheckTasksWaitingTermination+0x54>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <prvCheckTasksWaitingTermination+0x54>)
 80013d2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013dc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80013de:	f000 f9e7 	bl	80017b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f810 	bl	8001408 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e1      	bne.n	80013b4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000e4 	.word	0x200000e4
 8001400:	20000110 	.word	0x20000110
 8001404:	200000f8 	.word	0x200000f8

08001408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fa9d 	bl	8001954 <vPortFree>
            vPortFree( pxTCB );
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa9a 	bl	8001954 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800143e:	e005      	b.n	800144c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200000c8 	.word	0x200000c8
 8001458:	20000130 	.word	0x20000130

0800145c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d06c      	beq.n	800154c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	429a      	cmp	r2, r3
 8001486:	d061      	beq.n	800154c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	2b00      	cmp	r3, #0
 800148e:	d15d      	bne.n	800154c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3304      	adds	r3, #4
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fece 	bl	8000236 <uxListRemove>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10a      	bne.n	80014b6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2201      	movs	r2, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4013      	ands	r3, r2
 80014b2:	4a29      	ldr	r2, [pc, #164]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014b4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f1c3 0205 	rsb	r2, r3, #5
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	491e      	ldr	r1, [pc, #120]	; (800155c <xTaskPriorityDisinherit+0x100>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	3204      	adds	r2, #4
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1d1a      	adds	r2, r3, #4
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <xTaskPriorityDisinherit+0x100>)
 8001520:	441a      	add	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	490c      	ldr	r1, [pc, #48]	; (800155c <xTaskPriorityDisinherit+0x100>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <xTaskPriorityDisinherit+0x100>)
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4403      	add	r3, r0
 8001546:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800154c:	697b      	ldr	r3, [r7, #20]
    }
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000118 	.word	0x20000118
 800155c:	2000003c 	.word	0x2000003c

08001560 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <prvAddCurrentTaskToDelayedList+0xe4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3304      	adds	r3, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe5d 	bl	8000236 <uxListRemove>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <prvAddCurrentTaskToDelayedList+0xec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4013      	ands	r3, r2
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <prvAddCurrentTaskToDelayedList+0xec>)
 8001598:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d124      	bne.n	80015ec <prvAddCurrentTaskToDelayedList+0x8c>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	6892      	ldr	r2, [r2, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	3204      	adds	r2, #4
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80015ea:	e026      	b.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	d209      	bcs.n	8001618 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7fe fdd8 	bl	80001c6 <vListInsert>
}
 8001616:	e010      	b.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <prvAddCurrentTaskToDelayedList+0xf8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f7fe fdce 	bl	80001c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <prvAddCurrentTaskToDelayedList+0xfc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d202      	bcs.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000114 	.word	0x20000114
 8001648:	20000038 	.word	0x20000038
 800164c:	20000118 	.word	0x20000118
 8001650:	200000fc 	.word	0x200000fc
 8001654:	200000cc 	.word	0x200000cc
 8001658:	200000c8 	.word	0x200000c8
 800165c:	20000130 	.word	0x20000130

08001660 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3b04      	subs	r3, #4
 8001670:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001678:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3b04      	subs	r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f023 0201 	bic.w	r2, r3, #1
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3b04      	subs	r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <pxPortInitialiseStack+0x54>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b14      	subs	r3, #20
 800169a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b20      	subs	r3, #32
 80016a6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80016a8:	68fb      	ldr	r3, [r7, #12]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	080016b9 	.word	0x080016b9

080016b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80016c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	607b      	str	r3, [r7, #4]
    }
 80016d4:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80016d6:	bf00      	nop
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0fc      	beq.n	80016d8 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	0000      	movs	r0, r0
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <pxCurrentTCBConst2>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	6808      	ldr	r0, [r1, #0]
 80016f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016fa:	f380 8809 	msr	PSP, r0
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f380 8811 	msr	BASEPRI, r0
 800170a:	f04e 0e0d 	orr.w	lr, lr, #13
 800170e:	4770      	bx	lr

08001710 <pxCurrentTCBConst2>:
 8001710:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop

08001718 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <prvPortStartFirstTask+0x1c>)
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	6800      	ldr	r0, [r0, #0]
 800171e:	f380 8808 	msr	MSP, r0
 8001722:	b662      	cpsie	i
 8001724:	b661      	cpsie	f
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	df00      	svc	0
 8001730:	bf00      	nop
 8001732:	0000      	.short	0x0000
 8001734:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop

0800173c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <xPortStartScheduler+0x38>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <xPortStartScheduler+0x38>)
 8001746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800174a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <xPortStartScheduler+0x38>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a08      	ldr	r2, [pc, #32]	; (8001774 <xPortStartScheduler+0x38>)
 8001752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001756:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001758:	f000 f890 	bl	800187c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <xPortStartScheduler+0x3c>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001762:	f7ff ffd9 	bl	8001718 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001766:	f7ff fc39 	bl	8000fdc <vTaskSwitchContext>
    prvTaskExitError();
 800176a:	f7ff ffa5 	bl	80016b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	e000ed20 	.word	0xe000ed20
 8001778:	20000004 	.word	0x20000004

0800177c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
        __asm volatile
 8001782:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001786:	f383 8811 	msr	BASEPRI, r3
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	f3bf 8f4f 	dsb	sy
 8001792:	607b      	str	r3, [r7, #4]
    }
 8001794:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <vPortEnterCritical+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <vPortEnterCritical+0x30>)
 800179e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000004 	.word	0x20000004

080017b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <vPortExitCritical+0x30>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <vPortExitCritical+0x30>)
 80017be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <vPortExitCritical+0x30>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <vPortExitCritical+0x24>
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80017d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000004 	.word	0x20000004
	...

080017f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80017f0:	f3ef 8009 	mrs	r0, PSP
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <pxCurrentTCBConst>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001800:	6010      	str	r0, [r2, #0]
 8001802:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001806:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800180a:	f380 8811 	msr	BASEPRI, r0
 800180e:	f7ff fbe5 	bl	8000fdc <vTaskSwitchContext>
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f380 8811 	msr	BASEPRI, r0
 800181a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	6808      	ldr	r0, [r1, #0]
 8001822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001826:	f380 8809 	msr	PSP, r0
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	4770      	bx	lr

08001830 <pxCurrentTCBConst>:
 8001830:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop

08001838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
        __asm volatile
 800183e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	607b      	str	r3, [r7, #4]
    }
 8001850:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001852:	f7ff fabd 	bl	8000dd0 <xTaskIncrementTick>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SysTick_Handler+0x40>)
 800185e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f383 8811 	msr	BASEPRI, r3
    }
 800186e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <vPortSetupTimerInterrupt+0x28>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <vPortSetupTimerInterrupt+0x2c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <vPortSetupTimerInterrupt+0x30>)
 800188e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001892:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <vPortSetupTimerInterrupt+0x28>)
 8001896:	2207      	movs	r2, #7
 8001898:	601a      	str	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010
 80018a8:	e000e018 	.word	0xe000e018
 80018ac:	e000e014 	.word	0xe000e014

080018b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00e      	beq.n	80018e4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f023 0307 	bic.w	r3, r3, #7
 80018cc:	3308      	adds	r3, #8
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d205      	bcs.n	80018e0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	3308      	adds	r3, #8
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	e001      	b.n	80018e4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80018e4:	f7ff f97a 	bl	8000bdc <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <pvPortMalloc+0x98>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <pvPortMalloc+0x9c>)
 80018f2:	f023 0307 	bic.w	r3, r3, #7
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <pvPortMalloc+0x98>)
 80018fa:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01a      	beq.n	8001938 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <pvPortMalloc+0xa0>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800190a:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 800190e:	d213      	bcs.n	8001938 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <pvPortMalloc+0xa0>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	441a      	add	r2, r3
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <pvPortMalloc+0xa0>)
 800191a:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800191c:	429a      	cmp	r2, r3
 800191e:	d90b      	bls.n	8001938 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <pvPortMalloc+0x98>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <pvPortMalloc+0xa0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <pvPortMalloc+0xa0>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <pvPortMalloc+0xa0>)
 8001936:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001938:	f7ff f95e 	bl	8000bf8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000540 	.word	0x20000540
 800194c:	20000143 	.word	0x20000143
 8001950:	2000053c 	.word	0x2000053c

08001954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <LUNA_CallBack+0x17c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8001974:	485c      	ldr	r0, [pc, #368]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001976:	f001 f807 	bl	8002988 <MCAL_USART_ReciveData>
 800197a:	4603      	mov	r3, r0
 800197c:	2b59      	cmp	r3, #89	; 0x59
 800197e:	f040 80ae 	bne.w	8001ade <LUNA_CallBack+0x176>
			x++;
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <LUNA_CallBack+0x17c>)
 800198c:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 800198e:	e0a6      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==1){
 8001990:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10d      	bne.n	80019b4 <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8001998:	4853      	ldr	r0, [pc, #332]	; (8001ae8 <LUNA_CallBack+0x180>)
 800199a:	f000 fff5 	bl	8002988 <MCAL_USART_ReciveData>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b59      	cmp	r3, #89	; 0x59
 80019a2:	f040 809c 	bne.w	8001ade <LUNA_CallBack+0x176>
		x++;
 80019a6:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019b0:	701a      	strb	r2, [r3, #0]
}
 80019b2:	e094      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==2){
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d10d      	bne.n	80019d8 <LUNA_CallBack+0x70>
		x++;
 80019bc:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019c6:	701a      	strb	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80019c8:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <LUNA_CallBack+0x180>)
 80019ca:	f000 ffdd 	bl	8002988 <MCAL_USART_ReciveData>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <LUNA_CallBack+0x184>)
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	e082      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==3){
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d114      	bne.n	8001a0a <LUNA_CallBack+0xa2>
		x++;
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019ea:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80019ec:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <LUNA_CallBack+0x180>)
 80019ee:	f000 ffcb 	bl	8002988 <MCAL_USART_ReciveData>
 80019f2:	4603      	mov	r3, r0
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <LUNA_CallBack+0x184>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <LUNA_CallBack+0x184>)
 8001a06:	801a      	strh	r2, [r3, #0]
}
 8001a08:	e069      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==4){
 8001a0a:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d110      	bne.n	8001a34 <LUNA_CallBack+0xcc>
		x++;
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a26:	f000 ffaf 	bl	8002988 <MCAL_USART_ReciveData>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a30:	801a      	strh	r2, [r3, #0]
}
 8001a32:	e054      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==5){
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d114      	bne.n	8001a66 <LUNA_CallBack+0xfe>
		x++;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a46:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a4a:	f000 ff9d 	bl	8002988 <MCAL_USART_ReciveData>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a62:	801a      	strh	r2, [r3, #0]
}
 8001a64:	e03b      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==6){
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d110      	bne.n	8001a90 <LUNA_CallBack+0x128>
		x++;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a78:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a80:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a82:	f000 ff81 	bl	8002988 <MCAL_USART_ReciveData>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001a8c:	801a      	strh	r2, [r3, #0]
}
 8001a8e:	e026      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==7){
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d114      	bne.n	8001ac2 <LUNA_CallBack+0x15a>
		x++;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001aa2:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001aa6:	f000 ff6f 	bl	8002988 <MCAL_USART_ReciveData>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001abe:	801a      	strh	r2, [r3, #0]
}
 8001ac0:	e00d      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==8){
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d109      	bne.n	8001ade <LUNA_CallBack+0x176>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001acc:	f000 ff5c 	bl	8002988 <MCAL_USART_ReciveData>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LUNA_CallBack+0x190>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		x=0;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000054b 	.word	0x2000054b
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	20000544 	.word	0x20000544
 8001af0:	20000546 	.word	0x20000546
 8001af4:	20000548 	.word	0x20000548
 8001af8:	2000054a 	.word	0x2000054a

08001afc <LUNA_INIT>:

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8001b0c:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <LUNA_INIT+0x24c>)
 8001b0e:	f107 0408 	add.w	r4, r7, #8
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	488b      	ldr	r0, [pc, #556]	; (8001d4c <LUNA_INIT+0x250>)
 8001b20:	f000 fd86 	bl	8002630 <MCAL_USART_init>
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b24:	215a      	movs	r1, #90	; 0x5a
 8001b26:	4889      	ldr	r0, [pc, #548]	; (8001d4c <LUNA_INIT+0x250>)
 8001b28:	f000 feee 	bl	8002908 <MCAL_USART_SendData>
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4887      	ldr	r0, [pc, #540]	; (8001d4c <LUNA_INIT+0x250>)
 8001b30:	f000 feea 	bl	8002908 <MCAL_USART_SendData>
 8001b34:	2106      	movs	r1, #6
 8001b36:	4885      	ldr	r0, [pc, #532]	; (8001d4c <LUNA_INIT+0x250>)
 8001b38:	f000 fee6 	bl	8002908 <MCAL_USART_SendData>
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4883      	ldr	r0, [pc, #524]	; (8001d4c <LUNA_INIT+0x250>)
 8001b40:	f000 fee2 	bl	8002908 <MCAL_USART_SendData>
 8001b44:	21c2      	movs	r1, #194	; 0xc2
 8001b46:	4881      	ldr	r0, [pc, #516]	; (8001d4c <LUNA_INIT+0x250>)
 8001b48:	f000 fede 	bl	8002908 <MCAL_USART_SendData>
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	487f      	ldr	r0, [pc, #508]	; (8001d4c <LUNA_INIT+0x250>)
 8001b50:	f000 feda 	bl	8002908 <MCAL_USART_SendData>
 8001b54:	2100      	movs	r1, #0
 8001b56:	487d      	ldr	r0, [pc, #500]	; (8001d4c <LUNA_INIT+0x250>)
 8001b58:	f000 fed6 	bl	8002908 <MCAL_USART_SendData>
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	487b      	ldr	r0, [pc, #492]	; (8001d4c <LUNA_INIT+0x250>)
 8001b60:	f000 fed2 	bl	8002908 <MCAL_USART_SendData>
	switch (mode){
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d048      	beq.n	8001bfc <LUNA_INIT+0x100>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	dc57      	bgt.n	8001c1e <LUNA_INIT+0x122>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <LUNA_INIT+0x7c>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d019      	beq.n	8001baa <LUNA_INIT+0xae>
 8001b76:	e052      	b.n	8001c1e <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b78:	215a      	movs	r1, #90	; 0x5a
 8001b7a:	4874      	ldr	r0, [pc, #464]	; (8001d4c <LUNA_INIT+0x250>)
 8001b7c:	f000 fec4 	bl	8002908 <MCAL_USART_SendData>
 8001b80:	2106      	movs	r1, #6
 8001b82:	4872      	ldr	r0, [pc, #456]	; (8001d4c <LUNA_INIT+0x250>)
 8001b84:	f000 fec0 	bl	8002908 <MCAL_USART_SendData>
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4870      	ldr	r0, [pc, #448]	; (8001d4c <LUNA_INIT+0x250>)
 8001b8c:	f000 febc 	bl	8002908 <MCAL_USART_SendData>
 8001b90:	2164      	movs	r1, #100	; 0x64
 8001b92:	486e      	ldr	r0, [pc, #440]	; (8001d4c <LUNA_INIT+0x250>)
 8001b94:	f000 feb8 	bl	8002908 <MCAL_USART_SendData>
 8001b98:	2100      	movs	r1, #0
 8001b9a:	486c      	ldr	r0, [pc, #432]	; (8001d4c <LUNA_INIT+0x250>)
 8001b9c:	f000 feb4 	bl	8002908 <MCAL_USART_SendData>
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	486a      	ldr	r0, [pc, #424]	; (8001d4c <LUNA_INIT+0x250>)
 8001ba4:	f000 feb0 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001ba8:	e039      	b.n	8001c1e <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001baa:	215a      	movs	r1, #90	; 0x5a
 8001bac:	4867      	ldr	r0, [pc, #412]	; (8001d4c <LUNA_INIT+0x250>)
 8001bae:	f000 feab 	bl	8002908 <MCAL_USART_SendData>
 8001bb2:	2106      	movs	r1, #6
 8001bb4:	4865      	ldr	r0, [pc, #404]	; (8001d4c <LUNA_INIT+0x250>)
 8001bb6:	f000 fea7 	bl	8002908 <MCAL_USART_SendData>
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4863      	ldr	r0, [pc, #396]	; (8001d4c <LUNA_INIT+0x250>)
 8001bbe:	f000 fea3 	bl	8002908 <MCAL_USART_SendData>
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <LUNA_INIT+0x250>)
 8001bc6:	f000 fe9f 	bl	8002908 <MCAL_USART_SendData>
 8001bca:	2100      	movs	r1, #0
 8001bcc:	485f      	ldr	r0, [pc, #380]	; (8001d4c <LUNA_INIT+0x250>)
 8001bce:	f000 fe9b 	bl	8002908 <MCAL_USART_SendData>
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	485d      	ldr	r0, [pc, #372]	; (8001d4c <LUNA_INIT+0x250>)
 8001bd6:	f000 fe97 	bl	8002908 <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bda:	215a      	movs	r1, #90	; 0x5a
 8001bdc:	485b      	ldr	r0, [pc, #364]	; (8001d4c <LUNA_INIT+0x250>)
 8001bde:	f000 fe93 	bl	8002908 <MCAL_USART_SendData>
 8001be2:	2104      	movs	r1, #4
 8001be4:	4859      	ldr	r0, [pc, #356]	; (8001d4c <LUNA_INIT+0x250>)
 8001be6:	f000 fe8f 	bl	8002908 <MCAL_USART_SendData>
 8001bea:	2104      	movs	r1, #4
 8001bec:	4857      	ldr	r0, [pc, #348]	; (8001d4c <LUNA_INIT+0x250>)
 8001bee:	f000 fe8b 	bl	8002908 <MCAL_USART_SendData>
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4855      	ldr	r0, [pc, #340]	; (8001d4c <LUNA_INIT+0x250>)
 8001bf6:	f000 fe87 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001bfa:	e010      	b.n	8001c1e <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bfc:	215a      	movs	r1, #90	; 0x5a
 8001bfe:	4853      	ldr	r0, [pc, #332]	; (8001d4c <LUNA_INIT+0x250>)
 8001c00:	f000 fe82 	bl	8002908 <MCAL_USART_SendData>
 8001c04:	2104      	movs	r1, #4
 8001c06:	4851      	ldr	r0, [pc, #324]	; (8001d4c <LUNA_INIT+0x250>)
 8001c08:	f000 fe7e 	bl	8002908 <MCAL_USART_SendData>
 8001c0c:	213b      	movs	r1, #59	; 0x3b
 8001c0e:	484f      	ldr	r0, [pc, #316]	; (8001d4c <LUNA_INIT+0x250>)
 8001c10:	f000 fe7a 	bl	8002908 <MCAL_USART_SendData>
 8001c14:	2100      	movs	r1, #0
 8001c16:	484d      	ldr	r0, [pc, #308]	; (8001d4c <LUNA_INIT+0x250>)
 8001c18:	f000 fe76 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001c1c:	bf00      	nop
	}
	switch (format)
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	f200 808d 	bhi.w	8001d40 <LUNA_INIT+0x244>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <LUNA_INIT+0x130>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001c99 	.word	0x08001c99
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001ced 	.word	0x08001ced
 8001c40:	08001d17 	.word	0x08001d17
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c44:	215a      	movs	r1, #90	; 0x5a
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <LUNA_INIT+0x250>)
 8001c48:	f000 fe5e 	bl	8002908 <MCAL_USART_SendData>
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	483f      	ldr	r0, [pc, #252]	; (8001d4c <LUNA_INIT+0x250>)
 8001c50:	f000 fe5a 	bl	8002908 <MCAL_USART_SendData>
 8001c54:	2105      	movs	r1, #5
 8001c56:	483d      	ldr	r0, [pc, #244]	; (8001d4c <LUNA_INIT+0x250>)
 8001c58:	f000 fe56 	bl	8002908 <MCAL_USART_SendData>
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	483b      	ldr	r0, [pc, #236]	; (8001d4c <LUNA_INIT+0x250>)
 8001c60:	f000 fe52 	bl	8002908 <MCAL_USART_SendData>
 8001c64:	2100      	movs	r1, #0
 8001c66:	4839      	ldr	r0, [pc, #228]	; (8001d4c <LUNA_INIT+0x250>)
 8001c68:	f000 fe4e 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001c6c:	e068      	b.n	8001d40 <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c6e:	215a      	movs	r1, #90	; 0x5a
 8001c70:	4836      	ldr	r0, [pc, #216]	; (8001d4c <LUNA_INIT+0x250>)
 8001c72:	f000 fe49 	bl	8002908 <MCAL_USART_SendData>
 8001c76:	2105      	movs	r1, #5
 8001c78:	4834      	ldr	r0, [pc, #208]	; (8001d4c <LUNA_INIT+0x250>)
 8001c7a:	f000 fe45 	bl	8002908 <MCAL_USART_SendData>
 8001c7e:	2105      	movs	r1, #5
 8001c80:	4832      	ldr	r0, [pc, #200]	; (8001d4c <LUNA_INIT+0x250>)
 8001c82:	f000 fe41 	bl	8002908 <MCAL_USART_SendData>
 8001c86:	2102      	movs	r1, #2
 8001c88:	4830      	ldr	r0, [pc, #192]	; (8001d4c <LUNA_INIT+0x250>)
 8001c8a:	f000 fe3d 	bl	8002908 <MCAL_USART_SendData>
 8001c8e:	2100      	movs	r1, #0
 8001c90:	482e      	ldr	r0, [pc, #184]	; (8001d4c <LUNA_INIT+0x250>)
 8001c92:	f000 fe39 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001c96:	e053      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c98:	215a      	movs	r1, #90	; 0x5a
 8001c9a:	482c      	ldr	r0, [pc, #176]	; (8001d4c <LUNA_INIT+0x250>)
 8001c9c:	f000 fe34 	bl	8002908 <MCAL_USART_SendData>
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	482a      	ldr	r0, [pc, #168]	; (8001d4c <LUNA_INIT+0x250>)
 8001ca4:	f000 fe30 	bl	8002908 <MCAL_USART_SendData>
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4828      	ldr	r0, [pc, #160]	; (8001d4c <LUNA_INIT+0x250>)
 8001cac:	f000 fe2c 	bl	8002908 <MCAL_USART_SendData>
 8001cb0:	2106      	movs	r1, #6
 8001cb2:	4826      	ldr	r0, [pc, #152]	; (8001d4c <LUNA_INIT+0x250>)
 8001cb4:	f000 fe28 	bl	8002908 <MCAL_USART_SendData>
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4824      	ldr	r0, [pc, #144]	; (8001d4c <LUNA_INIT+0x250>)
 8001cbc:	f000 fe24 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001cc0:	e03e      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001cc2:	215a      	movs	r1, #90	; 0x5a
 8001cc4:	4821      	ldr	r0, [pc, #132]	; (8001d4c <LUNA_INIT+0x250>)
 8001cc6:	f000 fe1f 	bl	8002908 <MCAL_USART_SendData>
 8001cca:	2105      	movs	r1, #5
 8001ccc:	481f      	ldr	r0, [pc, #124]	; (8001d4c <LUNA_INIT+0x250>)
 8001cce:	f000 fe1b 	bl	8002908 <MCAL_USART_SendData>
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	481d      	ldr	r0, [pc, #116]	; (8001d4c <LUNA_INIT+0x250>)
 8001cd6:	f000 fe17 	bl	8002908 <MCAL_USART_SendData>
 8001cda:	2107      	movs	r1, #7
 8001cdc:	481b      	ldr	r0, [pc, #108]	; (8001d4c <LUNA_INIT+0x250>)
 8001cde:	f000 fe13 	bl	8002908 <MCAL_USART_SendData>
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4819      	ldr	r0, [pc, #100]	; (8001d4c <LUNA_INIT+0x250>)
 8001ce6:	f000 fe0f 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001cea:	e029      	b.n	8001d40 <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001cec:	215a      	movs	r1, #90	; 0x5a
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <LUNA_INIT+0x250>)
 8001cf0:	f000 fe0a 	bl	8002908 <MCAL_USART_SendData>
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <LUNA_INIT+0x250>)
 8001cf8:	f000 fe06 	bl	8002908 <MCAL_USART_SendData>
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	4813      	ldr	r0, [pc, #76]	; (8001d4c <LUNA_INIT+0x250>)
 8001d00:	f000 fe02 	bl	8002908 <MCAL_USART_SendData>
 8001d04:	2108      	movs	r1, #8
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <LUNA_INIT+0x250>)
 8001d08:	f000 fdfe 	bl	8002908 <MCAL_USART_SendData>
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	480f      	ldr	r0, [pc, #60]	; (8001d4c <LUNA_INIT+0x250>)
 8001d10:	f000 fdfa 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001d14:	e014      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001d16:	215a      	movs	r1, #90	; 0x5a
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LUNA_INIT+0x250>)
 8001d1a:	f000 fdf5 	bl	8002908 <MCAL_USART_SendData>
 8001d1e:	2105      	movs	r1, #5
 8001d20:	480a      	ldr	r0, [pc, #40]	; (8001d4c <LUNA_INIT+0x250>)
 8001d22:	f000 fdf1 	bl	8002908 <MCAL_USART_SendData>
 8001d26:	2105      	movs	r1, #5
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <LUNA_INIT+0x250>)
 8001d2a:	f000 fded 	bl	8002908 <MCAL_USART_SendData>
 8001d2e:	2109      	movs	r1, #9
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <LUNA_INIT+0x250>)
 8001d32:	f000 fde9 	bl	8002908 <MCAL_USART_SendData>
 8001d36:	2100      	movs	r1, #0
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <LUNA_INIT+0x250>)
 8001d3a:	f000 fde5 	bl	8002908 <MCAL_USART_SendData>
		break;
 8001d3e:	bf00      	nop
	}
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	08002f88 	.word	0x08002f88
 8001d4c:	40004800 	.word	0x40004800

08001d50 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <EXTI0_IRQHandler+0x1c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <EXTI0_IRQHandler+0x20>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <EXTI0_IRQHandler+0x20>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6153      	str	r3, [r2, #20]
	}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000054c 	.word	0x2000054c
 8001d70:	40010400 	.word	0x40010400

08001d74 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <EXTI1_IRQHandler+0x1c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <EXTI1_IRQHandler+0x20>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <EXTI1_IRQHandler+0x20>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6153      	str	r3, [r2, #20]

	}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000054c 	.word	0x2000054c
 8001d94:	40010400 	.word	0x40010400

08001d98 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <EXTI2_IRQHandler+0x1c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <EXTI2_IRQHandler+0x20>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <EXTI2_IRQHandler+0x20>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6153      	str	r3, [r2, #20]

	}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000054c 	.word	0x2000054c
 8001db8:	40010400 	.word	0x40010400

08001dbc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <EXTI3_IRQHandler+0x1c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <EXTI3_IRQHandler+0x20>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <EXTI3_IRQHandler+0x20>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6153      	str	r3, [r2, #20]

	}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000054c 	.word	0x2000054c
 8001ddc:	40010400 	.word	0x40010400

08001de0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <EXTI4_IRQHandler+0x1c>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <EXTI4_IRQHandler+0x20>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <EXTI4_IRQHandler+0x20>)
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6153      	str	r3, [r2, #20]

	}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000054c 	.word	0x2000054c
 8001e00:	40010400 	.word	0x40010400

08001e04 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <EXTI9_5_IRQHandler+0x22>
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6153      	str	r3, [r2, #20]
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <EXTI9_5_IRQHandler+0xa4>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <EXTI9_5_IRQHandler+0x40>
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <EXTI9_5_IRQHandler+0xa4>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <EXTI9_5_IRQHandler+0x5e>
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	6153      	str	r3, [r2, #20]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <EXTI9_5_IRQHandler+0xa4>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <EXTI9_5_IRQHandler+0x7c>
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <EXTI9_5_IRQHandler+0xa4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <EXTI9_5_IRQHandler+0x9a>
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <EXTI9_5_IRQHandler+0xa0>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6153      	str	r3, [r2, #20]
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <EXTI9_5_IRQHandler+0xa4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	4798      	blx	r3
	}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40010400 	.word	0x40010400
 8001ea8:	2000054c 	.word	0x2000054c

08001eac <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <EXTI15_10_IRQHandler+0x22>
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6153      	str	r3, [r2, #20]
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <EXTI15_10_IRQHandler+0x40>
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001ee0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee4:	6153      	str	r3, [r2, #20]
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <EXTI15_10_IRQHandler+0x5e>
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f02:	6153      	str	r3, [r2, #20]
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <EXTI15_10_IRQHandler+0x7c>
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	6153      	str	r3, [r2, #20]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <EXTI15_10_IRQHandler+0x9a>
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3e:	6153      	str	r3, [r2, #20]
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <EXTI15_10_IRQHandler+0xb8>
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <EXTI15_10_IRQHandler+0xbc>)
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <EXTI15_10_IRQHandler+0xc0>)
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	4798      	blx	r3

	}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	2000054c 	.word	0x2000054c

08001f70 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	d803      	bhi.n	8001f88 <Get_PIN_Positon+0x18>
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	e004      	b.n	8001f92 <Get_PIN_Positon+0x22>
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	81fb      	strh	r3, [r7, #14]
return positon;
 8001f94:	89fb      	ldrh	r3, [r7, #14]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a6b      	ldr	r2, [pc, #428]	; (800215c <MCAL_GPIO_init+0x1bc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d106      	bne.n	8001fc0 <MCAL_GPIO_init+0x20>
 8001fb2:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6193      	str	r3, [r2, #24]
 8001fbe:	e02a      	b.n	8002016 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a68      	ldr	r2, [pc, #416]	; (8002164 <MCAL_GPIO_init+0x1c4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d106      	bne.n	8001fd6 <MCAL_GPIO_init+0x36>
 8001fc8:	4b65      	ldr	r3, [pc, #404]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a64      	ldr	r2, [pc, #400]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	e01f      	b.n	8002016 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a63      	ldr	r2, [pc, #396]	; (8002168 <MCAL_GPIO_init+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d106      	bne.n	8001fec <MCAL_GPIO_init+0x4c>
 8001fde:	4b60      	ldr	r3, [pc, #384]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4a5f      	ldr	r2, [pc, #380]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6193      	str	r3, [r2, #24]
 8001fea:	e014      	b.n	8002016 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a5f      	ldr	r2, [pc, #380]	; (800216c <MCAL_GPIO_init+0x1cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <MCAL_GPIO_init+0x62>
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a59      	ldr	r2, [pc, #356]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	e009      	b.n	8002016 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <MCAL_GPIO_init+0x1d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d105      	bne.n	8002016 <MCAL_GPIO_init+0x76>
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4a54      	ldr	r2, [pc, #336]	; (8002160 <MCAL_GPIO_init+0x1c0>)
 8002010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002014:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b07      	cmp	r3, #7
 800201e:	d801      	bhi.n	8002024 <MCAL_GPIO_init+0x84>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	e001      	b.n	8002028 <MCAL_GPIO_init+0x88>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff9d 	bl	8001f70 <Get_PIN_Positon>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	230f      	movs	r3, #15
 800203c:	4093      	lsls	r3, r2
 800203e:	43da      	mvns	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	401a      	ands	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	789b      	ldrb	r3, [r3, #2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00e      	beq.n	8002072 <MCAL_GPIO_init+0xd2>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d009      	beq.n	8002072 <MCAL_GPIO_init+0xd2>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	789b      	ldrb	r3, [r3, #2]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d004      	beq.n	8002072 <MCAL_GPIO_init+0xd2>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	789b      	ldrb	r3, [r3, #2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b03      	cmp	r3, #3
 8002070:	d156      	bne.n	8002120 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	789b      	ldrb	r3, [r3, #2]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d11c      	bne.n	80020b6 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff74 	bl	8001f70 <Get_PIN_Positon>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	2308      	movs	r3, #8
 800208e:	fa03 f202 	lsl.w	r2, r3, r2
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	431a      	orrs	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	4093      	lsls	r3, r2
 80020a8:	43da      	mvns	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80020b4:	e04d      	b.n	8002152 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d11c      	bne.n	80020fa <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff52 	bl	8001f70 <Get_PIN_Positon>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	2308      	movs	r3, #8
 80020d2:	fa03 f202 	lsl.w	r2, r3, r2
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	fa03 f202 	lsl.w	r2, r3, r2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80020f8:	e02b      	b.n	8002152 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	789b      	ldrb	r3, [r3, #2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	009c      	lsls	r4, r3, #2
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <Get_PIN_Positon>
 800210e:	4603      	mov	r3, r0
 8002110:	fa04 f203 	lsl.w	r2, r4, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 800211e:	e018      	b.n	8002152 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3b04      	subs	r3, #4
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	78d2      	ldrb	r2, [r2, #3]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	ea43 0402 	orr.w	r4, r3, r2
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff18 	bl	8001f70 <Get_PIN_Positon>
 8002140:	4603      	mov	r3, r0
 8002142:	fa04 f203 	lsl.w	r2, r4, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

	}

}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	40010800 	.word	0x40010800
 8002160:	40021000 	.word	0x40021000
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	40011800 	.word	0x40011800

08002174 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10b      	bne.n	80021a4 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	2301      	movs	r3, #1
 8002194:	fa03 f202 	lsl.w	r2, r3, r2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60da      	str	r2, [r3, #12]

	}



}
 80021a2:	e00a      	b.n	80021ba <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	2301      	movs	r3, #1
 80021ac:	4093      	lsls	r3, r2
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60da      	str	r2, [r3, #12]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 80021ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	7813      	ldrb	r3, [r2, #0]
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 80021e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e8:	6913      	ldr	r3, [r2, #16]
 80021ea:	f36f 0300 	bfc	r3, #0, #1
 80021ee:	6113      	str	r3, [r2, #16]
 80021f0:	e04e      	b.n	8002290 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 80021f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7813      	ldrb	r3, [r2, #0]
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 800220c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002210:	6913      	ldr	r3, [r2, #16]
 8002212:	f36f 0341 	bfc	r3, #1, #1
 8002216:	6113      	str	r3, [r2, #16]
 8002218:	e03a      	b.n	8002290 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 800221a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7813      	ldrb	r3, [r2, #0]
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8002234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002238:	6913      	ldr	r3, [r2, #16]
 800223a:	f36f 0382 	bfc	r3, #2, #1
 800223e:	6113      	str	r3, [r2, #16]
 8002240:	e026      	b.n	8002290 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8002242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	7813      	ldrb	r3, [r2, #0]
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 800225c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002260:	6913      	ldr	r3, [r2, #16]
 8002262:	f36f 03c3 	bfc	r3, #3, #1
 8002266:	6113      	str	r3, [r2, #16]
 8002268:	e012      	b.n	8002290 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 800226a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	7813      	ldrb	r3, [r2, #0]
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8002284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002288:	6913      	ldr	r3, [r2, #16]
 800228a:	f36f 1304 	bfc	r3, #4, #1
 800228e:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <TIM2_IRQHandler+0xdc>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3

}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000588 	.word	0x20000588

080022a4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <TIM3_IRQHandler+0xc8>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	7813      	ldrb	r3, [r2, #0]
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <TIM3_IRQHandler+0xc8>)
 80022c4:	6913      	ldr	r3, [r2, #16]
 80022c6:	f36f 0300 	bfc	r3, #0, #1
 80022ca:	6113      	str	r3, [r2, #16]
 80022cc:	e046      	b.n	800235c <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <TIM3_IRQHandler+0xc8>)
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	7813      	ldrb	r3, [r2, #0]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <TIM3_IRQHandler+0xc8>)
 80022e8:	6913      	ldr	r3, [r2, #16]
 80022ea:	f36f 0341 	bfc	r3, #1, #1
 80022ee:	6113      	str	r3, [r2, #16]
 80022f0:	e034      	b.n	800235c <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <TIM3_IRQHandler+0xc8>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	7813      	ldrb	r3, [r2, #0]
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <TIM3_IRQHandler+0xc8>)
 800230c:	6913      	ldr	r3, [r2, #16]
 800230e:	f36f 0382 	bfc	r3, #2, #1
 8002312:	6113      	str	r3, [r2, #16]
 8002314:	e022      	b.n	800235c <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <TIM3_IRQHandler+0xc8>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	7813      	ldrb	r3, [r2, #0]
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <TIM3_IRQHandler+0xc8>)
 8002330:	6913      	ldr	r3, [r2, #16]
 8002332:	f36f 03c3 	bfc	r3, #3, #1
 8002336:	6113      	str	r3, [r2, #16]
 8002338:	e010      	b.n	800235c <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <TIM3_IRQHandler+0xc8>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	7813      	ldrb	r3, [r2, #0]
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8002352:	4a06      	ldr	r2, [pc, #24]	; (800236c <TIM3_IRQHandler+0xc8>)
 8002354:	6913      	ldr	r3, [r2, #16]
 8002356:	f36f 1304 	bfc	r3, #4, #1
 800235a:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <TIM3_IRQHandler+0xcc>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40000400 	.word	0x40000400
 8002370:	20000588 	.word	0x20000588

08002374 <TIM4_IRQHandler>:
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 800237a:	4b33      	ldr	r3, [pc, #204]	; (8002448 <TIM4_IRQHandler+0xd4>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	7813      	ldrb	r3, [r2, #0]
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <TIM4_IRQHandler+0xd4>)
 8002394:	6913      	ldr	r3, [r2, #16]
 8002396:	f36f 0300 	bfc	r3, #0, #1
 800239a:	6113      	str	r3, [r2, #16]
 800239c:	e04b      	b.n	8002436 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <TIM4_IRQHandler+0xd4>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	7813      	ldrb	r3, [r2, #0]
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <TIM4_IRQHandler+0xd4>)
 80023b8:	6913      	ldr	r3, [r2, #16]
 80023ba:	f36f 0341 	bfc	r3, #1, #1
 80023be:	6113      	str	r3, [r2, #16]
 80023c0:	e039      	b.n	8002436 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <TIM4_IRQHandler+0xd4>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00f      	beq.n	80023f0 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	7813      	ldrb	r3, [r2, #0]
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <TIM4_IRQHandler+0xd4>)
 80023dc:	6913      	ldr	r3, [r2, #16]
 80023de:	f36f 0382 	bfc	r3, #2, #1
 80023e2:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	7813      	ldrb	r3, [r2, #0]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	7013      	strb	r3, [r2, #0]
 80023ee:	e022      	b.n	8002436 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <TIM4_IRQHandler+0xd4>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	7813      	ldrb	r3, [r2, #0]
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <TIM4_IRQHandler+0xd4>)
 800240a:	6913      	ldr	r3, [r2, #16]
 800240c:	f36f 03c3 	bfc	r3, #3, #1
 8002410:	6113      	str	r3, [r2, #16]
 8002412:	e010      	b.n	8002436 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <TIM4_IRQHandler+0xd4>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	7813      	ldrb	r3, [r2, #0]
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <TIM4_IRQHandler+0xd4>)
 800242e:	6913      	ldr	r3, [r2, #16]
 8002430:	f36f 1304 	bfc	r3, #4, #1
 8002434:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <TIM4_IRQHandler+0xd8>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3


}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40000800 	.word	0x40000800
 800244c:	20000588 	.word	0x20000588

08002450 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MCAL_GET_SYS_CLCK+0x34>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d00a      	beq.n	8002478 <MCAL_GET_SYS_CLCK+0x28>
 8002462:	2b02      	cmp	r3, #2
 8002464:	d80a      	bhi.n	800247c <MCAL_GET_SYS_CLCK+0x2c>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <MCAL_GET_SYS_CLCK+0x20>
 800246a:	2b01      	cmp	r3, #1
 800246c:	d002      	beq.n	8002474 <MCAL_GET_SYS_CLCK+0x24>
 800246e:	e005      	b.n	800247c <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <MCAL_GET_SYS_CLCK+0x38>)
 8002472:	e003      	b.n	800247c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <MCAL_GET_SYS_CLCK+0x3c>)
 8002476:	e001      	b.n	800247c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <MCAL_GET_SYS_CLCK+0x3c>)
 800247a:	e7ff      	b.n	800247c <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	00f42400 	.word	0x00f42400

08002490 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8002494:	f7ff ffdc 	bl	8002450 <MCAL_GET_SYS_CLCK>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <MCAL_GET_H_CLCK+0x20>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <MCAL_GET_H_CLCK+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	20000008 	.word	0x20000008

080024b8 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 80024bc:	f7ff ffe8 	bl	8002490 <MCAL_GET_H_CLCK>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <MCAL_GET_PCLCK1+0x20>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <MCAL_GET_PCLCK1+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3

}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	20000008 	.word	0x20000008

080024e0 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80024e4:	f7ff ffd4 	bl	8002490 <MCAL_GET_H_CLCK>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <MCAL_GET_PCLCK2+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <MCAL_GET_PCLCK2+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3

}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	20000008 	.word	0x20000008

08002508 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	4905      	ldr	r1, [pc, #20]	; (8002528 <SPI1_IRQHandler+0x20>)
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f80c 	bl	8002530 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <SPI1_IRQHandler+0x24>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	7938      	ldrb	r0, [r7, #4]
 800251e:	4798      	blx	r3
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013000 	.word	0x40013000
 800252c:	200005b8 	.word	0x200005b8

08002530 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00f      	beq.n	8002568 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	7813      	ldrb	r3, [r2, #0]
 800254c:	f36f 0300 	bfc	r3, #0, #1
 8002550:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	7813      	ldrb	r3, [r2, #0]
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	7913      	ldrb	r3, [r2, #4]
 8002560:	f36f 1386 	bfc	r3, #6, #1
 8002564:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8002566:	e015      	b.n	8002594 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	7813      	ldrb	r3, [r2, #0]
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	7813      	ldrb	r3, [r2, #0]
 8002584:	f36f 0341 	bfc	r3, #1, #1
 8002588:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	7913      	ldrb	r3, [r2, #4]
 800258e:	f36f 13c7 	bfc	r3, #7, #1
 8002592:	7113      	strb	r3, [r2, #4]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
	...

080025a0 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <TIM1_UP_IRQHandler+0x1c>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <TIM1_UP_IRQHandler+0x20>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	6913      	ldr	r3, [r2, #16]
 80025b0:	f36f 0300 	bfc	r3, #0, #1
 80025b4:	6113      	str	r3, [r2, #16]

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200005d8 	.word	0x200005d8
 80025c0:	200005e8 	.word	0x200005e8

080025c4 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <TIM1_CC_IRQHandler+0x1c>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <TIM1_CC_IRQHandler+0x20>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	6913      	ldr	r3, [r2, #16]
 80025d4:	f36f 0341 	bfc	r3, #1, #1
 80025d8:	6113      	str	r3, [r2, #16]

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200005d8 	.word	0x200005d8
 80025e4:	200005e8 	.word	0x200005e8

080025e8 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <TIM1_BRK_IRQHandler+0x1c>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <TIM1_BRK_IRQHandler+0x20>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	6913      	ldr	r3, [r2, #16]
 80025f8:	f36f 0300 	bfc	r3, #0, #1
 80025fc:	6113      	str	r3, [r2, #16]

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200005d8 	.word	0x200005d8
 8002608:	200005e8 	.word	0x200005e8

0800260c <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <TIM1_TRG_COM_IRQHandler+0x1c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <TIM1_TRG_COM_IRQHandler+0x20>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	6913      	ldr	r3, [r2, #16]
 800261c:	f36f 0300 	bfc	r3, #0, #1
 8002620:	6113      	str	r3, [r2, #16]

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200005d8 	.word	0x200005d8
 800262c:	200005e8 	.word	0x200005e8

08002630 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a8d      	ldr	r2, [pc, #564]	; (8002874 <MCAL_USART_init+0x244>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8002642:	4a8d      	ldr	r2, [pc, #564]	; (8002878 <MCAL_USART_init+0x248>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4614      	mov	r4, r2
 8002648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 800264e:	4b8b      	ldr	r3, [pc, #556]	; (800287c <MCAL_USART_init+0x24c>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4a8a      	ldr	r2, [pc, #552]	; (800287c <MCAL_USART_init+0x24c>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6193      	str	r3, [r2, #24]
 800265a:	e024      	b.n	80026a6 <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a88      	ldr	r2, [pc, #544]	; (8002880 <MCAL_USART_init+0x250>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10e      	bne.n	8002682 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8002664:	4b84      	ldr	r3, [pc, #528]	; (8002878 <MCAL_USART_init+0x248>)
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	f103 0410 	add.w	r4, r3, #16
 800266c:	4613      	mov	r3, r2
 800266e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8002674:	4b81      	ldr	r3, [pc, #516]	; (800287c <MCAL_USART_init+0x24c>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a80      	ldr	r2, [pc, #512]	; (800287c <MCAL_USART_init+0x24c>)
 800267a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267e:	61d3      	str	r3, [r2, #28]
 8002680:	e011      	b.n	80026a6 <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <MCAL_USART_init+0x254>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10d      	bne.n	80026a6 <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <MCAL_USART_init+0x248>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	f103 0420 	add.w	r4, r3, #32
 8002692:	4613      	mov	r3, r2
 8002694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 800269a:	4b78      	ldr	r3, [pc, #480]	; (800287c <MCAL_USART_init+0x24c>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a77      	ldr	r2, [pc, #476]	; (800287c <MCAL_USART_init+0x24c>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	7912      	ldrb	r2, [r2, #4]
 80026ba:	0312      	lsls	r2, r2, #12
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	79d2      	ldrb	r2, [r2, #7]
 80026ca:	0312      	lsls	r2, r2, #12
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7a5b      	ldrb	r3, [r3, #9]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7a1b      	ldrb	r3, [r3, #8]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d826      	bhi.n	8002748 <MCAL_USART_init+0x118>
 80026fa:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <MCAL_USART_init+0xd0>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	0800271f 	.word	0x0800271f
 8002708:	0800272d 	.word	0x0800272d
 800270c:	0800273b 	.word	0x0800273b
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	615a      	str	r2, [r3, #20]
		break;
 800271c:	e014      	b.n	8002748 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	615a      	str	r2, [r3, #20]
		break;
 800272a:	e00d      	b.n	8002748 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	615a      	str	r2, [r3, #20]
		break;
 8002738:	e006      	b.n	8002748 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	615a      	str	r2, [r3, #20]
		break;
 8002746:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	7952      	ldrb	r2, [r2, #5]
 8002750:	0252      	lsls	r2, r2, #9
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	799b      	ldrb	r3, [r3, #6]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d125      	bne.n	80027ac <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a44      	ldr	r2, [pc, #272]	; (8002874 <MCAL_USART_init+0x244>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d106      	bne.n	8002776 <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8002768:	4b47      	ldr	r3, [pc, #284]	; (8002888 <MCAL_USART_init+0x258>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a46      	ldr	r2, [pc, #280]	; (8002888 <MCAL_USART_init+0x258>)
 800276e:	f043 0320 	orr.w	r3, r3, #32
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e014      	b.n	80027a0 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a41      	ldr	r2, [pc, #260]	; (8002880 <MCAL_USART_init+0x250>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d106      	bne.n	800278c <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 800277e:	4b42      	ldr	r3, [pc, #264]	; (8002888 <MCAL_USART_init+0x258>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <MCAL_USART_init+0x258>)
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e009      	b.n	80027a0 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <MCAL_USART_init+0x254>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d105      	bne.n	80027a0 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <MCAL_USART_init+0x258>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <MCAL_USART_init+0x258>)
 800279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279e:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a31      	ldr	r2, [pc, #196]	; (8002874 <MCAL_USART_init+0x244>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d12d      	bne.n	8002810 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80027b4:	f7ff fe94 	bl	80024e0 <MCAL_GET_PCLCK2>
 80027b8:	4602      	mov	r2, r0
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	011c      	lsls	r4, r3, #4
 80027c6:	f7ff fe8b 	bl	80024e0 <MCAL_GET_PCLCK2>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80027e0:	f7ff fe7e 	bl	80024e0 <MCAL_GET_PCLCK2>
 80027e4:	4602      	mov	r2, r0
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	2264      	movs	r2, #100	; 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1aeb      	subs	r3, r5, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4a24      	ldr	r2, [pc, #144]	; (800288c <MCAL_USART_init+0x25c>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	ea44 0203 	orr.w	r2, r4, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	e070      	b.n	80028f2 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <MCAL_USART_init+0x250>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d13b      	bne.n	8002890 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8002818:	f7ff fe4e 	bl	80024b8 <MCAL_GET_PCLCK1>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	011c      	lsls	r4, r3, #4
 800282a:	f7ff fe45 	bl	80024b8 <MCAL_GET_PCLCK1>
 800282e:	4602      	mov	r2, r0
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009a      	lsls	r2, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fbb2 f5f3 	udiv	r5, r2, r3
 8002844:	f7ff fe38 	bl	80024b8 <MCAL_GET_PCLCK1>
 8002848:	4602      	mov	r2, r0
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	2264      	movs	r2, #100	; 0x64
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	1aeb      	subs	r3, r5, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <MCAL_USART_init+0x25c>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	ea44 0203 	orr.w	r2, r4, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	e03e      	b.n	80028f2 <MCAL_USART_init+0x2c2>
 8002874:	40013800 	.word	0x40013800
 8002878:	200005ec 	.word	0x200005ec
 800287c:	40021000 	.word	0x40021000
 8002880:	40004400 	.word	0x40004400
 8002884:	40004800 	.word	0x40004800
 8002888:	e000e104 	.word	0xe000e104
 800288c:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <MCAL_USART_init+0x2d0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12c      	bne.n	80028f2 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8002898:	f7ff fe0e 	bl	80024b8 <MCAL_GET_PCLCK1>
 800289c:	4602      	mov	r2, r0
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	011c      	lsls	r4, r3, #4
 80028aa:	f7ff fe05 	bl	80024b8 <MCAL_GET_PCLCK1>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80028c4:	f7ff fdf8 	bl	80024b8 <MCAL_GET_PCLCK1>
 80028c8:	4602      	mov	r2, r0
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	1aeb      	subs	r3, r5, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <MCAL_USART_init+0x2d4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	ea44 0203 	orr.w	r2, r4, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f892 	bl	8002a1c <SET_GPIO>
	}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	40004800 	.word	0x40004800
 8002904:	51eb851f 	.word	0x51eb851f

08002908 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <MCAL_USART_SendData+0x68>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d102      	bne.n	8002926 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MCAL_USART_SendData+0x6c>)
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e00c      	b.n	8002940 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <MCAL_USART_SendData+0x70>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d102      	bne.n	8002934 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <MCAL_USART_SendData+0x74>)
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e005      	b.n	8002940 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <MCAL_USART_SendData+0x78>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MCAL_USART_SendData+0x7c>)
 800293e:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8002940:	bf00      	nop
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f9      	beq.n	8002942 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	791b      	ldrb	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d103      	bne.n	800295e <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 800295c:	e002      	b.n	8002964 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40013800 	.word	0x40013800
 8002974:	200005ec 	.word	0x200005ec
 8002978:	40004400 	.word	0x40004400
 800297c:	200005fc 	.word	0x200005fc
 8002980:	40004800 	.word	0x40004800
 8002984:	2000060c 	.word	0x2000060c

08002988 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <MCAL_USART_ReciveData+0x7c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MCAL_USART_ReciveData+0x80>)
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e00c      	b.n	80029bc <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <MCAL_USART_ReciveData+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d102      	bne.n	80029b0 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MCAL_USART_ReciveData+0x88>)
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e005      	b.n	80029bc <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <MCAL_USART_ReciveData+0x8c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MCAL_USART_ReciveData+0x90>)
 80029ba:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	799b      	ldrb	r3, [r3, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80029c4:	bf00      	nop
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f9      	beq.n	80029c6 <MCAL_USART_ReciveData+0x3e>
 80029d2:	e002      	b.n	80029da <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	799b      	ldrb	r3, [r3, #6]
 80029d8:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	795b      	ldrb	r3, [r3, #5]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	e006      	b.n	80029fa <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f8:	b29b      	uxth	r3, r3

		}

}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40013800 	.word	0x40013800
 8002a08:	200005ec 	.word	0x200005ec
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	200005fc 	.word	0x200005fc
 8002a14:	40004800 	.word	0x40004800
 8002a18:	2000060c 	.word	0x2000060c

08002a1c <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <SET_GPIO+0xbc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <SET_GPIO+0xc0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <SET_GPIO+0xc4>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <SET_GPIO+0xc4>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	4827      	ldr	r0, [pc, #156]	; (8002ae4 <SET_GPIO+0xc8>)
 8002a46:	f7ff faab 	bl	8001fa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <SET_GPIO+0xcc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4823      	ldr	r0, [pc, #140]	; (8002ae4 <SET_GPIO+0xc8>)
 8002a58:	f7ff faa2 	bl	8001fa0 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8002a5c:	e038      	b.n	8002ad0 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <SET_GPIO+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d118      	bne.n	8002a98 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <SET_GPIO+0xc4>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <SET_GPIO+0xc4>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <SET_GPIO+0xd4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4819      	ldr	r0, [pc, #100]	; (8002ae4 <SET_GPIO+0xc8>)
 8002a80:	f7ff fa8e 	bl	8001fa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <SET_GPIO+0xd8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <SET_GPIO+0xc8>)
 8002a92:	f7ff fa85 	bl	8001fa0 <MCAL_GPIO_init>
}
 8002a96:	e01b      	b.n	8002ad0 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <SET_GPIO+0xdc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d117      	bne.n	8002ad0 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <SET_GPIO+0xc4>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <SET_GPIO+0xc4>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <SET_GPIO+0xe0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4811      	ldr	r0, [pc, #68]	; (8002b00 <SET_GPIO+0xe4>)
 8002aba:	f7ff fa71 	bl	8001fa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <SET_GPIO+0xe8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480d      	ldr	r0, [pc, #52]	; (8002b00 <SET_GPIO+0xe4>)
 8002acc:	f7ff fa68 	bl	8001fa0 <MCAL_GPIO_init>
}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08002f98 	.word	0x08002f98
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010800 	.word	0x40010800
 8002ae8:	08002f9c 	.word	0x08002f9c
 8002aec:	40004400 	.word	0x40004400
 8002af0:	08002fa0 	.word	0x08002fa0
 8002af4:	08002fa4 	.word	0x08002fa4
 8002af8:	40004800 	.word	0x40004800
 8002afc:	08002fa8 	.word	0x08002fa8
 8002b00:	40010c00 	.word	0x40010c00
 8002b04:	08002fac 	.word	0x08002fac

08002b08 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <USART1_IRQHandler+0x10>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4798      	blx	r3
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200005ec 	.word	0x200005ec

08002b1c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <USART2_IRQHandler+0x10>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200005ec 	.word	0x200005ec

08002b30 <USART3_IRQHandler>:
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8002b34:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <USART3_IRQHandler+0x10>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4798      	blx	r3
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200005ec 	.word	0x200005ec

08002b44 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
	while(1);
 8002b48:	e7fe      	b.n	8002b48 <Error_Handller+0x4>
	...

08002b4c <TSR_START>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_START(void){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	MCAL_USART_SendData(TSR_UART_INSTANT, GR_TSR_FLAG_START);
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <TSR_START+0x14>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <TSR_START+0x18>)
 8002b58:	f7ff fed6 	bl	8002908 <MCAL_USART_SendData>

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000019 	.word	0x20000019
 8002b64:	40013800 	.word	0x40013800

08002b68 <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	TSR_START();
 8002b6c:	f7ff ffee 	bl	8002b4c <TSR_START>
	if(xQueueReceive(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_FINAL,1)==pdTRUE){
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <TSR_Handller_TASK+0x30>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4909      	ldr	r1, [pc, #36]	; (8002b9c <TSR_Handller_TASK+0x34>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fd01 	bl	8000580 <xQueueReceive>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <TSR_Handller_TASK+0x2c>

		switch(GR_TSR_FLAG_OLED_FINAL){
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <TSR_Handller_TASK+0x34>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <TSR_Handller_TASK+0x2a>
 8002b8c:	2b99      	cmp	r3, #153	; 0x99
 8002b8e:	d101      	bne.n	8002b94 <TSR_Handller_TASK+0x2c>
		case 0x99:
			break;
 8002b90:	e000      	b.n	8002b94 <TSR_Handller_TASK+0x2c>
		case 0x1:
			break;
 8002b92:	bf00      	nop
		}
	}else{

	}

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000620 	.word	0x20000620
 8002b9c:	2000062f 	.word	0x2000062f

08002ba0 <TSR_Flag_Read_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Flag_Read_TASK(){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	if(xQueueSend(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_send,1)==pdTRUE){
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <TSR_Flag_Read_TASK+0x18>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2201      	movs	r2, #1
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <TSR_Flag_Read_TASK+0x1c>)
 8002bae:	f7fd fc3d 	bl	800042c <xQueueGenericSend>

	}else{

	}
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000620 	.word	0x20000620
 8002bbc:	2000062e 	.word	0x2000062e

08002bc0 <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	if(	TSR_UART_INSTANT->SR &(1<<5)){
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <TSR_call_Back+0x94>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <TSR_call_Back+0x2c>
		GR_TSR_FLAG_rec=	MCAL_USART_ReciveData(TSR_UART_INSTANT);
 8002bd0:	4820      	ldr	r0, [pc, #128]	; (8002c54 <TSR_call_Back+0x94>)
 8002bd2:	f7ff fed9 	bl	8002988 <MCAL_USART_ReciveData>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <TSR_call_Back+0x98>)
 8002bdc:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_rec &=0x0F;
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <TSR_call_Back+0x98>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <TSR_call_Back+0x98>)
 8002bea:	701a      	strb	r2, [r3, #0]

	}
	if(i<2)
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <TSR_call_Back+0x9c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d81f      	bhi.n	8002c34 <TSR_call_Back+0x74>
	{
		//		MCAL_USART_SendData(TSR_UART_INSTANT,GR_TSR_FLAG_rec);
		GR_TSR_FLAG_OLED= (GR_TSR_FLAG_OLED<<4) | (GR_TSR_FLAG_rec);
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <TSR_call_Back+0xa0>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	b25a      	sxtb	r2, r3
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <TSR_call_Back+0x98>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <TSR_call_Back+0xa0>)
 8002c0a:	701a      	strb	r2, [r3, #0]
		temp = ((GR_TSR_FLAG_OLED >>4) |((GR_TSR_FLAG_OLED <<4)));
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <TSR_call_Back+0xa0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	b25a      	sxtb	r2, r3
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <TSR_call_Back+0xa0>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <TSR_call_Back+0xa4>)
 8002c26:	701a      	strb	r2, [r3, #0]
		i++;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <TSR_call_Back+0x9c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <TSR_call_Back+0x9c>)
 8002c32:	701a      	strb	r2, [r3, #0]

	}

	if(i>=2){
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <TSR_call_Back+0x9c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d909      	bls.n	8002c50 <TSR_call_Back+0x90>
		i=0;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <TSR_call_Back+0x9c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED_send=(temp);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <TSR_call_Back+0xa4>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <TSR_call_Back+0xa8>)
 8002c48:	701a      	strb	r2, [r3, #0]
		GR_TSR_FLAG_OLED=0;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <TSR_call_Back+0xa0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
	}

}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013800 	.word	0x40013800
 8002c58:	2000062c 	.word	0x2000062c
 8002c5c:	20000636 	.word	0x20000636
 8002c60:	2000062d 	.word	0x2000062d
 8002c64:	20000630 	.word	0x20000630
 8002c68:	2000062e 	.word	0x2000062e

08002c6c <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <TSR_init+0x24>)
 8002c74:	463c      	mov	r4, r7
 8002c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <TSR_init+0x28>)
 8002c82:	f7ff fcd5 	bl	8002630 <MCAL_USART_init>
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	08002fb0 	.word	0x08002fb0
 8002c94:	40013800 	.word	0x40013800

08002c98 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,1)==pdTRUE){
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <ACC_Handller_TASK+0x68>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4918      	ldr	r1, [pc, #96]	; (8002d04 <ACC_Handller_TASK+0x6c>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc6b 	bl	8000580 <xQueueReceive>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d124      	bne.n	8002cfa <ACC_Handller_TASK+0x62>
		if((ACC_AMP>=100) && (ACC_AMP<=65535) ){
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <ACC_Handller_TASK+0x6c>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	2b63      	cmp	r3, #99	; 0x63
 8002cb6:	d919      	bls.n	8002cec <ACC_Handller_TASK+0x54>
			if(xQueueReceive(ACC__dis_Queue,&ACC_dis,1)==pdTRUE){
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <ACC_Handller_TASK+0x70>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4913      	ldr	r1, [pc, #76]	; (8002d0c <ACC_Handller_TASK+0x74>)
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc5d 	bl	8000580 <xQueueReceive>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d116      	bne.n	8002cfa <ACC_Handller_TASK+0x62>
				if(ACC_dis <=200){
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <ACC_Handller_TASK+0x74>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2bc8      	cmp	r3, #200	; 0xc8
 8002cd2:	d805      	bhi.n	8002ce0 <ACC_Handller_TASK+0x48>
					// here should send CAN fram to atmega to stop the motor
					MCAL_write_PIN(GPIOA, PIN_0, 1);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <ACC_Handller_TASK+0x78>)
 8002cda:	f7ff fa4b 	bl	8002174 <MCAL_write_PIN>
	}else{

	}


}
 8002cde:	e00c      	b.n	8002cfa <ACC_Handller_TASK+0x62>
					MCAL_write_PIN(GPIOA, PIN_0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	480a      	ldr	r0, [pc, #40]	; (8002d10 <ACC_Handller_TASK+0x78>)
 8002ce6:	f7ff fa45 	bl	8002174 <MCAL_write_PIN>
}
 8002cea:	e006      	b.n	8002cfa <ACC_Handller_TASK+0x62>
			xQueueReceive(ACC__dis_Queue,&ACC_dis,1);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <ACC_Handller_TASK+0x70>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4906      	ldr	r1, [pc, #24]	; (8002d0c <ACC_Handller_TASK+0x74>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc43 	bl	8000580 <xQueueReceive>
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000628 	.word	0x20000628
 8002d04:	20000634 	.word	0x20000634
 8002d08:	20000624 	.word	0x20000624
 8002d0c:	20000632 	.word	0x20000632
 8002d10:	40010800 	.word	0x40010800

08002d14 <ACC_LUNA_READ_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_LUNA_READ_TASK(){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	if(xQueueSend(ACC__dis_Queue,&LUNA_dis,1)==pdTRUE){
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <ACC_LUNA_READ_TASK+0x4c>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4910      	ldr	r1, [pc, #64]	; (8002d64 <ACC_LUNA_READ_TASK+0x50>)
 8002d22:	f7fd fb83 	bl	800042c <xQueueGenericSend>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <ACC_LUNA_READ_TASK+0x26>
		MCAL_USART_SendData(LUNA_UART_INSTANT, LUNA_dis);
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <ACC_LUNA_READ_TASK+0x50>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <ACC_LUNA_READ_TASK+0x54>)
 8002d36:	f7ff fde7 	bl	8002908 <MCAL_USART_SendData>
		}else{

		}
	if(xQueueSend(ACC__AMP_Queue,&LUNA_AMP,1)==pdTRUE){
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <ACC_LUNA_READ_TASK+0x58>)
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2201      	movs	r2, #1
 8002d42:	490b      	ldr	r1, [pc, #44]	; (8002d70 <ACC_LUNA_READ_TASK+0x5c>)
 8002d44:	f7fd fb72 	bl	800042c <xQueueGenericSend>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <ACC_LUNA_READ_TASK+0x48>
		MCAL_USART_SendData(LUNA_UART_INSTANT, LUNA_AMP);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <ACC_LUNA_READ_TASK+0x5c>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	4804      	ldr	r0, [pc, #16]	; (8002d68 <ACC_LUNA_READ_TASK+0x54>)
 8002d58:	f7ff fdd6 	bl	8002908 <MCAL_USART_SendData>
		}else{

		}

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000624 	.word	0x20000624
 8002d64:	20000544 	.word	0x20000544
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	20000628 	.word	0x20000628
 8002d70:	20000546 	.word	0x20000546

08002d74 <HW_init>:



void HW_init(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0

	////////////*********TSR init***************//////////////////
	TSR_init();
 8002d7a:	f7ff ff77 	bl	8002c6c <TSR_init>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe febb 	bl	8001afc <LUNA_INIT>
	PIN_config PINx={PIN_0,OUTPUT_PP,SPEED_10};
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HW_init+0x2c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <HW_init+0x30>)
 8002d92:	f7ff f905 	bl	8001fa0 <MCAL_GPIO_init>



}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08002fc0 	.word	0x08002fc0
 8002da4:	40010800 	.word	0x40010800

08002da8 <main>:
int main(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	HW_init();
 8002dae:	f7ff ffe1 	bl	8002d74 <HW_init>
	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",128,NULL,2,NULL)!=pdPASS ){
 8002db2:	2300      	movs	r3, #0
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	2302      	movs	r3, #2
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	492c      	ldr	r1, [pc, #176]	; (8002e70 <main+0xc8>)
 8002dc0:	482c      	ldr	r0, [pc, #176]	; (8002e74 <main+0xcc>)
 8002dc2:	f7fd fd8f 	bl	80008e4 <xTaskCreate>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <main+0x28>
		Error_Handller();
 8002dcc:	f7ff feba 	bl	8002b44 <Error_Handller>
	}

	if(xTaskCreate(TSR_Flag_Read_TASK,"Read From UART1",128,NULL,2,NULL)!=pdPASS ){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4926      	ldr	r1, [pc, #152]	; (8002e78 <main+0xd0>)
 8002dde:	4827      	ldr	r0, [pc, #156]	; (8002e7c <main+0xd4>)
 8002de0:	f7fd fd80 	bl	80008e4 <xTaskCreate>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <main+0x46>
		Error_Handller();
 8002dea:	f7ff feab 	bl	8002b44 <Error_Handller>
	}
	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",128,NULL,2,NULL)!=pdPASS ){
 8002dee:	2300      	movs	r3, #0
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2302      	movs	r3, #2
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	4921      	ldr	r1, [pc, #132]	; (8002e80 <main+0xd8>)
 8002dfc:	4821      	ldr	r0, [pc, #132]	; (8002e84 <main+0xdc>)
 8002dfe:	f7fd fd71 	bl	80008e4 <xTaskCreate>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d001      	beq.n	8002e0c <main+0x64>
		Error_Handller();
 8002e08:	f7ff fe9c 	bl	8002b44 <Error_Handller>
	}

	if(xTaskCreate(ACC_LUNA_READ_TASK,"LUNA READ",128,NULL,2,NULL)!=pdPASS ){
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2302      	movs	r3, #2
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	491b      	ldr	r1, [pc, #108]	; (8002e88 <main+0xe0>)
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <main+0xe4>)
 8002e1c:	f7fd fd62 	bl	80008e4 <xTaskCreate>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <main+0x82>
		Error_Handller();
 8002e26:	f7ff fe8d 	bl	8002b44 <Error_Handller>
	}
	xSemaphore = xSemaphoreCreateBinary();
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fd fa9e 	bl	8000370 <xQueueGenericCreate>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <main+0xe8>)
 8002e38:	6013      	str	r3, [r2, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	200a      	movs	r0, #10
 8002e40:	f7fd fa96 	bl	8000370 <xQueueGenericCreate>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <main+0xec>)
 8002e48:	6013      	str	r3, [r2, #0]
	ACC__dis_Queue=xQueueCreate(10,sizeof(char));
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f7fd fa8e 	bl	8000370 <xQueueGenericCreate>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <main+0xf0>)
 8002e58:	6013      	str	r3, [r2, #0]
	ACC__AMP_Queue=xQueueCreate(10,sizeof(char));
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	200a      	movs	r0, #10
 8002e60:	f7fd fa86 	bl	8000370 <xQueueGenericCreate>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <main+0xf4>)
 8002e68:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8002e6a:	f7fd fe7b 	bl	8000b64 <vTaskStartScheduler>

	for(;;);
 8002e6e:	e7fe      	b.n	8002e6e <main+0xc6>
 8002e70:	08002fc4 	.word	0x08002fc4
 8002e74:	08002b69 	.word	0x08002b69
 8002e78:	08002fd8 	.word	0x08002fd8
 8002e7c:	08002ba1 	.word	0x08002ba1
 8002e80:	08002fe8 	.word	0x08002fe8
 8002e84:	08002c99 	.word	0x08002c99
 8002e88:	08002ffc 	.word	0x08002ffc
 8002e8c:	08002d15 	.word	0x08002d15
 8002e90:	2000061c 	.word	0x2000061c
 8002e94:	20000620 	.word	0x20000620
 8002e98:	20000624 	.word	0x20000624
 8002e9c:	20000628 	.word	0x20000628

08002ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ea2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <LoopForever+0x6>)
  ldr r1, =_edata
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <LoopForever+0xe>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb0:	e002      	b.n	8002eb8 <LoopCopyDataInit>

08002eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb6:	3304      	adds	r3, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ebc:	d3f9      	bcc.n	8002eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <LoopForever+0x16>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec4:	e001      	b.n	8002eca <LoopFillZerobss>

08002ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec8:	3204      	adds	r2, #4

08002eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ecc:	d3fb      	bcc.n	8002ec6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ece:	f000 f819 	bl	8002f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ed2:	f7ff ff69 	bl	8002da8 <main>

08002ed6 <LoopForever>:

LoopForever:
  b LoopForever
 8002ed6:	e7fe      	b.n	8002ed6 <LoopForever>
  ldr   r0, =_estack
 8002ed8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002ee4:	08003010 	.word	0x08003010
  ldr r2, =_sbss
 8002ee8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002eec:	20000638 	.word	0x20000638

08002ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC1_2_IRQHandler>

08002ef2 <memset>:
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4402      	add	r2, r0
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d100      	bne.n	8002efc <memset+0xa>
 8002efa:	4770      	bx	lr
 8002efc:	f803 1b01 	strb.w	r1, [r3], #1
 8002f00:	e7f9      	b.n	8002ef6 <memset+0x4>
	...

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	2600      	movs	r6, #0
 8002f08:	4d0c      	ldr	r5, [pc, #48]	; (8002f3c <__libc_init_array+0x38>)
 8002f0a:	4c0d      	ldr	r4, [pc, #52]	; (8002f40 <__libc_init_array+0x3c>)
 8002f0c:	1b64      	subs	r4, r4, r5
 8002f0e:	10a4      	asrs	r4, r4, #2
 8002f10:	42a6      	cmp	r6, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	f000 f828 	bl	8002f68 <_init>
 8002f18:	2600      	movs	r6, #0
 8002f1a:	4d0a      	ldr	r5, [pc, #40]	; (8002f44 <__libc_init_array+0x40>)
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <__libc_init_array+0x44>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	42a6      	cmp	r6, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2c:	4798      	blx	r3
 8002f2e:	3601      	adds	r6, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f36:	4798      	blx	r3
 8002f38:	3601      	adds	r6, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	08003008 	.word	0x08003008
 8002f40:	08003008 	.word	0x08003008
 8002f44:	08003008 	.word	0x08003008
 8002f48:	0800300c 	.word	0x0800300c

08002f4c <memcpy>:
 8002f4c:	440a      	add	r2, r1
 8002f4e:	4291      	cmp	r1, r2
 8002f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f54:	d100      	bne.n	8002f58 <memcpy+0xc>
 8002f56:	4770      	bx	lr
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f5e:	4291      	cmp	r1, r2
 8002f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f64:	d1f9      	bne.n	8002f5a <memcpy+0xe>
 8002f66:	bd10      	pop	{r4, pc}

08002f68 <_init>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr

08002f74 <_fini>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	bf00      	nop
 8002f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7a:	bc08      	pop	{r3}
 8002f7c:	469e      	mov	lr, r3
 8002f7e:	4770      	bx	lr
