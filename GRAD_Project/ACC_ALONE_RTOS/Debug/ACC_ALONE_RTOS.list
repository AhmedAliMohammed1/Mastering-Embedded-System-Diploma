
ACC_ALONE_RTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b94  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d9c  08004d9c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004d9c  08004d9c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d9c  08004d9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f0  20000024  08004dc8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002314  08004dc8  00022314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee65  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002141  00000000  00000000  0002eef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000039f6  00000000  00000000  00031036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d0  00000000  00000000  00034a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006c8  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000016a9  00000000  00000000  000358c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009f01  00000000  00000000  00036f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00013f93  00000000  00000000  00040e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001cc0  00000000  00000000  00054e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08004cac 	.word	0x08004cac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08004cac 	.word	0x08004cac

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000292:	2301      	movs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d05d      	beq.n	800035c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d059      	beq.n	800035c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	fba3 2302 	umull	r2, r3, r3, r2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d000      	beq.n	80002bc <xQueueGenericReset+0x34>
 80002ba:	2101      	movs	r1, #1
 80002bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14c      	bne.n	800035c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80002c2:	f001 fa5b 	bl	800177c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002d2:	fb01 f303 	mul.w	r3, r1, r3
 80002d6:	441a      	add	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	2200      	movs	r2, #0
 80002e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f2:	3b01      	subs	r3, #1
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002f8:	fb01 f303 	mul.w	r3, r1, r3
 80002fc:	441a      	add	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	22ff      	movs	r2, #255	; 0xff
 8000306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	22ff      	movs	r2, #255	; 0xff
 800030e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d114      	bne.n	8000342 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d01a      	beq.n	8000356 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3310      	adds	r3, #16
 8000324:	4618      	mov	r0, r3
 8000326:	f000 feb5 	bl	8001094 <xTaskRemoveFromEventList>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d012      	beq.n	8000356 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <xQueueGenericReset+0xe4>)
 8000332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	f3bf 8f4f 	dsb	sy
 800033c:	f3bf 8f6f 	isb	sy
 8000340:	e009      	b.n	8000356 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3310      	adds	r3, #16
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff12 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	3324      	adds	r3, #36	; 0x24
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff0d 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000356:	f001 fa2b 	bl	80017b0 <vPortExitCritical>
 800035a:	e001      	b.n	8000360 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000360:	68fb      	ldr	r3, [r7, #12]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000ed04 	.word	0xe000ed04

08000370 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af02      	add	r7, sp, #8
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	4613      	mov	r3, r2
 800037c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d02d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000388:	2100      	movs	r1, #0
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	fba3 2302 	umull	r2, r3, r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d000      	beq.n	8000398 <xQueueGenericCreate+0x28>
 8000396:	2101      	movs	r1, #1
 8000398:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800039a:	2b00      	cmp	r3, #0
 800039c:	d122      	bne.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003a6:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003aa:	d81b      	bhi.n	80003e4 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	fb02 f303 	mul.w	r3, r2, r3
 80003b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	3348      	adds	r3, #72	; 0x48
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa78 	bl	80018b0 <pvPortMalloc>
 80003c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d00d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	3348      	adds	r3, #72	; 0x48
 80003d0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	4613      	mov	r3, r2
 80003da:	697a      	ldr	r2, [r7, #20]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f000 f805 	bl	80003ee <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80003e4:	69fb      	ldr	r3, [r7, #28]
    }
 80003e6:	4618      	mov	r0, r3
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
 80003fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	69ba      	ldr	r2, [r7, #24]
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e002      	b.n	8000410 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800041c:	2101      	movs	r1, #1
 800041e:	69b8      	ldr	r0, [r7, #24]
 8000420:	f7ff ff32 	bl	8000288 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
 8000438:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000442:	f001 f99b 	bl	800177c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000446:	6a3b      	ldr	r3, [r7, #32]
 8000448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800044e:	429a      	cmp	r2, r3
 8000450:	d302      	bcc.n	8000458 <xQueueGenericSend+0x2c>
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d129      	bne.n	80004ac <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	6a38      	ldr	r0, [r7, #32]
 800045e:	f000 f931 	bl	80006c4 <prvCopyDataToQueue>
 8000462:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000468:	2b00      	cmp	r3, #0
 800046a:	d010      	beq.n	800048e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800046c:	6a3b      	ldr	r3, [r7, #32]
 800046e:	3324      	adds	r3, #36	; 0x24
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fe0f 	bl	8001094 <xTaskRemoveFromEventList>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d013      	beq.n	80004a4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <xQueueGenericSend+0x150>)
 800047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	f3bf 8f4f 	dsb	sy
 8000488:	f3bf 8f6f 	isb	sy
 800048c:	e00a      	b.n	80004a4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d007      	beq.n	80004a4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000494:	4b39      	ldr	r3, [pc, #228]	; (800057c <xQueueGenericSend+0x150>)
 8000496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004a4:	f001 f984 	bl	80017b0 <vPortExitCritical>
                return pdPASS;
 80004a8:	2301      	movs	r3, #1
 80004aa:	e063      	b.n	8000574 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d103      	bne.n	80004ba <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004b2:	f001 f97d 	bl	80017b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e05c      	b.n	8000574 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d106      	bne.n	80004ce <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fead 	bl	8001224 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004ce:	f001 f96f 	bl	80017b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004d2:	f000 fb83 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004d6:	f001 f951 	bl	800177c <vPortEnterCritical>
 80004da:	6a3b      	ldr	r3, [r7, #32]
 80004dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e6:	d103      	bne.n	80004f0 <xQueueGenericSend+0xc4>
 80004e8:	6a3b      	ldr	r3, [r7, #32]
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004f0:	6a3b      	ldr	r3, [r7, #32]
 80004f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004fc:	d103      	bne.n	8000506 <xQueueGenericSend+0xda>
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000506:	f001 f953 	bl	80017b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800050a:	1d3a      	adds	r2, r7, #4
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fe9c 	bl	8001250 <xTaskCheckForTimeOut>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d124      	bne.n	8000568 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800051e:	6a38      	ldr	r0, [r7, #32]
 8000520:	f000 f9c8 	bl	80008b4 <prvIsQueueFull>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d018      	beq.n	800055c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	3310      	adds	r3, #16
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fd98 	bl	8001068 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000538:	6a38      	ldr	r0, [r7, #32]
 800053a:	f000 f953 	bl	80007e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800053e:	f000 fb5b 	bl	8000bf8 <xTaskResumeAll>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	f47f af7c 	bne.w	8000442 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <xQueueGenericSend+0x150>)
 800054c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	f3bf 8f6f 	isb	sy
 800055a:	e772      	b.n	8000442 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800055c:	6a38      	ldr	r0, [r7, #32]
 800055e:	f000 f941 	bl	80007e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000562:	f000 fb49 	bl	8000bf8 <xTaskResumeAll>
 8000566:	e76c      	b.n	8000442 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000568:	6a38      	ldr	r0, [r7, #32]
 800056a:	f000 f93b 	bl	80007e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800056e:	f000 fb43 	bl	8000bf8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000572:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000574:	4618      	mov	r0, r3
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	e000ed04 	.word	0xe000ed04

08000580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000594:	f001 f8f2 	bl	800177c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000598:	6a3b      	ldr	r3, [r7, #32]
 800059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01f      	beq.n	80005e4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005a4:	68b9      	ldr	r1, [r7, #8]
 80005a6:	6a38      	ldr	r0, [r7, #32]
 80005a8:	f000 f8f6 	bl	8000798 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00f      	beq.n	80005dc <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	3310      	adds	r3, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd67 	bl	8001094 <xTaskRemoveFromEventList>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d007      	beq.n	80005dc <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <xQueueReceive+0x140>)
 80005ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005dc:	f001 f8e8 	bl	80017b0 <vPortExitCritical>
                return pdPASS;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e069      	b.n	80006b8 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d103      	bne.n	80005f2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005ea:	f001 f8e1 	bl	80017b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e062      	b.n	80006b8 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d106      	bne.n	8000606 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe11 	bl	8001224 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000602:	2301      	movs	r3, #1
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000606:	f001 f8d3 	bl	80017b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800060a:	f000 fae7 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800060e:	f001 f8b5 	bl	800177c <vPortEnterCritical>
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000618:	b25b      	sxtb	r3, r3
 800061a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061e:	d103      	bne.n	8000628 <xQueueReceive+0xa8>
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800062e:	b25b      	sxtb	r3, r3
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d103      	bne.n	800063e <xQueueReceive+0xbe>
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800063e:	f001 f8b7 	bl	80017b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fe00 	bl	8001250 <xTaskCheckForTimeOut>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d123      	bne.n	800069e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000656:	6a38      	ldr	r0, [r7, #32]
 8000658:	f000 f916 	bl	8000888 <prvIsQueueEmpty>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d017      	beq.n	8000692 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	3324      	adds	r3, #36	; 0x24
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fcfc 	bl	8001068 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000670:	6a38      	ldr	r0, [r7, #32]
 8000672:	f000 f8b7 	bl	80007e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000676:	f000 fabf 	bl	8000bf8 <xTaskResumeAll>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d189      	bne.n	8000594 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <xQueueReceive+0x140>)
 8000682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	e780      	b.n	8000594 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000692:	6a38      	ldr	r0, [r7, #32]
 8000694:	f000 f8a6 	bl	80007e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000698:	f000 faae 	bl	8000bf8 <xTaskResumeAll>
 800069c:	e77a      	b.n	8000594 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800069e:	6a38      	ldr	r0, [r7, #32]
 80006a0:	f000 f8a0 	bl	80007e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006a4:	f000 faa8 	bl	8000bf8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006a8:	6a38      	ldr	r0, [r7, #32]
 80006aa:	f000 f8ed 	bl	8000888 <prvIsQueueEmpty>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f43f af6f 	beq.w	8000594 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006b6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	e000ed04 	.word	0xe000ed04

080006c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10d      	bne.n	80006fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d14d      	bne.n	8000786 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 feb4 	bl	800145c <xTaskPriorityDisinherit>
 80006f4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	e043      	b.n	8000786 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d119      	bne.n	8000738 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6858      	ldr	r0, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	461a      	mov	r2, r3
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	f004 fabe 	bl	8004c90 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	441a      	add	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	429a      	cmp	r2, r3
 800072c:	d32b      	bcc.n	8000786 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	e026      	b.n	8000786 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68d8      	ldr	r0, [r3, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	461a      	mov	r2, r3
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	f004 faa4 	bl	8004c90 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	425b      	negs	r3, r3
 8000752:	441a      	add	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	425b      	negs	r3, r3
 800076e:	441a      	add	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d105      	bne.n	8000786 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	3b01      	subs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800078e:	697b      	ldr	r3, [r7, #20]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d018      	beq.n	80007dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	441a      	add	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d303      	bcc.n	80007cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	461a      	mov	r2, r3
 80007d6:	6838      	ldr	r0, [r7, #0]
 80007d8:	f004 fa5a 	bl	8004c90 <memcpy>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80007ec:	f000 ffc6 	bl	800177c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007f8:	e011      	b.n	800081e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d012      	beq.n	8000828 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3324      	adds	r3, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fc44 	bl	8001094 <xTaskRemoveFromEventList>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000812:	f000 fd67 	bl	80012e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3b01      	subs	r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	2b00      	cmp	r3, #0
 8000824:	dce9      	bgt.n	80007fa <prvUnlockQueue+0x16>
 8000826:	e000      	b.n	800082a <prvUnlockQueue+0x46>
                    break;
 8000828:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000832:	f000 ffbd 	bl	80017b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000836:	f000 ffa1 	bl	800177c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000840:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000842:	e011      	b.n	8000868 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d012      	beq.n	8000872 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3310      	adds	r3, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc1f 	bl	8001094 <xTaskRemoveFromEventList>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800085c:	f000 fd42 	bl	80012e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3b01      	subs	r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dce9      	bgt.n	8000844 <prvUnlockQueue+0x60>
 8000870:	e000      	b.n	8000874 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000872:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800087c:	f000 ff98 	bl	80017b0 <vPortExitCritical>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000890:	f000 ff74 	bl	800177c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800089c:	2301      	movs	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e001      	b.n	80008a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008a6:	f000 ff83 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80008bc:	f000 ff5e 	bl	800177c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d102      	bne.n	80008d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e001      	b.n	80008d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80008d6:	f000 ff6b 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 ffd9 	bl	80018b0 <pvPortMalloc>
 80008fe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d013      	beq.n	800092e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000906:	2054      	movs	r0, #84	; 0x54
 8000908:	f000 ffd2 	bl	80018b0 <pvPortMalloc>
 800090c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d008      	beq.n	8000926 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000914:	2254      	movs	r2, #84	; 0x54
 8000916:	2100      	movs	r1, #0
 8000918:	69f8      	ldr	r0, [r7, #28]
 800091a:	f004 f98c 	bl	8004c36 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
 8000924:	e005      	b.n	8000932 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f001 f814 	bl	8001954 <vPortFree>
 800092c:	e001      	b.n	8000932 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d013      	beq.n	8000960 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000938:	88fa      	ldrh	r2, [r7, #6]
 800093a:	2300      	movs	r3, #0
 800093c:	9303      	str	r3, [sp, #12]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f80e 	bl	8000970 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000954:	69f8      	ldr	r0, [r7, #28]
 8000956:	f000 f873 	bl	8000a40 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e002      	b.n	8000966 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000966:	69bb      	ldr	r3, [r7, #24]
    }
 8000968:	4618      	mov	r0, r3
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000988:	3b01      	subs	r3, #1
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	f023 0307 	bic.w	r3, r3, #7
 8000996:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d01e      	beq.n	80009dc <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e012      	b.n	80009ca <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	4413      	add	r3, r2
 80009aa:	7819      	ldrb	r1, [r3, #0]
 80009ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4413      	add	r3, r2
 80009b2:	3334      	adds	r3, #52	; 0x34
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d9e9      	bls.n	80009a4 <prvInitialiseNewTask+0x34>
 80009d0:	e000      	b.n	80009d4 <prvInitialiseNewTask+0x64>
            {
                break;
 80009d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d901      	bls.n	80009e6 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	6a3a      	ldr	r2, [r7, #32]
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	6a3a      	ldr	r2, [r7, #32]
 80009f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	3304      	adds	r3, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbd9 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	3318      	adds	r3, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbd4 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a0a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	f1c3 0205 	rsb	r2, r3, #5
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	6938      	ldr	r0, [r7, #16]
 8000a22:	f000 fe1d 	bl	8001660 <pxPortInitialiseStack>
 8000a26:	4602      	mov	r2, r0
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a36:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a48:	f000 fe98 	bl	800177c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a54:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a56:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a5e:	4a3b      	ldr	r2, [pc, #236]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <prvAddNewTaskToReadyList+0x108>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d110      	bne.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a6c:	f000 fc5e 	bl	800132c <prvInitialiseTaskLists>
 8000a70:	e00d      	b.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <prvAddNewTaskToReadyList+0x110>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d802      	bhi.n	8000a8e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <prvAddNewTaskToReadyList+0x114>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <prvAddNewTaskToReadyList+0x114>)
 8000a96:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <prvAddNewTaskToReadyList+0x118>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <prvAddNewTaskToReadyList+0x118>)
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aae:	492b      	ldr	r1, [pc, #172]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	3304      	adds	r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3204      	adds	r2, #4
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000aee:	441a      	add	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	4918      	ldr	r1, [pc, #96]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1c59      	adds	r1, r3, #1
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <prvAddNewTaskToReadyList+0x11c>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4403      	add	r3, r0
 8000b14:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b16:	f000 fe4b 	bl	80017b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <prvAddNewTaskToReadyList+0x110>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <prvAddNewTaskToReadyList+0x10c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <prvAddNewTaskToReadyList+0x120>)
 8000b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000118 	.word	0x20000118
 8000b4c:	20000040 	.word	0x20000040
 8000b50:	20000124 	.word	0x20000124
 8000b54:	20000134 	.word	0x20000134
 8000b58:	20000120 	.word	0x20000120
 8000b5c:	20000044 	.word	0x20000044
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <vTaskStartScheduler+0x5c>)
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	4913      	ldr	r1, [pc, #76]	; (8000bc4 <vTaskStartScheduler+0x60>)
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <vTaskStartScheduler+0x64>)
 8000b7a:	f7ff feb3 	bl	80008e4 <xTaskCreate>
 8000b7e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d115      	bne.n	8000bb2 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b86:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000b98:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <vTaskStartScheduler+0x68>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <vTaskStartScheduler+0x6c>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <vTaskStartScheduler+0x70>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000bae:	f000 fdc5 	bl	800173c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <vTaskStartScheduler+0x74>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000013c 	.word	0x2000013c
 8000bc4:	08004cc4 	.word	0x08004cc4
 8000bc8:	080012fd 	.word	0x080012fd
 8000bcc:	20000138 	.word	0x20000138
 8000bd0:	20000124 	.word	0x20000124
 8000bd4:	2000011c 	.word	0x2000011c
 8000bd8:	20000000 	.word	0x20000000

08000bdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <vTaskSuspendAll+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <vTaskSuspendAll+0x18>)
 8000be8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000140 	.word	0x20000140

08000bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c06:	f000 fdb9 	bl	800177c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c0a:	4b68      	ldr	r3, [pc, #416]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a66      	ldr	r2, [pc, #408]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c12:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c14:	4b65      	ldr	r3, [pc, #404]	; (8000dac <xTaskResumeAll+0x1b4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f040 80c0 	bne.w	8000d9e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <xTaskResumeAll+0x1b8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80bb 	beq.w	8000d9e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c28:	e08a      	b.n	8000d40 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c2a:	4b62      	ldr	r3, [pc, #392]	; (8000db4 <xTaskResumeAll+0x1bc>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	6a12      	ldr	r2, [r2, #32]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	69d2      	ldr	r2, [r2, #28]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3318      	adds	r3, #24
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d103      	bne.n	8000c60 <xTaskResumeAll+0x68>
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	6a1a      	ldr	r2, [r3, #32]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	68d2      	ldr	r2, [r2, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	6892      	ldr	r2, [r2, #8]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3304      	adds	r3, #4
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <xTaskResumeAll+0xa6>
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <xTaskResumeAll+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <xTaskResumeAll+0x1c0>)
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	493d      	ldr	r1, [pc, #244]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	3204      	adds	r2, #4
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1d1a      	adds	r2, r3, #4
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d04:	441a      	add	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0e:	492b      	ldr	r1, [pc, #172]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1c59      	adds	r1, r3, #1
 8000d1e:	4827      	ldr	r0, [pc, #156]	; (8000dbc <xTaskResumeAll+0x1c4>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4403      	add	r3, r0
 8000d2a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <xTaskResumeAll+0x1c8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d302      	bcc.n	8000d40 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <xTaskResumeAll+0x1bc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f47f af70 	bne.w	8000c2a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d50:	f000 fb6a 	bl	8001428 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <xTaskResumeAll+0x1d0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d60:	f000 f836 	bl	8000dd0 <xTaskIncrementTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f1      	bne.n	8000d60 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <xTaskResumeAll+0x1d0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <xTaskResumeAll+0x1cc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d009      	beq.n	8000d9e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <xTaskResumeAll+0x1d4>)
 8000d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000d9e:	f000 fd07 	bl	80017b0 <vPortExitCritical>

    return xAlreadyYielded;
 8000da2:	693b      	ldr	r3, [r7, #16]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000140 	.word	0x20000140
 8000db0:	20000118 	.word	0x20000118
 8000db4:	200000d8 	.word	0x200000d8
 8000db8:	20000120 	.word	0x20000120
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000040 	.word	0x20000040
 8000dc4:	2000012c 	.word	0x2000012c
 8000dc8:	20000128 	.word	0x20000128
 8000dcc:	e000ed04 	.word	0xe000ed04

08000dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dda:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <xTaskIncrementTick+0x1e0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 80dc 	bne.w	8000f9c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000de4:	4b73      	ldr	r3, [pc, #460]	; (8000fb4 <xTaskIncrementTick+0x1e4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000dec:	4a71      	ldr	r2, [pc, #452]	; (8000fb4 <xTaskIncrementTick+0x1e4>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d110      	bne.n	8000e1a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <xTaskIncrementTick+0x1ec>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <xTaskIncrementTick+0x1ec>)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <xTaskIncrementTick+0x1f0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a6b      	ldr	r2, [pc, #428]	; (8000fc0 <xTaskIncrementTick+0x1f0>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	f000 fb07 	bl	8001428 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f0c0 80a6 	bcc.w	8000f72 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e26:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d104      	bne.n	8000e3a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	601a      	str	r2, [r3, #0]
                    break;
 8000e38:	e09b      	b.n	8000f72 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <xTaskIncrementTick+0x1e8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d203      	bcs.n	8000e5a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e52:	4a5c      	ldr	r2, [pc, #368]	; (8000fc4 <xTaskIncrementTick+0x1f4>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e58:	e08b      	b.n	8000f72 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68d2      	ldr	r2, [r2, #12]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	6892      	ldr	r2, [r2, #8]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d103      	bne.n	8000e88 <xTaskIncrementTick+0xb8>
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01e      	beq.n	8000ede <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	6a12      	ldr	r2, [r2, #32]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	69d2      	ldr	r2, [r2, #28]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d103      	bne.n	8000ece <xTaskIncrementTick+0xfe>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6a1a      	ldr	r2, [r3, #32]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <xTaskIncrementTick+0x1f8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <xTaskIncrementTick+0x1f8>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	3304      	adds	r3, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f34:	441a      	add	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3e:	4923      	ldr	r1, [pc, #140]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1c59      	adds	r1, r3, #1
 8000f4e:	481f      	ldr	r0, [pc, #124]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4403      	add	r3, r0
 8000f5a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <xTaskIncrementTick+0x200>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f66:	429a      	cmp	r2, r3
 8000f68:	f67f af5d 	bls.w	8000e26 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f70:	e759      	b.n	8000e26 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <xTaskIncrementTick+0x200>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f78:	4914      	ldr	r1, [pc, #80]	; (8000fcc <xTaskIncrementTick+0x1fc>)
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d901      	bls.n	8000f8e <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <xTaskIncrementTick+0x204>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e004      	b.n	8000fa6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <xTaskIncrementTick+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <xTaskIncrementTick+0x208>)
 8000fa4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000140 	.word	0x20000140
 8000fb4:	2000011c 	.word	0x2000011c
 8000fb8:	200000d0 	.word	0x200000d0
 8000fbc:	200000d4 	.word	0x200000d4
 8000fc0:	20000130 	.word	0x20000130
 8000fc4:	20000138 	.word	0x20000138
 8000fc8:	20000120 	.word	0x20000120
 8000fcc:	20000044 	.word	0x20000044
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	2000012c 	.word	0x2000012c
 8000fd8:	20000128 	.word	0x20000128

08000fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <vTaskSwitchContext+0x78>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <vTaskSwitchContext+0x7c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000ff0:	e02a      	b.n	8001048 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <vTaskSwitchContext+0x7c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <vTaskSwitchContext+0x80>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f1c3 031f 	rsb	r3, r3, #31
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <vTaskSwitchContext+0x84>)
 800101a:	4413      	add	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3308      	adds	r3, #8
 8001030:	429a      	cmp	r2, r3
 8001032:	d104      	bne.n	800103e <vTaskSwitchContext+0x62>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <vTaskSwitchContext+0x88>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000140 	.word	0x20000140
 8001058:	2000012c 	.word	0x2000012c
 800105c:	20000120 	.word	0x20000120
 8001060:	20000044 	.word	0x20000044
 8001064:	20000040 	.word	0x20000040

08001068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <vTaskPlaceOnEventList+0x28>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3318      	adds	r3, #24
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f8a3 	bl	80001c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001080:	2101      	movs	r1, #1
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f000 fa6c 	bl	8001560 <prvAddCurrentTaskToDelayedList>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000040 	.word	0x20000040

08001094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	6a12      	ldr	r2, [r2, #32]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	69d2      	ldr	r2, [r2, #28]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	3318      	adds	r3, #24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d103      	bne.n	80010d2 <xTaskRemoveFromEventList+0x3e>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <xTaskRemoveFromEventList+0x178>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d15e      	bne.n	80011a8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	68d2      	ldr	r2, [r2, #12]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	3304      	adds	r3, #4
 800110c:	429a      	cmp	r2, r3
 800110e:	d103      	bne.n	8001118 <xTaskRemoveFromEventList+0x84>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2201      	movs	r2, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <xTaskRemoveFromEventList+0x17c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <xTaskRemoveFromEventList+0x17c>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	4935      	ldr	r1, [pc, #212]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	3204      	adds	r2, #4
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a25      	ldr	r2, [pc, #148]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800117e:	441a      	add	r2, r3
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	4922      	ldr	r1, [pc, #136]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <xTaskRemoveFromEventList+0x180>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	6019      	str	r1, [r3, #0]
 80011a6:	e01b      	b.n	80011e0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	3218      	adds	r2, #24
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f103 0218 	add.w	r2, r3, #24
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <xTaskRemoveFromEventList+0x184>)
 80011de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <xTaskRemoveFromEventList+0x188>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d905      	bls.n	80011fa <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <xTaskRemoveFromEventList+0x18c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e001      	b.n	80011fe <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80011fe:	69fb      	ldr	r3, [r7, #28]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000140 	.word	0x20000140
 8001210:	20000120 	.word	0x20000120
 8001214:	20000044 	.word	0x20000044
 8001218:	200000d8 	.word	0x200000d8
 800121c:	20000040 	.word	0x20000040
 8001220:	2000012c 	.word	0x2000012c

08001224 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <vTaskInternalSetTimeOutState+0x24>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <vTaskInternalSetTimeOutState+0x28>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	605a      	str	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000130 	.word	0x20000130
 800124c:	2000011c 	.word	0x2000011c

08001250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800125a:	f000 fa8f 	bl	800177c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <xTaskCheckForTimeOut+0x8c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001276:	d102      	bne.n	800127e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e026      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <xTaskCheckForTimeOut+0x90>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d00a      	beq.n	80012a0 <xTaskCheckForTimeOut+0x50>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d305      	bcc.n	80012a0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001294:	2301      	movs	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e015      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20b      	bcs.n	80012c2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad2      	subs	r2, r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb4 	bl	8001224 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e004      	b.n	80012cc <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80012cc:	f000 fa70 	bl	80017b0 <vPortExitCritical>

    return xReturn;
 80012d0:	697b      	ldr	r3, [r7, #20]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000011c 	.word	0x2000011c
 80012e0:	20000130 	.word	0x20000130

080012e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <vTaskMissedYield+0x14>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000012c 	.word	0x2000012c

080012fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001304:	f000 f852 	bl	80013ac <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <prvIdleTask+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d9f9      	bls.n	8001304 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <prvIdleTask+0x2c>)
 8001312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001320:	e7f0      	b.n	8001304 <prvIdleTask+0x8>
 8001322:	bf00      	nop
 8001324:	20000044 	.word	0x20000044
 8001328:	e000ed04 	.word	0xe000ed04

0800132c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e00c      	b.n	8001352 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <prvInitialiseTaskLists+0x60>)
 8001344:	4413      	add	r3, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff12 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d9ef      	bls.n	8001338 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <prvInitialiseTaskLists+0x64>)
 800135a:	f7fe ff09 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <prvInitialiseTaskLists+0x68>)
 8001360:	f7fe ff06 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <prvInitialiseTaskLists+0x6c>)
 8001366:	f7fe ff03 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <prvInitialiseTaskLists+0x70>)
 800136c:	f7fe ff00 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <prvInitialiseTaskLists+0x74>)
 8001372:	f7fe fefd 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <prvInitialiseTaskLists+0x78>)
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <prvInitialiseTaskLists+0x64>)
 800137a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <prvInitialiseTaskLists+0x7c>)
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <prvInitialiseTaskLists+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000044 	.word	0x20000044
 8001390:	200000a8 	.word	0x200000a8
 8001394:	200000bc 	.word	0x200000bc
 8001398:	200000d8 	.word	0x200000d8
 800139c:	200000ec 	.word	0x200000ec
 80013a0:	20000104 	.word	0x20000104
 80013a4:	200000d0 	.word	0x200000d0
 80013a8:	200000d4 	.word	0x200000d4

080013ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013b2:	e019      	b.n	80013e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80013b4:	f000 f9e2 	bl	800177c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <prvCheckTasksWaitingTermination+0x50>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff36 	bl	8000236 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <prvCheckTasksWaitingTermination+0x54>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <prvCheckTasksWaitingTermination+0x54>)
 80013d2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013dc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80013de:	f000 f9e7 	bl	80017b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f810 	bl	8001408 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <prvCheckTasksWaitingTermination+0x58>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e1      	bne.n	80013b4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000ec 	.word	0x200000ec
 8001400:	20000118 	.word	0x20000118
 8001404:	20000100 	.word	0x20000100

08001408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fa9d 	bl	8001954 <vPortFree>
            vPortFree( pxTCB );
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa9a 	bl	8001954 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800143e:	e005      	b.n	800144c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200000d0 	.word	0x200000d0
 8001458:	20000138 	.word	0x20000138

0800145c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d06c      	beq.n	800154c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	429a      	cmp	r2, r3
 8001486:	d061      	beq.n	800154c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	2b00      	cmp	r3, #0
 800148e:	d15d      	bne.n	800154c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3304      	adds	r3, #4
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fece 	bl	8000236 <uxListRemove>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10a      	bne.n	80014b6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2201      	movs	r2, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4013      	ands	r3, r2
 80014b2:	4a29      	ldr	r2, [pc, #164]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014b4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f1c3 0205 	rsb	r2, r3, #5
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <xTaskPriorityDisinherit+0xfc>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	491e      	ldr	r1, [pc, #120]	; (800155c <xTaskPriorityDisinherit+0x100>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	3204      	adds	r2, #4
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1d1a      	adds	r2, r3, #4
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <xTaskPriorityDisinherit+0x100>)
 8001520:	441a      	add	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	490c      	ldr	r1, [pc, #48]	; (800155c <xTaskPriorityDisinherit+0x100>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <xTaskPriorityDisinherit+0x100>)
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4403      	add	r3, r0
 8001546:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800154c:	697b      	ldr	r3, [r7, #20]
    }
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000120 	.word	0x20000120
 800155c:	20000044 	.word	0x20000044

08001560 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <prvAddCurrentTaskToDelayedList+0xe4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3304      	adds	r3, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe5d 	bl	8000236 <uxListRemove>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <prvAddCurrentTaskToDelayedList+0xec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4013      	ands	r3, r2
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <prvAddCurrentTaskToDelayedList+0xec>)
 8001598:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d124      	bne.n	80015ec <prvAddCurrentTaskToDelayedList+0x8c>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	6892      	ldr	r2, [r2, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	3204      	adds	r2, #4
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1d1a      	adds	r2, r3, #4
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <prvAddCurrentTaskToDelayedList+0xf0>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80015ea:	e026      	b.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	d209      	bcs.n	8001618 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7fe fdd8 	bl	80001c6 <vListInsert>
}
 8001616:	e010      	b.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <prvAddCurrentTaskToDelayedList+0xf8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <prvAddCurrentTaskToDelayedList+0xe8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f7fe fdce 	bl	80001c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <prvAddCurrentTaskToDelayedList+0xfc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d202      	bcs.n	800163a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000011c 	.word	0x2000011c
 8001648:	20000040 	.word	0x20000040
 800164c:	20000120 	.word	0x20000120
 8001650:	20000104 	.word	0x20000104
 8001654:	200000d4 	.word	0x200000d4
 8001658:	200000d0 	.word	0x200000d0
 800165c:	20000138 	.word	0x20000138

08001660 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3b04      	subs	r3, #4
 8001670:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001678:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3b04      	subs	r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f023 0201 	bic.w	r2, r3, #1
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3b04      	subs	r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <pxPortInitialiseStack+0x54>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b14      	subs	r3, #20
 800169a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b20      	subs	r3, #32
 80016a6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80016a8:	68fb      	ldr	r3, [r7, #12]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	080016b9 	.word	0x080016b9

080016b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80016c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	607b      	str	r3, [r7, #4]
    }
 80016d4:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80016d6:	bf00      	nop
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0fc      	beq.n	80016d8 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	0000      	movs	r0, r0
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <pxCurrentTCBConst2>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	6808      	ldr	r0, [r1, #0]
 80016f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016fa:	f380 8809 	msr	PSP, r0
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f380 8811 	msr	BASEPRI, r0
 800170a:	f04e 0e0d 	orr.w	lr, lr, #13
 800170e:	4770      	bx	lr

08001710 <pxCurrentTCBConst2>:
 8001710:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop

08001718 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <prvPortStartFirstTask+0x1c>)
 800171a:	6800      	ldr	r0, [r0, #0]
 800171c:	6800      	ldr	r0, [r0, #0]
 800171e:	f380 8808 	msr	MSP, r0
 8001722:	b662      	cpsie	i
 8001724:	b661      	cpsie	f
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	df00      	svc	0
 8001730:	bf00      	nop
 8001732:	0000      	.short	0x0000
 8001734:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop

0800173c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <xPortStartScheduler+0x38>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <xPortStartScheduler+0x38>)
 8001746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800174a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <xPortStartScheduler+0x38>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a08      	ldr	r2, [pc, #32]	; (8001774 <xPortStartScheduler+0x38>)
 8001752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001756:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001758:	f000 f890 	bl	800187c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <xPortStartScheduler+0x3c>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001762:	f7ff ffd9 	bl	8001718 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001766:	f7ff fc39 	bl	8000fdc <vTaskSwitchContext>
    prvTaskExitError();
 800176a:	f7ff ffa5 	bl	80016b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	e000ed20 	.word	0xe000ed20
 8001778:	20000004 	.word	0x20000004

0800177c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
        __asm volatile
 8001782:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001786:	f383 8811 	msr	BASEPRI, r3
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	f3bf 8f4f 	dsb	sy
 8001792:	607b      	str	r3, [r7, #4]
    }
 8001794:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <vPortEnterCritical+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <vPortEnterCritical+0x30>)
 800179e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000004 	.word	0x20000004

080017b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <vPortExitCritical+0x30>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <vPortExitCritical+0x30>)
 80017be:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <vPortExitCritical+0x30>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <vPortExitCritical+0x24>
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80017d2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000004 	.word	0x20000004
	...

080017f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80017f0:	f3ef 8009 	mrs	r0, PSP
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <pxCurrentTCBConst>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001800:	6010      	str	r0, [r2, #0]
 8001802:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001806:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800180a:	f380 8811 	msr	BASEPRI, r0
 800180e:	f7ff fbe5 	bl	8000fdc <vTaskSwitchContext>
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f380 8811 	msr	BASEPRI, r0
 800181a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	6808      	ldr	r0, [r1, #0]
 8001822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001826:	f380 8809 	msr	PSP, r0
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	4770      	bx	lr

08001830 <pxCurrentTCBConst>:
 8001830:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop

08001838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
        __asm volatile
 800183e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	607b      	str	r3, [r7, #4]
    }
 8001850:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001852:	f7ff fabd 	bl	8000dd0 <xTaskIncrementTick>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SysTick_Handler+0x40>)
 800185e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f383 8811 	msr	BASEPRI, r3
    }
 800186e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <vPortSetupTimerInterrupt+0x28>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <vPortSetupTimerInterrupt+0x2c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <vPortSetupTimerInterrupt+0x30>)
 800188e:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001892:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <vPortSetupTimerInterrupt+0x28>)
 8001896:	2207      	movs	r2, #7
 8001898:	601a      	str	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010
 80018a8:	e000e018 	.word	0xe000e018
 80018ac:	e000e014 	.word	0xe000e014

080018b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00e      	beq.n	80018e4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f023 0307 	bic.w	r3, r3, #7
 80018cc:	3308      	adds	r3, #8
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d205      	bcs.n	80018e0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	3308      	adds	r3, #8
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	e001      	b.n	80018e4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80018e4:	f7ff f97a 	bl	8000bdc <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <pvPortMalloc+0x98>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <pvPortMalloc+0x9c>)
 80018f2:	f023 0307 	bic.w	r3, r3, #7
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <pvPortMalloc+0x98>)
 80018fa:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01b      	beq.n	800193a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <pvPortMalloc+0xa0>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800190a:	f641 7237 	movw	r2, #7991	; 0x1f37
 800190e:	4293      	cmp	r3, r2
 8001910:	d813      	bhi.n	800193a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <pvPortMalloc+0xa0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	441a      	add	r2, r3
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <pvPortMalloc+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800191e:	429a      	cmp	r2, r3
 8001920:	d90b      	bls.n	800193a <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <pvPortMalloc+0x98>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <pvPortMalloc+0xa0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <pvPortMalloc+0xa0>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <pvPortMalloc+0xa0>)
 8001938:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800193a:	f7ff f95d 	bl	8000bf8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20002088 	.word	0x20002088
 800194c:	2000014b 	.word	0x2000014b
 8001950:	20002084 	.word	0x20002084

08001954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <LUNA_CallBack+0x17c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8001974:	485c      	ldr	r0, [pc, #368]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001976:	f002 fda3 	bl	80044c0 <MCAL_USART_ReciveData>
 800197a:	4603      	mov	r3, r0
 800197c:	2b59      	cmp	r3, #89	; 0x59
 800197e:	f040 80ae 	bne.w	8001ade <LUNA_CallBack+0x176>
			x++;
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <LUNA_CallBack+0x17c>)
 800198c:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 800198e:	e0a6      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==1){
 8001990:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10d      	bne.n	80019b4 <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8001998:	4853      	ldr	r0, [pc, #332]	; (8001ae8 <LUNA_CallBack+0x180>)
 800199a:	f002 fd91 	bl	80044c0 <MCAL_USART_ReciveData>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b59      	cmp	r3, #89	; 0x59
 80019a2:	f040 809c 	bne.w	8001ade <LUNA_CallBack+0x176>
		x++;
 80019a6:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019b0:	701a      	strb	r2, [r3, #0]
}
 80019b2:	e094      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==2){
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d10d      	bne.n	80019d8 <LUNA_CallBack+0x70>
		x++;
 80019bc:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019c6:	701a      	strb	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80019c8:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <LUNA_CallBack+0x180>)
 80019ca:	f002 fd79 	bl	80044c0 <MCAL_USART_ReciveData>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <LUNA_CallBack+0x184>)
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	e082      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==3){
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d114      	bne.n	8001a0a <LUNA_CallBack+0xa2>
		x++;
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <LUNA_CallBack+0x17c>)
 80019ea:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80019ec:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <LUNA_CallBack+0x180>)
 80019ee:	f002 fd67 	bl	80044c0 <MCAL_USART_ReciveData>
 80019f2:	4603      	mov	r3, r0
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <LUNA_CallBack+0x184>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <LUNA_CallBack+0x184>)
 8001a06:	801a      	strh	r2, [r3, #0]
}
 8001a08:	e069      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==4){
 8001a0a:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d110      	bne.n	8001a34 <LUNA_CallBack+0xcc>
		x++;
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a26:	f002 fd4b 	bl	80044c0 <MCAL_USART_ReciveData>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a30:	801a      	strh	r2, [r3, #0]
}
 8001a32:	e054      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==5){
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d114      	bne.n	8001a66 <LUNA_CallBack+0xfe>
		x++;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a46:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a4a:	f002 fd39 	bl	80044c0 <MCAL_USART_ReciveData>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <LUNA_CallBack+0x188>)
 8001a62:	801a      	strh	r2, [r3, #0]
}
 8001a64:	e03b      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==6){
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d110      	bne.n	8001a90 <LUNA_CallBack+0x128>
		x++;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a78:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001a80:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001a82:	f002 fd1d 	bl	80044c0 <MCAL_USART_ReciveData>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001a8c:	801a      	strh	r2, [r3, #0]
}
 8001a8e:	e026      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==7){
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d114      	bne.n	8001ac2 <LUNA_CallBack+0x15a>
		x++;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001aa2:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001aa6:	f002 fd0b 	bl	80044c0 <MCAL_USART_ReciveData>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <LUNA_CallBack+0x18c>)
 8001abe:	801a      	strh	r2, [r3, #0]
}
 8001ac0:	e00d      	b.n	8001ade <LUNA_CallBack+0x176>
	}else if(x==8){
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d109      	bne.n	8001ade <LUNA_CallBack+0x176>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <LUNA_CallBack+0x180>)
 8001acc:	f002 fcf8 	bl	80044c0 <MCAL_USART_ReciveData>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LUNA_CallBack+0x190>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		x=0;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <LUNA_CallBack+0x17c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20002093 	.word	0x20002093
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	2000208c 	.word	0x2000208c
 8001af0:	2000208e 	.word	0x2000208e
 8001af4:	20002090 	.word	0x20002090
 8001af8:	20002092 	.word	0x20002092

08001afc <LUNA_INIT>:

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8001b0c:	4b8e      	ldr	r3, [pc, #568]	; (8001d48 <LUNA_INIT+0x24c>)
 8001b0e:	f107 0408 	add.w	r4, r7, #8
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	488b      	ldr	r0, [pc, #556]	; (8001d4c <LUNA_INIT+0x250>)
 8001b20:	f002 fb22 	bl	8004168 <MCAL_USART_init>
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b24:	215a      	movs	r1, #90	; 0x5a
 8001b26:	4889      	ldr	r0, [pc, #548]	; (8001d4c <LUNA_INIT+0x250>)
 8001b28:	f002 fc8a 	bl	8004440 <MCAL_USART_SendData>
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4887      	ldr	r0, [pc, #540]	; (8001d4c <LUNA_INIT+0x250>)
 8001b30:	f002 fc86 	bl	8004440 <MCAL_USART_SendData>
 8001b34:	2106      	movs	r1, #6
 8001b36:	4885      	ldr	r0, [pc, #532]	; (8001d4c <LUNA_INIT+0x250>)
 8001b38:	f002 fc82 	bl	8004440 <MCAL_USART_SendData>
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4883      	ldr	r0, [pc, #524]	; (8001d4c <LUNA_INIT+0x250>)
 8001b40:	f002 fc7e 	bl	8004440 <MCAL_USART_SendData>
 8001b44:	21c2      	movs	r1, #194	; 0xc2
 8001b46:	4881      	ldr	r0, [pc, #516]	; (8001d4c <LUNA_INIT+0x250>)
 8001b48:	f002 fc7a 	bl	8004440 <MCAL_USART_SendData>
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	487f      	ldr	r0, [pc, #508]	; (8001d4c <LUNA_INIT+0x250>)
 8001b50:	f002 fc76 	bl	8004440 <MCAL_USART_SendData>
 8001b54:	2100      	movs	r1, #0
 8001b56:	487d      	ldr	r0, [pc, #500]	; (8001d4c <LUNA_INIT+0x250>)
 8001b58:	f002 fc72 	bl	8004440 <MCAL_USART_SendData>
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	487b      	ldr	r0, [pc, #492]	; (8001d4c <LUNA_INIT+0x250>)
 8001b60:	f002 fc6e 	bl	8004440 <MCAL_USART_SendData>
	switch (mode){
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d048      	beq.n	8001bfc <LUNA_INIT+0x100>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	dc57      	bgt.n	8001c1e <LUNA_INIT+0x122>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <LUNA_INIT+0x7c>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d019      	beq.n	8001baa <LUNA_INIT+0xae>
 8001b76:	e052      	b.n	8001c1e <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001b78:	215a      	movs	r1, #90	; 0x5a
 8001b7a:	4874      	ldr	r0, [pc, #464]	; (8001d4c <LUNA_INIT+0x250>)
 8001b7c:	f002 fc60 	bl	8004440 <MCAL_USART_SendData>
 8001b80:	2106      	movs	r1, #6
 8001b82:	4872      	ldr	r0, [pc, #456]	; (8001d4c <LUNA_INIT+0x250>)
 8001b84:	f002 fc5c 	bl	8004440 <MCAL_USART_SendData>
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4870      	ldr	r0, [pc, #448]	; (8001d4c <LUNA_INIT+0x250>)
 8001b8c:	f002 fc58 	bl	8004440 <MCAL_USART_SendData>
 8001b90:	2164      	movs	r1, #100	; 0x64
 8001b92:	486e      	ldr	r0, [pc, #440]	; (8001d4c <LUNA_INIT+0x250>)
 8001b94:	f002 fc54 	bl	8004440 <MCAL_USART_SendData>
 8001b98:	2100      	movs	r1, #0
 8001b9a:	486c      	ldr	r0, [pc, #432]	; (8001d4c <LUNA_INIT+0x250>)
 8001b9c:	f002 fc50 	bl	8004440 <MCAL_USART_SendData>
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	486a      	ldr	r0, [pc, #424]	; (8001d4c <LUNA_INIT+0x250>)
 8001ba4:	f002 fc4c 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001ba8:	e039      	b.n	8001c1e <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001baa:	215a      	movs	r1, #90	; 0x5a
 8001bac:	4867      	ldr	r0, [pc, #412]	; (8001d4c <LUNA_INIT+0x250>)
 8001bae:	f002 fc47 	bl	8004440 <MCAL_USART_SendData>
 8001bb2:	2106      	movs	r1, #6
 8001bb4:	4865      	ldr	r0, [pc, #404]	; (8001d4c <LUNA_INIT+0x250>)
 8001bb6:	f002 fc43 	bl	8004440 <MCAL_USART_SendData>
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4863      	ldr	r0, [pc, #396]	; (8001d4c <LUNA_INIT+0x250>)
 8001bbe:	f002 fc3f 	bl	8004440 <MCAL_USART_SendData>
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <LUNA_INIT+0x250>)
 8001bc6:	f002 fc3b 	bl	8004440 <MCAL_USART_SendData>
 8001bca:	2100      	movs	r1, #0
 8001bcc:	485f      	ldr	r0, [pc, #380]	; (8001d4c <LUNA_INIT+0x250>)
 8001bce:	f002 fc37 	bl	8004440 <MCAL_USART_SendData>
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	485d      	ldr	r0, [pc, #372]	; (8001d4c <LUNA_INIT+0x250>)
 8001bd6:	f002 fc33 	bl	8004440 <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bda:	215a      	movs	r1, #90	; 0x5a
 8001bdc:	485b      	ldr	r0, [pc, #364]	; (8001d4c <LUNA_INIT+0x250>)
 8001bde:	f002 fc2f 	bl	8004440 <MCAL_USART_SendData>
 8001be2:	2104      	movs	r1, #4
 8001be4:	4859      	ldr	r0, [pc, #356]	; (8001d4c <LUNA_INIT+0x250>)
 8001be6:	f002 fc2b 	bl	8004440 <MCAL_USART_SendData>
 8001bea:	2104      	movs	r1, #4
 8001bec:	4857      	ldr	r0, [pc, #348]	; (8001d4c <LUNA_INIT+0x250>)
 8001bee:	f002 fc27 	bl	8004440 <MCAL_USART_SendData>
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4855      	ldr	r0, [pc, #340]	; (8001d4c <LUNA_INIT+0x250>)
 8001bf6:	f002 fc23 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001bfa:	e010      	b.n	8001c1e <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001bfc:	215a      	movs	r1, #90	; 0x5a
 8001bfe:	4853      	ldr	r0, [pc, #332]	; (8001d4c <LUNA_INIT+0x250>)
 8001c00:	f002 fc1e 	bl	8004440 <MCAL_USART_SendData>
 8001c04:	2104      	movs	r1, #4
 8001c06:	4851      	ldr	r0, [pc, #324]	; (8001d4c <LUNA_INIT+0x250>)
 8001c08:	f002 fc1a 	bl	8004440 <MCAL_USART_SendData>
 8001c0c:	213b      	movs	r1, #59	; 0x3b
 8001c0e:	484f      	ldr	r0, [pc, #316]	; (8001d4c <LUNA_INIT+0x250>)
 8001c10:	f002 fc16 	bl	8004440 <MCAL_USART_SendData>
 8001c14:	2100      	movs	r1, #0
 8001c16:	484d      	ldr	r0, [pc, #308]	; (8001d4c <LUNA_INIT+0x250>)
 8001c18:	f002 fc12 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001c1c:	bf00      	nop
	}
	switch (format)
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	f200 808d 	bhi.w	8001d40 <LUNA_INIT+0x244>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <LUNA_INIT+0x130>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001c99 	.word	0x08001c99
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001ced 	.word	0x08001ced
 8001c40:	08001d17 	.word	0x08001d17
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c44:	215a      	movs	r1, #90	; 0x5a
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <LUNA_INIT+0x250>)
 8001c48:	f002 fbfa 	bl	8004440 <MCAL_USART_SendData>
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	483f      	ldr	r0, [pc, #252]	; (8001d4c <LUNA_INIT+0x250>)
 8001c50:	f002 fbf6 	bl	8004440 <MCAL_USART_SendData>
 8001c54:	2105      	movs	r1, #5
 8001c56:	483d      	ldr	r0, [pc, #244]	; (8001d4c <LUNA_INIT+0x250>)
 8001c58:	f002 fbf2 	bl	8004440 <MCAL_USART_SendData>
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	483b      	ldr	r0, [pc, #236]	; (8001d4c <LUNA_INIT+0x250>)
 8001c60:	f002 fbee 	bl	8004440 <MCAL_USART_SendData>
 8001c64:	2100      	movs	r1, #0
 8001c66:	4839      	ldr	r0, [pc, #228]	; (8001d4c <LUNA_INIT+0x250>)
 8001c68:	f002 fbea 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001c6c:	e068      	b.n	8001d40 <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c6e:	215a      	movs	r1, #90	; 0x5a
 8001c70:	4836      	ldr	r0, [pc, #216]	; (8001d4c <LUNA_INIT+0x250>)
 8001c72:	f002 fbe5 	bl	8004440 <MCAL_USART_SendData>
 8001c76:	2105      	movs	r1, #5
 8001c78:	4834      	ldr	r0, [pc, #208]	; (8001d4c <LUNA_INIT+0x250>)
 8001c7a:	f002 fbe1 	bl	8004440 <MCAL_USART_SendData>
 8001c7e:	2105      	movs	r1, #5
 8001c80:	4832      	ldr	r0, [pc, #200]	; (8001d4c <LUNA_INIT+0x250>)
 8001c82:	f002 fbdd 	bl	8004440 <MCAL_USART_SendData>
 8001c86:	2102      	movs	r1, #2
 8001c88:	4830      	ldr	r0, [pc, #192]	; (8001d4c <LUNA_INIT+0x250>)
 8001c8a:	f002 fbd9 	bl	8004440 <MCAL_USART_SendData>
 8001c8e:	2100      	movs	r1, #0
 8001c90:	482e      	ldr	r0, [pc, #184]	; (8001d4c <LUNA_INIT+0x250>)
 8001c92:	f002 fbd5 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001c96:	e053      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001c98:	215a      	movs	r1, #90	; 0x5a
 8001c9a:	482c      	ldr	r0, [pc, #176]	; (8001d4c <LUNA_INIT+0x250>)
 8001c9c:	f002 fbd0 	bl	8004440 <MCAL_USART_SendData>
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	482a      	ldr	r0, [pc, #168]	; (8001d4c <LUNA_INIT+0x250>)
 8001ca4:	f002 fbcc 	bl	8004440 <MCAL_USART_SendData>
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4828      	ldr	r0, [pc, #160]	; (8001d4c <LUNA_INIT+0x250>)
 8001cac:	f002 fbc8 	bl	8004440 <MCAL_USART_SendData>
 8001cb0:	2106      	movs	r1, #6
 8001cb2:	4826      	ldr	r0, [pc, #152]	; (8001d4c <LUNA_INIT+0x250>)
 8001cb4:	f002 fbc4 	bl	8004440 <MCAL_USART_SendData>
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4824      	ldr	r0, [pc, #144]	; (8001d4c <LUNA_INIT+0x250>)
 8001cbc:	f002 fbc0 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001cc0:	e03e      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001cc2:	215a      	movs	r1, #90	; 0x5a
 8001cc4:	4821      	ldr	r0, [pc, #132]	; (8001d4c <LUNA_INIT+0x250>)
 8001cc6:	f002 fbbb 	bl	8004440 <MCAL_USART_SendData>
 8001cca:	2105      	movs	r1, #5
 8001ccc:	481f      	ldr	r0, [pc, #124]	; (8001d4c <LUNA_INIT+0x250>)
 8001cce:	f002 fbb7 	bl	8004440 <MCAL_USART_SendData>
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	481d      	ldr	r0, [pc, #116]	; (8001d4c <LUNA_INIT+0x250>)
 8001cd6:	f002 fbb3 	bl	8004440 <MCAL_USART_SendData>
 8001cda:	2107      	movs	r1, #7
 8001cdc:	481b      	ldr	r0, [pc, #108]	; (8001d4c <LUNA_INIT+0x250>)
 8001cde:	f002 fbaf 	bl	8004440 <MCAL_USART_SendData>
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4819      	ldr	r0, [pc, #100]	; (8001d4c <LUNA_INIT+0x250>)
 8001ce6:	f002 fbab 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001cea:	e029      	b.n	8001d40 <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001cec:	215a      	movs	r1, #90	; 0x5a
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <LUNA_INIT+0x250>)
 8001cf0:	f002 fba6 	bl	8004440 <MCAL_USART_SendData>
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <LUNA_INIT+0x250>)
 8001cf8:	f002 fba2 	bl	8004440 <MCAL_USART_SendData>
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	4813      	ldr	r0, [pc, #76]	; (8001d4c <LUNA_INIT+0x250>)
 8001d00:	f002 fb9e 	bl	8004440 <MCAL_USART_SendData>
 8001d04:	2108      	movs	r1, #8
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <LUNA_INIT+0x250>)
 8001d08:	f002 fb9a 	bl	8004440 <MCAL_USART_SendData>
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	480f      	ldr	r0, [pc, #60]	; (8001d4c <LUNA_INIT+0x250>)
 8001d10:	f002 fb96 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001d14:	e014      	b.n	8001d40 <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001d16:	215a      	movs	r1, #90	; 0x5a
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LUNA_INIT+0x250>)
 8001d1a:	f002 fb91 	bl	8004440 <MCAL_USART_SendData>
 8001d1e:	2105      	movs	r1, #5
 8001d20:	480a      	ldr	r0, [pc, #40]	; (8001d4c <LUNA_INIT+0x250>)
 8001d22:	f002 fb8d 	bl	8004440 <MCAL_USART_SendData>
 8001d26:	2105      	movs	r1, #5
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <LUNA_INIT+0x250>)
 8001d2a:	f002 fb89 	bl	8004440 <MCAL_USART_SendData>
 8001d2e:	2109      	movs	r1, #9
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <LUNA_INIT+0x250>)
 8001d32:	f002 fb85 	bl	8004440 <MCAL_USART_SendData>
 8001d36:	2100      	movs	r1, #0
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <LUNA_INIT+0x250>)
 8001d3a:	f002 fb81 	bl	8004440 <MCAL_USART_SendData>
		break;
 8001d3e:	bf00      	nop
	}
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	08004ccc 	.word	0x08004ccc
 8001d4c:	40004800 	.word	0x40004800

08001d50 <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	while(1);
 8001d54:	e7fe      	b.n	8001d54 <ADC_ERROR_HANDLER+0x4>
	...

08001d58 <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b090      	sub	sp, #64	; 0x40
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8001d62:	2300      	movs	r3, #0
 8001d64:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	f200 80d7 	bhi.w	8001f28 <ADC_GPIO_CONFIG+0x1d0>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <ADC_GPIO_CONFIG+0x28>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001dc1 	.word	0x08001dc1
 8001d84:	08001ddf 	.word	0x08001ddf
 8001d88:	08001dfd 	.word	0x08001dfd
 8001d8c:	08001e1b 	.word	0x08001e1b
 8001d90:	08001e39 	.word	0x08001e39
 8001d94:	08001e57 	.word	0x08001e57
 8001d98:	08001e75 	.word	0x08001e75
 8001d9c:	08001e93 	.word	0x08001e93
 8001da0:	08001eb1 	.word	0x08001eb1
 8001da4:	08001ecf 	.word	0x08001ecf
 8001da8:	08001f29 	.word	0x08001f29
 8001dac:	08001f29 	.word	0x08001f29
 8001db0:	08001f29 	.word	0x08001f29
 8001db4:	08001f29 	.word	0x08001f29
 8001db8:	08001eed 	.word	0x08001eed
 8001dbc:	08001f0b 	.word	0x08001f0b
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001dd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4858      	ldr	r0, [pc, #352]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001dd8:	f000 fdd0 	bl	800297c <MCAL_GPIO_init>
		break;
 8001ddc:	e0a7      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001dde:	2301      	movs	r3, #1
 8001de0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001dee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df2:	4619      	mov	r1, r3
 8001df4:	4850      	ldr	r0, [pc, #320]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001df6:	f000 fdc1 	bl	800297c <MCAL_GPIO_init>
		break;
 8001dfa:	e098      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e10:	4619      	mov	r1, r3
 8001e12:	4849      	ldr	r0, [pc, #292]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001e14:	f000 fdb2 	bl	800297c <MCAL_GPIO_init>
		break;
 8001e18:	e089      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4841      	ldr	r0, [pc, #260]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001e32:	f000 fda3 	bl	800297c <MCAL_GPIO_init>
		break;
 8001e36:	e07a      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001e38:	2304      	movs	r3, #4
 8001e3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	483a      	ldr	r0, [pc, #232]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001e50:	f000 fd94 	bl	800297c <MCAL_GPIO_init>
		break;
 8001e54:	e06b      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001e56:	2305      	movs	r3, #5
 8001e58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4832      	ldr	r0, [pc, #200]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001e6e:	f000 fd85 	bl	800297c <MCAL_GPIO_init>
		break;
 8001e72:	e05c      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8001e74:	2306      	movs	r3, #6
 8001e76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	482b      	ldr	r0, [pc, #172]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001e8c:	f000 fd76 	bl	800297c <MCAL_GPIO_init>
		break;
 8001e90:	e04d      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8001e92:	2307      	movs	r3, #7
 8001e94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4823      	ldr	r0, [pc, #140]	; (8001f38 <ADC_GPIO_CONFIG+0x1e0>)
 8001eaa:	f000 fd67 	bl	800297c <MCAL_GPIO_init>
		break;
 8001eae:	e03e      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	481d      	ldr	r0, [pc, #116]	; (8001f3c <ADC_GPIO_CONFIG+0x1e4>)
 8001ec8:	f000 fd58 	bl	800297c <MCAL_GPIO_init>
		break;
 8001ecc:	e02f      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001ece:	2301      	movs	r3, #1
 8001ed0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001ede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4815      	ldr	r0, [pc, #84]	; (8001f3c <ADC_GPIO_CONFIG+0x1e4>)
 8001ee6:	f000 fd49 	bl	800297c <MCAL_GPIO_init>
		break;
 8001eea:	e020      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001eec:	2304      	movs	r3, #4
 8001eee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f00:	4619      	mov	r1, r3
 8001f02:	480f      	ldr	r0, [pc, #60]	; (8001f40 <ADC_GPIO_CONFIG+0x1e8>)
 8001f04:	f000 fd3a 	bl	800297c <MCAL_GPIO_init>
		break;
 8001f08:	e011      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <ADC_GPIO_CONFIG+0x1e8>)
 8001f22:	f000 fd2b 	bl	800297c <MCAL_GPIO_init>
		break;
 8001f26:	e002      	b.n	8001f2e <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 8001f28:	f7ff ff12 	bl	8001d50 <ADC_ERROR_HANDLER>
		break;
 8001f2c:	bf00      	nop

	}



}
 8001f2e:	bf00      	nop
 8001f30:	3740      	adds	r7, #64	; 0x40
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	40011000 	.word	0x40011000

08001f44 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d905      	bls.n	8001f62 <ADC_init+0x1e>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b0d      	cmp	r3, #13
 8001f5c:	d801      	bhi.n	8001f62 <ADC_init+0x1e>
		return ADC_error;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e177      	b.n	8002252 <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a9a      	ldr	r2, [pc, #616]	; (80021d0 <ADC_init+0x28c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d113      	bne.n	8001f92 <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4a98      	ldr	r2, [pc, #608]	; (80021d4 <ADC_init+0x290>)
 8001f72:	460b      	mov	r3, r1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	440b      	add	r3, r1
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8001f84:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <ADC_init+0x294>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <ADC_init+0x294>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	e013      	b.n	8001fba <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4a8e      	ldr	r2, [pc, #568]	; (80021d4 <ADC_init+0x290>)
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	440b      	add	r3, r1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	33c0      	adds	r3, #192	; 0xc0
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8001fae:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <ADC_init+0x294>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4a89      	ldr	r2, [pc, #548]	; (80021d8 <ADC_init+0x294>)
 8001fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb8:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff feca 	bl	8001d58 <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6893      	ldr	r3, [r2, #8]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f002 f89e 	bl	8004110 <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6893      	ldr	r3, [r2, #8]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 8001fde:	f001 ff4f 	bl	8003e80 <MCAL_GET_PCLCK2>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a7d      	ldr	r2, [pc, #500]	; (80021dc <ADC_init+0x298>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	2b1c      	cmp	r3, #28
 8001fee:	d014      	beq.n	800201a <ADC_init+0xd6>
 8001ff0:	2b1c      	cmp	r3, #28
 8001ff2:	d819      	bhi.n	8002028 <ADC_init+0xe4>
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d002      	beq.n	8001ffe <ADC_init+0xba>
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d007      	beq.n	800200c <ADC_init+0xc8>
 8001ffc:	e014      	b.n	8002028 <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <ADC_init+0x294>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <ADC_init+0x294>)
 8002004:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002008:	6053      	str	r3, [r2, #4]
		break;
 800200a:	e014      	b.n	8002036 <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 800200c:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <ADC_init+0x294>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <ADC_init+0x294>)
 8002012:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002016:	6053      	str	r3, [r2, #4]
		break;
 8002018:	e00d      	b.n	8002036 <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <ADC_init+0x294>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <ADC_init+0x294>)
 8002020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002024:	6053      	str	r3, [r2, #4]
		break;
 8002026:	e006      	b.n	8002036 <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <ADC_init+0x294>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <ADC_init+0x294>)
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	6053      	str	r3, [r2, #4]
		break;
 8002034:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6893      	ldr	r3, [r2, #8]
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6893      	ldr	r3, [r2, #8]
 8002044:	f36f 23cb 	bfc	r3, #11, #1
 8002048:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f200 80a8 	bhi.w	80021a4 <ADC_init+0x260>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <ADC_init+0x118>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800209d 	.word	0x0800209d
 8002060:	080020b3 	.word	0x080020b3
 8002064:	080020c9 	.word	0x080020c9
 8002068:	080020df 	.word	0x080020df
 800206c:	080020f5 	.word	0x080020f5
 8002070:	0800210b 	.word	0x0800210b
 8002074:	08002121 	.word	0x08002121
 8002078:	08002137 	.word	0x08002137
 800207c:	0800214d 	.word	0x0800214d
 8002080:	08002163 	.word	0x08002163
 8002084:	080021a5 	.word	0x080021a5
 8002088:	080021a5 	.word	0x080021a5
 800208c:	080021a5 	.word	0x080021a5
 8002090:	080021a5 	.word	0x080021a5
 8002094:	08002179 	.word	0x08002179
 8002098:	0800218f 	.word	0x0800218f
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	b2d9      	uxtb	r1, r3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6913      	ldr	r3, [r2, #16]
 80020aa:	f361 0302 	bfi	r3, r1, #0, #3
 80020ae:	6113      	str	r3, [r2, #16]
		break;
 80020b0:	e07b      	b.n	80021aa <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	b2d9      	uxtb	r1, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6913      	ldr	r3, [r2, #16]
 80020c0:	f361 03c5 	bfi	r3, r1, #3, #3
 80020c4:	6113      	str	r3, [r2, #16]

		break;
 80020c6:	e070      	b.n	80021aa <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2d9      	uxtb	r1, r3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6913      	ldr	r3, [r2, #16]
 80020d6:	f361 1388 	bfi	r3, r1, #6, #3
 80020da:	6113      	str	r3, [r2, #16]

		break;
 80020dc:	e065      	b.n	80021aa <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6913      	ldr	r3, [r2, #16]
 80020ec:	f361 234b 	bfi	r3, r1, #9, #3
 80020f0:	6113      	str	r3, [r2, #16]

		break;
 80020f2:	e05a      	b.n	80021aa <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	789b      	ldrb	r3, [r3, #2]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6913      	ldr	r3, [r2, #16]
 8002102:	f361 330e 	bfi	r3, r1, #12, #3
 8002106:	6113      	str	r3, [r2, #16]

		break;
 8002108:	e04f      	b.n	80021aa <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	789b      	ldrb	r3, [r3, #2]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	b2d9      	uxtb	r1, r3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6913      	ldr	r3, [r2, #16]
 8002118:	f361 33d1 	bfi	r3, r1, #15, #3
 800211c:	6113      	str	r3, [r2, #16]

		break;
 800211e:	e044      	b.n	80021aa <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	b2d9      	uxtb	r1, r3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6913      	ldr	r3, [r2, #16]
 800212e:	f361 4394 	bfi	r3, r1, #18, #3
 8002132:	6113      	str	r3, [r2, #16]

		break;
 8002134:	e039      	b.n	80021aa <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	789b      	ldrb	r3, [r3, #2]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	b2d9      	uxtb	r1, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6913      	ldr	r3, [r2, #16]
 8002144:	f361 5357 	bfi	r3, r1, #21, #3
 8002148:	6113      	str	r3, [r2, #16]

		break;
 800214a:	e02e      	b.n	80021aa <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6913      	ldr	r3, [r2, #16]
 800215a:	f361 631a 	bfi	r3, r1, #24, #3
 800215e:	6113      	str	r3, [r2, #16]

		break;
 8002160:	e023      	b.n	80021aa <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	789b      	ldrb	r3, [r3, #2]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	b2d9      	uxtb	r1, r3
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6913      	ldr	r3, [r2, #16]
 8002170:	f361 63dd 	bfi	r3, r1, #27, #3
 8002174:	6113      	str	r3, [r2, #16]

		break;
 8002176:	e018      	b.n	80021aa <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	b2d9      	uxtb	r1, r3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68d3      	ldr	r3, [r2, #12]
 8002186:	f361 330e 	bfi	r3, r1, #12, #3
 800218a:	60d3      	str	r3, [r2, #12]

		break;
 800218c:	e00d      	b.n	80021aa <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	789b      	ldrb	r3, [r3, #2]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	b2d9      	uxtb	r1, r3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68d3      	ldr	r3, [r2, #12]
 800219c:	f361 33d1 	bfi	r3, r1, #15, #3
 80021a0:	60d3      	str	r3, [r2, #12]
		break;
 80021a2:	e002      	b.n	80021aa <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 80021a4:	f7ff fdd4 	bl	8001d50 <ADC_ERROR_HANDLER>
		break;
 80021a8:	bf00      	nop


	}

	switch(config->mode){
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <ADC_init+0x274>
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d006      	beq.n	80021c4 <ADC_init+0x280>
 80021b6:	e013      	b.n	80021e0 <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6893      	ldr	r3, [r2, #8]
 80021bc:	f36f 0341 	bfc	r3, #1, #1
 80021c0:	6093      	str	r3, [r2, #8]
		break;
 80021c2:	e010      	b.n	80021e6 <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6893      	ldr	r3, [r2, #8]
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6093      	str	r3, [r2, #8]
		break;
 80021ce:	e00a      	b.n	80021e6 <ADC_init+0x2a2>
 80021d0:	40012400 	.word	0x40012400
 80021d4:	20002094 	.word	0x20002094
 80021d8:	40021000 	.word	0x40021000
 80021dc:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 80021e0:	f7ff fdb6 	bl	8001d50 <ADC_ERROR_HANDLER>
		break;
 80021e4:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d022      	beq.n	800223c <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6853      	ldr	r3, [r2, #4]
 80021fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021fe:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	b2d9      	uxtb	r1, r3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6853      	ldr	r3, [r2, #4]
 800220e:	f361 0304 	bfi	r3, r1, #0, #5
 8002212:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6853      	ldr	r3, [r2, #4]
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	6053      	str	r3, [r2, #4]
 8002226:	e004      	b.n	8002232 <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6853      	ldr	r3, [r2, #4]
 800222c:	f36f 1386 	bfc	r3, #6, #1
 8002230:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6853      	ldr	r3, [r2, #4]
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6893      	ldr	r3, [r2, #8]
 8002240:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8002244:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6893      	ldr	r3, [r2, #8]
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop

0800225c <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	460b      	mov	r3, r1
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <ADC_read+0xd8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8002276:	7afa      	ldrb	r2, [r7, #11]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <ADC_read+0xdc>)
 8002282:	4413      	add	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e008      	b.n	800229a <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8002288:	7afa      	ldrb	r2, [r7, #11]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	33c0      	adds	r3, #192	; 0xc0
 8002294:	4a28      	ldr	r2, [pc, #160]	; (8002338 <ADC_read+0xdc>)
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	b2d9      	uxtb	r1, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80022ba:	f361 0304 	bfi	r3, r1, #0, #5
 80022be:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6893      	ldr	r3, [r2, #8]
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d0:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 80022d2:	bf00      	nop
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f8      	beq.n	80022d4 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	78db      	ldrb	r3, [r3, #3]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	801a      	strh	r2, [r3, #0]
		data++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3302      	adds	r3, #2
 80022f8:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 80022fa:	e016      	b.n	800232a <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	74fb      	strb	r3, [r7, #19]
 8002300:	e00a      	b.n	8002318 <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	801a      	strh	r2, [r3, #0]
			data++;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3302      	adds	r3, #2
 8002310:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	3301      	adds	r3, #1
 8002316:	74fb      	strb	r3, [r7, #19]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f3c3 5303 	ubfx	r3, r3, #20, #4
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	4293      	cmp	r3, r2
 8002328:	d9eb      	bls.n	8002302 <ADC_read+0xa6>
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40012400 	.word	0x40012400
 8002338:	20002094 	.word	0x20002094

0800233c <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <ADC1_2_IRQHandler+0x54>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10f      	bne.n	800236e <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <ADC1_2_IRQHandler+0x54>)
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4619      	mov	r1, r3
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <ADC1_2_IRQHandler+0x58>)
 800235c:	460b      	mov	r3, r1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	440b      	add	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3308      	adds	r3, #8
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 800236c:	e00e      	b.n	800238c <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <ADC1_2_IRQHandler+0x5c>)
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <ADC1_2_IRQHandler+0x58>)
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	33c8      	adds	r3, #200	; 0xc8
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4798      	blx	r3
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40012400 	.word	0x40012400
 8002394:	20002094 	.word	0x20002094
 8002398:	40012800 	.word	0x40012800

0800239c <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
	while(1);
 80023a0:	e7fe      	b.n	80023a0 <ERROR_HANDLER+0x4>
	...

080023a4 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MCAL_CAN_SET_GPIO+0x30>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4808      	ldr	r0, [pc, #32]	; (80023d8 <MCAL_CAN_SET_GPIO+0x34>)
 80023b6:	f000 fae1 	bl	800297c <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MCAL_CAN_SET_GPIO+0x38>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MCAL_CAN_SET_GPIO+0x34>)
 80023c6:	f000 fad9 	bl	800297c <MCAL_GPIO_init>

}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	08004cdc 	.word	0x08004cdc
 80023d8:	40010800 	.word	0x40010800
 80023dc:	08004ce0 	.word	0x08004ce0

080023e0 <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 80023e8:	4b84      	ldr	r3, [pc, #528]	; (80025fc <MCAL_CAN_init+0x21c>)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 80023f2:	4b83      	ldr	r3, [pc, #524]	; (8002600 <MCAL_CAN_init+0x220>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a82      	ldr	r2, [pc, #520]	; (8002600 <MCAL_CAN_init+0x220>)
 80023f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fc:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 80023fe:	f7ff ffd1 	bl	80023a4 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 8002402:	4b80      	ldr	r3, [pc, #512]	; (8002604 <MCAL_CAN_init+0x224>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11f      	bne.n	8002450 <MCAL_CAN_init+0x70>
 8002410:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <MCAL_CAN_init+0x224>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d118      	bne.n	8002450 <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 800241e:	4a79      	ldr	r2, [pc, #484]	; (8002604 <MCAL_CAN_init+0x224>)
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	f36f 0341 	bfc	r3, #1, #1
 8002426:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 8002428:	4a76      	ldr	r2, [pc, #472]	; (8002604 <MCAL_CAN_init+0x224>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 8002432:	bf00      	nop
 8002434:	4b73      	ldr	r3, [pc, #460]	; (8002604 <MCAL_CAN_init+0x224>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1f8      	bne.n	8002434 <MCAL_CAN_init+0x54>
 8002442:	4b70      	ldr	r3, [pc, #448]	; (8002604 <MCAL_CAN_init+0x224>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f1      	bne.n	8002434 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8002458:	4a6a      	ldr	r2, [pc, #424]	; (8002604 <MCAL_CAN_init+0x224>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e004      	b.n	800246e <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8002464:	4a67      	ldr	r2, [pc, #412]	; (8002604 <MCAL_CAN_init+0x224>)
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f36f 1386 	bfc	r3, #6, #1
 800246c:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8002476:	4a63      	ldr	r2, [pc, #396]	; (8002604 <MCAL_CAN_init+0x224>)
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e004      	b.n	800248c <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 8002482:	4a60      	ldr	r2, [pc, #384]	; (8002604 <MCAL_CAN_init+0x224>)
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f36f 1304 	bfc	r3, #4, #1
 800248a:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 800248c:	4a5d      	ldr	r2, [pc, #372]	; (8002604 <MCAL_CAN_init+0x224>)
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	f36f 0382 	bfc	r3, #2, #1
 8002494:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	789b      	ldrb	r3, [r3, #2]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 800249e:	4a59      	ldr	r2, [pc, #356]	; (8002604 <MCAL_CAN_init+0x224>)
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e004      	b.n	80024b4 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 80024aa:	4a56      	ldr	r2, [pc, #344]	; (8002604 <MCAL_CAN_init+0x224>)
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	f36f 03c3 	bfc	r3, #3, #1
 80024b2:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 80024b4:	f001 fcd0 	bl	8003e58 <MCAL_GET_PCLCK1>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a53      	ldr	r2, [pc, #332]	; (8002608 <MCAL_CAN_init+0x228>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <MCAL_CAN_init+0xe8>
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <MCAL_CAN_init+0x22c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d023      	beq.n	800250e <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 80024c6:	e045      	b.n	8002554 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d83e      	bhi.n	800254e <MCAL_CAN_init+0x16e>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <MCAL_CAN_init+0xf8>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024f3 	.word	0x080024f3
 80024e0:	080024fd 	.word	0x080024fd
 80024e4:	08002505 	.word	0x08002505
			CAN1->BTR.ALL_Bits=0x00050000;
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <MCAL_CAN_init+0x224>)
 80024ea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80024ee:	61da      	str	r2, [r3, #28]
			break;
 80024f0:	e00c      	b.n	800250c <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 80024f2:	4b44      	ldr	r3, [pc, #272]	; (8002604 <MCAL_CAN_init+0x224>)
 80024f4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80024f8:	61da      	str	r2, [r3, #28]
			break;
 80024fa:	e007      	b.n	800250c <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 80024fc:	4b41      	ldr	r3, [pc, #260]	; (8002604 <MCAL_CAN_init+0x224>)
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <MCAL_CAN_init+0x230>)
 8002500:	61da      	str	r2, [r3, #28]
			break;
 8002502:	e003      	b.n	800250c <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <MCAL_CAN_init+0x224>)
 8002506:	4a43      	ldr	r2, [pc, #268]	; (8002614 <MCAL_CAN_init+0x234>)
 8002508:	61da      	str	r2, [r3, #28]
			break;
 800250a:	bf00      	nop
		break;
 800250c:	e01f      	b.n	800254e <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d81d      	bhi.n	8002552 <MCAL_CAN_init+0x172>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <MCAL_CAN_init+0x13c>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002535 	.word	0x08002535
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002545 	.word	0x08002545
				CAN1->BTR.ALL_Bits=0x00090001;
 800252c:	4b35      	ldr	r3, [pc, #212]	; (8002604 <MCAL_CAN_init+0x224>)
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <MCAL_CAN_init+0x238>)
 8002530:	61da      	str	r2, [r3, #28]
				break;
 8002532:	e00b      	b.n	800254c <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <MCAL_CAN_init+0x224>)
 8002536:	4a39      	ldr	r2, [pc, #228]	; (800261c <MCAL_CAN_init+0x23c>)
 8002538:	61da      	str	r2, [r3, #28]
				break;
 800253a:	e007      	b.n	800254c <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <MCAL_CAN_init+0x224>)
 800253e:	4a38      	ldr	r2, [pc, #224]	; (8002620 <MCAL_CAN_init+0x240>)
 8002540:	61da      	str	r2, [r3, #28]
				break;
 8002542:	e003      	b.n	800254c <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <MCAL_CAN_init+0x224>)
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <MCAL_CAN_init+0x244>)
 8002548:	61da      	str	r2, [r3, #28]
				break;
 800254a:	bf00      	nop
			break;
 800254c:	e001      	b.n	8002552 <MCAL_CAN_init+0x172>
		break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <MCAL_CAN_init+0x174>
			break;
 8002552:	bf00      	nop

	}

	switch(CANx->MODE){
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	791b      	ldrb	r3, [r3, #4]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d837      	bhi.n	80025cc <MCAL_CAN_init+0x1ec>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <MCAL_CAN_init+0x184>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002575 	.word	0x08002575
 8002568:	0800258b 	.word	0x0800258b
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080025b7 	.word	0x080025b7
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <MCAL_CAN_init+0x224>)
 8002576:	69d3      	ldr	r3, [r2, #28]
 8002578:	f36f 73df 	bfc	r3, #31, #1
 800257c:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <MCAL_CAN_init+0x224>)
 8002580:	69d3      	ldr	r3, [r2, #28]
 8002582:	f36f 739e 	bfc	r3, #30, #1
 8002586:	61d3      	str	r3, [r2, #28]

		break;
 8002588:	e023      	b.n	80025d2 <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <MCAL_CAN_init+0x224>)
 800258c:	69d3      	ldr	r3, [r2, #28]
 800258e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002592:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <MCAL_CAN_init+0x224>)
 8002596:	69d3      	ldr	r3, [r2, #28]
 8002598:	f36f 739e 	bfc	r3, #30, #1
 800259c:	61d3      	str	r3, [r2, #28]
		break;
 800259e:	e018      	b.n	80025d2 <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <MCAL_CAN_init+0x224>)
 80025a2:	69d3      	ldr	r3, [r2, #28]
 80025a4:	f36f 73df 	bfc	r3, #31, #1
 80025a8:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <MCAL_CAN_init+0x224>)
 80025ac:	69d3      	ldr	r3, [r2, #28]
 80025ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b2:	61d3      	str	r3, [r2, #28]
		break;
 80025b4:	e00d      	b.n	80025d2 <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <MCAL_CAN_init+0x224>)
 80025b8:	69d3      	ldr	r3, [r2, #28]
 80025ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025be:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <MCAL_CAN_init+0x224>)
 80025c2:	69d3      	ldr	r3, [r2, #28]
 80025c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025c8:	61d3      	str	r3, [r2, #28]
		break;
 80025ca:	e002      	b.n	80025d2 <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 80025cc:	f7ff fee6 	bl	800239c <ERROR_HANDLER>
		break;
 80025d0:	bf00      	nop

	}

	if(CANx->IE){
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	795b      	ldrb	r3, [r3, #5]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d028      	beq.n	800262c <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <MCAL_CAN_init+0x224>)
 80025dc:	6953      	ldr	r3, [r2, #20]
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <MCAL_CAN_init+0x224>)
 80025e6:	6953      	ldr	r3, [r2, #20]
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MCAL_CAN_init+0x248>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <MCAL_CAN_init+0x248>)
 80025f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e027      	b.n	800264c <MCAL_CAN_init+0x26c>
 80025fc:	20002214 	.word	0x20002214
 8002600:	40021000 	.word	0x40021000
 8002604:	40006400 	.word	0x40006400
 8002608:	007a1200 	.word	0x007a1200
 800260c:	016e3600 	.word	0x016e3600
 8002610:	001c0001 	.word	0x001c0001
 8002614:	001c0004 	.word	0x001c0004
 8002618:	00090001 	.word	0x00090001
 800261c:	001c0002 	.word	0x001c0002
 8002620:	001c0005 	.word	0x001c0005
 8002624:	001c000e 	.word	0x001c000e
 8002628:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 800262e:	6953      	ldr	r3, [r2, #20]
 8002630:	f36f 0341 	bfc	r3, #1, #1
 8002634:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8002636:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 8002638:	6953      	ldr	r3, [r2, #20]
 800263a:	f36f 1304 	bfc	r3, #4, #1
 800263e:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <MCAL_CAN_init+0x2dc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <MCAL_CAN_init+0x2dc>)
 8002646:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800264a:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 800264e:	6953      	ldr	r3, [r2, #20]
 8002650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002654:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 8002658:	6953      	ldr	r3, [r2, #20]
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MCAL_CAN_init+0x2e0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <MCAL_CAN_init+0x2e0>)
 8002666:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266a:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d118      	bne.n	80026ac <MCAL_CAN_init+0x2cc>
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	f36f 0341 	bfc	r3, #1, #1
 8002690:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	f36f 0300 	bfc	r3, #0, #1
 800269a:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 800269c:	bf00      	nop
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MCAL_CAN_init+0x2d8>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d0f8      	beq.n	800269e <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40006400 	.word	0x40006400
 80026bc:	e000e180 	.word	0xe000e180
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <MCAL_CAN_RESET+0x24>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <MCAL_CAN_RESET+0x24>)
 80026ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d2:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <MCAL_CAN_RESET+0x24>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <MCAL_CAN_RESET+0x24>)
 80026da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80026de:	6113      	str	r3, [r2, #16]

}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000

080026ec <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4798      	blx	r3
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20002214 	.word	0x20002214

08002700 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <CAN_RX1_IRQHandler+0x10>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4798      	blx	r3
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20002214 	.word	0x20002214

08002714 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 8002718:	f7ff ffd4 	bl	80026c4 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <CAN_SCE_IRQHandler+0x14>)
 800271e:	f7ff fe5f 	bl	80023e0 <MCAL_CAN_init>
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20002214 	.word	0x20002214

0800272c <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <EXTI0_IRQHandler+0x1c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <EXTI0_IRQHandler+0x20>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <EXTI0_IRQHandler+0x20>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6153      	str	r3, [r2, #20]
	}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20002220 	.word	0x20002220
 800274c:	40010400 	.word	0x40010400

08002750 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <EXTI1_IRQHandler+0x1c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <EXTI1_IRQHandler+0x20>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <EXTI1_IRQHandler+0x20>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6153      	str	r3, [r2, #20]

	}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20002220 	.word	0x20002220
 8002770:	40010400 	.word	0x40010400

08002774 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <EXTI2_IRQHandler+0x1c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <EXTI2_IRQHandler+0x20>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <EXTI2_IRQHandler+0x20>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6153      	str	r3, [r2, #20]

	}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20002220 	.word	0x20002220
 8002794:	40010400 	.word	0x40010400

08002798 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <EXTI3_IRQHandler+0x1c>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <EXTI3_IRQHandler+0x20>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <EXTI3_IRQHandler+0x20>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6153      	str	r3, [r2, #20]

	}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20002220 	.word	0x20002220
 80027b8:	40010400 	.word	0x40010400

080027bc <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <EXTI4_IRQHandler+0x1c>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <EXTI4_IRQHandler+0x20>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <EXTI4_IRQHandler+0x20>)
 80027cc:	f043 0310 	orr.w	r3, r3, #16
 80027d0:	6153      	str	r3, [r2, #20]

	}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20002220 	.word	0x20002220
 80027dc:	40010400 	.word	0x40010400

080027e0 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <EXTI9_5_IRQHandler+0x22>
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 80027f6:	f043 0320 	orr.w	r3, r3, #32
 80027fa:	6153      	str	r3, [r2, #20]
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <EXTI9_5_IRQHandler+0xa4>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8002802:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <EXTI9_5_IRQHandler+0x40>
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002818:	6153      	str	r3, [r2, #20]
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <EXTI9_5_IRQHandler+0xa4>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <EXTI9_5_IRQHandler+0x5e>
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002836:	6153      	str	r3, [r2, #20]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <EXTI9_5_IRQHandler+0xa4>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <EXTI9_5_IRQHandler+0x7c>
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6153      	str	r3, [r2, #20]
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <EXTI9_5_IRQHandler+0xa4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <EXTI9_5_IRQHandler+0x9a>
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <EXTI9_5_IRQHandler+0xa0>)
 800286e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002872:	6153      	str	r3, [r2, #20]
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <EXTI9_5_IRQHandler+0xa4>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	4798      	blx	r3
	}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40010400 	.word	0x40010400
 8002884:	20002220 	.word	0x20002220

08002888 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <EXTI15_10_IRQHandler+0x22>
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6153      	str	r3, [r2, #20]
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <EXTI15_10_IRQHandler+0x40>
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c0:	6153      	str	r3, [r2, #20]
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <EXTI15_10_IRQHandler+0x5e>
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028de:	6153      	str	r3, [r2, #20]
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <EXTI15_10_IRQHandler+0x7c>
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 80028f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028fc:	6153      	str	r3, [r2, #20]
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <EXTI15_10_IRQHandler+0x9a>
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291a:	6153      	str	r3, [r2, #20]
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <EXTI15_10_IRQHandler+0xb8>
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <EXTI15_10_IRQHandler+0xbc>)
 8002934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002938:	6153      	str	r3, [r2, #20]
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <EXTI15_10_IRQHandler+0xc0>)
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	4798      	blx	r3

	}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010400 	.word	0x40010400
 8002948:	20002220 	.word	0x20002220

0800294c <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	2b07      	cmp	r3, #7
 800295a:	d803      	bhi.n	8002964 <Get_PIN_Positon+0x18>
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	b29b      	uxth	r3, r3
 8002962:	e004      	b.n	800296e <Get_PIN_Positon+0x22>
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	3b08      	subs	r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	b29b      	uxth	r3, r3
 800296e:	81fb      	strh	r3, [r7, #14]
return positon;
 8002970:	89fb      	ldrh	r3, [r7, #14]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a6b      	ldr	r2, [pc, #428]	; (8002b38 <MCAL_GPIO_init+0x1bc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d106      	bne.n	800299c <MCAL_GPIO_init+0x20>
 800298e:	4b6b      	ldr	r3, [pc, #428]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	6193      	str	r3, [r2, #24]
 800299a:	e02a      	b.n	80029f2 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a68      	ldr	r2, [pc, #416]	; (8002b40 <MCAL_GPIO_init+0x1c4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d106      	bne.n	80029b2 <MCAL_GPIO_init+0x36>
 80029a4:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	6193      	str	r3, [r2, #24]
 80029b0:	e01f      	b.n	80029f2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a63      	ldr	r2, [pc, #396]	; (8002b44 <MCAL_GPIO_init+0x1c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d106      	bne.n	80029c8 <MCAL_GPIO_init+0x4c>
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4a5f      	ldr	r2, [pc, #380]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029c0:	f043 0310 	orr.w	r3, r3, #16
 80029c4:	6193      	str	r3, [r2, #24]
 80029c6:	e014      	b.n	80029f2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <MCAL_GPIO_init+0x1cc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d106      	bne.n	80029de <MCAL_GPIO_init+0x62>
 80029d0:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a59      	ldr	r2, [pc, #356]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	e009      	b.n	80029f2 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a5a      	ldr	r2, [pc, #360]	; (8002b4c <MCAL_GPIO_init+0x1d0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d105      	bne.n	80029f2 <MCAL_GPIO_init+0x76>
 80029e6:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <MCAL_GPIO_init+0x1c0>)
 80029ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f0:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	d801      	bhi.n	8002a00 <MCAL_GPIO_init+0x84>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	e001      	b.n	8002a04 <MCAL_GPIO_init+0x88>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff9d 	bl	800294c <Get_PIN_Positon>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	230f      	movs	r3, #15
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	401a      	ands	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <MCAL_GPIO_init+0xd2>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d009      	beq.n	8002a4e <MCAL_GPIO_init+0xd2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	789b      	ldrb	r3, [r3, #2]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d004      	beq.n	8002a4e <MCAL_GPIO_init+0xd2>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	789b      	ldrb	r3, [r3, #2]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d156      	bne.n	8002afc <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	789b      	ldrb	r3, [r3, #2]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d11c      	bne.n	8002a92 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff74 	bl	800294c <Get_PIN_Positon>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	2308      	movs	r3, #8
 8002a6a:	fa03 f202 	lsl.w	r2, r3, r2
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	4093      	lsls	r3, r2
 8002a84:	43da      	mvns	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002a90:	e04d      	b.n	8002b2e <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	789b      	ldrb	r3, [r3, #2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11c      	bne.n	8002ad6 <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff52 	bl	800294c <Get_PIN_Positon>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2308      	movs	r3, #8
 8002aae:	fa03 f202 	lsl.w	r2, r3, r2
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	fa03 f202 	lsl.w	r2, r3, r2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002ad4:	e02b      	b.n	8002b2e <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	789b      	ldrb	r3, [r3, #2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	009c      	lsls	r4, r3, #2
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff31 	bl	800294c <Get_PIN_Positon>
 8002aea:	4603      	mov	r3, r0
 8002aec:	fa04 f203 	lsl.w	r2, r4, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8002afa:	e018      	b.n	8002b2e <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	789b      	ldrb	r3, [r3, #2]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3b04      	subs	r3, #4
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	78d2      	ldrb	r2, [r2, #3]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	ea43 0402 	orr.w	r4, r3, r2
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ff18 	bl	800294c <Get_PIN_Positon>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	fa04 f203 	lsl.w	r2, r4, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	601a      	str	r2, [r3, #0]

	}

}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40010800 	.word	0x40010800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	40011000 	.word	0x40011000
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	40011800 	.word	0x40011800

08002b50 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	887a      	ldrh	r2, [r7, #2]
 8002b62:	b292      	uxth	r2, r2
 8002b64:	40d3      	lsrs	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	b29b      	uxth	r3, r3

}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	while(1);
 8002b7c:	e7fe      	b.n	8002b7c <GP_ERROR_HANDLER+0x4>
	...

08002b80 <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09c      	sub	sp, #112	; 0x70
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	f040 8089 	bne.w	8002cac <MCAL_SET_GP_TIMx_GPIO+0x12c>
		switch (MODE) {
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d043      	beq.n	8002c28 <MCAL_SET_GP_TIMx_GPIO+0xa8>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	f300 81bb 	bgt.w	8002f1c <MCAL_SET_GP_TIMx_GPIO+0x39c>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 81ba 	beq.w	8002f20 <MCAL_SET_GP_TIMx_GPIO+0x3a0>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d000      	beq.n	8002bb2 <MCAL_SET_GP_TIMx_GPIO+0x32>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002bb0:	e1b4      	b.n	8002f1c <MCAL_SET_GP_TIMx_GPIO+0x39c>
			switch(CHx){
 8002bb2:	78bb      	ldrb	r3, [r7, #2]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d832      	bhi.n	8002c20 <MCAL_SET_GP_TIMx_GPIO+0xa0>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <MCAL_SET_GP_TIMx_GPIO+0x40>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002be5 	.word	0x08002be5
 8002bc8:	08002bf9 	.word	0x08002bf9
 8002bcc:	08002c0d 	.word	0x08002c0d
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8002bd0:	4bb0      	ldr	r3, [pc, #704]	; (8002e94 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002bd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	48ae      	ldr	r0, [pc, #696]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002bde:	f7ff fecd 	bl	800297c <MCAL_GPIO_init>
				break;
 8002be2:	e020      	b.n	8002c26 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8002be4:	4bad      	ldr	r3, [pc, #692]	; (8002e9c <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002bea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	48a9      	ldr	r0, [pc, #676]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002bf2:	f7ff fec3 	bl	800297c <MCAL_GPIO_init>
				break;
 8002bf6:	e016      	b.n	8002c26 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 8002bf8:	4ba9      	ldr	r3, [pc, #676]	; (8002ea0 <MCAL_SET_GP_TIMx_GPIO+0x320>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002bfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c02:	4619      	mov	r1, r3
 8002c04:	48a4      	ldr	r0, [pc, #656]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c06:	f7ff feb9 	bl	800297c <MCAL_GPIO_init>
				break;
 8002c0a:	e00c      	b.n	8002c26 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8002c0c:	4ba5      	ldr	r3, [pc, #660]	; (8002ea4 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c16:	4619      	mov	r1, r3
 8002c18:	489f      	ldr	r0, [pc, #636]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c1a:	f7ff feaf 	bl	800297c <MCAL_GPIO_init>
				break;
 8002c1e:	e002      	b.n	8002c26 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				ERROR_HANDLER();
 8002c20:	f7ff fbbc 	bl	800239c <ERROR_HANDLER>
			break;
 8002c24:	e185      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002c26:	e184      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8002c28:	78bb      	ldrb	r3, [r7, #2]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d839      	bhi.n	8002ca4 <MCAL_SET_GP_TIMx_GPIO+0x124>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <MCAL_SET_GP_TIMx_GPIO+0xb8>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c69 	.word	0x08002c69
 8002c40:	08002c7d 	.word	0x08002c7d
 8002c44:	08002c91 	.word	0x08002c91
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOA, &pin);
 8002c5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	488d      	ldr	r0, [pc, #564]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c62:	f7ff fe8b 	bl	800297c <MCAL_GPIO_init>
					break;
 8002c66:	e020      	b.n	8002caa <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8002c68:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002c6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c72:	4619      	mov	r1, r3
 8002c74:	4888      	ldr	r0, [pc, #544]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c76:	f7ff fe81 	bl	800297c <MCAL_GPIO_init>
					break;
 8002c7a:	e016      	b.n	8002caa <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 8002c7c:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002c82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c86:	4619      	mov	r1, r3
 8002c88:	4883      	ldr	r0, [pc, #524]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c8a:	f7ff fe77 	bl	800297c <MCAL_GPIO_init>
					break;
 8002c8e:	e00c      	b.n	8002caa <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 8002c90:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <MCAL_SET_GP_TIMx_GPIO+0x330>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002c96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	487e      	ldr	r0, [pc, #504]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002c9e:	f7ff fe6d 	bl	800297c <MCAL_GPIO_init>
					break;
 8002ca2:	e002      	b.n	8002caa <MCAL_SET_GP_TIMx_GPIO+0x12a>
					ERROR_HANDLER();
 8002ca4:	f7ff fb7a 	bl	800239c <ERROR_HANDLER>
				break;
 8002ca8:	e143      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002caa:	e142      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}

	}else if(TIMx ==TIM3){
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	f040 8089 	bne.w	8002dc8 <MCAL_SET_GP_TIMx_GPIO+0x248>
		switch (MODE) {
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d043      	beq.n	8002d44 <MCAL_SET_GP_TIMx_GPIO+0x1c4>
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f300 8131 	bgt.w	8002f24 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8130 	beq.w	8002f28 <MCAL_SET_GP_TIMx_GPIO+0x3a8>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d000      	beq.n	8002cce <MCAL_SET_GP_TIMx_GPIO+0x14e>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002ccc:	e12a      	b.n	8002f24 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
			switch(CHx){
 8002cce:	78bb      	ldrb	r3, [r7, #2]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d832      	bhi.n	8002d3c <MCAL_SET_GP_TIMx_GPIO+0x1bc>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <MCAL_SET_GP_TIMx_GPIO+0x15c>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002d01 	.word	0x08002d01
 8002ce4:	08002d15 	.word	0x08002d15
 8002ce8:	08002d29 	.word	0x08002d29
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8002cec:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002cf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4867      	ldr	r0, [pc, #412]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002cfa:	f7ff fe3f 	bl	800297c <MCAL_GPIO_init>
				break;
 8002cfe:	e020      	b.n	8002d42 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8002d00:	4b6e      	ldr	r3, [pc, #440]	; (8002ebc <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8002d06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4862      	ldr	r0, [pc, #392]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002d0e:	f7ff fe35 	bl	800297c <MCAL_GPIO_init>
				break;
 8002d12:	e016      	b.n	8002d42 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8002d14:	4b5f      	ldr	r3, [pc, #380]	; (8002e94 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002d1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4867      	ldr	r0, [pc, #412]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002d22:	f7ff fe2b 	bl	800297c <MCAL_GPIO_init>
				break;
 8002d26:	e00c      	b.n	8002d42 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8002d28:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002d2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d32:	4619      	mov	r1, r3
 8002d34:	4862      	ldr	r0, [pc, #392]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002d36:	f7ff fe21 	bl	800297c <MCAL_GPIO_init>
				break;
 8002d3a:	e002      	b.n	8002d42 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				ERROR_HANDLER();
 8002d3c:	f7ff fb2e 	bl	800239c <ERROR_HANDLER>
			break;
 8002d40:	e0f7      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002d42:	e0f6      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d839      	bhi.n	8002dc0 <MCAL_SET_GP_TIMx_GPIO+0x240>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <MCAL_SET_GP_TIMx_GPIO+0x1d4>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d79 	.word	0x08002d79
 8002d5c:	08002d8d 	.word	0x08002d8d
 8002d60:	08002dad 	.word	0x08002dad
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8002d64:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002d6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4849      	ldr	r0, [pc, #292]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002d72:	f7ff fe03 	bl	800297c <MCAL_GPIO_init>
					break;
 8002d76:	e026      	b.n	8002dc6 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <MCAL_SET_GP_TIMx_GPIO+0x348>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8002d7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d82:	4619      	mov	r1, r3
 8002d84:	4844      	ldr	r0, [pc, #272]	; (8002e98 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8002d86:	f7ff fdf9 	bl	800297c <MCAL_GPIO_init>
					break;
 8002d8a:	e01c      	b.n	8002dc6 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOB, &pin);
 8002d9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002da2:	4619      	mov	r1, r3
 8002da4:	4846      	ldr	r0, [pc, #280]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002da6:	f7ff fde9 	bl	800297c <MCAL_GPIO_init>
					break;
 8002daa:	e00c      	b.n	8002dc6 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002db2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002db6:	4619      	mov	r1, r3
 8002db8:	4841      	ldr	r0, [pc, #260]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002dba:	f7ff fddf 	bl	800297c <MCAL_GPIO_init>
					break;
 8002dbe:	e002      	b.n	8002dc6 <MCAL_SET_GP_TIMx_GPIO+0x246>
					ERROR_HANDLER();
 8002dc0:	f7ff faec 	bl	800239c <ERROR_HANDLER>
				break;
 8002dc4:	e0b5      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002dc6:	e0b4      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}



	}else if(TIMx ==TIM4){
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	f040 80b0 	bne.w	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		switch (MODE) {
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d043      	beq.n	8002e60 <MCAL_SET_GP_TIMx_GPIO+0x2e0>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	f300 80a7 	bgt.w	8002f2c <MCAL_SET_GP_TIMx_GPIO+0x3ac>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80a6 	beq.w	8002f30 <MCAL_SET_GP_TIMx_GPIO+0x3b0>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d000      	beq.n	8002dea <MCAL_SET_GP_TIMx_GPIO+0x26a>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002de8:	e0a0      	b.n	8002f2c <MCAL_SET_GP_TIMx_GPIO+0x3ac>
			switch(CHx){
 8002dea:	78bb      	ldrb	r3, [r7, #2]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d832      	bhi.n	8002e58 <MCAL_SET_GP_TIMx_GPIO+0x2d8>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <MCAL_SET_GP_TIMx_GPIO+0x278>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e1d 	.word	0x08002e1d
 8002e00:	08002e31 	.word	0x08002e31
 8002e04:	08002e45 	.word	0x08002e45
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002e0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e12:	4619      	mov	r1, r3
 8002e14:	482a      	ldr	r0, [pc, #168]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002e16:	f7ff fdb1 	bl	800297c <MCAL_GPIO_init>
				break;
 8002e1a:	e020      	b.n	8002e5e <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002e22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e26:	4619      	mov	r1, r3
 8002e28:	4825      	ldr	r0, [pc, #148]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002e2a:	f7ff fda7 	bl	800297c <MCAL_GPIO_init>
				break;
 8002e2e:	e016      	b.n	8002e5e <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <MCAL_SET_GP_TIMx_GPIO+0x350>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002e36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4820      	ldr	r0, [pc, #128]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002e3e:	f7ff fd9d 	bl	800297c <MCAL_GPIO_init>
				break;
 8002e42:	e00c      	b.n	8002e5e <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <MCAL_SET_GP_TIMx_GPIO+0x354>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8002e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481b      	ldr	r0, [pc, #108]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002e52:	f7ff fd93 	bl	800297c <MCAL_GPIO_init>
				break;
 8002e56:	e002      	b.n	8002e5e <MCAL_SET_GP_TIMx_GPIO+0x2de>
				ERROR_HANDLER();
 8002e58:	f7ff faa0 	bl	800239c <ERROR_HANDLER>
			break;
 8002e5c:	e069      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002e5e:	e068      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8002e60:	78bb      	ldrb	r3, [r7, #2]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d855      	bhi.n	8002f14 <MCAL_SET_GP_TIMx_GPIO+0x394>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <MCAL_SET_GP_TIMx_GPIO+0x2f0>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002eed 	.word	0x08002eed
 8002e7c:	08002f01 	.word	0x08002f01
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8002e8e:	f7ff fd75 	bl	800297c <MCAL_GPIO_init>
					break;
 8002e92:	e042      	b.n	8002f1a <MCAL_SET_GP_TIMx_GPIO+0x39a>
 8002e94:	08004ce4 	.word	0x08004ce4
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	08004ce8 	.word	0x08004ce8
 8002ea0:	08004cec 	.word	0x08004cec
 8002ea4:	08004cf0 	.word	0x08004cf0
 8002ea8:	08004cf4 	.word	0x08004cf4
 8002eac:	08004cf8 	.word	0x08004cf8
 8002eb0:	08004cfc 	.word	0x08004cfc
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	08004d00 	.word	0x08004d00
 8002ebc:	08004d04 	.word	0x08004d04
 8002ec0:	40010c00 	.word	0x40010c00
 8002ec4:	08004d08 	.word	0x08004d08
 8002ec8:	08004d0c 	.word	0x08004d0c
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	08004d10 	.word	0x08004d10
 8002ed4:	08004d14 	.word	0x08004d14
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <MCAL_SET_GP_TIMx_GPIO+0x3bc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002ede:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4816      	ldr	r0, [pc, #88]	; (8002f40 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8002ee6:	f7ff fd49 	bl	800297c <MCAL_GPIO_init>
					break;
 8002eea:	e016      	b.n	8002f1a <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MCAL_SET_GP_TIMx_GPIO+0x3c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002ef2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4811      	ldr	r0, [pc, #68]	; (8002f40 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8002efa:	f7ff fd3f 	bl	800297c <MCAL_GPIO_init>
					break;
 8002efe:	e00c      	b.n	8002f1a <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MCAL_SET_GP_TIMx_GPIO+0x3c8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8002f06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8002f0e:	f7ff fd35 	bl	800297c <MCAL_GPIO_init>
					break;
 8002f12:	e002      	b.n	8002f1a <MCAL_SET_GP_TIMx_GPIO+0x39a>
					ERROR_HANDLER();
 8002f14:	f7ff fa42 	bl	800239c <ERROR_HANDLER>
				break;
 8002f18:	e00b      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8002f1a:	e00a      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8002f1c:	bf00      	nop
 8002f1e:	e008      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8002f20:	bf00      	nop
 8002f22:	e006      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8002f30:	bf00      	nop
		//////////



	}
}
 8002f32:	bf00      	nop
 8002f34:	3770      	adds	r7, #112	; 0x70
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08004d0c 	.word	0x08004d0c
 8002f40:	40010c00 	.word	0x40010c00
 8002f44:	08004d18 	.word	0x08004d18
 8002f48:	08004d1c 	.word	0x08004d1c

08002f4c <GP_TIMx__CTC_change>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting of global timer and PWM Or CTC sitting
 * @param [out] - WAVE
 * @retval -
 * Note-
 */
void GP_TIMx__CTC_change(GP_TIMx_REG* TIMx,uint8_t ch_num,uint16_t ccr_val){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	803b      	strh	r3, [r7, #0]
	switch(ch_num){
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d81b      	bhi.n	8002f9c <GP_TIMx__CTC_change+0x50>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <GP_TIMx__CTC_change+0x20>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f85 	.word	0x08002f85
 8002f74:	08002f8d 	.word	0x08002f8d
 8002f78:	08002f95 	.word	0x08002f95
	case 1:
		TIMx->CCR1=ccr_val;
 8002f7c:	883a      	ldrh	r2, [r7, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002f82:	e00e      	b.n	8002fa2 <GP_TIMx__CTC_change+0x56>
	case 2:
		TIMx->CCR2=ccr_val;
 8002f84:	883a      	ldrh	r2, [r7, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 8002f8a:	e00a      	b.n	8002fa2 <GP_TIMx__CTC_change+0x56>
	case 3:
		TIMx->CCR3=ccr_val;
 8002f8c:	883a      	ldrh	r2, [r7, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c


		break;
 8002f92:	e006      	b.n	8002fa2 <GP_TIMx__CTC_change+0x56>
	case 4:
		TIMx->CCR4=ccr_val;
 8002f94:	883a      	ldrh	r2, [r7, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40


		break;
 8002f9a:	e002      	b.n	8002fa2 <GP_TIMx__CTC_change+0x56>
	default:
		GP_ERROR_HANDLER();
 8002f9c:	f7ff fdec 	bl	8002b78 <GP_ERROR_HANDLER>
		break;
 8002fa0:	bf00      	nop

	}
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop

08002fac <GP_TIMx__CTC_start>:
void GP_TIMx__CTC_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_CTC_config* CTC_Sitting){
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==PWM ||Sitting->mode==CTC ){
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	7a5b      	ldrb	r3, [r3, #9]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d004      	beq.n	8002fca <GP_TIMx__CTC_start+0x1e>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	7a5b      	ldrb	r3, [r3, #9]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 85bd 	bne.w	8003b44 <GP_TIMx__CTC_start+0xb98>
		g_GP_TIMX=TIMx;
 8002fca:	4a9c      	ldr	r2, [pc, #624]	; (800323c <GP_TIMx__CTC_start+0x290>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6013      	str	r3, [r2, #0]
//		GP_TIMx_Deint(TIMx);

		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d10c      	bne.n	8002ff2 <GP_TIMx__CTC_start+0x46>
 8002fd8:	4b99      	ldr	r3, [pc, #612]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4a98      	ldr	r2, [pc, #608]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	61d3      	str	r3, [r2, #28]
 8002fe4:	4a97      	ldr	r2, [pc, #604]	; (8003244 <GP_TIMx__CTC_start+0x298>)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4614      	mov	r4, r2
 8002fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ff0:	e024      	b.n	800303c <GP_TIMx__CTC_start+0x90>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a94      	ldr	r2, [pc, #592]	; (8003248 <GP_TIMx__CTC_start+0x29c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10e      	bne.n	8003018 <GP_TIMx__CTC_start+0x6c>
 8002ffa:	4b91      	ldr	r3, [pc, #580]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a90      	ldr	r2, [pc, #576]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	61d3      	str	r3, [r2, #28]
 8003006:	4b8f      	ldr	r3, [pc, #572]	; (8003244 <GP_TIMx__CTC_start+0x298>)
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	f103 0410 	add.w	r4, r3, #16
 800300e:	4613      	mov	r3, r2
 8003010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003016:	e011      	b.n	800303c <GP_TIMx__CTC_start+0x90>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a8c      	ldr	r2, [pc, #560]	; (800324c <GP_TIMx__CTC_start+0x2a0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10d      	bne.n	800303c <GP_TIMx__CTC_start+0x90>
 8003020:	4b87      	ldr	r3, [pc, #540]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	4a86      	ldr	r2, [pc, #536]	; (8003240 <GP_TIMx__CTC_start+0x294>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	61d3      	str	r3, [r2, #28]
 800302c:	4b85      	ldr	r3, [pc, #532]	; (8003244 <GP_TIMx__CTC_start+0x298>)
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f103 0420 	add.w	r4, r3, #32
 8003034:	4613      	mov	r3, r2
 8003036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	885b      	ldrh	r3, [r3, #2]
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIMx->CR1.BIT_NAME.ARPE=0;
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	f36f 13c7 	bfc	r3, #7, #1
 8003058:	6013      	str	r3, [r2, #0]


		if(Sitting->TIME_RCR)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	889b      	ldrh	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <GP_TIMx__CTC_start+0xc0>
			TIMx->RCR=Sitting->TIME_RCR;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
– Write OCxM = 011 to toggle OCx output pin when CNT matches CCRx
– Write OCxPE = 0 to disable preload register
– Write CCxP = 0 to select active high polarity
– Write CCxE = 1 to enable the output
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register.*/
		switch(CTC_Sitting->CTC_MODE){
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	2b07      	cmp	r3, #7
 8003072:	f200 84d7 	bhi.w	8003a24 <GP_TIMx__CTC_start+0xa78>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <GP_TIMx__CTC_start+0xd0>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800309d 	.word	0x0800309d
 8003080:	0800311f 	.word	0x0800311f
 8003084:	080032ff 	.word	0x080032ff
 8003088:	080034c9 	.word	0x080034c9
 800308c:	08003a25 	.word	0x08003a25
 8003090:	08003a25 	.word	0x08003a25
 8003094:	08003695 	.word	0x08003695
 8003098:	08003861 	.word	0x08003861
		// IN CASE I NEED TO SWITCH TO FROZEN
		case Frozen:
			switch(CTC_Sitting->CHx_num){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d836      	bhi.n	8003114 <GP_TIMx__CTC_start+0x168>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <GP_TIMx__CTC_start+0x100>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030d3 	.word	0x080030d3
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080030ff 	.word	0x080030ff
			case 1:
				TIMx->CCMR1.Compare_BIT_NAME.OC1M=Frozen;
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6993      	ldr	r3, [r2, #24]
 80030c0:	f36f 1306 	bfc	r3, #4, #3
 80030c4:	6193      	str	r3, [r2, #24]
				MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 80030c6:	2201      	movs	r2, #1
 80030c8:	2101      	movs	r1, #1
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff fd58 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

				break;
 80030d0:	e023      	b.n	800311a <GP_TIMx__CTC_start+0x16e>
			case 2:
				TIMx->CCMR1.Compare_BIT_NAME.OC2M=Frozen;
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6993      	ldr	r3, [r2, #24]
 80030d6:	f36f 330e 	bfc	r3, #12, #3
 80030da:	6193      	str	r3, [r2, #24]
				MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 80030dc:	2202      	movs	r2, #2
 80030de:	2101      	movs	r1, #1
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fd4d 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

				break;
 80030e6:	e018      	b.n	800311a <GP_TIMx__CTC_start+0x16e>
			case 3:
				TIMx->CCMR2.Compare_BIT_NAME.OC3M=Frozen;
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	69d3      	ldr	r3, [r2, #28]
 80030ec:	f36f 1306 	bfc	r3, #4, #3
 80030f0:	61d3      	str	r3, [r2, #28]
				MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 80030f2:	2203      	movs	r2, #3
 80030f4:	2101      	movs	r1, #1
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fd42 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

				break;
 80030fc:	e00d      	b.n	800311a <GP_TIMx__CTC_start+0x16e>
			case 4:
				TIMx->CCMR2.Compare_BIT_NAME.OC4M=Frozen;
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	69d3      	ldr	r3, [r2, #28]
 8003102:	f36f 330e 	bfc	r3, #12, #3
 8003106:	61d3      	str	r3, [r2, #28]
				MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 8003108:	2204      	movs	r2, #4
 800310a:	2101      	movs	r1, #1
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff fd37 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

				break;
 8003112:	e002      	b.n	800311a <GP_TIMx__CTC_start+0x16e>
			default:
				GP_ERROR_HANDLER();
 8003114:	f7ff fd30 	bl	8002b78 <GP_ERROR_HANDLER>
				break;
 8003118:	bf00      	nop

			}
			break;
 800311a:	f000 bc86 	b.w	8003a2a <GP_TIMx__CTC_start+0xa7e>

			case active:
				switch(CTC_Sitting->CHx_num){
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	2b03      	cmp	r3, #3
 8003126:	f200 80e6 	bhi.w	80032f6 <GP_TIMx__CTC_start+0x34a>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <GP_TIMx__CTC_start+0x184>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003141 	.word	0x08003141
 8003134:	080031a9 	.word	0x080031a9
 8003138:	08003211 	.word	0x08003211
 800313c:	0800328f 	.word	0x0800328f
				case 1:
					TIMx->CCR1=Sitting->TIME_CCR;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	88db      	ldrh	r3, [r3, #6]
 8003144:	461a      	mov	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
					TIMx->CCMR1.Compare_BIT_NAME.OC1M=active;
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	6993      	ldr	r3, [r2, #24]
 800314e:	2101      	movs	r1, #1
 8003150:	f361 1306 	bfi	r3, r1, #4, #3
 8003154:	6193      	str	r3, [r2, #24]
					//if the preload > 0 so enable the OC1PE
					if(Sitting->TIME_RCR){
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	889b      	ldrh	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <GP_TIMx__CTC_start+0x1be>
						TIMx->CCMR1.Compare_BIT_NAME.OC1PE=1;
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	6993      	ldr	r3, [r2, #24]
 8003162:	f043 0308 	orr.w	r3, r3, #8
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	e004      	b.n	8003174 <GP_TIMx__CTC_start+0x1c8>
					}else{
						TIMx->CCMR1.Compare_BIT_NAME.OC1PE=0;
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6993      	ldr	r3, [r2, #24]
 800316e:	f36f 03c3 	bfc	r3, #3, #1
 8003172:	6193      	str	r3, [r2, #24]
					}
					TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->CTC_POL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	789b      	ldrb	r3, [r3, #2]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	b2d9      	uxtb	r1, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6a13      	ldr	r3, [r2, #32]
 8003182:	f361 0341 	bfi	r3, r1, #1, #1
 8003186:	6213      	str	r3, [r2, #32]
					//			CC1S	  00: CC1 channel is configured as output
					TIMx->CCMR1.Compare_BIT_NAME.CC1S=0;
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	6993      	ldr	r3, [r2, #24]
 800318c:	f36f 0301 	bfc	r3, #0, #2
 8003190:	6193      	str	r3, [r2, #24]
					//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

					TIMx->CCER.BIT_NAME.CC1E=1;
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6a13      	ldr	r3, [r2, #32]
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
					MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 800319c:	2201      	movs	r2, #1
 800319e:	2101      	movs	r1, #1
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fced 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

					break;
 80031a6:	e0a9      	b.n	80032fc <GP_TIMx__CTC_start+0x350>
				case 2:
					TIMx->CCR2=Sitting->TIME_CCR;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	88db      	ldrh	r3, [r3, #6]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
					TIMx->CCMR1.Compare_BIT_NAME.OC2M=active;
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6993      	ldr	r3, [r2, #24]
 80031b6:	2101      	movs	r1, #1
 80031b8:	f361 330e 	bfi	r3, r1, #12, #3
 80031bc:	6193      	str	r3, [r2, #24]
					//if the preload > 0 so enable the OC1PE
					if(Sitting->TIME_RCR){
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	889b      	ldrh	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <GP_TIMx__CTC_start+0x226>
						TIMx->CCMR1.Compare_BIT_NAME.OC2PE=1;
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	6993      	ldr	r3, [r2, #24]
 80031ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ce:	6193      	str	r3, [r2, #24]
 80031d0:	e004      	b.n	80031dc <GP_TIMx__CTC_start+0x230>
					}else{
						TIMx->CCMR1.Compare_BIT_NAME.OC2PE=0;
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	6993      	ldr	r3, [r2, #24]
 80031d6:	f36f 23cb 	bfc	r3, #11, #1
 80031da:	6193      	str	r3, [r2, #24]
					}
					TIMx->CCER.BIT_NAME.CC2P=CTC_Sitting->CTC_POL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	789b      	ldrb	r3, [r3, #2]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	b2d9      	uxtb	r1, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6a13      	ldr	r3, [r2, #32]
 80031ea:	f361 1345 	bfi	r3, r1, #5, #1
 80031ee:	6213      	str	r3, [r2, #32]
					//			CC1S	  00: CC1 channel is configured as output
					TIMx->CCMR1.Compare_BIT_NAME.CC2S=0;
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6993      	ldr	r3, [r2, #24]
 80031f4:	f36f 2309 	bfc	r3, #8, #2
 80031f8:	6193      	str	r3, [r2, #24]
					//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

					TIMx->CCER.BIT_NAME.CC2E=1;
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	6a13      	ldr	r3, [r2, #32]
 80031fe:	f043 0310 	orr.w	r3, r3, #16
 8003202:	6213      	str	r3, [r2, #32]
					MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 8003204:	2202      	movs	r2, #2
 8003206:	2101      	movs	r1, #1
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fcb9 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

					break;
 800320e:	e075      	b.n	80032fc <GP_TIMx__CTC_start+0x350>
				case 3:
					TIMx->CCR3=Sitting->TIME_CCR;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	88db      	ldrh	r3, [r3, #6]
 8003214:	461a      	mov	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
					TIMx->CCMR2.Compare_BIT_NAME.OC3M=active;
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	69d3      	ldr	r3, [r2, #28]
 800321e:	2101      	movs	r1, #1
 8003220:	f361 1306 	bfi	r3, r1, #4, #3
 8003224:	61d3      	str	r3, [r2, #28]
					//if the preload > 0 so enable the OC1PE
					if(Sitting->TIME_RCR){
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <GP_TIMx__CTC_start+0x2a4>
						TIMx->CCMR2.Compare_BIT_NAME.OC3PE=1;
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	69d3      	ldr	r3, [r2, #28]
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	e00f      	b.n	800325a <GP_TIMx__CTC_start+0x2ae>
 800323a:	bf00      	nop
 800323c:	2000228c 	.word	0x2000228c
 8003240:	40021000 	.word	0x40021000
 8003244:	2000225c 	.word	0x2000225c
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
					}else{
						TIMx->CCMR2.Compare_BIT_NAME.OC3PE=0;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	69d3      	ldr	r3, [r2, #28]
 8003254:	f36f 03c3 	bfc	r3, #3, #1
 8003258:	61d3      	str	r3, [r2, #28]
					}
					TIMx->CCER.BIT_NAME.CC3P=CTC_Sitting->CTC_POL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	6a13      	ldr	r3, [r2, #32]
 8003268:	f361 2349 	bfi	r3, r1, #9, #1
 800326c:	6213      	str	r3, [r2, #32]
					//			CC1S	  00: CC1 channel is configured as output
					TIMx->CCMR2.Compare_BIT_NAME.CC3S=0;
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	69d3      	ldr	r3, [r2, #28]
 8003272:	f36f 0301 	bfc	r3, #0, #2
 8003276:	61d3      	str	r3, [r2, #28]
					//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

					TIMx->CCER.BIT_NAME.CC3E=1;
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	6a13      	ldr	r3, [r2, #32]
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6213      	str	r3, [r2, #32]
					MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 8003282:	2203      	movs	r2, #3
 8003284:	2101      	movs	r1, #1
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fc7a 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

					break;
 800328c:	e036      	b.n	80032fc <GP_TIMx__CTC_start+0x350>
				case 4:
					TIMx->CCR4=Sitting->TIME_CCR;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	88db      	ldrh	r3, [r3, #6]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
					TIMx->CCMR2.Compare_BIT_NAME.OC4M=active;
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	69d3      	ldr	r3, [r2, #28]
 800329c:	2101      	movs	r1, #1
 800329e:	f361 330e 	bfi	r3, r1, #12, #3
 80032a2:	61d3      	str	r3, [r2, #28]
					//if the preload > 0 so enable the OC1PE
					if(Sitting->TIME_RCR){
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	889b      	ldrh	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <GP_TIMx__CTC_start+0x30c>
						TIMx->CCMR2.Compare_BIT_NAME.OC4PE=1;
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	69d3      	ldr	r3, [r2, #28]
 80032b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032b4:	61d3      	str	r3, [r2, #28]
 80032b6:	e004      	b.n	80032c2 <GP_TIMx__CTC_start+0x316>
					}else{
						TIMx->CCMR2.Compare_BIT_NAME.OC4PE=0;
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	69d3      	ldr	r3, [r2, #28]
 80032bc:	f36f 23cb 	bfc	r3, #11, #1
 80032c0:	61d3      	str	r3, [r2, #28]
					}
					TIMx->CCER.BIT_NAME.CC4P=CTC_Sitting->CTC_POL;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	789b      	ldrb	r3, [r3, #2]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	b2d9      	uxtb	r1, r3
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	6a13      	ldr	r3, [r2, #32]
 80032d0:	f361 334d 	bfi	r3, r1, #13, #1
 80032d4:	6213      	str	r3, [r2, #32]
					//			CC1S	  00: CC1 channel is configured as output
					TIMx->CCMR2.Compare_BIT_NAME.CC4S=0;
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	69d3      	ldr	r3, [r2, #28]
 80032da:	f36f 2309 	bfc	r3, #8, #2
 80032de:	61d3      	str	r3, [r2, #28]
					//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

					TIMx->CCER.BIT_NAME.CC4E=1;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	6a13      	ldr	r3, [r2, #32]
 80032e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e8:	6213      	str	r3, [r2, #32]
					MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 80032ea:	2204      	movs	r2, #4
 80032ec:	2101      	movs	r1, #1
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7ff fc46 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

					break;
 80032f4:	e002      	b.n	80032fc <GP_TIMx__CTC_start+0x350>
				default:
					GP_ERROR_HANDLER();
 80032f6:	f7ff fc3f 	bl	8002b78 <GP_ERROR_HANDLER>
					break;
 80032fa:	bf00      	nop

				}
				break;
 80032fc:	e395      	b.n	8003a2a <GP_TIMx__CTC_start+0xa7e>




				case inactive:
					switch(CTC_Sitting->CHx_num){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	3b01      	subs	r3, #1
 8003304:	2b03      	cmp	r3, #3
 8003306:	f200 80db 	bhi.w	80034c0 <GP_TIMx__CTC_start+0x514>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <GP_TIMx__CTC_start+0x364>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003321 	.word	0x08003321
 8003314:	08003389 	.word	0x08003389
 8003318:	080033f1 	.word	0x080033f1
 800331c:	08003459 	.word	0x08003459
					case 1:
						TIMx->CCR1=Sitting->TIME_CCR;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	88db      	ldrh	r3, [r3, #6]
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
						TIMx->CCMR1.Compare_BIT_NAME.OC1M=inactive;
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6993      	ldr	r3, [r2, #24]
 800332e:	2102      	movs	r1, #2
 8003330:	f361 1306 	bfi	r3, r1, #4, #3
 8003334:	6193      	str	r3, [r2, #24]
						//if the preload > 0 so enable the OC1PE
						if(Sitting->TIME_RCR){
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	889b      	ldrh	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <GP_TIMx__CTC_start+0x39e>
							TIMx->CCMR1.Compare_BIT_NAME.OC1PE=1;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6993      	ldr	r3, [r2, #24]
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	e004      	b.n	8003354 <GP_TIMx__CTC_start+0x3a8>
						}else{
							TIMx->CCMR1.Compare_BIT_NAME.OC1PE=0;
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	6993      	ldr	r3, [r2, #24]
 800334e:	f36f 03c3 	bfc	r3, #3, #1
 8003352:	6193      	str	r3, [r2, #24]
						}
						TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->CTC_POL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	789b      	ldrb	r3, [r3, #2]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	b2d9      	uxtb	r1, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	6a13      	ldr	r3, [r2, #32]
 8003362:	f361 0341 	bfi	r3, r1, #1, #1
 8003366:	6213      	str	r3, [r2, #32]
						//			CC1S	  00: CC1 channel is configured as output
						TIMx->CCMR1.Compare_BIT_NAME.CC1S=0;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6993      	ldr	r3, [r2, #24]
 800336c:	f36f 0301 	bfc	r3, #0, #2
 8003370:	6193      	str	r3, [r2, #24]
						//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

						TIMx->CCER.BIT_NAME.CC1E=1;
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6a13      	ldr	r3, [r2, #32]
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6213      	str	r3, [r2, #32]
						MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 800337c:	2201      	movs	r2, #1
 800337e:	2101      	movs	r1, #1
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fbfd 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

						break;
 8003386:	e09e      	b.n	80034c6 <GP_TIMx__CTC_start+0x51a>
					case 2:
						TIMx->CCR2=Sitting->TIME_CCR;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	88db      	ldrh	r3, [r3, #6]
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
						TIMx->CCMR1.Compare_BIT_NAME.OC2M=inactive;
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6993      	ldr	r3, [r2, #24]
 8003396:	2102      	movs	r1, #2
 8003398:	f361 330e 	bfi	r3, r1, #12, #3
 800339c:	6193      	str	r3, [r2, #24]
						//if the preload > 0 so enable the OC1PE
						if(Sitting->TIME_RCR){
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	889b      	ldrh	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <GP_TIMx__CTC_start+0x406>
							TIMx->CCMR1.Compare_BIT_NAME.OC2PE=1;
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	6993      	ldr	r3, [r2, #24]
 80033aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ae:	6193      	str	r3, [r2, #24]
 80033b0:	e004      	b.n	80033bc <GP_TIMx__CTC_start+0x410>
						}else{
							TIMx->CCMR1.Compare_BIT_NAME.OC2PE=0;
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6993      	ldr	r3, [r2, #24]
 80033b6:	f36f 23cb 	bfc	r3, #11, #1
 80033ba:	6193      	str	r3, [r2, #24]
						}
						TIMx->CCER.BIT_NAME.CC2P=CTC_Sitting->CTC_POL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	789b      	ldrb	r3, [r3, #2]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	b2d9      	uxtb	r1, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	6a13      	ldr	r3, [r2, #32]
 80033ca:	f361 1345 	bfi	r3, r1, #5, #1
 80033ce:	6213      	str	r3, [r2, #32]
						//			CC1S	  00: CC1 channel is configured as output
						TIMx->CCMR1.Compare_BIT_NAME.CC2S=0;
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	6993      	ldr	r3, [r2, #24]
 80033d4:	f36f 2309 	bfc	r3, #8, #2
 80033d8:	6193      	str	r3, [r2, #24]
						//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

						TIMx->CCER.BIT_NAME.CC2E=1;
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6a13      	ldr	r3, [r2, #32]
 80033de:	f043 0310 	orr.w	r3, r3, #16
 80033e2:	6213      	str	r3, [r2, #32]
						MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 80033e4:	2202      	movs	r2, #2
 80033e6:	2101      	movs	r1, #1
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fbc9 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

						break;
 80033ee:	e06a      	b.n	80034c6 <GP_TIMx__CTC_start+0x51a>
					case 3:
						TIMx->CCR3=Sitting->TIME_CCR;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	88db      	ldrh	r3, [r3, #6]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	63da      	str	r2, [r3, #60]	; 0x3c
						TIMx->CCMR2.Compare_BIT_NAME.OC3M=inactive;
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	69d3      	ldr	r3, [r2, #28]
 80033fe:	2102      	movs	r1, #2
 8003400:	f361 1306 	bfi	r3, r1, #4, #3
 8003404:	61d3      	str	r3, [r2, #28]
						//if the preload > 0 so enable the OC1PE
						if(Sitting->TIME_RCR){
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	889b      	ldrh	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <GP_TIMx__CTC_start+0x46e>
							TIMx->CCMR2.Compare_BIT_NAME.OC3PE=1;
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	69d3      	ldr	r3, [r2, #28]
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	e004      	b.n	8003424 <GP_TIMx__CTC_start+0x478>
						}else{
							TIMx->CCMR2.Compare_BIT_NAME.OC3PE=0;
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	69d3      	ldr	r3, [r2, #28]
 800341e:	f36f 03c3 	bfc	r3, #3, #1
 8003422:	61d3      	str	r3, [r2, #28]
						}
						TIMx->CCER.BIT_NAME.CC3P=CTC_Sitting->CTC_POL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	789b      	ldrb	r3, [r3, #2]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	b2d9      	uxtb	r1, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6a13      	ldr	r3, [r2, #32]
 8003432:	f361 2349 	bfi	r3, r1, #9, #1
 8003436:	6213      	str	r3, [r2, #32]
						//			CC1S	  00: CC1 channel is configured as output
						TIMx->CCMR2.Compare_BIT_NAME.CC3S=0;
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	69d3      	ldr	r3, [r2, #28]
 800343c:	f36f 0301 	bfc	r3, #0, #2
 8003440:	61d3      	str	r3, [r2, #28]
						//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

						TIMx->CCER.BIT_NAME.CC3E=1;
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6a13      	ldr	r3, [r2, #32]
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6213      	str	r3, [r2, #32]
						MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 800344c:	2203      	movs	r2, #3
 800344e:	2101      	movs	r1, #1
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fb95 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

						break;
 8003456:	e036      	b.n	80034c6 <GP_TIMx__CTC_start+0x51a>
					case 4:
						TIMx->CCR4=Sitting->TIME_CCR;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	88db      	ldrh	r3, [r3, #6]
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
						TIMx->CCMR2.Compare_BIT_NAME.OC4M=inactive;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	69d3      	ldr	r3, [r2, #28]
 8003466:	2102      	movs	r1, #2
 8003468:	f361 330e 	bfi	r3, r1, #12, #3
 800346c:	61d3      	str	r3, [r2, #28]
						//if the preload > 0 so enable the OC1PE
						if(Sitting->TIME_RCR){
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	889b      	ldrh	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <GP_TIMx__CTC_start+0x4d6>
							TIMx->CCMR2.Compare_BIT_NAME.OC4PE=1;
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	69d3      	ldr	r3, [r2, #28]
 800347a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	e004      	b.n	800348c <GP_TIMx__CTC_start+0x4e0>
						}else{
							TIMx->CCMR2.Compare_BIT_NAME.OC4PE=0;
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	69d3      	ldr	r3, [r2, #28]
 8003486:	f36f 23cb 	bfc	r3, #11, #1
 800348a:	61d3      	str	r3, [r2, #28]
						}
						TIMx->CCER.BIT_NAME.CC4P=CTC_Sitting->CTC_POL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	789b      	ldrb	r3, [r3, #2]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	b2d9      	uxtb	r1, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	6a13      	ldr	r3, [r2, #32]
 800349a:	f361 334d 	bfi	r3, r1, #13, #1
 800349e:	6213      	str	r3, [r2, #32]
						//			CC1S	  00: CC1 channel is configured as output
						TIMx->CCMR2.Compare_BIT_NAME.CC4S=0;
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	69d3      	ldr	r3, [r2, #28]
 80034a4:	f36f 2309 	bfc	r3, #8, #2
 80034a8:	61d3      	str	r3, [r2, #28]
						//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

						TIMx->CCER.BIT_NAME.CC4E=1;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6a13      	ldr	r3, [r2, #32]
 80034ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b2:	6213      	str	r3, [r2, #32]
						MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 80034b4:	2204      	movs	r2, #4
 80034b6:	2101      	movs	r1, #1
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fb61 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

						break;
 80034be:	e002      	b.n	80034c6 <GP_TIMx__CTC_start+0x51a>
					default:
						GP_ERROR_HANDLER();
 80034c0:	f7ff fb5a 	bl	8002b78 <GP_ERROR_HANDLER>
						break;
 80034c4:	bf00      	nop

					}
					break;
 80034c6:	e2b0      	b.n	8003a2a <GP_TIMx__CTC_start+0xa7e>
					case Toggle:
						switch(CTC_Sitting->CHx_num){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	f200 80dc 	bhi.w	800368c <GP_TIMx__CTC_start+0x6e0>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <GP_TIMx__CTC_start+0x530>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	08003555 	.word	0x08003555
 80034e4:	080035bd 	.word	0x080035bd
 80034e8:	08003625 	.word	0x08003625
						case 1:
							TIMx->CCR1=Sitting->TIME_CCR;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	88db      	ldrh	r3, [r3, #6]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34
							TIMx->CCMR1.Compare_BIT_NAME.OC1M=Toggle;
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6993      	ldr	r3, [r2, #24]
 80034fa:	2103      	movs	r1, #3
 80034fc:	f361 1306 	bfi	r3, r1, #4, #3
 8003500:	6193      	str	r3, [r2, #24]
							//if the preload > 0 so enable the OC1PE
							if(Sitting->TIME_RCR){
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <GP_TIMx__CTC_start+0x56a>
								TIMx->CCMR1.Compare_BIT_NAME.OC1PE=1;
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	6993      	ldr	r3, [r2, #24]
 800350e:	f043 0308 	orr.w	r3, r3, #8
 8003512:	6193      	str	r3, [r2, #24]
 8003514:	e004      	b.n	8003520 <GP_TIMx__CTC_start+0x574>
							}else{
								TIMx->CCMR1.Compare_BIT_NAME.OC1PE=0;
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6993      	ldr	r3, [r2, #24]
 800351a:	f36f 03c3 	bfc	r3, #3, #1
 800351e:	6193      	str	r3, [r2, #24]
							}
							TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->CTC_POL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	789b      	ldrb	r3, [r3, #2]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	b2d9      	uxtb	r1, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	6a13      	ldr	r3, [r2, #32]
 800352e:	f361 0341 	bfi	r3, r1, #1, #1
 8003532:	6213      	str	r3, [r2, #32]
							//			CC1S	  00: CC1 channel is configured as output
							TIMx->CCMR1.Compare_BIT_NAME.CC1S=0;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	6993      	ldr	r3, [r2, #24]
 8003538:	f36f 0301 	bfc	r3, #0, #2
 800353c:	6193      	str	r3, [r2, #24]
							//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

							TIMx->CCER.BIT_NAME.CC1E=1;
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6a13      	ldr	r3, [r2, #32]
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6213      	str	r3, [r2, #32]
							MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 8003548:	2201      	movs	r2, #1
 800354a:	2101      	movs	r1, #1
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fb17 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

							break;
 8003552:	e09e      	b.n	8003692 <GP_TIMx__CTC_start+0x6e6>
						case 2:
							TIMx->CCR2=Sitting->TIME_CCR;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	88db      	ldrh	r3, [r3, #6]
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
							TIMx->CCMR1.Compare_BIT_NAME.OC2M=Toggle;
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6993      	ldr	r3, [r2, #24]
 8003562:	2103      	movs	r1, #3
 8003564:	f361 330e 	bfi	r3, r1, #12, #3
 8003568:	6193      	str	r3, [r2, #24]
							//if the preload > 0 so enable the OC1PE
							if(Sitting->TIME_RCR){
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	889b      	ldrh	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <GP_TIMx__CTC_start+0x5d2>
								TIMx->CCMR1.Compare_BIT_NAME.OC2PE=1;
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6993      	ldr	r3, [r2, #24]
 8003576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800357a:	6193      	str	r3, [r2, #24]
 800357c:	e004      	b.n	8003588 <GP_TIMx__CTC_start+0x5dc>
							}else{
								TIMx->CCMR1.Compare_BIT_NAME.OC2PE=0;
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	6993      	ldr	r3, [r2, #24]
 8003582:	f36f 23cb 	bfc	r3, #11, #1
 8003586:	6193      	str	r3, [r2, #24]
							}
							TIMx->CCER.BIT_NAME.CC2P=CTC_Sitting->CTC_POL;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6a13      	ldr	r3, [r2, #32]
 8003596:	f361 1345 	bfi	r3, r1, #5, #1
 800359a:	6213      	str	r3, [r2, #32]
							//			CC1S	  00: CC1 channel is configured as output
							TIMx->CCMR1.Compare_BIT_NAME.CC2S=0;
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6993      	ldr	r3, [r2, #24]
 80035a0:	f36f 2309 	bfc	r3, #8, #2
 80035a4:	6193      	str	r3, [r2, #24]
							//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

							TIMx->CCER.BIT_NAME.CC2E=1;
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	6a13      	ldr	r3, [r2, #32]
 80035aa:	f043 0310 	orr.w	r3, r3, #16
 80035ae:	6213      	str	r3, [r2, #32]
							MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 80035b0:	2202      	movs	r2, #2
 80035b2:	2101      	movs	r1, #1
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fae3 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

							break;
 80035ba:	e06a      	b.n	8003692 <GP_TIMx__CTC_start+0x6e6>
						case 3:
							TIMx->CCR3=Sitting->TIME_CCR;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	88db      	ldrh	r3, [r3, #6]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c
							TIMx->CCMR2.Compare_BIT_NAME.OC3M=Toggle;
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	69d3      	ldr	r3, [r2, #28]
 80035ca:	2103      	movs	r1, #3
 80035cc:	f361 1306 	bfi	r3, r1, #4, #3
 80035d0:	61d3      	str	r3, [r2, #28]
							//if the preload > 0 so enable the OC1PE
							if(Sitting->TIME_RCR){
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	889b      	ldrh	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <GP_TIMx__CTC_start+0x63a>
								TIMx->CCMR2.Compare_BIT_NAME.OC3PE=1;
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	69d3      	ldr	r3, [r2, #28]
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	e004      	b.n	80035f0 <GP_TIMx__CTC_start+0x644>
							}else{
								TIMx->CCMR2.Compare_BIT_NAME.OC3PE=0;
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	69d3      	ldr	r3, [r2, #28]
 80035ea:	f36f 03c3 	bfc	r3, #3, #1
 80035ee:	61d3      	str	r3, [r2, #28]
							}
							TIMx->CCER.BIT_NAME.CC3P=CTC_Sitting->CTC_POL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	789b      	ldrb	r3, [r3, #2]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	b2d9      	uxtb	r1, r3
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	6a13      	ldr	r3, [r2, #32]
 80035fe:	f361 2349 	bfi	r3, r1, #9, #1
 8003602:	6213      	str	r3, [r2, #32]
							//			CC1S	  00: CC1 channel is configured as output
							TIMx->CCMR2.Compare_BIT_NAME.CC3S=0;
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	69d3      	ldr	r3, [r2, #28]
 8003608:	f36f 0301 	bfc	r3, #0, #2
 800360c:	61d3      	str	r3, [r2, #28]
							//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

							TIMx->CCER.BIT_NAME.CC3E=1;
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6a13      	ldr	r3, [r2, #32]
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	6213      	str	r3, [r2, #32]
							MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 8003618:	2203      	movs	r2, #3
 800361a:	2101      	movs	r1, #1
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7ff faaf 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

							break;
 8003622:	e036      	b.n	8003692 <GP_TIMx__CTC_start+0x6e6>
						case 4:
							TIMx->CCR4=Sitting->TIME_CCR;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	88db      	ldrh	r3, [r3, #6]
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
							TIMx->CCMR2.Compare_BIT_NAME.OC4M=Toggle;
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	69d3      	ldr	r3, [r2, #28]
 8003632:	2103      	movs	r1, #3
 8003634:	f361 330e 	bfi	r3, r1, #12, #3
 8003638:	61d3      	str	r3, [r2, #28]
							//if the preload > 0 so enable the OC1PE
							if(Sitting->TIME_RCR){
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	889b      	ldrh	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <GP_TIMx__CTC_start+0x6a2>
								TIMx->CCMR2.Compare_BIT_NAME.OC4PE=1;
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	69d3      	ldr	r3, [r2, #28]
 8003646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	e004      	b.n	8003658 <GP_TIMx__CTC_start+0x6ac>
							}else{
								TIMx->CCMR2.Compare_BIT_NAME.OC4PE=0;
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	69d3      	ldr	r3, [r2, #28]
 8003652:	f36f 23cb 	bfc	r3, #11, #1
 8003656:	61d3      	str	r3, [r2, #28]
							}
							TIMx->CCER.BIT_NAME.CC4P=CTC_Sitting->CTC_POL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	b2d9      	uxtb	r1, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	6a13      	ldr	r3, [r2, #32]
 8003666:	f361 334d 	bfi	r3, r1, #13, #1
 800366a:	6213      	str	r3, [r2, #32]
							//			CC1S	  00: CC1 channel is configured as output
							TIMx->CCMR2.Compare_BIT_NAME.CC4S=0;
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	69d3      	ldr	r3, [r2, #28]
 8003670:	f36f 2309 	bfc	r3, #8, #2
 8003674:	61d3      	str	r3, [r2, #28]
							//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

							TIMx->CCER.BIT_NAME.CC4E=1;
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6a13      	ldr	r3, [r2, #32]
 800367a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367e:	6213      	str	r3, [r2, #32]
							MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 8003680:	2204      	movs	r2, #4
 8003682:	2101      	movs	r1, #1
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fa7b 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

							break;
 800368a:	e002      	b.n	8003692 <GP_TIMx__CTC_start+0x6e6>
						default:
							GP_ERROR_HANDLER();
 800368c:	f7ff fa74 	bl	8002b78 <GP_ERROR_HANDLER>
							break;
 8003690:	bf00      	nop

						}
						break;
 8003692:	e1ca      	b.n	8003a2a <GP_TIMx__CTC_start+0xa7e>
						case PWM_AH:
							switch(CTC_Sitting->CHx_num){
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	2b03      	cmp	r3, #3
 800369c:	f200 80dc 	bhi.w	8003858 <GP_TIMx__CTC_start+0x8ac>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <GP_TIMx__CTC_start+0x6fc>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	08003721 	.word	0x08003721
 80036b0:	08003789 	.word	0x08003789
 80036b4:	080037f1 	.word	0x080037f1
							case 1:
								TIMx->CCR1=Sitting->TIME_CCR;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	88db      	ldrh	r3, [r3, #6]
 80036bc:	461a      	mov	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34
								TIMx->CCMR1.Compare_BIT_NAME.OC1M=PWM_AH;
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	6993      	ldr	r3, [r2, #24]
 80036c6:	2106      	movs	r1, #6
 80036c8:	f361 1306 	bfi	r3, r1, #4, #3
 80036cc:	6193      	str	r3, [r2, #24]
								//if the preload > 0 so enable the OC1PE
								if(Sitting->TIME_RCR){
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	889b      	ldrh	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <GP_TIMx__CTC_start+0x736>
									TIMx->CCMR1.Compare_BIT_NAME.OC1PE=1;
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	6993      	ldr	r3, [r2, #24]
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	e004      	b.n	80036ec <GP_TIMx__CTC_start+0x740>
								}else{
									TIMx->CCMR1.Compare_BIT_NAME.OC1PE=0;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6993      	ldr	r3, [r2, #24]
 80036e6:	f36f 03c3 	bfc	r3, #3, #1
 80036ea:	6193      	str	r3, [r2, #24]
								}
								TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->CTC_POL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	b2d9      	uxtb	r1, r3
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6a13      	ldr	r3, [r2, #32]
 80036fa:	f361 0341 	bfi	r3, r1, #1, #1
 80036fe:	6213      	str	r3, [r2, #32]
								//			CC1S	  00: CC1 channel is configured as output
								TIMx->CCMR1.Compare_BIT_NAME.CC1S=0;
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6993      	ldr	r3, [r2, #24]
 8003704:	f36f 0301 	bfc	r3, #0, #2
 8003708:	6193      	str	r3, [r2, #24]
								//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

								TIMx->CCER.BIT_NAME.CC1E=1;
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6a13      	ldr	r3, [r2, #32]
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6213      	str	r3, [r2, #32]
								MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 8003714:	2201      	movs	r2, #1
 8003716:	2101      	movs	r1, #1
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff fa31 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

								break;
 800371e:	e09e      	b.n	800385e <GP_TIMx__CTC_start+0x8b2>
							case 2:
								TIMx->CCR2=Sitting->TIME_CCR;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	88db      	ldrh	r3, [r3, #6]
 8003724:	461a      	mov	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
								TIMx->CCMR1.Compare_BIT_NAME.OC2M=PWM_AH;
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6993      	ldr	r3, [r2, #24]
 800372e:	2106      	movs	r1, #6
 8003730:	f361 330e 	bfi	r3, r1, #12, #3
 8003734:	6193      	str	r3, [r2, #24]
								//if the preload > 0 so enable the OC1PE
								if(Sitting->TIME_RCR){
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	889b      	ldrh	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <GP_TIMx__CTC_start+0x79e>
									TIMx->CCMR1.Compare_BIT_NAME.OC2PE=1;
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6993      	ldr	r3, [r2, #24]
 8003742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	e004      	b.n	8003754 <GP_TIMx__CTC_start+0x7a8>
								}else{
									TIMx->CCMR1.Compare_BIT_NAME.OC2PE=0;
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	6993      	ldr	r3, [r2, #24]
 800374e:	f36f 23cb 	bfc	r3, #11, #1
 8003752:	6193      	str	r3, [r2, #24]
								}
								TIMx->CCER.BIT_NAME.CC2P=CTC_Sitting->CTC_POL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	789b      	ldrb	r3, [r3, #2]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	b2d9      	uxtb	r1, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6a13      	ldr	r3, [r2, #32]
 8003762:	f361 1345 	bfi	r3, r1, #5, #1
 8003766:	6213      	str	r3, [r2, #32]
								//			CC1S	  00: CC1 channel is configured as output
								TIMx->CCMR1.Compare_BIT_NAME.CC2S=0;
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	6993      	ldr	r3, [r2, #24]
 800376c:	f36f 2309 	bfc	r3, #8, #2
 8003770:	6193      	str	r3, [r2, #24]
								//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

								TIMx->CCER.BIT_NAME.CC2E=1;
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6a13      	ldr	r3, [r2, #32]
 8003776:	f043 0310 	orr.w	r3, r3, #16
 800377a:	6213      	str	r3, [r2, #32]
								MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 800377c:	2202      	movs	r2, #2
 800377e:	2101      	movs	r1, #1
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff f9fd 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

								break;
 8003786:	e06a      	b.n	800385e <GP_TIMx__CTC_start+0x8b2>
							case 3:
								TIMx->CCR3=Sitting->TIME_CCR;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	88db      	ldrh	r3, [r3, #6]
 800378c:	461a      	mov	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c
								TIMx->CCMR2.Compare_BIT_NAME.OC3M=PWM_AH;
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	69d3      	ldr	r3, [r2, #28]
 8003796:	2106      	movs	r1, #6
 8003798:	f361 1306 	bfi	r3, r1, #4, #3
 800379c:	61d3      	str	r3, [r2, #28]
								//if the preload > 0 so enable the OC1PE
								if(Sitting->TIME_RCR){
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	889b      	ldrh	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <GP_TIMx__CTC_start+0x806>
									TIMx->CCMR2.Compare_BIT_NAME.OC3PE=1;
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	69d3      	ldr	r3, [r2, #28]
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	61d3      	str	r3, [r2, #28]
 80037b0:	e004      	b.n	80037bc <GP_TIMx__CTC_start+0x810>
								}else{
									TIMx->CCMR2.Compare_BIT_NAME.OC3PE=0;
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	69d3      	ldr	r3, [r2, #28]
 80037b6:	f36f 03c3 	bfc	r3, #3, #1
 80037ba:	61d3      	str	r3, [r2, #28]
								}
								TIMx->CCER.BIT_NAME.CC3P=CTC_Sitting->CTC_POL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	b2d9      	uxtb	r1, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	6a13      	ldr	r3, [r2, #32]
 80037ca:	f361 2349 	bfi	r3, r1, #9, #1
 80037ce:	6213      	str	r3, [r2, #32]
								//			CC1S	  00: CC1 channel is configured as output
								TIMx->CCMR2.Compare_BIT_NAME.CC3S=0;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	69d3      	ldr	r3, [r2, #28]
 80037d4:	f36f 0301 	bfc	r3, #0, #2
 80037d8:	61d3      	str	r3, [r2, #28]
								//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

								TIMx->CCER.BIT_NAME.CC3E=1;
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6a13      	ldr	r3, [r2, #32]
 80037de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e2:	6213      	str	r3, [r2, #32]
								MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 80037e4:	2203      	movs	r2, #3
 80037e6:	2101      	movs	r1, #1
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff f9c9 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

								break;
 80037ee:	e036      	b.n	800385e <GP_TIMx__CTC_start+0x8b2>
							case 4:
								TIMx->CCR4=Sitting->TIME_CCR;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	88db      	ldrh	r3, [r3, #6]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
								TIMx->CCMR2.Compare_BIT_NAME.OC4M=PWM_AH;
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	69d3      	ldr	r3, [r2, #28]
 80037fe:	2106      	movs	r1, #6
 8003800:	f361 330e 	bfi	r3, r1, #12, #3
 8003804:	61d3      	str	r3, [r2, #28]
								//if the preload > 0 so enable the OC1PE
								if(Sitting->TIME_RCR){
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	889b      	ldrh	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <GP_TIMx__CTC_start+0x86e>
									TIMx->CCMR2.Compare_BIT_NAME.OC4PE=1;
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	69d3      	ldr	r3, [r2, #28]
 8003812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	e004      	b.n	8003824 <GP_TIMx__CTC_start+0x878>
								}else{
									TIMx->CCMR2.Compare_BIT_NAME.OC4PE=0;
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	69d3      	ldr	r3, [r2, #28]
 800381e:	f36f 23cb 	bfc	r3, #11, #1
 8003822:	61d3      	str	r3, [r2, #28]
								}
								TIMx->CCER.BIT_NAME.CC4P=CTC_Sitting->CTC_POL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	789b      	ldrb	r3, [r3, #2]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	b2d9      	uxtb	r1, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6a13      	ldr	r3, [r2, #32]
 8003832:	f361 334d 	bfi	r3, r1, #13, #1
 8003836:	6213      	str	r3, [r2, #32]
								//			CC1S	  00: CC1 channel is configured as output
								TIMx->CCMR2.Compare_BIT_NAME.CC4S=0;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	69d3      	ldr	r3, [r2, #28]
 800383c:	f36f 2309 	bfc	r3, #8, #2
 8003840:	61d3      	str	r3, [r2, #28]
								//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

								TIMx->CCER.BIT_NAME.CC4E=1;
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6a13      	ldr	r3, [r2, #32]
 8003846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384a:	6213      	str	r3, [r2, #32]
								MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 800384c:	2204      	movs	r2, #4
 800384e:	2101      	movs	r1, #1
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff f995 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

								break;
 8003856:	e002      	b.n	800385e <GP_TIMx__CTC_start+0x8b2>
							default:
								GP_ERROR_HANDLER();
 8003858:	f7ff f98e 	bl	8002b78 <GP_ERROR_HANDLER>
								break;
 800385c:	bf00      	nop

							}
							break;
 800385e:	e0e4      	b.n	8003a2a <GP_TIMx__CTC_start+0xa7e>
							case PWM_AL:
								switch(CTC_Sitting->CHx_num){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	3b01      	subs	r3, #1
 8003866:	2b03      	cmp	r3, #3
 8003868:	f200 80d8 	bhi.w	8003a1c <GP_TIMx__CTC_start+0xa70>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <GP_TIMx__CTC_start+0x8c8>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003885 	.word	0x08003885
 8003878:	080038eb 	.word	0x080038eb
 800387c:	08003951 	.word	0x08003951
 8003880:	080039b7 	.word	0x080039b7
								case 1:
									TIMx->CCR1=Sitting->TIME_CCR;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	88db      	ldrh	r3, [r3, #6]
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	635a      	str	r2, [r3, #52]	; 0x34
									TIMx->CCMR1.Compare_BIT_NAME.OC1M=PWM_AL;
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6993      	ldr	r3, [r2, #24]
 8003892:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003896:	6193      	str	r3, [r2, #24]
									//if the preload > 0 so enable the OC1PE
									if(Sitting->TIME_RCR){
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	889b      	ldrh	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <GP_TIMx__CTC_start+0x900>
										TIMx->CCMR1.Compare_BIT_NAME.OC1PE=1;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6993      	ldr	r3, [r2, #24]
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	6193      	str	r3, [r2, #24]
 80038aa:	e004      	b.n	80038b6 <GP_TIMx__CTC_start+0x90a>
									}else{
										TIMx->CCMR1.Compare_BIT_NAME.OC1PE=0;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6993      	ldr	r3, [r2, #24]
 80038b0:	f36f 03c3 	bfc	r3, #3, #1
 80038b4:	6193      	str	r3, [r2, #24]
									}
									TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->CTC_POL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	789b      	ldrb	r3, [r3, #2]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2d9      	uxtb	r1, r3
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	6a13      	ldr	r3, [r2, #32]
 80038c4:	f361 0341 	bfi	r3, r1, #1, #1
 80038c8:	6213      	str	r3, [r2, #32]
									//			CC1S	  00: CC1 channel is configured as output
									TIMx->CCMR1.Compare_BIT_NAME.CC1S=0;
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6993      	ldr	r3, [r2, #24]
 80038ce:	f36f 0301 	bfc	r3, #0, #2
 80038d2:	6193      	str	r3, [r2, #24]
									//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

									TIMx->CCER.BIT_NAME.CC1E=1;
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6a13      	ldr	r3, [r2, #32]
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6213      	str	r3, [r2, #32]
									MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,1);
 80038de:	2201      	movs	r2, #1
 80038e0:	2101      	movs	r1, #1
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff f94c 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

									break;
 80038e8:	e09b      	b.n	8003a22 <GP_TIMx__CTC_start+0xa76>
								case 2:
									TIMx->CCR2=Sitting->TIME_CCR;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	88db      	ldrh	r3, [r3, #6]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
									TIMx->CCMR1.Compare_BIT_NAME.OC2M=PWM_AL;
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	6993      	ldr	r3, [r2, #24]
 80038f8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80038fc:	6193      	str	r3, [r2, #24]
									//if the preload > 0 so enable the OC1PE
									if(Sitting->TIME_RCR){
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	889b      	ldrh	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <GP_TIMx__CTC_start+0x966>
										TIMx->CCMR1.Compare_BIT_NAME.OC2PE=1;
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6993      	ldr	r3, [r2, #24]
 800390a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	e004      	b.n	800391c <GP_TIMx__CTC_start+0x970>
									}else{
										TIMx->CCMR1.Compare_BIT_NAME.OC2PE=0;
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6993      	ldr	r3, [r2, #24]
 8003916:	f36f 23cb 	bfc	r3, #11, #1
 800391a:	6193      	str	r3, [r2, #24]
									}
									TIMx->CCER.BIT_NAME.CC2P=CTC_Sitting->CTC_POL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	789b      	ldrb	r3, [r3, #2]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	b2d9      	uxtb	r1, r3
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6a13      	ldr	r3, [r2, #32]
 800392a:	f361 1345 	bfi	r3, r1, #5, #1
 800392e:	6213      	str	r3, [r2, #32]
									//			CC1S	  00: CC1 channel is configured as output
									TIMx->CCMR1.Compare_BIT_NAME.CC2S=0;
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6993      	ldr	r3, [r2, #24]
 8003934:	f36f 2309 	bfc	r3, #8, #2
 8003938:	6193      	str	r3, [r2, #24]
									//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

									TIMx->CCER.BIT_NAME.CC2E=1;
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	6a13      	ldr	r3, [r2, #32]
 800393e:	f043 0310 	orr.w	r3, r3, #16
 8003942:	6213      	str	r3, [r2, #32]
									MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,2);
 8003944:	2202      	movs	r2, #2
 8003946:	2101      	movs	r1, #1
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff f919 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

									break;
 800394e:	e068      	b.n	8003a22 <GP_TIMx__CTC_start+0xa76>
								case 3:
									TIMx->CCR3=Sitting->TIME_CCR;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	88db      	ldrh	r3, [r3, #6]
 8003954:	461a      	mov	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
									TIMx->CCMR2.Compare_BIT_NAME.OC3M=PWM_AL;
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	69d3      	ldr	r3, [r2, #28]
 800395e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003962:	61d3      	str	r3, [r2, #28]
									//if the preload > 0 so enable the OC1PE
									if(Sitting->TIME_RCR){
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	889b      	ldrh	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <GP_TIMx__CTC_start+0x9cc>
										TIMx->CCMR2.Compare_BIT_NAME.OC3PE=1;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	69d3      	ldr	r3, [r2, #28]
 8003970:	f043 0308 	orr.w	r3, r3, #8
 8003974:	61d3      	str	r3, [r2, #28]
 8003976:	e004      	b.n	8003982 <GP_TIMx__CTC_start+0x9d6>
									}else{
										TIMx->CCMR2.Compare_BIT_NAME.OC3PE=0;
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	69d3      	ldr	r3, [r2, #28]
 800397c:	f36f 03c3 	bfc	r3, #3, #1
 8003980:	61d3      	str	r3, [r2, #28]
									}
									TIMx->CCER.BIT_NAME.CC3P=CTC_Sitting->CTC_POL;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	789b      	ldrb	r3, [r3, #2]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	b2d9      	uxtb	r1, r3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	6a13      	ldr	r3, [r2, #32]
 8003990:	f361 2349 	bfi	r3, r1, #9, #1
 8003994:	6213      	str	r3, [r2, #32]
									//			CC1S	  00: CC1 channel is configured as output
									TIMx->CCMR2.Compare_BIT_NAME.CC3S=0;
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	69d3      	ldr	r3, [r2, #28]
 800399a:	f36f 0301 	bfc	r3, #0, #2
 800399e:	61d3      	str	r3, [r2, #28]
									//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

									TIMx->CCER.BIT_NAME.CC3E=1;
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	6a13      	ldr	r3, [r2, #32]
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6213      	str	r3, [r2, #32]
									MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,3);
 80039aa:	2203      	movs	r2, #3
 80039ac:	2101      	movs	r1, #1
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff f8e6 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

									break;
 80039b4:	e035      	b.n	8003a22 <GP_TIMx__CTC_start+0xa76>
								case 4:
									TIMx->CCR4=Sitting->TIME_CCR;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	88db      	ldrh	r3, [r3, #6]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
									TIMx->CCMR2.Compare_BIT_NAME.OC4M=PWM_AL;
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	69d3      	ldr	r3, [r2, #28]
 80039c4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80039c8:	61d3      	str	r3, [r2, #28]
									//if the preload > 0 so enable the OC1PE
									if(Sitting->TIME_RCR){
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	889b      	ldrh	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <GP_TIMx__CTC_start+0xa32>
										TIMx->CCMR2.Compare_BIT_NAME.OC4PE=1;
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	69d3      	ldr	r3, [r2, #28]
 80039d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039da:	61d3      	str	r3, [r2, #28]
 80039dc:	e004      	b.n	80039e8 <GP_TIMx__CTC_start+0xa3c>
									}else{
										TIMx->CCMR2.Compare_BIT_NAME.OC4PE=0;
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	69d3      	ldr	r3, [r2, #28]
 80039e2:	f36f 23cb 	bfc	r3, #11, #1
 80039e6:	61d3      	str	r3, [r2, #28]
									}
									TIMx->CCER.BIT_NAME.CC4P=CTC_Sitting->CTC_POL;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	789b      	ldrb	r3, [r3, #2]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	b2d9      	uxtb	r1, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6a13      	ldr	r3, [r2, #32]
 80039f6:	f361 334d 	bfi	r3, r1, #13, #1
 80039fa:	6213      	str	r3, [r2, #32]
									//			CC1S	  00: CC1 channel is configured as output
									TIMx->CCMR2.Compare_BIT_NAME.CC4S=0;
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	69d3      	ldr	r3, [r2, #28]
 8003a00:	f36f 2309 	bfc	r3, #8, #2
 8003a04:	61d3      	str	r3, [r2, #28]
									//Note: CCxS bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).**************

									TIMx->CCER.BIT_NAME.CC4E=1;
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6a13      	ldr	r3, [r2, #32]
 8003a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a0e:	6213      	str	r3, [r2, #32]
									MCAL_SET_GP_TIMx_GPIO(TIMx,PWM,4);
 8003a10:	2204      	movs	r2, #4
 8003a12:	2101      	movs	r1, #1
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff f8b3 	bl	8002b80 <MCAL_SET_GP_TIMx_GPIO>

									break;
 8003a1a:	e002      	b.n	8003a22 <GP_TIMx__CTC_start+0xa76>
								default:
									GP_ERROR_HANDLER();
 8003a1c:	f7ff f8ac 	bl	8002b78 <GP_ERROR_HANDLER>
									break;
 8003a20:	bf00      	nop

								}
								break;
 8003a22:	e002      	b.n	8003a2a <GP_TIMx__CTC_start+0xa7e>

								default:
									GP_ERROR_HANDLER();
 8003a24:	f7ff f8a8 	bl	8002b78 <GP_ERROR_HANDLER>
									break;
 8003a28:	bf00      	nop
		}
		TIMx->CR1.BIT_NAME.CEN=1;
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	7a1b      	ldrb	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d14b      	bne.n	8003ad4 <GP_TIMx__CTC_start+0xb28>
			switch (CTC_Sitting->CHx_num) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d822      	bhi.n	8003a8c <GP_TIMx__CTC_start+0xae0>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <GP_TIMx__CTC_start+0xaa0>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a69 	.word	0x08003a69
 8003a54:	08003a75 	.word	0x08003a75
 8003a58:	08003a81 	.word	0x08003a81
			case 1:
				TIMx->DIER.BIT_NAME.CC1IE=1;
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	68d3      	ldr	r3, [r2, #12]
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	60d3      	str	r3, [r2, #12]

				break;
 8003a66:	e014      	b.n	8003a92 <GP_TIMx__CTC_start+0xae6>
			case 2:
				TIMx->DIER.BIT_NAME.CC2IE=1;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	68d3      	ldr	r3, [r2, #12]
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	60d3      	str	r3, [r2, #12]

				break;
 8003a72:	e00e      	b.n	8003a92 <GP_TIMx__CTC_start+0xae6>
			case 3:
				TIMx->DIER.BIT_NAME.CC3IE=1;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	68d3      	ldr	r3, [r2, #12]
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	60d3      	str	r3, [r2, #12]

				break;
 8003a7e:	e008      	b.n	8003a92 <GP_TIMx__CTC_start+0xae6>
			case 4:
				TIMx->DIER.BIT_NAME.CC4IE=1;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	68d3      	ldr	r3, [r2, #12]
 8003a84:	f043 0310 	orr.w	r3, r3, #16
 8003a88:	60d3      	str	r3, [r2, #12]

				break;
 8003a8a:	e002      	b.n	8003a92 <GP_TIMx__CTC_start+0xae6>
			default:
				GP_ERROR_HANDLER();
 8003a8c:	f7ff f874 	bl	8002b78 <GP_ERROR_HANDLER>
				break;
 8003a90:	bf00      	nop
			}
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d106      	bne.n	8003aa8 <GP_TIMx__CTC_start+0xafc>
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6013      	str	r3, [r2, #0]
		if(Sitting->INT_EN_DIS==INT_EN){
 8003aa6:	e050      	b.n	8003b4a <GP_TIMx__CTC_start+0xb9e>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <GP_TIMx__CTC_start+0xbac>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d106      	bne.n	8003abe <GP_TIMx__CTC_start+0xb12>
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aba:	6013      	str	r3, [r2, #0]
		if(Sitting->INT_EN_DIS==INT_EN){
 8003abc:	e045      	b.n	8003b4a <GP_TIMx__CTC_start+0xb9e>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <GP_TIMx__CTC_start+0xbb0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d141      	bne.n	8003b4a <GP_TIMx__CTC_start+0xb9e>
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <GP_TIMx__CTC_start+0xba8>)
 8003acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ad0:	6013      	str	r3, [r2, #0]
		if(Sitting->INT_EN_DIS==INT_EN){
 8003ad2:	e03a      	b.n	8003b4a <GP_TIMx__CTC_start+0xb9e>

		}else{
			switch (CTC_Sitting->CHx_num) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d82e      	bhi.n	8003b3c <GP_TIMx__CTC_start+0xb90>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <GP_TIMx__CTC_start+0xb38>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b07 	.word	0x08003b07
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2b 	.word	0x08003b2b
			case 1:
				while(!TIMx->SR.BIT_NAME.CC1IF);
 8003af4:	bf00      	nop
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f8      	beq.n	8003af6 <GP_TIMx__CTC_start+0xb4a>
//				TIMx->SR.BIT_NAME.CC1IF=0;
				break;
 8003b04:	e01d      	b.n	8003b42 <GP_TIMx__CTC_start+0xb96>
			case 2:
//				while(!TIMx->SR.BIT_NAME.UIF);

				while(!TIMx->SR.BIT_NAME.CC2IF);
 8003b06:	bf00      	nop
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f8      	beq.n	8003b08 <GP_TIMx__CTC_start+0xb5c>
//				TIMx->SR.BIT_NAME.CC2IF=0;
//				TIMx->SR.BIT_NAME.UIF=0;

				break;
 8003b16:	e014      	b.n	8003b42 <GP_TIMx__CTC_start+0xb96>
			case 3:
				while(!TIMx->SR.BIT_NAME.CC3IF);
 8003b18:	bf00      	nop
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f8      	beq.n	8003b1a <GP_TIMx__CTC_start+0xb6e>
//				TIMx->SR.BIT_NAME.CC3IF=0;
				break;
 8003b28:	e00b      	b.n	8003b42 <GP_TIMx__CTC_start+0xb96>
			case 4:
				while(!TIMx->SR.BIT_NAME.CC4IF);
 8003b2a:	bf00      	nop
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f8      	beq.n	8003b2c <GP_TIMx__CTC_start+0xb80>
//				TIMx->SR.BIT_NAME.CC4IF=0;
				break;
 8003b3a:	e002      	b.n	8003b42 <GP_TIMx__CTC_start+0xb96>
			default:
				GP_ERROR_HANDLER();
 8003b3c:	f7ff f81c 	bl	8002b78 <GP_ERROR_HANDLER>
				break;
 8003b40:	bf00      	nop
		if(Sitting->INT_EN_DIS==INT_EN){
 8003b42:	e002      	b.n	8003b4a <GP_TIMx__CTC_start+0xb9e>
			}

		}
	}else{
		GP_ERROR_HANDLER();
 8003b44:	f7ff f818 	bl	8002b78 <GP_ERROR_HANDLER>
	}

}
 8003b48:	e000      	b.n	8003b4c <GP_TIMx__CTC_start+0xba0>
		if(Sitting->INT_EN_DIS==INT_EN){
 8003b4a:	bf00      	nop
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800

08003b60 <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8003b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	7813      	ldrb	r3, [r2, #0]
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8003b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b84:	6913      	ldr	r3, [r2, #16]
 8003b86:	f36f 0300 	bfc	r3, #0, #1
 8003b8a:	6113      	str	r3, [r2, #16]
 8003b8c:	e04e      	b.n	8003c2c <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8003b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	7813      	ldrb	r3, [r2, #0]
 8003ba2:	f043 0302 	orr.w	r3, r3, #2
 8003ba6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8003ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bac:	6913      	ldr	r3, [r2, #16]
 8003bae:	f36f 0341 	bfc	r3, #1, #1
 8003bb2:	6113      	str	r3, [r2, #16]
 8003bb4:	e03a      	b.n	8003c2c <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8003bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	7813      	ldrb	r3, [r2, #0]
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8003bd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd4:	6913      	ldr	r3, [r2, #16]
 8003bd6:	f36f 0382 	bfc	r3, #2, #1
 8003bda:	6113      	str	r3, [r2, #16]
 8003bdc:	e026      	b.n	8003c2c <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8003bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	7813      	ldrb	r3, [r2, #0]
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
 8003bf6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8003bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bfc:	6913      	ldr	r3, [r2, #16]
 8003bfe:	f36f 03c3 	bfc	r3, #3, #1
 8003c02:	6113      	str	r3, [r2, #16]
 8003c04:	e012      	b.n	8003c2c <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8003c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	7813      	ldrb	r3, [r2, #0]
 8003c1a:	f043 0310 	orr.w	r3, r3, #16
 8003c1e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8003c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c24:	6913      	ldr	r3, [r2, #16]
 8003c26:	f36f 1304 	bfc	r3, #4, #1
 8003c2a:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <TIM2_IRQHandler+0xdc>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3

}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	2000225c 	.word	0x2000225c

08003c40 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	7813      	ldrb	r3, [r2, #0]
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003c60:	6913      	ldr	r3, [r2, #16]
 8003c62:	f36f 0300 	bfc	r3, #0, #1
 8003c66:	6113      	str	r3, [r2, #16]
 8003c68:	e046      	b.n	8003cf8 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	7813      	ldrb	r3, [r2, #0]
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8003c82:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003c84:	6913      	ldr	r3, [r2, #16]
 8003c86:	f36f 0341 	bfc	r3, #1, #1
 8003c8a:	6113      	str	r3, [r2, #16]
 8003c8c:	e034      	b.n	8003cf8 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	7813      	ldrb	r3, [r2, #0]
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003ca8:	6913      	ldr	r3, [r2, #16]
 8003caa:	f36f 0382 	bfc	r3, #2, #1
 8003cae:	6113      	str	r3, [r2, #16]
 8003cb0:	e022      	b.n	8003cf8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	7813      	ldrb	r3, [r2, #0]
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8003cca:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003ccc:	6913      	ldr	r3, [r2, #16]
 8003cce:	f36f 03c3 	bfc	r3, #3, #1
 8003cd2:	6113      	str	r3, [r2, #16]
 8003cd4:	e010      	b.n	8003cf8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	7813      	ldrb	r3, [r2, #0]
 8003ce8:	f043 0310 	orr.w	r3, r3, #16
 8003cec:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8003cee:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <TIM3_IRQHandler+0xc8>)
 8003cf0:	6913      	ldr	r3, [r2, #16]
 8003cf2:	f36f 1304 	bfc	r3, #4, #1
 8003cf6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <TIM3_IRQHandler+0xcc>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	2000225c 	.word	0x2000225c

08003d10 <TIM4_IRQHandler>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8003d16:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d30:	6913      	ldr	r3, [r2, #16]
 8003d32:	f36f 0300 	bfc	r3, #0, #1
 8003d36:	6113      	str	r3, [r2, #16]
 8003d38:	e04b      	b.n	8003dd2 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	7813      	ldrb	r3, [r2, #0]
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8003d52:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d54:	6913      	ldr	r3, [r2, #16]
 8003d56:	f36f 0341 	bfc	r3, #1, #1
 8003d5a:	6113      	str	r3, [r2, #16]
 8003d5c:	e039      	b.n	8003dd2 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	7813      	ldrb	r3, [r2, #0]
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d78:	6913      	ldr	r3, [r2, #16]
 8003d7a:	f36f 0382 	bfc	r3, #2, #1
 8003d7e:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	7813      	ldrb	r3, [r2, #0]
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	7013      	strb	r3, [r2, #0]
 8003d8a:	e022      	b.n	8003dd2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	7813      	ldrb	r3, [r2, #0]
 8003d9e:	f043 0308 	orr.w	r3, r3, #8
 8003da2:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003da6:	6913      	ldr	r3, [r2, #16]
 8003da8:	f36f 03c3 	bfc	r3, #3, #1
 8003dac:	6113      	str	r3, [r2, #16]
 8003dae:	e010      	b.n	8003dd2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	7813      	ldrb	r3, [r2, #0]
 8003dc2:	f043 0310 	orr.w	r3, r3, #16
 8003dc6:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <TIM4_IRQHandler+0xd4>)
 8003dca:	6913      	ldr	r3, [r2, #16]
 8003dcc:	f36f 1304 	bfc	r3, #4, #1
 8003dd0:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <TIM4_IRQHandler+0xd8>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3


}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40000800 	.word	0x40000800
 8003de8:	2000225c 	.word	0x2000225c

08003dec <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <MCAL_GET_SYS_CLCK+0x34>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d00a      	beq.n	8003e14 <MCAL_GET_SYS_CLCK+0x28>
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d80a      	bhi.n	8003e18 <MCAL_GET_SYS_CLCK+0x2c>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <MCAL_GET_SYS_CLCK+0x20>
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d002      	beq.n	8003e10 <MCAL_GET_SYS_CLCK+0x24>
 8003e0a:	e005      	b.n	8003e18 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <MCAL_GET_SYS_CLCK+0x38>)
 8003e0e:	e003      	b.n	8003e18 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <MCAL_GET_SYS_CLCK+0x3c>)
 8003e12:	e001      	b.n	8003e18 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <MCAL_GET_SYS_CLCK+0x40>)
 8003e16:	e7ff      	b.n	8003e18 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40021000 	.word	0x40021000
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	01ab3f00 	.word	0x01ab3f00

08003e30 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8003e34:	f7ff ffda 	bl	8003dec <MCAL_GET_SYS_CLCK>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <MCAL_GET_H_CLCK+0x20>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <MCAL_GET_H_CLCK+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	20000010 	.word	0x20000010

08003e58 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8003e5c:	f7ff ffe8 	bl	8003e30 <MCAL_GET_H_CLCK>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <MCAL_GET_PCLCK1+0x20>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <MCAL_GET_PCLCK1+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	20000008 	.word	0x20000008

08003e80 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8003e84:	f7ff ffd4 	bl	8003e30 <MCAL_GET_H_CLCK>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <MCAL_GET_PCLCK2+0x20>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0adb      	lsrs	r3, r3, #11
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <MCAL_GET_PCLCK2+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	20000008 	.word	0x20000008

08003ea8 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <SPI1_IRQHandler+0x20>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f80c 	bl	8003ed0 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SPI1_IRQHandler+0x24>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	7938      	ldrb	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40013000 	.word	0x40013000
 8003ecc:	20002290 	.word	0x20002290

08003ed0 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00f      	beq.n	8003f08 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	7813      	ldrb	r3, [r2, #0]
 8003eec:	f36f 0300 	bfc	r3, #0, #1
 8003ef0:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	7813      	ldrb	r3, [r2, #0]
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	7913      	ldrb	r3, [r2, #4]
 8003f00:	f36f 1386 	bfc	r3, #6, #1
 8003f04:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8003f06:	e015      	b.n	8003f34 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	7813      	ldrb	r3, [r2, #0]
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	7813      	ldrb	r3, [r2, #0]
 8003f24:	f36f 0341 	bfc	r3, #1, #1
 8003f28:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	7913      	ldrb	r3, [r2, #4]
 8003f2e:	f36f 13c7 	bfc	r3, #7, #1
 8003f32:	7113      	strb	r3, [r2, #4]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
	...

08003f40 <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MCAL_SET_TIMx_GPIO+0x24>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4619      	mov	r1, r3
 8003f54:	4804      	ldr	r0, [pc, #16]	; (8003f68 <MCAL_SET_TIMx_GPIO+0x28>)
 8003f56:	f7fe fd11 	bl	800297c <MCAL_GPIO_init>
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	08004d20 	.word	0x08004d20
 8003f68:	40010800 	.word	0x40010800

08003f6c <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 8003f76:	4a3d      	ldr	r2, [pc, #244]	; (800406c <TIMER_1_8_start+0x100>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <TIMER_1_8_start+0x104>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3a      	ldr	r2, [pc, #232]	; (8004074 <TIMER_1_8_start+0x108>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d105      	bne.n	8003f9c <TIMER_1_8_start+0x30>
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <TIMER_1_8_start+0x10c>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <TIMER_1_8_start+0x10c>)
 8003f96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f9a:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	885b      	ldrh	r3, [r3, #2]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	7a5b      	ldrb	r3, [r3, #9]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d01c      	beq.n	8004006 <TIMER_1_8_start+0x9a>
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	dc20      	bgt.n	8004012 <TIMER_1_8_start+0xa6>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <TIMER_1_8_start+0x6e>
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d00b      	beq.n	8003ff0 <TIMER_1_8_start+0x84>
 8003fd8:	e01b      	b.n	8004012 <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	f36f 1346 	bfc	r3, #5, #2
 8003fe2:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	f36f 1304 	bfc	r3, #4, #1
 8003fec:	6013      	str	r3, [r2, #0]
		break;
 8003fee:	e013      	b.n	8004018 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	f36f 1346 	bfc	r3, #5, #2
 8003ff8:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6813      	ldr	r3, [r2, #0]
 8003ffe:	f043 0310 	orr.w	r3, r3, #16
 8004002:	6013      	str	r3, [r2, #0]
		break;
 8004004:	e008      	b.n	8004018 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800400e:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 8004010:	e002      	b.n	8004018 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 8004012:	f7fe f9c3 	bl	800239c <ERROR_HANDLER>
		break;
 8004016:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff91 	bl	8003f40 <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	7a1b      	ldrb	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68d3      	ldr	r3, [r2, #12]
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <TIMER_1_8_start+0x110>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a0f      	ldr	r2, [pc, #60]	; (800407c <TIMER_1_8_start+0x110>)
 8004040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004044:	6013      	str	r3, [r2, #0]
	}else{
		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 8004046:	e00c      	b.n	8004062 <TIMER_1_8_start+0xf6>
		while(!TIMx->SR.BIT_NAME.UIF);
 8004048:	bf00      	nop
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f8      	beq.n	800404a <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6913      	ldr	r3, [r2, #16]
 800405c:	f36f 0300 	bfc	r3, #0, #1
 8004060:	6113      	str	r3, [r2, #16]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	200022b0 	.word	0x200022b0
 8004070:	200022c0 	.word	0x200022c0
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40021000 	.word	0x40021000
 800407c:	e000e100 	.word	0xe000e100

08004080 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <TIM1_UP_IRQHandler+0x1c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <TIM1_UP_IRQHandler+0x20>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	6913      	ldr	r3, [r2, #16]
 8004090:	f36f 0300 	bfc	r3, #0, #1
 8004094:	6113      	str	r3, [r2, #16]

}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200022b0 	.word	0x200022b0
 80040a0:	200022c0 	.word	0x200022c0

080040a4 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <TIM1_CC_IRQHandler+0x1c>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <TIM1_CC_IRQHandler+0x20>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	6913      	ldr	r3, [r2, #16]
 80040b4:	f36f 0341 	bfc	r3, #1, #1
 80040b8:	6113      	str	r3, [r2, #16]

}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200022b0 	.word	0x200022b0
 80040c4:	200022c0 	.word	0x200022c0

080040c8 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <TIM1_BRK_IRQHandler+0x1c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <TIM1_BRK_IRQHandler+0x20>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	6913      	ldr	r3, [r2, #16]
 80040d8:	f36f 0300 	bfc	r3, #0, #1
 80040dc:	6113      	str	r3, [r2, #16]

}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200022b0 	.word	0x200022b0
 80040e8:	200022c0 	.word	0x200022c0

080040ec <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <TIM1_TRG_COM_IRQHandler+0x1c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <TIM1_TRG_COM_IRQHandler+0x20>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	6913      	ldr	r3, [r2, #16]
 80040fc:	f36f 0300 	bfc	r3, #0, #1
 8004100:	6113      	str	r3, [r2, #16]

}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200022b0 	.word	0x200022b0
 800410c:	200022c0 	.word	0x200022c0

08004110 <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 800411a:	f7ff feb1 	bl	8003e80 <MCAL_GET_PCLCK2>
 800411e:	4603      	mov	r3, r0
 8004120:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <_TIM1_delay_us+0x50>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0c9b      	lsrs	r3, r3, #18
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29b      	uxth	r3, r3
 800412e:	813b      	strh	r3, [r7, #8]
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	817b      	strh	r3, [r7, #10]
 8004138:	2300      	movs	r3, #0
 800413a:	81bb      	strh	r3, [r7, #12]
 800413c:	2300      	movs	r3, #0
 800413e:	81fb      	strh	r3, [r7, #14]
 8004140:	2301      	movs	r3, #1
 8004142:	743b      	strb	r3, [r7, #16]
 8004144:	2300      	movs	r3, #0
 8004146:	747b      	strb	r3, [r7, #17]
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	4619      	mov	r1, r3
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <_TIM1_delay_us+0x54>)
 8004154:	f7ff ff0a 	bl	8003f6c <TIMER_1_8_start>

}
 8004158:	bf00      	nop
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	431bde83 	.word	0x431bde83
 8004164:	40012c00 	.word	0x40012c00

08004168 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a8d      	ldr	r2, [pc, #564]	; (80043ac <MCAL_USART_init+0x244>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 800417a:	4a8d      	ldr	r2, [pc, #564]	; (80043b0 <MCAL_USART_init+0x248>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4614      	mov	r4, r2
 8004180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8004186:	4b8b      	ldr	r3, [pc, #556]	; (80043b4 <MCAL_USART_init+0x24c>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a8a      	ldr	r2, [pc, #552]	; (80043b4 <MCAL_USART_init+0x24c>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004190:	6193      	str	r3, [r2, #24]
 8004192:	e024      	b.n	80041de <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a88      	ldr	r2, [pc, #544]	; (80043b8 <MCAL_USART_init+0x250>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10e      	bne.n	80041ba <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 800419c:	4b84      	ldr	r3, [pc, #528]	; (80043b0 <MCAL_USART_init+0x248>)
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	f103 0410 	add.w	r4, r3, #16
 80041a4:	4613      	mov	r3, r2
 80041a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 80041ac:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <MCAL_USART_init+0x24c>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <MCAL_USART_init+0x24c>)
 80041b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b6:	61d3      	str	r3, [r2, #28]
 80041b8:	e011      	b.n	80041de <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a7f      	ldr	r2, [pc, #508]	; (80043bc <MCAL_USART_init+0x254>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80041c2:	4b7b      	ldr	r3, [pc, #492]	; (80043b0 <MCAL_USART_init+0x248>)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	f103 0420 	add.w	r4, r3, #32
 80041ca:	4613      	mov	r3, r2
 80041cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80041d2:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <MCAL_USART_init+0x24c>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4a77      	ldr	r2, [pc, #476]	; (80043b4 <MCAL_USART_init+0x24c>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041dc:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	7912      	ldrb	r2, [r2, #4]
 80041f2:	0312      	lsls	r2, r2, #12
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	79d2      	ldrb	r2, [r2, #7]
 8004202:	0312      	lsls	r2, r2, #12
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	7a5b      	ldrb	r3, [r3, #9]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f043 0208 	orr.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	7a1b      	ldrb	r3, [r3, #8]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d826      	bhi.n	8004280 <MCAL_USART_init+0x118>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <MCAL_USART_init+0xd0>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004249 	.word	0x08004249
 800423c:	08004257 	.word	0x08004257
 8004240:	08004265 	.word	0x08004265
 8004244:	08004273 	.word	0x08004273
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	615a      	str	r2, [r3, #20]
		break;
 8004254:	e014      	b.n	8004280 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	615a      	str	r2, [r3, #20]
		break;
 8004262:	e00d      	b.n	8004280 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	615a      	str	r2, [r3, #20]
		break;
 8004270:	e006      	b.n	8004280 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	615a      	str	r2, [r3, #20]
		break;
 800427e:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	7952      	ldrb	r2, [r2, #5]
 8004288:	0252      	lsls	r2, r2, #9
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	799b      	ldrb	r3, [r3, #6]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d125      	bne.n	80042e4 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a44      	ldr	r2, [pc, #272]	; (80043ac <MCAL_USART_init+0x244>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d106      	bne.n	80042ae <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <MCAL_USART_init+0x258>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <MCAL_USART_init+0x258>)
 80042a6:	f043 0320 	orr.w	r3, r3, #32
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e014      	b.n	80042d8 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <MCAL_USART_init+0x250>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d106      	bne.n	80042c4 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <MCAL_USART_init+0x258>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a41      	ldr	r2, [pc, #260]	; (80043c0 <MCAL_USART_init+0x258>)
 80042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e009      	b.n	80042d8 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <MCAL_USART_init+0x254>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d105      	bne.n	80042d8 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80042cc:	4b3c      	ldr	r3, [pc, #240]	; (80043c0 <MCAL_USART_init+0x258>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <MCAL_USART_init+0x258>)
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <MCAL_USART_init+0x244>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d12d      	bne.n	8004348 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80042ec:	f7ff fdc8 	bl	8003e80 <MCAL_GET_PCLCK2>
 80042f0:	4602      	mov	r2, r0
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f7ff fdbf 	bl	8003e80 <MCAL_GET_PCLCK2>
 8004302:	4602      	mov	r2, r0
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fbb2 f5f3 	udiv	r5, r2, r3
 8004318:	f7ff fdb2 	bl	8003e80 <MCAL_GET_PCLCK2>
 800431c:	4602      	mov	r2, r0
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	2264      	movs	r2, #100	; 0x64
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	1aeb      	subs	r3, r5, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <MCAL_USART_init+0x25c>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	ea44 0203 	orr.w	r2, r4, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e070      	b.n	800442a <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <MCAL_USART_init+0x250>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d13b      	bne.n	80043c8 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8004350:	f7ff fd82 	bl	8003e58 <MCAL_GET_PCLCK1>
 8004354:	4602      	mov	r2, r0
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	011c      	lsls	r4, r3, #4
 8004362:	f7ff fd79 	bl	8003e58 <MCAL_GET_PCLCK1>
 8004366:	4602      	mov	r2, r0
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f5f3 	udiv	r5, r2, r3
 800437c:	f7ff fd6c 	bl	8003e58 <MCAL_GET_PCLCK1>
 8004380:	4602      	mov	r2, r0
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1aeb      	subs	r3, r5, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4a0b      	ldr	r2, [pc, #44]	; (80043c4 <MCAL_USART_init+0x25c>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	ea44 0203 	orr.w	r2, r4, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	e03e      	b.n	800442a <MCAL_USART_init+0x2c2>
 80043ac:	40013800 	.word	0x40013800
 80043b0:	200022c4 	.word	0x200022c4
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40004400 	.word	0x40004400
 80043bc:	40004800 	.word	0x40004800
 80043c0:	e000e104 	.word	0xe000e104
 80043c4:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <MCAL_USART_init+0x2d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d12c      	bne.n	800442a <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80043d0:	f7ff fd42 	bl	8003e58 <MCAL_GET_PCLCK1>
 80043d4:	4602      	mov	r2, r0
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	011c      	lsls	r4, r3, #4
 80043e2:	f7ff fd39 	bl	8003e58 <MCAL_GET_PCLCK1>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80043fc:	f7ff fd2c 	bl	8003e58 <MCAL_GET_PCLCK1>
 8004400:	4602      	mov	r2, r0
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	2264      	movs	r2, #100	; 0x64
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	1aeb      	subs	r3, r5, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <MCAL_USART_init+0x2d4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	ea44 0203 	orr.w	r2, r4, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f892 	bl	8004554 <SET_GPIO>
	}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bdb0      	pop	{r4, r5, r7, pc}
 8004438:	40004800 	.word	0x40004800
 800443c:	51eb851f 	.word	0x51eb851f

08004440 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <MCAL_USART_SendData+0x68>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MCAL_USART_SendData+0x6c>)
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e00c      	b.n	8004478 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <MCAL_USART_SendData+0x70>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d102      	bne.n	800446c <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <MCAL_USART_SendData+0x74>)
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e005      	b.n	8004478 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <MCAL_USART_SendData+0x78>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <MCAL_USART_SendData+0x7c>)
 8004476:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8004478:	bf00      	nop
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f9      	beq.n	800447a <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d103      	bne.n	8004496 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8004494:	e002      	b.n	800449c <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40013800 	.word	0x40013800
 80044ac:	200022c4 	.word	0x200022c4
 80044b0:	40004400 	.word	0x40004400
 80044b4:	200022d4 	.word	0x200022d4
 80044b8:	40004800 	.word	0x40004800
 80044bc:	200022e4 	.word	0x200022e4

080044c0 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	; (800453c <MCAL_USART_ReciveData+0x7c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d102      	bne.n	80044da <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <MCAL_USART_ReciveData+0x80>)
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e00c      	b.n	80044f4 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <MCAL_USART_ReciveData+0x84>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d102      	bne.n	80044e8 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <MCAL_USART_ReciveData+0x88>)
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e005      	b.n	80044f4 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <MCAL_USART_ReciveData+0x8c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <MCAL_USART_ReciveData+0x90>)
 80044f2:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	799b      	ldrb	r3, [r3, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d107      	bne.n	800450c <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80044fc:	bf00      	nop
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f9      	beq.n	80044fe <MCAL_USART_ReciveData+0x3e>
 800450a:	e002      	b.n	8004512 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	799b      	ldrb	r3, [r3, #6]
 8004510:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	795b      	ldrb	r3, [r3, #5]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	b29b      	uxth	r3, r3
 8004522:	e006      	b.n	8004532 <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004530:	b29b      	uxth	r3, r3

		}

}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	40013800 	.word	0x40013800
 8004540:	200022c4 	.word	0x200022c4
 8004544:	40004400 	.word	0x40004400
 8004548:	200022d4 	.word	0x200022d4
 800454c:	40004800 	.word	0x40004800
 8004550:	200022e4 	.word	0x200022e4

08004554 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 800455c:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <SET_GPIO+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <SET_GPIO+0xc0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d115      	bne.n	8004596 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <SET_GPIO+0xc4>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <SET_GPIO+0xc4>)
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	4619      	mov	r1, r3
 800457c:	4827      	ldr	r0, [pc, #156]	; (800461c <SET_GPIO+0xc8>)
 800457e:	f7fe f9fd 	bl	800297c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <SET_GPIO+0xcc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004588:	f107 031c 	add.w	r3, r7, #28
 800458c:	4619      	mov	r1, r3
 800458e:	4823      	ldr	r0, [pc, #140]	; (800461c <SET_GPIO+0xc8>)
 8004590:	f7fe f9f4 	bl	800297c <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8004594:	e038      	b.n	8004608 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <SET_GPIO+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d118      	bne.n	80045d0 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <SET_GPIO+0xc4>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <SET_GPIO+0xc4>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <SET_GPIO+0xd4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	4619      	mov	r1, r3
 80045b6:	4819      	ldr	r0, [pc, #100]	; (800461c <SET_GPIO+0xc8>)
 80045b8:	f7fe f9e0 	bl	800297c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <SET_GPIO+0xd8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80045c2:	f107 031c 	add.w	r3, r7, #28
 80045c6:	4619      	mov	r1, r3
 80045c8:	4814      	ldr	r0, [pc, #80]	; (800461c <SET_GPIO+0xc8>)
 80045ca:	f7fe f9d7 	bl	800297c <MCAL_GPIO_init>
}
 80045ce:	e01b      	b.n	8004608 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <SET_GPIO+0xdc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d117      	bne.n	8004608 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <SET_GPIO+0xc4>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <SET_GPIO+0xc4>)
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <SET_GPIO+0xe0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80045ea:	f107 031c 	add.w	r3, r7, #28
 80045ee:	4619      	mov	r1, r3
 80045f0:	4811      	ldr	r0, [pc, #68]	; (8004638 <SET_GPIO+0xe4>)
 80045f2:	f7fe f9c3 	bl	800297c <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <SET_GPIO+0xe8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	4619      	mov	r1, r3
 8004602:	480d      	ldr	r0, [pc, #52]	; (8004638 <SET_GPIO+0xe4>)
 8004604:	f7fe f9ba 	bl	800297c <MCAL_GPIO_init>
}
 8004608:	bf00      	nop
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	08004d24 	.word	0x08004d24
 8004614:	40013800 	.word	0x40013800
 8004618:	40021000 	.word	0x40021000
 800461c:	40010800 	.word	0x40010800
 8004620:	08004d28 	.word	0x08004d28
 8004624:	40004400 	.word	0x40004400
 8004628:	08004d2c 	.word	0x08004d2c
 800462c:	08004d30 	.word	0x08004d30
 8004630:	40004800 	.word	0x40004800
 8004634:	08004d34 	.word	0x08004d34
 8004638:	40010c00 	.word	0x40010c00
 800463c:	08004d38 	.word	0x08004d38

08004640 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8004644:	4b02      	ldr	r3, [pc, #8]	; (8004650 <USART1_IRQHandler+0x10>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4798      	blx	r3
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200022c4 	.word	0x200022c4

08004654 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8004658:	4b02      	ldr	r3, [pc, #8]	; (8004664 <USART2_IRQHandler+0x10>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4798      	blx	r3
}void USART3_IRQHandler(void){
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200022c4 	.word	0x200022c4

08004668 <USART3_IRQHandler>:
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <USART3_IRQHandler+0x10>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4798      	blx	r3
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200022c4 	.word	0x200022c4

0800467c <Sys_Clk_init>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void Sys_Clk_init(){
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
	// system speed 28Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <Sys_Clk_init+0x30>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <Sys_Clk_init+0x30>)
 8004686:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800468a:	6053      	str	r3, [r2, #4]
	//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	//	RCC->CFGR |=(1 <<16); //PLL entry clock source
	//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <Sys_Clk_init+0x30>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a06      	ldr	r2, [pc, #24]	; (80046ac <Sys_Clk_init+0x30>)
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004696:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <Sys_Clk_init+0x30>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a03      	ldr	r2, [pc, #12]	; (80046ac <Sys_Clk_init+0x30>)
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	6053      	str	r3, [r2, #4]

}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40021000 	.word	0x40021000

080046b0 <ACC_ADC_CallBack>:

void ACC_ADC_CallBack(){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 80046b4:	4a03      	ldr	r2, [pc, #12]	; (80046c4 <ACC_ADC_CallBack+0x14>)
 80046b6:	2100      	movs	r1, #0
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <ACC_ADC_CallBack+0x18>)
 80046ba:	f7fd fdcf 	bl	800225c <ADC_read>

}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20002312 	.word	0x20002312
 80046c8:	40012400 	.word	0x40012400

080046cc <ACC_throtel_init>:

void ACC_throtel_init(){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 80046dc:	2300      	movs	r3, #0
 80046de:	713b      	strb	r3, [r7, #4]
 80046e0:	2301      	movs	r3, #1
 80046e2:	717b      	strb	r3, [r7, #5]
 80046e4:	2300      	movs	r3, #0
 80046e6:	71bb      	strb	r3, [r7, #6]
 80046e8:	2300      	movs	r3, #0
 80046ea:	71fb      	strb	r3, [r7, #7]
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <ACC_throtel_init+0x4c>)
 80046f4:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4808      	ldr	r0, [pc, #32]	; (800471c <ACC_throtel_init+0x50>)
 80046fc:	f7fd fc22 	bl	8001f44 <ADC_init>
//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <ACC_throtel_init+0x54>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 8004706:	463b      	mov	r3, r7
 8004708:	4619      	mov	r1, r3
 800470a:	4806      	ldr	r0, [pc, #24]	; (8004724 <ACC_throtel_init+0x58>)
 800470c:	f7fe f936 	bl	800297c <MCAL_GPIO_init>

}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	080046b1 	.word	0x080046b1
 800471c:	40012400 	.word	0x40012400
 8004720:	08004d3c 	.word	0x08004d3c
 8004724:	40010800 	.word	0x40010800

08004728 <Error_Handller>:
void Error_Handller(){
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
	while(1);
 800472c:	e7fe      	b.n	800472c <Error_Handller+0x4>
	...

08004730 <ACC_FROM_PWM_TO_ADC>:
 * @retval -
 * Note-
 */


uint16_t ACC_FROM_PWM_TO_ADC(uint8_t PWM_VAL){
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC=(uint16_t)(((PWM_VAL*ACC_TROTTEL_Max_ADC_VAL_shifted)/(100))+ACC_TROTTEL_MIN_ADC_VAL);
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	025a      	lsls	r2, r3, #9
 8004744:	4413      	add	r3, r2
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <ACC_FROM_PWM_TO_ADC+0x38>)
 8004748:	fb82 1203 	smull	r1, r2, r2, r3
 800474c:	1152      	asrs	r2, r2, #5
 800474e:	17db      	asrs	r3, r3, #31
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	f203 431f 	addw	r3, r3, #1055	; 0x41f
 8004758:	81fb      	strh	r3, [r7, #14]

	return ADC;
 800475a:	89fb      	ldrh	r3, [r7, #14]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	51eb851f 	.word	0x51eb851f

0800476c <ACC_FROM_ADC_TO_PWM_DATA>:
uint16_t ACC_FROM_ADC_TO_PWM_DATA(uint16_t ADC_VAL){
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
	uint16_t PWM=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 800477c:	2264      	movs	r2, #100	; 0x64
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a06      	ldr	r2, [pc, #24]	; (800479c <ACC_FROM_ADC_TO_PWM_DATA+0x30>)
 8004784:	fb82 1203 	smull	r1, r2, r2, r3
 8004788:	1212      	asrs	r2, r2, #8
 800478a:	17db      	asrs	r3, r3, #31
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	81fb      	strh	r3, [r7, #14]
	return PWM;
 8004790:	89fb      	ldrh	r3, [r7, #14]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	2a955ffb 	.word	0x2a955ffb

080047a0 <ACC_FROM_ADC_TO_PWM>:
void ACC_FROM_ADC_TO_PWM(uint16_t ADC_VAL){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 80047b0:	2264      	movs	r2, #100	; 0x64
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <ACC_FROM_ADC_TO_PWM+0x54>)
 80047b8:	fb82 1203 	smull	r1, r2, r2, r3
 80047bc:	1212      	asrs	r2, r2, #8
 80047be:	17db      	asrs	r3, r3, #31
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	81fb      	strh	r3, [r7, #14]
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	PWM_V=((PWM_V*334)/100);
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <ACC_FROM_ADC_TO_PWM+0x58>)
 80047d0:	fb82 1203 	smull	r1, r2, r2, r3
 80047d4:	1152      	asrs	r2, r2, #5
 80047d6:	17db      	asrs	r3, r3, #31
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	81fb      	strh	r3, [r7, #14]
	GP_TIMx__CTC_change(TIM2,2,PWM_V);
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	461a      	mov	r2, r3
 80047e0:	2102      	movs	r1, #2
 80047e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80047e6:	f7fe fbb1 	bl	8002f4c <GP_TIMx__CTC_change>
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2a955ffb 	.word	0x2a955ffb
 80047f8:	51eb851f 	.word	0x51eb851f

080047fc <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <ACC_Handller_TASK+0xa0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2202      	movs	r2, #2
 8004806:	4926      	ldr	r1, [pc, #152]	; (80048a0 <ACC_Handller_TASK+0xa4>)
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb feb9 	bl	8000580 <xQueueReceive>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d1f5      	bne.n	8004800 <ACC_Handller_TASK+0x4>
			if((ACC_AMP>=100) && (ACC_AMP<=65535) ){
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <ACC_Handller_TASK+0xa4>)
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b63      	cmp	r3, #99	; 0x63
 800481a:	d937      	bls.n	800488c <ACC_Handller_TASK+0x90>
				if(xQueueReceive(ACC__dis_Queue,&ACC_dis,2)==pdTRUE){
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <ACC_Handller_TASK+0xa8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2202      	movs	r2, #2
 8004822:	4921      	ldr	r1, [pc, #132]	; (80048a8 <ACC_Handller_TASK+0xac>)
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb feab 	bl	8000580 <xQueueReceive>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d1e7      	bne.n	8004800 <ACC_Handller_TASK+0x4>
					if(ACC_dis <= Distance_SET){
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <ACC_Handller_TASK+0xac>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	2b64      	cmp	r3, #100	; 0x64
 8004836:	d80a      	bhi.n	800484e <ACC_Handller_TASK+0x52>
						// here should send CAN fram to atmega to stop the motor
						ACC_ACTION=ACC_CAR_STOP;
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <ACC_Handller_TASK+0xb0>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 800483e:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <ACC_Handller_TASK+0xb4>)
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	2202      	movs	r2, #2
 8004846:	4919      	ldr	r1, [pc, #100]	; (80048ac <ACC_Handller_TASK+0xb0>)
 8004848:	f7fb fdf0 	bl	800042c <xQueueGenericSend>
 800484c:	e7d8      	b.n	8004800 <ACC_Handller_TASK+0x4>
						}else{

						}
					}else if((ACC_dis > Distance_SET) &&(ACC_dis <MAX_Distance_SET)){
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <ACC_Handller_TASK+0xac>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d90f      	bls.n	8004876 <ACC_Handller_TASK+0x7a>
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <ACC_Handller_TASK+0xac>)
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800485e:	d20a      	bcs.n	8004876 <ACC_Handller_TASK+0x7a>
						ACC_ACTION=ACC_CAR_SLOW_DOWN;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <ACC_Handller_TASK+0xb0>)
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <ACC_Handller_TASK+0xb4>)
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	2300      	movs	r3, #0
 800486c:	2202      	movs	r2, #2
 800486e:	490f      	ldr	r1, [pc, #60]	; (80048ac <ACC_Handller_TASK+0xb0>)
 8004870:	f7fb fddc 	bl	800042c <xQueueGenericSend>
 8004874:	e011      	b.n	800489a <ACC_Handller_TASK+0x9e>
						}else{

						}

					}else{
						ACC_ACTION=ACC_CAR_GO;
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <ACC_Handller_TASK+0xb0>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <ACC_Handller_TASK+0xb4>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	2300      	movs	r3, #0
 8004882:	2202      	movs	r2, #2
 8004884:	4909      	ldr	r1, [pc, #36]	; (80048ac <ACC_Handller_TASK+0xb0>)
 8004886:	f7fb fdd1 	bl	800042c <xQueueGenericSend>
 800488a:	e7b9      	b.n	8004800 <ACC_Handller_TASK+0x4>
				}

			}
			// if the Signal strength indicator not strong dequeue its disance value
			else{
				xQueueReceive(ACC__dis_Queue,&ACC_dis,0);
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <ACC_Handller_TASK+0xa8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2200      	movs	r2, #0
 8004892:	4905      	ldr	r1, [pc, #20]	; (80048a8 <ACC_Handller_TASK+0xac>)
 8004894:	4618      	mov	r0, r3
 8004896:	f7fb fe73 	bl	8000580 <xQueueReceive>
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 800489a:	e7b1      	b.n	8004800 <ACC_Handller_TASK+0x4>
 800489c:	20002300 	.word	0x20002300
 80048a0:	20002310 	.word	0x20002310
 80048a4:	200022fc 	.word	0x200022fc
 80048a8:	2000230e 	.word	0x2000230e
 80048ac:	20000021 	.word	0x20000021
 80048b0:	20002304 	.word	0x20002304

080048b4 <ACC_LUNA_READ_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_LUNA_READ_TASK(){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <ACC_LUNA_READ_TASK+0x24>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	2202      	movs	r2, #2
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <ACC_LUNA_READ_TASK+0x28>)
 80048c2:	f7fb fdb3 	bl	800042c <xQueueGenericSend>
		}else{

		}
		if(xQueueSend(ACC__AMP_Queue,&LUNA_AMP,2)==pdTRUE){
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <ACC_LUNA_READ_TASK+0x2c>)
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	2202      	movs	r2, #2
 80048ce:	4905      	ldr	r1, [pc, #20]	; (80048e4 <ACC_LUNA_READ_TASK+0x30>)
 80048d0:	f7fb fdac 	bl	800042c <xQueueGenericSend>
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 80048d4:	e7f0      	b.n	80048b8 <ACC_LUNA_READ_TASK+0x4>
 80048d6:	bf00      	nop
 80048d8:	200022fc 	.word	0x200022fc
 80048dc:	2000208c 	.word	0x2000208c
 80048e0:	20002300 	.word	0x20002300
 80048e4:	2000208e 	.word	0x2000208e

080048e8 <HW_init>:
	}
}



void HW_init(){
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 80048ee:	f7ff fec5 	bl	800467c <Sys_Clk_init>

	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 80048f2:	2100      	movs	r1, #0
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fd f901 	bl	8001afc <LUNA_INIT>
	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 80048fa:	f7ff fee7 	bl	80046cc <ACC_throtel_init>
	////////////*********LUNA_INIT***************//////////////////
	GP_TIMERx_config  PWM_config={27,334,1,344,INT_DIS,PWM,NULL};
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <HW_init+0x4c>)
 8004900:	f107 0408 	add.w	r4, r7, #8
 8004904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GP_TIMERx_CTC_config CTC_Sitting={ACC_PWM_CHx,PWM_AH,ACTIVE_H};
 800490a:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <HW_init+0x50>)
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	4611      	mov	r1, r2
 8004912:	8019      	strh	r1, [r3, #0]
 8004914:	3302      	adds	r3, #2
 8004916:	0c12      	lsrs	r2, r2, #16
 8004918:	701a      	strb	r2, [r3, #0]
	GP_TIMx__CTC_start(ACC_PWM_TIMx_INSTANTE,&PWM_config,&CTC_Sitting);
 800491a:	1d3a      	adds	r2, r7, #4
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004926:	f7fe fb41 	bl	8002fac <GP_TIMx__CTC_start>





}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	08004d40 	.word	0x08004d40
 8004938:	08004d50 	.word	0x08004d50

0800493c <ACC_throttel_Handller_TASK>:

void ACC_throttel_Handller_TASK(){
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
	uint8_t ACC_action=0,ACC_state=0,ACC_counter=0;
 8004942:	2300      	movs	r3, #0
 8004944:	707b      	strb	r3, [r7, #1]
 8004946:	2300      	movs	r3, #0
 8004948:	703b      	strb	r3, [r7, #0]
 800494a:	2300      	movs	r3, #0
 800494c:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_to_send=0,ADC_SAVED=0;
 800494e:	2300      	movs	r3, #0
 8004950:	80bb      	strh	r3, [r7, #4]
 8004952:	2300      	movs	r3, #0
 8004954:	807b      	strh	r3, [r7, #2]
	while(1){
		xQueueReceive(ACC__ACTION_Queue,&ACC_action,2);
 8004956:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <ACC_throttel_Handller_TASK+0x130>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	1c79      	adds	r1, r7, #1
 800495c:	2202      	movs	r2, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f7fb fe0e 	bl	8000580 <xQueueReceive>
		xQueueReceive(ACC__STATE_Queue,&ACC_state,2);
 8004964:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <ACC_throttel_Handller_TASK+0x134>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4639      	mov	r1, r7
 800496a:	2202      	movs	r2, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f7fb fe07 	bl	8000580 <xQueueReceive>
		if(ACC_state==ACC_ON){
 8004972:	783b      	ldrb	r3, [r7, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d142      	bne.n	80049fe <ACC_throttel_Handller_TASK+0xc2>
			if(ACC_counter ==0){
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <ACC_throttel_Handller_TASK+0x4e>
				ADC_SAVED=ACC_THROTTEL_DATA;
 800497e:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <ACC_throttel_Handller_TASK+0x138>)
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	807b      	strh	r3, [r7, #2]
				ACC_counter++;
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	3301      	adds	r3, #1
 8004988:	71fb      	strb	r3, [r7, #7]
			}
			if(ADC_SAVED<ACC_THROTTEL_DATA){
 800498a:	4b3a      	ldr	r3, [pc, #232]	; (8004a74 <ACC_throttel_Handller_TASK+0x138>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	429a      	cmp	r2, r3
 8004992:	d205      	bcs.n	80049a0 <ACC_throttel_Handller_TASK+0x64>
				ACC_FROM_ADC_TO_PWM(ACC_THROTTEL_DATA);
 8004994:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <ACC_throttel_Handller_TASK+0x138>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff01 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 800499e:	e7da      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>

			}else{
				if(ACC_action ==ACC_CAR_STOP){
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d109      	bne.n	80049ba <ACC_throttel_Handller_TASK+0x7e>
					ADC_to_send=ACC_FROM_PWM_TO_ADC(0);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7ff fec2 	bl	8004730 <ACC_FROM_PWM_TO_ADC>
 80049ac:	4603      	mov	r3, r0
 80049ae:	80bb      	strh	r3, [r7, #4]
					ACC_FROM_ADC_TO_PWM(ADC_to_send);
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fef4 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 80049b8:	e7cd      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
				}else if(ACC_action ==ACC_CAR_SLOW_DOWN){
 80049ba:	787b      	ldrb	r3, [r7, #1]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d116      	bne.n	80049ee <ACC_throttel_Handller_TASK+0xb2>
					//get the adc val and convert it to pwm and sub 20% from it then change the pwm duty
					ADC_to_send=ACC_FROM_ADC_TO_PWM_DATA(ADC_SAVED);
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fed2 	bl	800476c <ACC_FROM_ADC_TO_PWM_DATA>
 80049c8:	4603      	mov	r3, r0
 80049ca:	80bb      	strh	r3, [r7, #4]
					if(ADC_to_send>50)
 80049cc:	88bb      	ldrh	r3, [r7, #4]
 80049ce:	2b32      	cmp	r3, #50	; 0x32
 80049d0:	d901      	bls.n	80049d6 <ACC_throttel_Handller_TASK+0x9a>
					ADC_to_send=50;
 80049d2:	2332      	movs	r3, #50	; 0x32
 80049d4:	80bb      	strh	r3, [r7, #4]
					ADC_to_send=ACC_FROM_PWM_TO_ADC(ADC_to_send);
 80049d6:	88bb      	ldrh	r3, [r7, #4]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fea8 	bl	8004730 <ACC_FROM_PWM_TO_ADC>
 80049e0:	4603      	mov	r3, r0
 80049e2:	80bb      	strh	r3, [r7, #4]
					ACC_FROM_ADC_TO_PWM(ADC_to_send);
 80049e4:	88bb      	ldrh	r3, [r7, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff feda 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 80049ec:	e7b3      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
				}else if(ACC_action ==ACC_CAR_GO){
 80049ee:	787b      	ldrb	r3, [r7, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1b0      	bne.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
					ACC_FROM_ADC_TO_PWM(ADC_SAVED);
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fed2 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 80049fc:	e7ab      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>

				}
			}


		}else if(ACC_state==ACC_OFF){
 80049fe:	783b      	ldrb	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1a8      	bne.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
			ACC_counter=0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	71fb      	strb	r3, [r7, #7]
			if(ACC_action ==ACC_CAR_STOP){
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d109      	bne.n	8004a22 <ACC_throttel_Handller_TASK+0xe6>
				ADC_to_send=ACC_FROM_PWM_TO_ADC(0);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7ff fe8e 	bl	8004730 <ACC_FROM_PWM_TO_ADC>
 8004a14:	4603      	mov	r3, r0
 8004a16:	80bb      	strh	r3, [r7, #4]
				ACC_FROM_ADC_TO_PWM(ADC_to_send);
 8004a18:	88bb      	ldrh	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fec0 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 8004a20:	e799      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
			}else if(ACC_action ==ACC_CAR_SLOW_DOWN){
 8004a22:	787b      	ldrb	r3, [r7, #1]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d117      	bne.n	8004a58 <ACC_throttel_Handller_TASK+0x11c>
				//get the adc val and convert it to pwm and sub 20% from it then change the pwm duty
				ADC_to_send=ACC_FROM_ADC_TO_PWM_DATA(ACC_THROTTEL_DATA);
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <ACC_throttel_Handller_TASK+0x138>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fe9d 	bl	800476c <ACC_FROM_ADC_TO_PWM_DATA>
 8004a32:	4603      	mov	r3, r0
 8004a34:	80bb      	strh	r3, [r7, #4]
				if(ADC_to_send>50)
 8004a36:	88bb      	ldrh	r3, [r7, #4]
 8004a38:	2b32      	cmp	r3, #50	; 0x32
 8004a3a:	d901      	bls.n	8004a40 <ACC_throttel_Handller_TASK+0x104>
				ADC_to_send=50;
 8004a3c:	2332      	movs	r3, #50	; 0x32
 8004a3e:	80bb      	strh	r3, [r7, #4]
				ADC_to_send=ACC_FROM_PWM_TO_ADC(ADC_to_send);
 8004a40:	88bb      	ldrh	r3, [r7, #4]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fe73 	bl	8004730 <ACC_FROM_PWM_TO_ADC>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	80bb      	strh	r3, [r7, #4]
				ACC_FROM_ADC_TO_PWM(ADC_to_send);
 8004a4e:	88bb      	ldrh	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fea5 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
 8004a56:	e77e      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
			}else if(ACC_action ==ACC_CAR_GO){
 8004a58:	787b      	ldrb	r3, [r7, #1]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f47f af7b 	bne.w	8004956 <ACC_throttel_Handller_TASK+0x1a>
				ACC_FROM_ADC_TO_PWM(ACC_THROTTEL_DATA);
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <ACC_throttel_Handller_TASK+0x138>)
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fe9b 	bl	80047a0 <ACC_FROM_ADC_TO_PWM>
		xQueueReceive(ACC__ACTION_Queue,&ACC_action,2);
 8004a6a:	e774      	b.n	8004956 <ACC_throttel_Handller_TASK+0x1a>
 8004a6c:	20002304 	.word	0x20002304
 8004a70:	20002308 	.word	0x20002308
 8004a74:	20002312 	.word	0x20002312

08004a78 <ACC_STATE_READ_TASK>:
			}
		}

	}
}
void ACC_STATE_READ_TASK(){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	while(1){

		ACC_ST=MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN);
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	480a      	ldr	r0, [pc, #40]	; (8004aa8 <ACC_STATE_READ_TASK+0x30>)
 8004a80:	f7fe f866 	bl	8002b50 <MCAL_Read_PIN>
 8004a84:	4603      	mov	r3, r0
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <ACC_STATE_READ_TASK+0x34>)
 8004a8a:	701a      	strb	r2, [r3, #0]
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <ACC_STATE_READ_TASK+0x38>)
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4808      	ldr	r0, [pc, #32]	; (8004ab4 <ACC_STATE_READ_TASK+0x3c>)
 8004a92:	f7fd fbe3 	bl	800225c <ADC_read>
		if(xQueueSend(ACC__STATE_Queue,&ACC_ST,2)==pdTRUE){
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <ACC_STATE_READ_TASK+0x40>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	4903      	ldr	r1, [pc, #12]	; (8004aac <ACC_STATE_READ_TASK+0x34>)
 8004aa0:	f7fb fcc4 	bl	800042c <xQueueGenericSend>
		ACC_ST=MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN);
 8004aa4:	e7ea      	b.n	8004a7c <ACC_STATE_READ_TASK+0x4>
 8004aa6:	bf00      	nop
 8004aa8:	40010800 	.word	0x40010800
 8004aac:	2000230c 	.word	0x2000230c
 8004ab0:	20002312 	.word	0x20002312
 8004ab4:	40012400 	.word	0x40012400
 8004ab8:	20002308 	.word	0x20002308

08004abc <main>:
		}else{
		}
	}
}
int main(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af02      	add	r7, sp, #8
	HW_init();
 8004ac2:	f7ff ff11 	bl	80048e8 <HW_init>

	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	2302      	movs	r3, #2
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad4:	4935      	ldr	r1, [pc, #212]	; (8004bac <main+0xf0>)
 8004ad6:	4836      	ldr	r0, [pc, #216]	; (8004bb0 <main+0xf4>)
 8004ad8:	f7fb ff04 	bl	80008e4 <xTaskCreate>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <main+0x2a>
		Error_Handller();
 8004ae2:	f7ff fe21 	bl	8004728 <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2302      	movs	r3, #2
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af4:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <main+0xf8>)
 8004af6:	4830      	ldr	r0, [pc, #192]	; (8004bb8 <main+0xfc>)
 8004af8:	f7fb fef4 	bl	80008e4 <xTaskCreate>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <main+0x4a>
		Error_Handller();
 8004b02:	f7ff fe11 	bl	8004728 <Error_Handller>
	}

	if(xTaskCreate(ACC_LUNA_READ_TASK,"LUNA_READ",256,NULL,2,NULL)!=pdPASS ){
 8004b06:	2300      	movs	r3, #0
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b14:	4929      	ldr	r1, [pc, #164]	; (8004bbc <main+0x100>)
 8004b16:	482a      	ldr	r0, [pc, #168]	; (8004bc0 <main+0x104>)
 8004b18:	f7fb fee4 	bl	80008e4 <xTaskCreate>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <main+0x6a>
		Error_Handller();
 8004b22:	f7ff fe01 	bl	8004728 <Error_Handller>
	}
	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,NULL)!=pdPASS ){
 8004b26:	2300      	movs	r3, #0
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b34:	4923      	ldr	r1, [pc, #140]	; (8004bc4 <main+0x108>)
 8004b36:	4824      	ldr	r0, [pc, #144]	; (8004bc8 <main+0x10c>)
 8004b38:	f7fb fed4 	bl	80008e4 <xTaskCreate>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <main+0x8a>
		Error_Handller();
 8004b42:	f7ff fdf1 	bl	8004728 <Error_Handller>
	}

	ACC_Semaphore = xSemaphoreCreateBinary();
 8004b46:	2203      	movs	r2, #3
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7fb fc10 	bl	8000370 <xQueueGenericCreate>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <main+0x110>)
 8004b54:	6013      	str	r3, [r2, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8004b56:	2200      	movs	r2, #0
 8004b58:	2101      	movs	r1, #1
 8004b5a:	200a      	movs	r0, #10
 8004b5c:	f7fb fc08 	bl	8000370 <xQueueGenericCreate>
 8004b60:	4603      	mov	r3, r0
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <main+0x114>)
 8004b64:	6013      	str	r3, [r2, #0]
	ACC__dis_Queue=xQueueCreate(10,sizeof(short));
 8004b66:	2200      	movs	r2, #0
 8004b68:	2102      	movs	r1, #2
 8004b6a:	200a      	movs	r0, #10
 8004b6c:	f7fb fc00 	bl	8000370 <xQueueGenericCreate>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <main+0x118>)
 8004b74:	6013      	str	r3, [r2, #0]
	ACC__AMP_Queue=xQueueCreate(10,sizeof(short));
 8004b76:	2200      	movs	r2, #0
 8004b78:	2102      	movs	r1, #2
 8004b7a:	200a      	movs	r0, #10
 8004b7c:	f7fb fbf8 	bl	8000370 <xQueueGenericCreate>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <main+0x11c>)
 8004b84:	6013      	str	r3, [r2, #0]
	ACC__ACTION_Queue=xQueueCreate(10,sizeof(char));
 8004b86:	2200      	movs	r2, #0
 8004b88:	2101      	movs	r1, #1
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f7fb fbf0 	bl	8000370 <xQueueGenericCreate>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <main+0x120>)
 8004b94:	6013      	str	r3, [r2, #0]
	ACC__STATE_Queue=xQueueCreate(10,sizeof(char));
 8004b96:	2200      	movs	r2, #0
 8004b98:	2101      	movs	r1, #1
 8004b9a:	200a      	movs	r0, #10
 8004b9c:	f7fb fbe8 	bl	8000370 <xQueueGenericCreate>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <main+0x124>)
 8004ba4:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8004ba6:	f7fb ffdd 	bl	8000b64 <vTaskStartScheduler>

	for(;;);
 8004baa:	e7fe      	b.n	8004baa <main+0xee>
 8004bac:	08004d54 	.word	0x08004d54
 8004bb0:	0800493d 	.word	0x0800493d
 8004bb4:	08004d70 	.word	0x08004d70
 8004bb8:	080047fd 	.word	0x080047fd
 8004bbc:	08004d84 	.word	0x08004d84
 8004bc0:	080048b5 	.word	0x080048b5
 8004bc4:	08004d90 	.word	0x08004d90
 8004bc8:	08004a79 	.word	0x08004a79
 8004bcc:	200022f4 	.word	0x200022f4
 8004bd0:	200022f8 	.word	0x200022f8
 8004bd4:	200022fc 	.word	0x200022fc
 8004bd8:	20002300 	.word	0x20002300
 8004bdc:	20002304 	.word	0x20002304
 8004be0:	20002308 	.word	0x20002308

08004be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004be4:	480d      	ldr	r0, [pc, #52]	; (8004c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004be6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004be8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bec:	480c      	ldr	r0, [pc, #48]	; (8004c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bee:	490d      	ldr	r1, [pc, #52]	; (8004c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bf0:	4a0d      	ldr	r2, [pc, #52]	; (8004c28 <LoopForever+0xe>)
  movs r3, #0
 8004bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf4:	e002      	b.n	8004bfc <LoopCopyDataInit>

08004bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bfa:	3304      	adds	r3, #4

08004bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c00:	d3f9      	bcc.n	8004bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c04:	4c0a      	ldr	r4, [pc, #40]	; (8004c30 <LoopForever+0x16>)
  movs r3, #0
 8004c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c08:	e001      	b.n	8004c0e <LoopFillZerobss>

08004c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c0c:	3204      	adds	r2, #4

08004c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c10:	d3fb      	bcc.n	8004c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c12:	f000 f819 	bl	8004c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c16:	f7ff ff51 	bl	8004abc <main>

08004c1a <LoopForever>:

LoopForever:
  b LoopForever
 8004c1a:	e7fe      	b.n	8004c1a <LoopForever>
  ldr   r0, =_estack
 8004c1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c24:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004c28:	08004da4 	.word	0x08004da4
  ldr r2, =_sbss
 8004c2c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004c30:	20002314 	.word	0x20002314

08004c34 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c34:	e7fe      	b.n	8004c34 <ADC3_IRQHandler>

08004c36 <memset>:
 8004c36:	4603      	mov	r3, r0
 8004c38:	4402      	add	r2, r0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d100      	bne.n	8004c40 <memset+0xa>
 8004c3e:	4770      	bx	lr
 8004c40:	f803 1b01 	strb.w	r1, [r3], #1
 8004c44:	e7f9      	b.n	8004c3a <memset+0x4>
	...

08004c48 <__libc_init_array>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	2600      	movs	r6, #0
 8004c4c:	4d0c      	ldr	r5, [pc, #48]	; (8004c80 <__libc_init_array+0x38>)
 8004c4e:	4c0d      	ldr	r4, [pc, #52]	; (8004c84 <__libc_init_array+0x3c>)
 8004c50:	1b64      	subs	r4, r4, r5
 8004c52:	10a4      	asrs	r4, r4, #2
 8004c54:	42a6      	cmp	r6, r4
 8004c56:	d109      	bne.n	8004c6c <__libc_init_array+0x24>
 8004c58:	f000 f828 	bl	8004cac <_init>
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	4d0a      	ldr	r5, [pc, #40]	; (8004c88 <__libc_init_array+0x40>)
 8004c60:	4c0a      	ldr	r4, [pc, #40]	; (8004c8c <__libc_init_array+0x44>)
 8004c62:	1b64      	subs	r4, r4, r5
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	42a6      	cmp	r6, r4
 8004c68:	d105      	bne.n	8004c76 <__libc_init_array+0x2e>
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c70:	4798      	blx	r3
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7ee      	b.n	8004c54 <__libc_init_array+0xc>
 8004c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7a:	4798      	blx	r3
 8004c7c:	3601      	adds	r6, #1
 8004c7e:	e7f2      	b.n	8004c66 <__libc_init_array+0x1e>
 8004c80:	08004d9c 	.word	0x08004d9c
 8004c84:	08004d9c 	.word	0x08004d9c
 8004c88:	08004d9c 	.word	0x08004d9c
 8004c8c:	08004da0 	.word	0x08004da0

08004c90 <memcpy>:
 8004c90:	440a      	add	r2, r1
 8004c92:	4291      	cmp	r1, r2
 8004c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c98:	d100      	bne.n	8004c9c <memcpy+0xc>
 8004c9a:	4770      	bx	lr
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ca8:	d1f9      	bne.n	8004c9e <memcpy+0xe>
 8004caa:	bd10      	pop	{r4, pc}

08004cac <_init>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr

08004cb8 <_fini>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr
