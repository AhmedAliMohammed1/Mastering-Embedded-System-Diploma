
Graduation_Project_Finall.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019b70  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f13c  0801f13c  00030024  2**0
                  CONTENTS
  4 .ARM          00000000  0801f13c  0801f13c  00030024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f13c  0801f13c  00030024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f13c  0801f13c  0002f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f140  0801f140  0002f140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0801f144  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000424c  20000024  0801f168  00030024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004270  0801f168  00034270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010826  00000000  00000000  0003004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002225  00000000  00000000  00040873  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003eb4  00000000  00000000  00042a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000898  00000000  00000000  00046950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000770  00000000  00000000  000471e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001ae8  00000000  00000000  00047958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00007e85  00000000  00000000  00049440  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000141c6  00000000  00000000  000512c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0006548b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f5c  00000000  00000000  00065508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	080055b4 	.word	0x080055b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	080055b4 	.word	0x080055b4

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d063      	beq.n	80003b0 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d05f      	beq.n	80003b0 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f8:	2000      	movs	r0, #0
 80002fa:	fba2 1203 	umull	r1, r2, r2, r3
 80002fe:	f04f 0300 	mov.w	r3, #0
 8000302:	f04f 0400 	mov.w	r4, #0
 8000306:	0013      	movs	r3, r2
 8000308:	2400      	movs	r4, #0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d000      	beq.n	8000310 <xQueueGenericReset+0x40>
 800030e:	2001      	movs	r0, #1
 8000310:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14c      	bne.n	80003b0 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8000316:	f001 fda9 	bl	8001e6c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000322:	68b9      	ldr	r1, [r7, #8]
 8000324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000326:	fb01 f303 	mul.w	r3, r1, r3
 800032a:	441a      	add	r2, r3
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2200      	movs	r2, #0
 8000334:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000346:	3b01      	subs	r3, #1
 8000348:	68b9      	ldr	r1, [r7, #8]
 800034a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800034c:	fb01 f303 	mul.w	r3, r1, r3
 8000350:	441a      	add	r2, r3
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	22ff      	movs	r2, #255	; 0xff
 800035a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d114      	bne.n	8000396 <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d01a      	beq.n	80003aa <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3310      	adds	r3, #16
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f8bf 	bl	80014fc <xTaskRemoveFromEventList>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d012      	beq.n	80003aa <xQueueGenericReset+0xda>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <xQueueGenericReset+0xf0>)
 8000386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	f3bf 8f4f 	dsb	sy
 8000390:	f3bf 8f6f 	isb	sy
 8000394:	e009      	b.n	80003aa <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3310      	adds	r3, #16
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee8 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3324      	adds	r3, #36	; 0x24
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff fee3 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003aa:	f001 fd77 	bl	8001e9c <vPortExitCritical>
 80003ae:	e001      	b.n	80003b4 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80003b4:	68fb      	ldr	r3, [r7, #12]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd90      	pop	{r4, r7, pc}
 80003be:	bf00      	nop
 80003c0:	e000ed04 	.word	0xe000ed04

080003c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b08b      	sub	sp, #44	; 0x2c
 80003c8:	af02      	add	r7, sp, #8
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	4613      	mov	r3, r2
 80003d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d033      	beq.n	8000444 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003dc:	2000      	movs	r0, #0
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	fba2 1203 	umull	r1, r2, r2, r3
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	f04f 0400 	mov.w	r4, #0
 80003ee:	0013      	movs	r3, r2
 80003f0:	2400      	movs	r4, #0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d000      	beq.n	80003f8 <xQueueGenericCreate+0x34>
 80003f6:	2001      	movs	r0, #1
 80003f8:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d122      	bne.n	8000444 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000406:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800040a:	d81b      	bhi.n	8000444 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	fb02 f303 	mul.w	r3, r2, r3
 8000414:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	3348      	adds	r3, #72	; 0x48
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fdb6 	bl	8001f8c <pvPortMalloc>
 8000420:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d00d      	beq.n	8000444 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	3348      	adds	r3, #72	; 0x48
 8000430:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000432:	79fa      	ldrb	r2, [r7, #7]
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	4613      	mov	r3, r2
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	68f8      	ldr	r0, [r7, #12]
 8000440:	f000 f805 	bl	800044e <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000444:	69fb      	ldr	r3, [r7, #28]
    }
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd90      	pop	{r4, r7, pc}

0800044e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af00      	add	r7, sp, #0
 8000454:	60f8      	str	r0, [r7, #12]
 8000456:	60b9      	str	r1, [r7, #8]
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d103      	bne.n	800046a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	69ba      	ldr	r2, [r7, #24]
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e002      	b.n	8000470 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800047c:	2101      	movs	r1, #1
 800047e:	69b8      	ldr	r0, [r7, #24]
 8000480:	f7ff ff26 	bl	80002d0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
 8000498:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80004a2:	f001 fce3 	bl	8001e6c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004aa:	6a3b      	ldr	r3, [r7, #32]
 80004ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d302      	bcc.n	80004b8 <xQueueGenericSend+0x2c>
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d129      	bne.n	800050c <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	68b9      	ldr	r1, [r7, #8]
 80004bc:	6a38      	ldr	r0, [r7, #32]
 80004be:	f000 f96e 	bl	800079e <prvCopyDataToQueue>
 80004c2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80004c4:	6a3b      	ldr	r3, [r7, #32]
 80004c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d010      	beq.n	80004ee <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004cc:	6a3b      	ldr	r3, [r7, #32]
 80004ce:	3324      	adds	r3, #36	; 0x24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 f813 	bl	80014fc <xTaskRemoveFromEventList>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d013      	beq.n	8000504 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004dc:	4b3f      	ldr	r3, [pc, #252]	; (80005dc <xQueueGenericSend+0x150>)
 80004de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	f3bf 8f4f 	dsb	sy
 80004e8:	f3bf 8f6f 	isb	sy
 80004ec:	e00a      	b.n	8000504 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d007      	beq.n	8000504 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <xQueueGenericSend+0x150>)
 80004f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000504:	f001 fcca 	bl	8001e9c <vPortExitCritical>
                return pdPASS;
 8000508:	2301      	movs	r3, #1
 800050a:	e063      	b.n	80005d4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000512:	f001 fcc3 	bl	8001e9c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000516:	2300      	movs	r3, #0
 8000518:	e05c      	b.n	80005d4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	2b00      	cmp	r3, #0
 800051e:	d106      	bne.n	800052e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f8b1 	bl	800168c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800052a:	2301      	movs	r3, #1
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800052e:	f001 fcb5 	bl	8001e9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000532:	f000 fd87 	bl	8001044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000536:	f001 fc99 	bl	8001e6c <vPortEnterCritical>
 800053a:	6a3b      	ldr	r3, [r7, #32]
 800053c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000540:	b25b      	sxtb	r3, r3
 8000542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000546:	d103      	bne.n	8000550 <xQueueGenericSend+0xc4>
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000556:	b25b      	sxtb	r3, r3
 8000558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800055c:	d103      	bne.n	8000566 <xQueueGenericSend+0xda>
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000566:	f001 fc99 	bl	8001e9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800056a:	1d3a      	adds	r2, r7, #4
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f8a0 	bl	80016b8 <xTaskCheckForTimeOut>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d124      	bne.n	80005c8 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800057e:	6a38      	ldr	r0, [r7, #32]
 8000580:	f000 f9df 	bl	8000942 <prvIsQueueFull>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d018      	beq.n	80005bc <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3310      	adds	r3, #16
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ff9c 	bl	80014d0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000598:	6a38      	ldr	r0, [r7, #32]
 800059a:	f000 f96a 	bl	8000872 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800059e:	f000 fd5f 	bl	8001060 <xTaskResumeAll>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f47f af7c 	bne.w	80004a2 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <xQueueGenericSend+0x150>)
 80005ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	e772      	b.n	80004a2 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80005bc:	6a38      	ldr	r0, [r7, #32]
 80005be:	f000 f958 	bl	8000872 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80005c2:	f000 fd4d 	bl	8001060 <xTaskResumeAll>
 80005c6:	e76c      	b.n	80004a2 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80005c8:	6a38      	ldr	r0, [r7, #32]
 80005ca:	f000 f952 	bl	8000872 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80005ce:	f000 fd47 	bl	8001060 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80005d2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3728      	adds	r7, #40	; 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	e000ed04 	.word	0xe000ed04

080005e0 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005f6:	f001 fc39 	bl	8001e6c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d024      	beq.n	8000650 <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d104      	bne.n	8000620 <xQueueSemaphoreTake+0x40>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000616:	f001 fb09 	bl	8001c2c <pvTaskIncrementMutexHeldCount>
 800061a:	4602      	mov	r2, r0
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	3310      	adds	r3, #16
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ff65 	bl	80014fc <xTaskRemoveFromEventList>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000638:	4b4c      	ldr	r3, [pc, #304]	; (800076c <xQueueSemaphoreTake+0x18c>)
 800063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000648:	f001 fc28 	bl	8001e9c <vPortExitCritical>
                return pdPASS;
 800064c:	2301      	movs	r3, #1
 800064e:	e089      	b.n	8000764 <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <xQueueSemaphoreTake+0x7e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000656:	f001 fc21 	bl	8001e9c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800065a:	2300      	movs	r3, #0
 800065c:	e082      	b.n	8000764 <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	2b00      	cmp	r3, #0
 8000662:	d106      	bne.n	8000672 <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f80f 	bl	800168c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800066e:	2301      	movs	r3, #1
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000672:	f001 fc13 	bl	8001e9c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000676:	f000 fce5 	bl	8001044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800067a:	f001 fbf7 	bl	8001e6c <vPortEnterCritical>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000684:	b25b      	sxtb	r3, r3
 8000686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068a:	d103      	bne.n	8000694 <xQueueSemaphoreTake+0xb4>
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800069a:	b25b      	sxtb	r3, r3
 800069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a0:	d103      	bne.n	80006aa <xQueueSemaphoreTake+0xca>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80006aa:	f001 fbf7 	bl	8001e9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006ae:	463a      	mov	r2, r7
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fffe 	bl	80016b8 <xTaskCheckForTimeOut>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d132      	bne.n	8000728 <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006c2:	69f8      	ldr	r0, [r7, #28]
 80006c4:	f000 f927 	bl	8000916 <prvIsQueueEmpty>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d026      	beq.n	800071c <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <xQueueSemaphoreTake+0x10a>
                    {
                        taskENTER_CRITICAL();
 80006d6:	f001 fbc9 	bl	8001e6c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f8ee 	bl	80018c0 <xTaskPriorityInherit>
 80006e4:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 80006e6:	f001 fbd9 	bl	8001e9c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3324      	adds	r3, #36	; 0x24
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 feec 	bl	80014d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006f8:	69f8      	ldr	r0, [r7, #28]
 80006fa:	f000 f8ba 	bl	8000872 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80006fe:	f000 fcaf 	bl	8001060 <xTaskResumeAll>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	f47f af76 	bne.w	80005f6 <xQueueSemaphoreTake+0x16>
                {
                    portYIELD_WITHIN_API();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <xQueueSemaphoreTake+0x18c>)
 800070c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	f3bf 8f6f 	isb	sy
 800071a:	e76c      	b.n	80005f6 <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800071c:	69f8      	ldr	r0, [r7, #28]
 800071e:	f000 f8a8 	bl	8000872 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000722:	f000 fc9d 	bl	8001060 <xTaskResumeAll>
 8000726:	e766      	b.n	80005f6 <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000728:	69f8      	ldr	r0, [r7, #28]
 800072a:	f000 f8a2 	bl	8000872 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800072e:	f000 fc97 	bl	8001060 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000732:	69f8      	ldr	r0, [r7, #28]
 8000734:	f000 f8ef 	bl	8000916 <prvIsQueueEmpty>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	f43f af5b 	beq.w	80005f6 <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00d      	beq.n	8000762 <xQueueSemaphoreTake+0x182>
                    {
                        taskENTER_CRITICAL();
 8000746:	f001 fb91 	bl	8001e6c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800074a:	69f8      	ldr	r0, [r7, #28]
 800074c:	f000 f810 	bl	8000770 <prvGetDisinheritPriorityAfterTimeout>
 8000750:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	6979      	ldr	r1, [r7, #20]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f9d1 	bl	8001b00 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800075e:	f001 fb9d 	bl	8001e9c <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000762:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000764:	4618      	mov	r0, r3
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	e000ed04 	.word	0xe000ed04

08000770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	2b00      	cmp	r3, #0
 800077e:	d006      	beq.n	800078e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f1c3 0305 	rsb	r3, r3, #5
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e001      	b.n	8000792 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000792:	68fb      	ldr	r3, [r7, #12]
    }
 8000794:	4618      	mov	r0, r3
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10d      	bne.n	80007d8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14d      	bne.n	8000860 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f917 	bl	80019fc <xTaskPriorityDisinherit>
 80007ce:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	e043      	b.n	8000860 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d119      	bne.n	8000812 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6858      	ldr	r0, [r3, #4]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	461a      	mov	r2, r3
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	f004 fecf 	bl	800558c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	441a      	add	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	429a      	cmp	r2, r3
 8000806:	d32b      	bcc.n	8000860 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	e026      	b.n	8000860 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68d8      	ldr	r0, [r3, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	461a      	mov	r2, r3
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	f004 feb5 	bl	800558c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68da      	ldr	r2, [r3, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	425b      	negs	r3, r3
 800082c:	441a      	add	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d207      	bcs.n	800084e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	425b      	negs	r3, r3
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d105      	bne.n	8000860 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	3b01      	subs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000868:	697b      	ldr	r3, [r7, #20]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800087a:	f001 faf7 	bl	8001e6c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000884:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000886:	e011      	b.n	80008ac <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	2b00      	cmp	r3, #0
 800088e:	d012      	beq.n	80008b6 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3324      	adds	r3, #36	; 0x24
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fe31 	bl	80014fc <xTaskRemoveFromEventList>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80008a0:	f000 ff54 	bl	800174c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80008ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dce9      	bgt.n	8000888 <prvUnlockQueue+0x16>
 80008b4:	e000      	b.n	80008b8 <prvUnlockQueue+0x46>
                    break;
 80008b6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80008c0:	f001 faec 	bl	8001e9c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80008c4:	f001 fad2 	bl	8001e6c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008ce:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008d0:	e011      	b.n	80008f6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d012      	beq.n	8000900 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3310      	adds	r3, #16
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fe0c 	bl	80014fc <xTaskRemoveFromEventList>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80008ea:	f000 ff2f 	bl	800174c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dce9      	bgt.n	80008d2 <prvUnlockQueue+0x60>
 80008fe:	e000      	b.n	8000902 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000900:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	22ff      	movs	r2, #255	; 0xff
 8000906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800090a:	f001 fac7 	bl	8001e9c <vPortExitCritical>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800091e:	f001 faa5 	bl	8001e6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800092a:	2301      	movs	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e001      	b.n	8000934 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000934:	f001 fab2 	bl	8001e9c <vPortExitCritical>

    return xReturn;
 8000938:	68fb      	ldr	r3, [r7, #12]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800094a:	f001 fa8f 	bl	8001e6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000956:	429a      	cmp	r2, r3
 8000958:	d102      	bne.n	8000960 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800095a:	2301      	movs	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e001      	b.n	8000964 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000964:	f001 fa9a 	bl	8001e9c <vPortExitCritical>

    return xReturn;
 8000968:	68fb      	ldr	r3, [r7, #12]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000972:	b580      	push	{r7, lr}
 8000974:	b08c      	sub	sp, #48	; 0x30
 8000976:	af04      	add	r7, sp, #16
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4613      	mov	r3, r2
 8000980:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fb00 	bl	8001f8c <pvPortMalloc>
 800098c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d013      	beq.n	80009bc <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000994:	2054      	movs	r0, #84	; 0x54
 8000996:	f001 faf9 	bl	8001f8c <pvPortMalloc>
 800099a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80009a2:	2254      	movs	r2, #84	; 0x54
 80009a4:	2100      	movs	r1, #0
 80009a6:	69f8      	ldr	r0, [r7, #28]
 80009a8:	f004 fdfb 	bl	80055a2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
 80009b2:	e005      	b.n	80009c0 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80009b4:	6978      	ldr	r0, [r7, #20]
 80009b6:	f001 fb3b 	bl	8002030 <vPortFree>
 80009ba:	e001      	b.n	80009c0 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d013      	beq.n	80009ee <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	2300      	movs	r3, #0
 80009ca:	9303      	str	r3, [sp, #12]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f80e 	bl	80009fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80009e2:	69f8      	ldr	r0, [r7, #28]
 80009e4:	f000 f874 	bl	8000ad0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	e002      	b.n	80009f4 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80009f4:	69bb      	ldr	r3, [r7, #24]
    }
 80009f6:	4618      	mov	r0, r3
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a16:	3b01      	subs	r3, #1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	f023 0307 	bic.w	r3, r3, #7
 8000a24:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d01e      	beq.n	8000a6a <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e012      	b.n	8000a58 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4413      	add	r3, r2
 8000a38:	7819      	ldrb	r1, [r3, #0]
 8000a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	4413      	add	r3, r2
 8000a40:	3334      	adds	r3, #52	; 0x34
 8000a42:	460a      	mov	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d006      	beq.n	8000a60 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d9e9      	bls.n	8000a32 <prvInitialiseNewTask+0x34>
 8000a5e:	e000      	b.n	8000a62 <prvInitialiseNewTask+0x64>
            {
                break;
 8000a60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d901      	bls.n	8000a74 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a70:	2304      	movs	r3, #4
 8000a72:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	6a3a      	ldr	r2, [r7, #32]
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	6a3a      	ldr	r2, [r7, #32]
 8000a7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	3304      	adds	r3, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fb92 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	3318      	adds	r3, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fb8d 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a98:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	f1c3 0205 	rsb	r2, r3, #5
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	68f9      	ldr	r1, [r7, #12]
 8000aae:	6938      	ldr	r0, [r7, #16]
 8000ab0:	f001 f950 	bl	8001d54 <pxPortInitialiseStack>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ad8:	f001 f9c8 	bl	8001e6c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <prvAddNewTaskToReadyList+0x108>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a3d      	ldr	r2, [pc, #244]	; (8000bd8 <prvAddNewTaskToReadyList+0x108>)
 8000ae4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <prvAddNewTaskToReadyList+0x10c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d109      	bne.n	8000b02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000aee:	4a3b      	ldr	r2, [pc, #236]	; (8000bdc <prvAddNewTaskToReadyList+0x10c>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <prvAddNewTaskToReadyList+0x108>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d110      	bne.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000afc:	f000 fe4a 	bl	8001794 <prvInitialiseTaskLists>
 8000b00:	e00d      	b.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <prvAddNewTaskToReadyList+0x110>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d109      	bne.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <prvAddNewTaskToReadyList+0x10c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d802      	bhi.n	8000b1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000b18:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <prvAddNewTaskToReadyList+0x10c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <prvAddNewTaskToReadyList+0x114>)
 8000b26:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <prvAddNewTaskToReadyList+0x118>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <prvAddNewTaskToReadyList+0x118>)
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3e:	492b      	ldr	r1, [pc, #172]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	3204      	adds	r2, #4
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1d1a      	adds	r2, r3, #4
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b7e:	441a      	add	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b88:	4918      	ldr	r1, [pc, #96]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <prvAddNewTaskToReadyList+0x11c>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4403      	add	r3, r0
 8000ba4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ba6:	f001 f979 	bl	8001e9c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <prvAddNewTaskToReadyList+0x110>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00e      	beq.n	8000bd0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <prvAddNewTaskToReadyList+0x10c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <prvAddNewTaskToReadyList+0x120>)
 8000bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	f3bf 8f4f 	dsb	sy
 8000bcc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000118 	.word	0x20000118
 8000bdc:	20000040 	.word	0x20000040
 8000be0:	20000124 	.word	0x20000124
 8000be4:	20000134 	.word	0x20000134
 8000be8:	20000120 	.word	0x20000120
 8000bec:	20000044 	.word	0x20000044
 8000bf0:	e000ed04 	.word	0xe000ed04

08000bf4 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d901      	bls.n	8000c0c <vTaskPrioritySet+0x18>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8000c0c:	f001 f92e 	bl	8001e6c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <vTaskPrioritySet+0x28>
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <vTaskPrioritySet+0x178>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	e000      	b.n	8000c1e <vTaskPrioritySet+0x2a>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f000 8098 	beq.w	8000d60 <vTaskPrioritySet+0x16c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d90d      	bls.n	8000c54 <vTaskPrioritySet+0x60>
                {
                    if( pxTCB != pxCurrentTCB )
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <vTaskPrioritySet+0x178>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d00f      	beq.n	8000c62 <vTaskPrioritySet+0x6e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8000c42:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <vTaskPrioritySet+0x178>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d309      	bcc.n	8000c62 <vTaskPrioritySet+0x6e>
                        {
                            xYieldRequired = pdTRUE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	e006      	b.n	8000c62 <vTaskPrioritySet+0x6e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <vTaskPrioritySet+0x178>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d101      	bne.n	8000c62 <vTaskPrioritySet+0x6e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d102      	bne.n	8000c7a <vTaskPrioritySet+0x86>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db04      	blt.n	8000c92 <vTaskPrioritySet+0x9e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f1c3 0205 	rsb	r2, r3, #5
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	6959      	ldr	r1, [r3, #20]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <vTaskPrioritySet+0x17c>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d150      	bne.n	8000d4a <vTaskPrioritySet+0x156>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	3304      	adds	r3, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fae5 	bl	800027c <uxListRemove>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <vTaskPrioritySet+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8000cb8:	2201      	movs	r2, #1
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43da      	mvns	r2, r3
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <vTaskPrioritySet+0x180>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	4a2a      	ldr	r2, [pc, #168]	; (8000d74 <vTaskPrioritySet+0x180>)
 8000cca:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <vTaskPrioritySet+0x180>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <vTaskPrioritySet+0x180>)
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce2:	4923      	ldr	r1, [pc, #140]	; (8000d70 <vTaskPrioritySet+0x17c>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	3304      	adds	r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	3204      	adds	r2, #4
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	1d1a      	adds	r2, r3, #4
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <vTaskPrioritySet+0x17c>)
 8000d22:	441a      	add	r2, r3
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2c:	4910      	ldr	r1, [pc, #64]	; (8000d70 <vTaskPrioritySet+0x17c>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1c59      	adds	r1, r3, #1
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <vTaskPrioritySet+0x17c>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4403      	add	r3, r0
 8000d48:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d007      	beq.n	8000d60 <vTaskPrioritySet+0x16c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <vTaskPrioritySet+0x184>)
 8000d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	f3bf 8f4f 	dsb	sy
 8000d5c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8000d60:	f001 f89c 	bl	8001e9c <vPortExitCritical>
    }
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000040 	.word	0x20000040
 8000d70:	20000044 	.word	0x20000044
 8000d74:	20000120 	.word	0x20000120
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000d84:	f001 f872 	bl	8001e6c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <vTaskSuspend+0x18>
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <vTaskSuspend+0x100>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	e000      	b.n	8000d96 <vTaskSuspend+0x1a>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fa6d 	bl	800027c <uxListRemove>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d115      	bne.n	8000dd4 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dac:	4934      	ldr	r1, [pc, #208]	; (8000e80 <vTaskSuspend+0x104>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10a      	bne.n	8000dd4 <vTaskSuspend+0x58>
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <vTaskSuspend+0x108>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <vTaskSuspend+0x108>)
 8000dd2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	3318      	adds	r3, #24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa4b 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <vTaskSuspend+0x10c>)
 8000dee:	f7ff f9ea 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	e010      	b.n	8000e1a <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3350      	adds	r3, #80	; 0x50
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3350      	adds	r3, #80	; 0x50
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	ddeb      	ble.n	8000df8 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000e20:	f001 f83c 	bl	8001e9c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <vTaskSuspend+0x110>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000e2c:	f001 f81e 	bl	8001e6c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000e30:	f000 fd2c 	bl	800188c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000e34:	f001 f832 	bl	8001e9c <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <vTaskSuspend+0x100>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d118      	bne.n	8000e74 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <vTaskSuspend+0x110>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <vTaskSuspend+0x114>)
 8000e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	f3bf 8f4f 	dsb	sy
 8000e56:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e5a:	e00b      	b.n	8000e74 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <vTaskSuspend+0x10c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <vTaskSuspend+0x118>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d103      	bne.n	8000e70 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <vTaskSuspend+0x100>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
    }
 8000e6e:	e001      	b.n	8000e74 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8000e70:	f000 fae8 	bl	8001444 <vTaskSwitchContext>
    }
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000040 	.word	0x20000040
 8000e80:	20000044 	.word	0x20000044
 8000e84:	20000120 	.word	0x20000120
 8000e88:	20000104 	.word	0x20000104
 8000e8c:	20000124 	.word	0x20000124
 8000e90:	e000ed04 	.word	0xe000ed04
 8000e94:	20000118 	.word	0x20000118

08000e98 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <prvTaskIsTaskSuspended+0x3c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10a      	bne.n	8000ec8 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <prvTaskIsTaskSuspended+0x40>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d005      	beq.n	8000ec8 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000104 	.word	0x20000104
 8000ed8:	200000d8 	.word	0x200000d8

08000edc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <vTaskResume+0xe0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d05f      	beq.n	8000fb2 <vTaskResume+0xd6>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d05c      	beq.n	8000fb2 <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 8000ef8:	f000 ffb8 	bl	8001e6c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff ffcb 	bl	8000e98 <prvTaskIsTaskSuspended>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d052      	beq.n	8000fae <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f9b5 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	2201      	movs	r2, #1
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <vTaskResume+0xe4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <vTaskResume+0xe4>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f28:	4926      	ldr	r1, [pc, #152]	; (8000fc4 <vTaskResume+0xe8>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3304      	adds	r3, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	3204      	adds	r2, #4
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1d1a      	adds	r2, r3, #4
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <vTaskResume+0xe8>)
 8000f68:	441a      	add	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f72:	4914      	ldr	r1, [pc, #80]	; (8000fc4 <vTaskResume+0xe8>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c59      	adds	r1, r3, #1
 8000f82:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <vTaskResume+0xe8>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4403      	add	r3, r0
 8000f8e:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <vTaskResume+0xe0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d307      	bcc.n	8000fae <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <vTaskResume+0xec>)
 8000fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000fae:	f000 ff75 	bl	8001e9c <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000040 	.word	0x20000040
 8000fc0:	20000120 	.word	0x20000120
 8000fc4:	20000044 	.word	0x20000044
 8000fc8:	e000ed04 	.word	0xe000ed04

08000fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <vTaskStartScheduler+0x5c>)
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	4912      	ldr	r1, [pc, #72]	; (800102c <vTaskStartScheduler+0x60>)
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <vTaskStartScheduler+0x64>)
 8000fe4:	f7ff fcc5 	bl	8000972 <xTaskCreate>
 8000fe8:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d114      	bne.n	800101a <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000ff0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ff4:	f383 8811 	msr	BASEPRI, r3
 8000ff8:	f3bf 8f6f 	isb	sy
 8000ffc:	f3bf 8f4f 	dsb	sy
 8001000:	603b      	str	r3, [r7, #0]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <vTaskStartScheduler+0x68>)
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <vTaskStartScheduler+0x6c>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <vTaskStartScheduler+0x70>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001016:	f000 ff09 	bl	8001e2c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <vTaskStartScheduler+0x74>)
 800101c:	681b      	ldr	r3, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000013c 	.word	0x2000013c
 800102c:	080055cc 	.word	0x080055cc
 8001030:	08001765 	.word	0x08001765
 8001034:	20000138 	.word	0x20000138
 8001038:	20000124 	.word	0x20000124
 800103c:	2000011c 	.word	0x2000011c
 8001040:	20000000 	.word	0x20000000

08001044 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <vTaskSuspendAll+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <vTaskSuspendAll+0x18>)
 8001050:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000140 	.word	0x20000140

08001060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800106e:	f000 fefd 	bl	8001e6c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <xTaskResumeAll+0x1b4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a66      	ldr	r2, [pc, #408]	; (8001214 <xTaskResumeAll+0x1b4>)
 800107a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800107c:	4b65      	ldr	r3, [pc, #404]	; (8001214 <xTaskResumeAll+0x1b4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 80c0 	bne.w	8001206 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001086:	4b64      	ldr	r3, [pc, #400]	; (8001218 <xTaskResumeAll+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80bb 	beq.w	8001206 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001090:	e08a      	b.n	80011a8 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001092:	4b62      	ldr	r3, [pc, #392]	; (800121c <xTaskResumeAll+0x1bc>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	6a12      	ldr	r2, [r2, #32]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	69d2      	ldr	r2, [r2, #28]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3318      	adds	r3, #24
 80010bc:	429a      	cmp	r2, r3
 80010be:	d103      	bne.n	80010c8 <xTaskResumeAll+0x68>
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	68d2      	ldr	r2, [r2, #12]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	6892      	ldr	r2, [r2, #8]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3304      	adds	r3, #4
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d103      	bne.n	8001106 <xTaskResumeAll+0xa6>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	2201      	movs	r2, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <xTaskResumeAll+0x1c0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	4a3e      	ldr	r2, [pc, #248]	; (8001220 <xTaskResumeAll+0x1c0>)
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	493d      	ldr	r1, [pc, #244]	; (8001224 <xTaskResumeAll+0x1c4>)
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	3204      	adds	r2, #4
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	1d1a      	adds	r2, r3, #4
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <xTaskResumeAll+0x1c4>)
 800116c:	441a      	add	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001176:	492b      	ldr	r1, [pc, #172]	; (8001224 <xTaskResumeAll+0x1c4>)
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	4827      	ldr	r0, [pc, #156]	; (8001224 <xTaskResumeAll+0x1c4>)
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4403      	add	r3, r0
 8001192:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <xTaskResumeAll+0x1c8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	429a      	cmp	r2, r3
 80011a0:	d302      	bcc.n	80011a8 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <xTaskResumeAll+0x1cc>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <xTaskResumeAll+0x1bc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f af70 	bne.w	8001092 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80011b8:	f000 fb68 	bl	800188c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <xTaskResumeAll+0x1d0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d010      	beq.n	80011ea <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80011c8:	f000 f836 	bl	8001238 <xTaskIncrementTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <xTaskResumeAll+0x1cc>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f1      	bne.n	80011c8 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <xTaskResumeAll+0x1d0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <xTaskResumeAll+0x1cc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <xTaskResumeAll+0x1d4>)
 80011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001206:	f000 fe49 	bl	8001e9c <vPortExitCritical>

    return xAlreadyYielded;
 800120a:	693b      	ldr	r3, [r7, #16]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000140 	.word	0x20000140
 8001218:	20000118 	.word	0x20000118
 800121c:	200000d8 	.word	0x200000d8
 8001220:	20000120 	.word	0x20000120
 8001224:	20000044 	.word	0x20000044
 8001228:	20000040 	.word	0x20000040
 800122c:	2000012c 	.word	0x2000012c
 8001230:	20000128 	.word	0x20000128
 8001234:	e000ed04 	.word	0xe000ed04

08001238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001242:	4b75      	ldr	r3, [pc, #468]	; (8001418 <xTaskIncrementTick+0x1e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 80dc 	bne.w	8001404 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800124c:	4b73      	ldr	r3, [pc, #460]	; (800141c <xTaskIncrementTick+0x1e4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001254:	4a71      	ldr	r2, [pc, #452]	; (800141c <xTaskIncrementTick+0x1e4>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d110      	bne.n	8001282 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001260:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <xTaskIncrementTick+0x1e8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	4b6f      	ldr	r3, [pc, #444]	; (8001424 <xTaskIncrementTick+0x1ec>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6d      	ldr	r2, [pc, #436]	; (8001420 <xTaskIncrementTick+0x1e8>)
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4a6d      	ldr	r2, [pc, #436]	; (8001424 <xTaskIncrementTick+0x1ec>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <xTaskIncrementTick+0x1f0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a6b      	ldr	r2, [pc, #428]	; (8001428 <xTaskIncrementTick+0x1f0>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	f000 fb05 	bl	800188c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001282:	4b6a      	ldr	r3, [pc, #424]	; (800142c <xTaskIncrementTick+0x1f4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	429a      	cmp	r2, r3
 800128a:	f0c0 80a6 	bcc.w	80013da <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <xTaskIncrementTick+0x1e8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	4b64      	ldr	r3, [pc, #400]	; (800142c <xTaskIncrementTick+0x1f4>)
 800129a:	f04f 32ff 	mov.w	r2, #4294967295
 800129e:	601a      	str	r2, [r3, #0]
                    break;
 80012a0:	e09b      	b.n	80013da <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <xTaskIncrementTick+0x1e8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d203      	bcs.n	80012c2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012ba:	4a5c      	ldr	r2, [pc, #368]	; (800142c <xTaskIncrementTick+0x1f4>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80012c0:	e08b      	b.n	80013da <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68d2      	ldr	r2, [r2, #12]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	6892      	ldr	r2, [r2, #8]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	3304      	adds	r3, #4
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d103      	bne.n	80012f0 <xTaskIncrementTick+0xb8>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01e      	beq.n	8001346 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	6a12      	ldr	r2, [r2, #32]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	69d2      	ldr	r2, [r2, #28]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3318      	adds	r3, #24
 800132a:	429a      	cmp	r2, r3
 800132c:	d103      	bne.n	8001336 <xTaskIncrementTick+0xfe>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	2201      	movs	r2, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <xTaskIncrementTick+0x1f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	4a36      	ldr	r2, [pc, #216]	; (8001430 <xTaskIncrementTick+0x1f8>)
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <xTaskIncrementTick+0x1fc>)
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	3204      	adds	r2, #4
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1d1a      	adds	r2, r3, #4
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <xTaskIncrementTick+0x1fc>)
 800139c:	441a      	add	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a6:	4923      	ldr	r1, [pc, #140]	; (8001434 <xTaskIncrementTick+0x1fc>)
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1c59      	adds	r1, r3, #1
 80013b6:	481f      	ldr	r0, [pc, #124]	; (8001434 <xTaskIncrementTick+0x1fc>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4403      	add	r3, r0
 80013c2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <xTaskIncrementTick+0x200>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	429a      	cmp	r2, r3
 80013d0:	f67f af5d 	bls.w	800128e <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013d8:	e759      	b.n	800128e <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <xTaskIncrementTick+0x200>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	4914      	ldr	r1, [pc, #80]	; (8001434 <xTaskIncrementTick+0x1fc>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d901      	bls.n	80013f6 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <xTaskIncrementTick+0x204>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e004      	b.n	800140e <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <xTaskIncrementTick+0x208>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <xTaskIncrementTick+0x208>)
 800140c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800140e:	69fb      	ldr	r3, [r7, #28]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000140 	.word	0x20000140
 800141c:	2000011c 	.word	0x2000011c
 8001420:	200000d0 	.word	0x200000d0
 8001424:	200000d4 	.word	0x200000d4
 8001428:	20000130 	.word	0x20000130
 800142c:	20000138 	.word	0x20000138
 8001430:	20000120 	.word	0x20000120
 8001434:	20000044 	.word	0x20000044
 8001438:	20000040 	.word	0x20000040
 800143c:	2000012c 	.word	0x2000012c
 8001440:	20000128 	.word	0x20000128

08001444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <vTaskSwitchContext+0x78>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <vTaskSwitchContext+0x7c>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001458:	e02a      	b.n	80014b0 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <vTaskSwitchContext+0x7c>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <vTaskSwitchContext+0x80>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	f1c3 031f 	rsb	r3, r3, #31
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <vTaskSwitchContext+0x84>)
 8001482:	4413      	add	r3, r2
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	3308      	adds	r3, #8
 8001498:	429a      	cmp	r2, r3
 800149a:	d104      	bne.n	80014a6 <vTaskSwitchContext+0x62>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <vTaskSwitchContext+0x88>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000140 	.word	0x20000140
 80014c0:	2000012c 	.word	0x2000012c
 80014c4:	20000120 	.word	0x20000120
 80014c8:	20000044 	.word	0x20000044
 80014cc:	20000040 	.word	0x20000040

080014d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <vTaskPlaceOnEventList+0x28>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3318      	adds	r3, #24
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7fe fe92 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80014e8:	2101      	movs	r1, #1
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f000 fbb2 	bl	8001c54 <prvAddCurrentTaskToDelayedList>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000040 	.word	0x20000040

080014fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	6a12      	ldr	r2, [r2, #32]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69d2      	ldr	r2, [r2, #28]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	3318      	adds	r3, #24
 800152e:	429a      	cmp	r2, r3
 8001530:	d103      	bne.n	800153a <xTaskRemoveFromEventList+0x3e>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6a1a      	ldr	r2, [r3, #32]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <xTaskRemoveFromEventList+0x178>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d15e      	bne.n	8001610 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	68d2      	ldr	r2, [r2, #12]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	3304      	adds	r3, #4
 8001574:	429a      	cmp	r2, r3
 8001576:	d103      	bne.n	8001580 <xTaskRemoveFromEventList+0x84>
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2201      	movs	r2, #1
 8001596:	409a      	lsls	r2, r3
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <xTaskRemoveFromEventList+0x17c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4313      	orrs	r3, r2
 800159e:	4a36      	ldr	r2, [pc, #216]	; (8001678 <xTaskRemoveFromEventList+0x17c>)
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a6:	4935      	ldr	r1, [pc, #212]	; (800167c <xTaskRemoveFromEventList+0x180>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	3204      	adds	r2, #4
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1d1a      	adds	r2, r3, #4
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <xTaskRemoveFromEventList+0x180>)
 80015e6:	441a      	add	r2, r3
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	4922      	ldr	r1, [pc, #136]	; (800167c <xTaskRemoveFromEventList+0x180>)
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	481e      	ldr	r0, [pc, #120]	; (800167c <xTaskRemoveFromEventList+0x180>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4403      	add	r3, r0
 800160c:	6019      	str	r1, [r3, #0]
 800160e:	e01b      	b.n	8001648 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <xTaskRemoveFromEventList+0x184>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	61da      	str	r2, [r3, #28]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	621a      	str	r2, [r3, #32]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	3218      	adds	r2, #24
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f103 0218 	add.w	r2, r3, #24
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <xTaskRemoveFromEventList+0x184>)
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <xTaskRemoveFromEventList+0x184>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <xTaskRemoveFromEventList+0x184>)
 8001646:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <xTaskRemoveFromEventList+0x188>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	429a      	cmp	r2, r3
 8001654:	d905      	bls.n	8001662 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001656:	2301      	movs	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <xTaskRemoveFromEventList+0x18c>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e001      	b.n	8001666 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001666:	69fb      	ldr	r3, [r7, #28]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3724      	adds	r7, #36	; 0x24
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000140 	.word	0x20000140
 8001678:	20000120 	.word	0x20000120
 800167c:	20000044 	.word	0x20000044
 8001680:	200000d8 	.word	0x200000d8
 8001684:	20000040 	.word	0x20000040
 8001688:	2000012c 	.word	0x2000012c

0800168c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <vTaskInternalSetTimeOutState+0x24>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <vTaskInternalSetTimeOutState+0x28>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000130 	.word	0x20000130
 80016b4:	2000011c 	.word	0x2000011c

080016b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80016c2:	f000 fbd3 	bl	8001e6c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <xTaskCheckForTimeOut+0x8c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	d102      	bne.n	80016e6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e026      	b.n	8001734 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <xTaskCheckForTimeOut+0x90>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d00a      	beq.n	8001708 <xTaskCheckForTimeOut+0x50>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d305      	bcc.n	8001708 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e015      	b.n	8001734 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20b      	bcs.n	800172a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad2      	subs	r2, r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffb4 	bl	800168c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e004      	b.n	8001734 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001734:	f000 fbb2 	bl	8001e9c <vPortExitCritical>

    return xReturn;
 8001738:	697b      	ldr	r3, [r7, #20]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000011c 	.word	0x2000011c
 8001748:	20000130 	.word	0x20000130

0800174c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <vTaskMissedYield+0x14>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2000012c 	.word	0x2000012c

08001764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800176c:	f000 f852 	bl	8001814 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <prvIdleTask+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d9f9      	bls.n	800176c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <prvIdleTask+0x2c>)
 800177a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001788:	e7f0      	b.n	800176c <prvIdleTask+0x8>
 800178a:	bf00      	nop
 800178c:	20000044 	.word	0x20000044
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e00c      	b.n	80017ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <prvInitialiseTaskLists+0x60>)
 80017ac:	4413      	add	r3, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fcde 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d9ef      	bls.n	80017a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <prvInitialiseTaskLists+0x64>)
 80017c2:	f7fe fcd5 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80017c6:	480d      	ldr	r0, [pc, #52]	; (80017fc <prvInitialiseTaskLists+0x68>)
 80017c8:	f7fe fcd2 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <prvInitialiseTaskLists+0x6c>)
 80017ce:	f7fe fccf 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80017d2:	480c      	ldr	r0, [pc, #48]	; (8001804 <prvInitialiseTaskLists+0x70>)
 80017d4:	f7fe fccc 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <prvInitialiseTaskLists+0x74>)
 80017da:	f7fe fcc9 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <prvInitialiseTaskLists+0x78>)
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <prvInitialiseTaskLists+0x64>)
 80017e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <prvInitialiseTaskLists+0x7c>)
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <prvInitialiseTaskLists+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000044 	.word	0x20000044
 80017f8:	200000a8 	.word	0x200000a8
 80017fc:	200000bc 	.word	0x200000bc
 8001800:	200000d8 	.word	0x200000d8
 8001804:	200000ec 	.word	0x200000ec
 8001808:	20000104 	.word	0x20000104
 800180c:	200000d0 	.word	0x200000d0
 8001810:	200000d4 	.word	0x200000d4

08001814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800181a:	e019      	b.n	8001850 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800181c:	f000 fb26 	bl	8001e6c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <prvCheckTasksWaitingTermination+0x4c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fd25 	bl	800027c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <prvCheckTasksWaitingTermination+0x50>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <prvCheckTasksWaitingTermination+0x50>)
 800183a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <prvCheckTasksWaitingTermination+0x54>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <prvCheckTasksWaitingTermination+0x54>)
 8001844:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001846:	f000 fb29 	bl	8001e9c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f80e 	bl	800186c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <prvCheckTasksWaitingTermination+0x54>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e1      	bne.n	800181c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000ec 	.word	0x200000ec
 8001864:	20000118 	.word	0x20000118
 8001868:	20000100 	.word	0x20000100

0800186c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fbd9 	bl	8002030 <vPortFree>
            vPortFree( pxTCB );
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fbd6 	bl	8002030 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <prvResetNextTaskUnblockTime+0x2c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d104      	bne.n	80018a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <prvResetNextTaskUnblockTime+0x30>)
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018a2:	e005      	b.n	80018b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <prvResetNextTaskUnblockTime+0x2c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <prvResetNextTaskUnblockTime+0x30>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	200000d0 	.word	0x200000d0
 80018bc:	20000138 	.word	0x20000138

080018c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <xTaskPriorityInherit+0x130>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d276      	bcs.n	80019d4 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db06      	blt.n	80018fc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <xTaskPriorityInherit+0x130>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	f1c3 0205 	rsb	r2, r3, #5
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6959      	ldr	r1, [r3, #20]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <xTaskPriorityInherit+0x134>)
 800190e:	4413      	add	r3, r2
 8001910:	4299      	cmp	r1, r3
 8001912:	d157      	bne.n	80019c4 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	3304      	adds	r3, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fcaf 	bl	800027c <uxListRemove>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	2201      	movs	r2, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <xTaskPriorityInherit+0x138>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4013      	ands	r3, r2
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <xTaskPriorityInherit+0x138>)
 8001938:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <xTaskPriorityInherit+0x130>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2201      	movs	r2, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <xTaskPriorityInherit+0x138>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <xTaskPriorityInherit+0x138>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	4926      	ldr	r1, [pc, #152]	; (80019f4 <xTaskPriorityInherit+0x134>)
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3304      	adds	r3, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	3204      	adds	r2, #4
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <xTaskPriorityInherit+0x134>)
 800199a:	441a      	add	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	4913      	ldr	r1, [pc, #76]	; (80019f4 <xTaskPriorityInherit+0x134>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	480f      	ldr	r0, [pc, #60]	; (80019f4 <xTaskPriorityInherit+0x134>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4403      	add	r3, r0
 80019c0:	6019      	str	r1, [r3, #0]
 80019c2:	e004      	b.n	80019ce <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <xTaskPriorityInherit+0x130>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e008      	b.n	80019e6 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <xTaskPriorityInherit+0x130>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d201      	bcs.n	80019e6 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80019e6:	697b      	ldr	r3, [r7, #20]
    }
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000040 	.word	0x20000040
 80019f4:	20000044 	.word	0x20000044
 80019f8:	20000120 	.word	0x20000120

080019fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d06c      	beq.n	8001aec <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d061      	beq.n	8001aec <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d15d      	bne.n	8001aec <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fc21 	bl	800027c <uxListRemove>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	2201      	movs	r2, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <xTaskPriorityDisinherit+0xfc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <xTaskPriorityDisinherit+0xfc>)
 8001a54:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f1c3 0205 	rsb	r2, r3, #5
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <xTaskPriorityDisinherit+0xfc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <xTaskPriorityDisinherit+0xfc>)
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	491e      	ldr	r1, [pc, #120]	; (8001afc <xTaskPriorityDisinherit+0x100>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	3204      	adds	r2, #4
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <xTaskPriorityDisinherit+0x100>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aca:	490c      	ldr	r1, [pc, #48]	; (8001afc <xTaskPriorityDisinherit+0x100>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c59      	adds	r1, r3, #1
 8001ada:	4808      	ldr	r0, [pc, #32]	; (8001afc <xTaskPriorityDisinherit+0x100>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4403      	add	r3, r0
 8001ae6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001aec:	697b      	ldr	r3, [r7, #20]
    }
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000120 	.word	0x20000120
 8001afc:	20000044 	.word	0x20000044

08001b00 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8081 	beq.w	8001c1c <vTaskPriorityDisinheritAfterTimeout+0x11c>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d902      	bls.n	8001b2a <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	e002      	b.n	8001b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d070      	beq.n	8001c1c <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d16b      	bne.n	8001c1c <vTaskPriorityDisinheritAfterTimeout+0x11c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db04      	blt.n	8001b62 <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0205 	rsb	r2, r3, #5
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6959      	ldr	r1, [r3, #20]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4299      	cmp	r1, r3
 8001b76:	d151      	bne.n	8001c1c <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb7d 	bl	800027c <uxListRemove>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b9c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	3204      	adds	r2, #4
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001bf4:	441a      	add	r2, r3
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	4909      	ldr	r1, [pc, #36]	; (8001c24 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4403      	add	r3, r0
 8001c1a:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000044 	.word	0x20000044
 8001c28:	20000120 	.word	0x20000120

08001c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c3e:	3201      	adds	r2, #1
 8001c40:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
    }
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000040 	.word	0x20000040

08001c54 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fb06 	bl	800027c <uxListRemove>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10b      	bne.n	8001c8e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c8c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d124      	bne.n	8001ce0 <prvAddCurrentTaskToDelayedList+0x8c>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d021      	beq.n	8001ce0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	6892      	ldr	r2, [r2, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	3204      	adds	r2, #4
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1d1a      	adds	r2, r3, #4
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cd0:	615a      	str	r2, [r3, #20]
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001cde:	e026      	b.n	8001d2e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d209      	bcs.n	8001d0c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3304      	adds	r3, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7fe fa81 	bl	800020c <vListInsert>
}
 8001d0a:	e010      	b.n	8001d2e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f7fe fa77 	bl	800020c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d202      	bcs.n	8001d2e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001d28:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000011c 	.word	0x2000011c
 8001d3c:	20000040 	.word	0x20000040
 8001d40:	20000120 	.word	0x20000120
 8001d44:	20000104 	.word	0x20000104
 8001d48:	200000d4 	.word	0x200000d4
 8001d4c:	200000d0 	.word	0x200000d0
 8001d50:	20000138 	.word	0x20000138

08001d54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3b04      	subs	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3b04      	subs	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f023 0201 	bic.w	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b04      	subs	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <pxPortInitialiseStack+0x54>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b14      	subs	r3, #20
 8001d8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b20      	subs	r3, #32
 8001d9a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	08001dad 	.word	0x08001dad

08001dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001db6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001dba:	f383 8811 	msr	BASEPRI, r3
 8001dbe:	f3bf 8f6f 	isb	sy
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001dc8:	bf00      	nop
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0fc      	beq.n	8001dca <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	0000      	movs	r0, r0
 8001ddc:	0000      	movs	r0, r0
	...

08001de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <pxCurrentTCBConst2>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	6808      	ldr	r0, [r1, #0]
 8001de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dea:	f380 8809 	msr	PSP, r0
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f380 8811 	msr	BASEPRI, r0
 8001dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8001dfe:	4770      	bx	lr

08001e00 <pxCurrentTCBConst2>:
 8001e00:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop

08001e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <prvPortStartFirstTask+0x1c>)
 8001e0a:	6800      	ldr	r0, [r0, #0]
 8001e0c:	6800      	ldr	r0, [r0, #0]
 8001e0e:	f380 8808 	msr	MSP, r0
 8001e12:	b662      	cpsie	i
 8001e14:	b661      	cpsie	f
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	df00      	svc	0
 8001e20:	bf00      	nop
 8001e22:	0000      	.short	0x0000
 8001e24:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop

08001e2c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <xPortStartScheduler+0x38>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <xPortStartScheduler+0x38>)
 8001e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <xPortStartScheduler+0x38>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <xPortStartScheduler+0x38>)
 8001e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001e48:	f000 f886 	bl	8001f58 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <xPortStartScheduler+0x3c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001e52:	f7ff ffd9 	bl	8001e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001e56:	f7ff faf5 	bl	8001444 <vTaskSwitchContext>
    prvTaskExitError();
 8001e5a:	f7ff ffa7 	bl	8001dac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	e000ed20 	.word	0xe000ed20
 8001e68:	20000004 	.word	0x20000004

08001e6c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <vPortEnterCritical+0x2c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <vPortEnterCritical+0x2c>)
 8001e8c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000004 	.word	0x20000004

08001e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <vPortExitCritical+0x2c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <vPortExitCritical+0x2c>)
 8001eaa:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <vPortExitCritical+0x2c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <vPortExitCritical+0x22>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ed0:	f3ef 8009 	mrs	r0, PSP
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <pxCurrentTCBConst>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ee0:	6010      	str	r0, [r2, #0]
 8001ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001ee6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001eea:	f380 8811 	msr	BASEPRI, r0
 8001eee:	f7ff faa9 	bl	8001444 <vTaskSwitchContext>
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f380 8811 	msr	BASEPRI, r0
 8001efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	6808      	ldr	r0, [r1, #0]
 8001f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f06:	f380 8809 	msr	PSP, r0
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	4770      	bx	lr

08001f10 <pxCurrentTCBConst>:
 8001f10:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop

08001f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001f30:	f7ff f982 	bl	8001238 <xTaskIncrementTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <SysTick_Handler+0x3c>)
 8001f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	e000ed04 	.word	0xe000ed04

08001f58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <vPortSetupTimerInterrupt+0x28>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <vPortSetupTimerInterrupt+0x2c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <vPortSetupTimerInterrupt+0x30>)
 8001f6a:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001f6e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <vPortSetupTimerInterrupt+0x28>)
 8001f72:	2207      	movs	r2, #7
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010
 8001f84:	e000e018 	.word	0xe000e018
 8001f88:	e000e014 	.word	0xe000e014

08001f8c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00e      	beq.n	8001fc0 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f023 0307 	bic.w	r3, r3, #7
 8001fa8:	3308      	adds	r3, #8
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d205      	bcs.n	8001fbc <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f023 0307 	bic.w	r3, r3, #7
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	e001      	b.n	8001fc0 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001fc0:	f7ff f840 	bl	8001044 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <pvPortMalloc+0x98>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <pvPortMalloc+0x9c>)
 8001fce:	f023 0307 	bic.w	r3, r3, #7
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <pvPortMalloc+0x98>)
 8001fd6:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01b      	beq.n	8002016 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <pvPortMalloc+0xa0>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001fe6:	f643 6277 	movw	r2, #15991	; 0x3e77
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d813      	bhi.n	8002016 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <pvPortMalloc+0xa0>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	441a      	add	r2, r3
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <pvPortMalloc+0xa0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90b      	bls.n	8002016 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <pvPortMalloc+0x98>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <pvPortMalloc+0xa0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <pvPortMalloc+0xa0>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <pvPortMalloc+0xa0>)
 8002014:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002016:	f7ff f823 	bl	8001060 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20003fc8 	.word	0x20003fc8
 8002028:	2000014b 	.word	0x2000014b
 800202c:	20003fc4 	.word	0x20003fc4

08002030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
	...

08002044 <DMS_init>:
 */

#include "DMS.h"


void DMS_init(){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	PIN_config PINx={TOUCH1,INPUT_FI,0};
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <DMS_init+0x50>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4810      	ldr	r0, [pc, #64]	; (8002098 <DMS_init+0x54>)
 8002056:	f001 fcb5 	bl	80039c4 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH2,INPUT_FI,0};
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <DMS_init+0x58>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <DMS_init+0x54>)
 8002066:	f001 fcad 	bl	80039c4 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH3,INPUT_FI,0};
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <DMS_init+0x5c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4808      	ldr	r0, [pc, #32]	; (8002098 <DMS_init+0x54>)
 8002076:	f001 fca5 	bl	80039c4 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH4,INPUT_FI,0};
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <DMS_init+0x60>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <DMS_init+0x54>)
 8002086:	f001 fc9d 	bl	80039c4 <MCAL_GPIO_init>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	080055d4 	.word	0x080055d4
 8002098:	40010800 	.word	0x40010800
 800209c:	080055d8 	.word	0x080055d8
 80020a0:	080055dc 	.word	0x080055dc
 80020a4:	080055e0 	.word	0x080055e0

080020a8 <DMS_read>:


uint8_t DMS_read(){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 80020ac:	2101      	movs	r1, #1
 80020ae:	481f      	ldr	r0, [pc, #124]	; (800212c <DMS_read+0x84>)
 80020b0:	f001 fd98 	bl	8003be4 <MCAL_Read_PIN>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <DMS_read+0x3c>
 80020ba:	210c      	movs	r1, #12
 80020bc:	481b      	ldr	r0, [pc, #108]	; (800212c <DMS_read+0x84>)
 80020be:	f001 fd91 	bl	8003be4 <MCAL_Read_PIN>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <DMS_read+0x3c>
 80020c8:	210b      	movs	r1, #11
 80020ca:	4818      	ldr	r0, [pc, #96]	; (800212c <DMS_read+0x84>)
 80020cc:	f001 fd8a 	bl	8003be4 <MCAL_Read_PIN>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <DMS_read+0x3c>
 80020d6:	2108      	movs	r1, #8
 80020d8:	4814      	ldr	r0, [pc, #80]	; (800212c <DMS_read+0x84>)
 80020da:	f001 fd83 	bl	8003be4 <MCAL_Read_PIN>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <DMS_read+0x7e>
		_TIM1_delay_ms(100);
 80020e4:	2064      	movs	r0, #100	; 0x64
 80020e6:	f002 fa97 	bl	8004618 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 80020ea:	2101      	movs	r1, #1
 80020ec:	480f      	ldr	r0, [pc, #60]	; (800212c <DMS_read+0x84>)
 80020ee:	f001 fd79 	bl	8003be4 <MCAL_Read_PIN>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d114      	bne.n	8002122 <DMS_read+0x7a>
 80020f8:	210c      	movs	r1, #12
 80020fa:	480c      	ldr	r0, [pc, #48]	; (800212c <DMS_read+0x84>)
 80020fc:	f001 fd72 	bl	8003be4 <MCAL_Read_PIN>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <DMS_read+0x7a>
 8002106:	210b      	movs	r1, #11
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <DMS_read+0x84>)
 800210a:	f001 fd6b 	bl	8003be4 <MCAL_Read_PIN>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <DMS_read+0x7a>
 8002114:	2108      	movs	r1, #8
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <DMS_read+0x84>)
 8002118:	f001 fd64 	bl	8003be4 <MCAL_Read_PIN>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <DMS_read+0x7e>
		return 1;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <DMS_read+0x80>
		}
	}
	return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40010800 	.word	0x40010800

08002130 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <LUNA_CallBack+0x180>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10d      	bne.n	8002158 <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 800213c:	485d      	ldr	r0, [pc, #372]	; (80022b4 <LUNA_CallBack+0x184>)
 800213e:	f002 fc2b 	bl	8004998 <MCAL_USART_ReciveData>
 8002142:	4603      	mov	r3, r0
 8002144:	2b59      	cmp	r3, #89	; 0x59
 8002146:	f040 80b1 	bne.w	80022ac <LUNA_CallBack+0x17c>
			x++;
 800214a:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <LUNA_CallBack+0x180>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <LUNA_CallBack+0x180>)
 8002154:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 8002156:	e0a9      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==1){
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <LUNA_CallBack+0x180>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10d      	bne.n	800217c <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8002160:	4854      	ldr	r0, [pc, #336]	; (80022b4 <LUNA_CallBack+0x184>)
 8002162:	f002 fc19 	bl	8004998 <MCAL_USART_ReciveData>
 8002166:	4603      	mov	r3, r0
 8002168:	2b59      	cmp	r3, #89	; 0x59
 800216a:	f040 809f 	bne.w	80022ac <LUNA_CallBack+0x17c>
			x++;
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <LUNA_CallBack+0x180>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <LUNA_CallBack+0x180>)
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	e097      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==2){
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <LUNA_CallBack+0x180>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d110      	bne.n	80021a6 <LUNA_CallBack+0x76>
		x++;
 8002184:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <LUNA_CallBack+0x180>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <LUNA_CallBack+0x180>)
 800218e:	701a      	strb	r2, [r3, #0]
		LUNA_dis=0;
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <LUNA_CallBack+0x188>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8002196:	4847      	ldr	r0, [pc, #284]	; (80022b4 <LUNA_CallBack+0x184>)
 8002198:	f002 fbfe 	bl	8004998 <MCAL_USART_ReciveData>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <LUNA_CallBack+0x188>)
 80021a2:	801a      	strh	r2, [r3, #0]
}
 80021a4:	e082      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==3){
 80021a6:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <LUNA_CallBack+0x180>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d114      	bne.n	80021d8 <LUNA_CallBack+0xa8>
		x++;
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <LUNA_CallBack+0x180>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <LUNA_CallBack+0x180>)
 80021b8:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80021ba:	483e      	ldr	r0, [pc, #248]	; (80022b4 <LUNA_CallBack+0x184>)
 80021bc:	f002 fbec 	bl	8004998 <MCAL_USART_ReciveData>
 80021c0:	4603      	mov	r3, r0
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <LUNA_CallBack+0x188>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <LUNA_CallBack+0x188>)
 80021d4:	801a      	strh	r2, [r3, #0]
}
 80021d6:	e069      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==4){
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <LUNA_CallBack+0x180>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d110      	bne.n	8002202 <LUNA_CallBack+0xd2>
		x++;
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <LUNA_CallBack+0x180>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <LUNA_CallBack+0x180>)
 80021ea:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 80021ec:	4b33      	ldr	r3, [pc, #204]	; (80022bc <LUNA_CallBack+0x18c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80021f2:	4830      	ldr	r0, [pc, #192]	; (80022b4 <LUNA_CallBack+0x184>)
 80021f4:	f002 fbd0 	bl	8004998 <MCAL_USART_ReciveData>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <LUNA_CallBack+0x18c>)
 80021fe:	801a      	strh	r2, [r3, #0]
}
 8002200:	e054      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==5){
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <LUNA_CallBack+0x180>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d114      	bne.n	8002234 <LUNA_CallBack+0x104>
		x++;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <LUNA_CallBack+0x180>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <LUNA_CallBack+0x180>)
 8002214:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8002216:	4827      	ldr	r0, [pc, #156]	; (80022b4 <LUNA_CallBack+0x184>)
 8002218:	f002 fbbe 	bl	8004998 <MCAL_USART_ReciveData>
 800221c:	4603      	mov	r3, r0
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <LUNA_CallBack+0x18c>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <LUNA_CallBack+0x18c>)
 8002230:	801a      	strh	r2, [r3, #0]
}
 8002232:	e03b      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==6){
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <LUNA_CallBack+0x180>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d110      	bne.n	800225e <LUNA_CallBack+0x12e>
		x++;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <LUNA_CallBack+0x180>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <LUNA_CallBack+0x180>)
 8002246:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <LUNA_CallBack+0x190>)
 800224a:	2200      	movs	r2, #0
 800224c:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 800224e:	4819      	ldr	r0, [pc, #100]	; (80022b4 <LUNA_CallBack+0x184>)
 8002250:	f002 fba2 	bl	8004998 <MCAL_USART_ReciveData>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <LUNA_CallBack+0x190>)
 800225a:	801a      	strh	r2, [r3, #0]
}
 800225c:	e026      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==7){
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <LUNA_CallBack+0x180>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b07      	cmp	r3, #7
 8002264:	d114      	bne.n	8002290 <LUNA_CallBack+0x160>
		x++;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <LUNA_CallBack+0x180>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <LUNA_CallBack+0x180>)
 8002270:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8002272:	4810      	ldr	r0, [pc, #64]	; (80022b4 <LUNA_CallBack+0x184>)
 8002274:	f002 fb90 	bl	8004998 <MCAL_USART_ReciveData>
 8002278:	4603      	mov	r3, r0
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b21a      	sxth	r2, r3
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <LUNA_CallBack+0x190>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <LUNA_CallBack+0x190>)
 800228c:	801a      	strh	r2, [r3, #0]
}
 800228e:	e00d      	b.n	80022ac <LUNA_CallBack+0x17c>
	}else if(x==8){
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <LUNA_CallBack+0x180>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d109      	bne.n	80022ac <LUNA_CallBack+0x17c>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <LUNA_CallBack+0x184>)
 800229a:	f002 fb7d 	bl	8004998 <MCAL_USART_ReciveData>
 800229e:	4603      	mov	r3, r0
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <LUNA_CallBack+0x194>)
 80022a4:	701a      	strb	r2, [r3, #0]
		x=0;
 80022a6:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <LUNA_CallBack+0x180>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20003fd3 	.word	0x20003fd3
 80022b4:	40004800 	.word	0x40004800
 80022b8:	20003fcc 	.word	0x20003fcc
 80022bc:	20003fce 	.word	0x20003fce
 80022c0:	20003fd0 	.word	0x20003fd0
 80022c4:	20003fd2 	.word	0x20003fd2

080022c8 <LUNA_INIT>:
	NVIC_ISER1 |=(1<<(USART1_IRQ-32));

}

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	460a      	mov	r2, r1
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 80022d8:	4b8d      	ldr	r3, [pc, #564]	; (8002510 <LUNA_INIT+0x248>)
 80022da:	f107 0408 	add.w	r4, r7, #8
 80022de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	488a      	ldr	r0, [pc, #552]	; (8002514 <LUNA_INIT+0x24c>)
 80022ec:	f002 f9ac 	bl	8004648 <MCAL_USART_init>
//	LUNA_Disable();
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80022f0:	215a      	movs	r1, #90	; 0x5a
 80022f2:	4888      	ldr	r0, [pc, #544]	; (8002514 <LUNA_INIT+0x24c>)
 80022f4:	f002 fb10 	bl	8004918 <MCAL_USART_SendData>
 80022f8:	2108      	movs	r1, #8
 80022fa:	4886      	ldr	r0, [pc, #536]	; (8002514 <LUNA_INIT+0x24c>)
 80022fc:	f002 fb0c 	bl	8004918 <MCAL_USART_SendData>
 8002300:	2106      	movs	r1, #6
 8002302:	4884      	ldr	r0, [pc, #528]	; (8002514 <LUNA_INIT+0x24c>)
 8002304:	f002 fb08 	bl	8004918 <MCAL_USART_SendData>
 8002308:	2100      	movs	r1, #0
 800230a:	4882      	ldr	r0, [pc, #520]	; (8002514 <LUNA_INIT+0x24c>)
 800230c:	f002 fb04 	bl	8004918 <MCAL_USART_SendData>
 8002310:	21c2      	movs	r1, #194	; 0xc2
 8002312:	4880      	ldr	r0, [pc, #512]	; (8002514 <LUNA_INIT+0x24c>)
 8002314:	f002 fb00 	bl	8004918 <MCAL_USART_SendData>
 8002318:	2101      	movs	r1, #1
 800231a:	487e      	ldr	r0, [pc, #504]	; (8002514 <LUNA_INIT+0x24c>)
 800231c:	f002 fafc 	bl	8004918 <MCAL_USART_SendData>
 8002320:	2100      	movs	r1, #0
 8002322:	487c      	ldr	r0, [pc, #496]	; (8002514 <LUNA_INIT+0x24c>)
 8002324:	f002 faf8 	bl	8004918 <MCAL_USART_SendData>
 8002328:	2100      	movs	r1, #0
 800232a:	487a      	ldr	r0, [pc, #488]	; (8002514 <LUNA_INIT+0x24c>)
 800232c:	f002 faf4 	bl	8004918 <MCAL_USART_SendData>
	switch (mode){
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d01c      	beq.n	8002370 <LUNA_INIT+0xa8>
 8002336:	2b02      	cmp	r3, #2
 8002338:	d043      	beq.n	80023c2 <LUNA_INIT+0xfa>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d152      	bne.n	80023e4 <LUNA_INIT+0x11c>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800233e:	215a      	movs	r1, #90	; 0x5a
 8002340:	4874      	ldr	r0, [pc, #464]	; (8002514 <LUNA_INIT+0x24c>)
 8002342:	f002 fae9 	bl	8004918 <MCAL_USART_SendData>
 8002346:	2106      	movs	r1, #6
 8002348:	4872      	ldr	r0, [pc, #456]	; (8002514 <LUNA_INIT+0x24c>)
 800234a:	f002 fae5 	bl	8004918 <MCAL_USART_SendData>
 800234e:	2103      	movs	r1, #3
 8002350:	4870      	ldr	r0, [pc, #448]	; (8002514 <LUNA_INIT+0x24c>)
 8002352:	f002 fae1 	bl	8004918 <MCAL_USART_SendData>
 8002356:	2164      	movs	r1, #100	; 0x64
 8002358:	486e      	ldr	r0, [pc, #440]	; (8002514 <LUNA_INIT+0x24c>)
 800235a:	f002 fadd 	bl	8004918 <MCAL_USART_SendData>
 800235e:	2100      	movs	r1, #0
 8002360:	486c      	ldr	r0, [pc, #432]	; (8002514 <LUNA_INIT+0x24c>)
 8002362:	f002 fad9 	bl	8004918 <MCAL_USART_SendData>
 8002366:	2100      	movs	r1, #0
 8002368:	486a      	ldr	r0, [pc, #424]	; (8002514 <LUNA_INIT+0x24c>)
 800236a:	f002 fad5 	bl	8004918 <MCAL_USART_SendData>
		break;
 800236e:	e039      	b.n	80023e4 <LUNA_INIT+0x11c>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002370:	215a      	movs	r1, #90	; 0x5a
 8002372:	4868      	ldr	r0, [pc, #416]	; (8002514 <LUNA_INIT+0x24c>)
 8002374:	f002 fad0 	bl	8004918 <MCAL_USART_SendData>
 8002378:	2106      	movs	r1, #6
 800237a:	4866      	ldr	r0, [pc, #408]	; (8002514 <LUNA_INIT+0x24c>)
 800237c:	f002 facc 	bl	8004918 <MCAL_USART_SendData>
 8002380:	2103      	movs	r1, #3
 8002382:	4864      	ldr	r0, [pc, #400]	; (8002514 <LUNA_INIT+0x24c>)
 8002384:	f002 fac8 	bl	8004918 <MCAL_USART_SendData>
 8002388:	2100      	movs	r1, #0
 800238a:	4862      	ldr	r0, [pc, #392]	; (8002514 <LUNA_INIT+0x24c>)
 800238c:	f002 fac4 	bl	8004918 <MCAL_USART_SendData>
 8002390:	2100      	movs	r1, #0
 8002392:	4860      	ldr	r0, [pc, #384]	; (8002514 <LUNA_INIT+0x24c>)
 8002394:	f002 fac0 	bl	8004918 <MCAL_USART_SendData>
 8002398:	2100      	movs	r1, #0
 800239a:	485e      	ldr	r0, [pc, #376]	; (8002514 <LUNA_INIT+0x24c>)
 800239c:	f002 fabc 	bl	8004918 <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80023a0:	215a      	movs	r1, #90	; 0x5a
 80023a2:	485c      	ldr	r0, [pc, #368]	; (8002514 <LUNA_INIT+0x24c>)
 80023a4:	f002 fab8 	bl	8004918 <MCAL_USART_SendData>
 80023a8:	2104      	movs	r1, #4
 80023aa:	485a      	ldr	r0, [pc, #360]	; (8002514 <LUNA_INIT+0x24c>)
 80023ac:	f002 fab4 	bl	8004918 <MCAL_USART_SendData>
 80023b0:	2104      	movs	r1, #4
 80023b2:	4858      	ldr	r0, [pc, #352]	; (8002514 <LUNA_INIT+0x24c>)
 80023b4:	f002 fab0 	bl	8004918 <MCAL_USART_SendData>
 80023b8:	2100      	movs	r1, #0
 80023ba:	4856      	ldr	r0, [pc, #344]	; (8002514 <LUNA_INIT+0x24c>)
 80023bc:	f002 faac 	bl	8004918 <MCAL_USART_SendData>
		break;
 80023c0:	e010      	b.n	80023e4 <LUNA_INIT+0x11c>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80023c2:	215a      	movs	r1, #90	; 0x5a
 80023c4:	4853      	ldr	r0, [pc, #332]	; (8002514 <LUNA_INIT+0x24c>)
 80023c6:	f002 faa7 	bl	8004918 <MCAL_USART_SendData>
 80023ca:	2104      	movs	r1, #4
 80023cc:	4851      	ldr	r0, [pc, #324]	; (8002514 <LUNA_INIT+0x24c>)
 80023ce:	f002 faa3 	bl	8004918 <MCAL_USART_SendData>
 80023d2:	213b      	movs	r1, #59	; 0x3b
 80023d4:	484f      	ldr	r0, [pc, #316]	; (8002514 <LUNA_INIT+0x24c>)
 80023d6:	f002 fa9f 	bl	8004918 <MCAL_USART_SendData>
 80023da:	2100      	movs	r1, #0
 80023dc:	484d      	ldr	r0, [pc, #308]	; (8002514 <LUNA_INIT+0x24c>)
 80023de:	f002 fa9b 	bl	8004918 <MCAL_USART_SendData>
		break;
 80023e2:	bf00      	nop
	}
	switch (format)
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	f200 808e 	bhi.w	8002508 <LUNA_INIT+0x240>
 80023ec:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <LUNA_INIT+0x12c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	0800240d 	.word	0x0800240d
 80023f8:	08002437 	.word	0x08002437
 80023fc:	08002461 	.word	0x08002461
 8002400:	0800248b 	.word	0x0800248b
 8002404:	080024b5 	.word	0x080024b5
 8002408:	080024df 	.word	0x080024df
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800240c:	215a      	movs	r1, #90	; 0x5a
 800240e:	4841      	ldr	r0, [pc, #260]	; (8002514 <LUNA_INIT+0x24c>)
 8002410:	f002 fa82 	bl	8004918 <MCAL_USART_SendData>
 8002414:	2105      	movs	r1, #5
 8002416:	483f      	ldr	r0, [pc, #252]	; (8002514 <LUNA_INIT+0x24c>)
 8002418:	f002 fa7e 	bl	8004918 <MCAL_USART_SendData>
 800241c:	2105      	movs	r1, #5
 800241e:	483d      	ldr	r0, [pc, #244]	; (8002514 <LUNA_INIT+0x24c>)
 8002420:	f002 fa7a 	bl	8004918 <MCAL_USART_SendData>
 8002424:	2101      	movs	r1, #1
 8002426:	483b      	ldr	r0, [pc, #236]	; (8002514 <LUNA_INIT+0x24c>)
 8002428:	f002 fa76 	bl	8004918 <MCAL_USART_SendData>
 800242c:	2100      	movs	r1, #0
 800242e:	4839      	ldr	r0, [pc, #228]	; (8002514 <LUNA_INIT+0x24c>)
 8002430:	f002 fa72 	bl	8004918 <MCAL_USART_SendData>
		break;
 8002434:	e068      	b.n	8002508 <LUNA_INIT+0x240>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002436:	215a      	movs	r1, #90	; 0x5a
 8002438:	4836      	ldr	r0, [pc, #216]	; (8002514 <LUNA_INIT+0x24c>)
 800243a:	f002 fa6d 	bl	8004918 <MCAL_USART_SendData>
 800243e:	2105      	movs	r1, #5
 8002440:	4834      	ldr	r0, [pc, #208]	; (8002514 <LUNA_INIT+0x24c>)
 8002442:	f002 fa69 	bl	8004918 <MCAL_USART_SendData>
 8002446:	2105      	movs	r1, #5
 8002448:	4832      	ldr	r0, [pc, #200]	; (8002514 <LUNA_INIT+0x24c>)
 800244a:	f002 fa65 	bl	8004918 <MCAL_USART_SendData>
 800244e:	2102      	movs	r1, #2
 8002450:	4830      	ldr	r0, [pc, #192]	; (8002514 <LUNA_INIT+0x24c>)
 8002452:	f002 fa61 	bl	8004918 <MCAL_USART_SendData>
 8002456:	2100      	movs	r1, #0
 8002458:	482e      	ldr	r0, [pc, #184]	; (8002514 <LUNA_INIT+0x24c>)
 800245a:	f002 fa5d 	bl	8004918 <MCAL_USART_SendData>
		break;
 800245e:	e053      	b.n	8002508 <LUNA_INIT+0x240>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002460:	215a      	movs	r1, #90	; 0x5a
 8002462:	482c      	ldr	r0, [pc, #176]	; (8002514 <LUNA_INIT+0x24c>)
 8002464:	f002 fa58 	bl	8004918 <MCAL_USART_SendData>
 8002468:	2105      	movs	r1, #5
 800246a:	482a      	ldr	r0, [pc, #168]	; (8002514 <LUNA_INIT+0x24c>)
 800246c:	f002 fa54 	bl	8004918 <MCAL_USART_SendData>
 8002470:	2105      	movs	r1, #5
 8002472:	4828      	ldr	r0, [pc, #160]	; (8002514 <LUNA_INIT+0x24c>)
 8002474:	f002 fa50 	bl	8004918 <MCAL_USART_SendData>
 8002478:	2106      	movs	r1, #6
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <LUNA_INIT+0x24c>)
 800247c:	f002 fa4c 	bl	8004918 <MCAL_USART_SendData>
 8002480:	2100      	movs	r1, #0
 8002482:	4824      	ldr	r0, [pc, #144]	; (8002514 <LUNA_INIT+0x24c>)
 8002484:	f002 fa48 	bl	8004918 <MCAL_USART_SendData>
		break;
 8002488:	e03e      	b.n	8002508 <LUNA_INIT+0x240>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800248a:	215a      	movs	r1, #90	; 0x5a
 800248c:	4821      	ldr	r0, [pc, #132]	; (8002514 <LUNA_INIT+0x24c>)
 800248e:	f002 fa43 	bl	8004918 <MCAL_USART_SendData>
 8002492:	2105      	movs	r1, #5
 8002494:	481f      	ldr	r0, [pc, #124]	; (8002514 <LUNA_INIT+0x24c>)
 8002496:	f002 fa3f 	bl	8004918 <MCAL_USART_SendData>
 800249a:	2105      	movs	r1, #5
 800249c:	481d      	ldr	r0, [pc, #116]	; (8002514 <LUNA_INIT+0x24c>)
 800249e:	f002 fa3b 	bl	8004918 <MCAL_USART_SendData>
 80024a2:	2107      	movs	r1, #7
 80024a4:	481b      	ldr	r0, [pc, #108]	; (8002514 <LUNA_INIT+0x24c>)
 80024a6:	f002 fa37 	bl	8004918 <MCAL_USART_SendData>
 80024aa:	2100      	movs	r1, #0
 80024ac:	4819      	ldr	r0, [pc, #100]	; (8002514 <LUNA_INIT+0x24c>)
 80024ae:	f002 fa33 	bl	8004918 <MCAL_USART_SendData>
		break;
 80024b2:	e029      	b.n	8002508 <LUNA_INIT+0x240>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80024b4:	215a      	movs	r1, #90	; 0x5a
 80024b6:	4817      	ldr	r0, [pc, #92]	; (8002514 <LUNA_INIT+0x24c>)
 80024b8:	f002 fa2e 	bl	8004918 <MCAL_USART_SendData>
 80024bc:	2105      	movs	r1, #5
 80024be:	4815      	ldr	r0, [pc, #84]	; (8002514 <LUNA_INIT+0x24c>)
 80024c0:	f002 fa2a 	bl	8004918 <MCAL_USART_SendData>
 80024c4:	2105      	movs	r1, #5
 80024c6:	4813      	ldr	r0, [pc, #76]	; (8002514 <LUNA_INIT+0x24c>)
 80024c8:	f002 fa26 	bl	8004918 <MCAL_USART_SendData>
 80024cc:	2108      	movs	r1, #8
 80024ce:	4811      	ldr	r0, [pc, #68]	; (8002514 <LUNA_INIT+0x24c>)
 80024d0:	f002 fa22 	bl	8004918 <MCAL_USART_SendData>
 80024d4:	2100      	movs	r1, #0
 80024d6:	480f      	ldr	r0, [pc, #60]	; (8002514 <LUNA_INIT+0x24c>)
 80024d8:	f002 fa1e 	bl	8004918 <MCAL_USART_SendData>
		break;
 80024dc:	e014      	b.n	8002508 <LUNA_INIT+0x240>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80024de:	215a      	movs	r1, #90	; 0x5a
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <LUNA_INIT+0x24c>)
 80024e2:	f002 fa19 	bl	8004918 <MCAL_USART_SendData>
 80024e6:	2105      	movs	r1, #5
 80024e8:	480a      	ldr	r0, [pc, #40]	; (8002514 <LUNA_INIT+0x24c>)
 80024ea:	f002 fa15 	bl	8004918 <MCAL_USART_SendData>
 80024ee:	2105      	movs	r1, #5
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <LUNA_INIT+0x24c>)
 80024f2:	f002 fa11 	bl	8004918 <MCAL_USART_SendData>
 80024f6:	2109      	movs	r1, #9
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <LUNA_INIT+0x24c>)
 80024fa:	f002 fa0d 	bl	8004918 <MCAL_USART_SendData>
 80024fe:	2100      	movs	r1, #0
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <LUNA_INIT+0x24c>)
 8002502:	f002 fa09 	bl	8004918 <MCAL_USART_SendData>
		break;
 8002506:	bf00      	nop
	}
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd90      	pop	{r4, r7, pc}
 8002510:	080055e4 	.word	0x080055e4
 8002514:	40004800 	.word	0x40004800

08002518 <TFT_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TFT_init(RGB_fromat RGB){
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af04      	add	r7, sp, #16
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]

	/**************init the moudles used*************/
	SPI_Config_t TFT_Config={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_2,idle_0,first_clock};
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	2301      	movs	r3, #1
 8002532:	743b      	strb	r3, [r7, #16]
 8002534:	2301      	movs	r3, #1
 8002536:	747b      	strb	r3, [r7, #17]
	PIN_config PINx={TFT_RESET_PIN,OUTPUT_PP,SPEED_10};
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <TFT_init+0xec>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
	MCAL_SPI_init(TFT_SPI_inistant, &TFT_Config);
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	4619      	mov	r1, r3
 8002544:	4830      	ldr	r0, [pc, #192]	; (8002608 <TFT_init+0xf0>)
 8002546:	f001 fd03 	bl	8003f50 <MCAL_SPI_init>
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	4619      	mov	r1, r3
 8002550:	482e      	ldr	r0, [pc, #184]	; (800260c <TFT_init+0xf4>)
 8002552:	f001 fa37 	bl	80039c4 <MCAL_GPIO_init>
	PINx.PIN_number =TFT_A0_PIN;
 8002556:	2303      	movs	r3, #3
 8002558:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	4619      	mov	r1, r3
 8002560:	482a      	ldr	r0, [pc, #168]	; (800260c <TFT_init+0xf4>)
 8002562:	f001 fa2f 	bl	80039c4 <MCAL_GPIO_init>
	/**************Start the init*************/
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002566:	2201      	movs	r2, #1
 8002568:	2104      	movs	r1, #4
 800256a:	4828      	ldr	r0, [pc, #160]	; (800260c <TFT_init+0xf4>)
 800256c:	f001 fb12 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_LOW);
 8002570:	2200      	movs	r2, #0
 8002572:	2102      	movs	r1, #2
 8002574:	4825      	ldr	r0, [pc, #148]	; (800260c <TFT_init+0xf4>)
 8002576:	f001 fb0d 	bl	8003b94 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800257a:	2078      	movs	r0, #120	; 0x78
 800257c:	f002 f84c 	bl	8004618 <_TIM1_delay_ms>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_HIGH);
 8002580:	2201      	movs	r2, #1
 8002582:	2102      	movs	r1, #2
 8002584:	4821      	ldr	r0, [pc, #132]	; (800260c <TFT_init+0xf4>)
 8002586:	f001 fb05 	bl	8003b94 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800258a:	2078      	movs	r0, #120	; 0x78
 800258c:	f002 f844 	bl	8004618 <_TIM1_delay_ms>

	TFT_send_command(0x01);
 8002590:	2001      	movs	r0, #1
 8002592:	f000 f975 	bl	8002880 <TFT_send_command>
	_TIM1_delay_ms( 120);
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f002 f83e 	bl	8004618 <_TIM1_delay_ms>

	TFT_send_command(TFT_Sleep_Out_MODE);
 800259c:	2011      	movs	r0, #17
 800259e:	f000 f96f 	bl	8002880 <TFT_send_command>
	_TIM1_delay_ms( 110);
 80025a2:	206e      	movs	r0, #110	; 0x6e
 80025a4:	f002 f838 	bl	8004618 <_TIM1_delay_ms>

	TFT_send_command(TFT_Pixel_Format_MODE); // Interface Pixel Format
 80025a8:	203a      	movs	r0, #58	; 0x3a
 80025aa:	f000 f969 	bl	8002880 <TFT_send_command>
	TFT_send_data(0x6); //18 bit
 80025ae:	2006      	movs	r0, #6
 80025b0:	f000 f988 	bl	80028c4 <TFT_send_data>
	_TIM1_delay_ms( 120);
 80025b4:	2078      	movs	r0, #120	; 0x78
 80025b6:	f002 f82f 	bl	8004618 <_TIM1_delay_ms>

	//	TFT_send_command(0x23); // Interface Pixel Format
	TFT_send_command(0x36);
 80025ba:	2036      	movs	r0, #54	; 0x36
 80025bc:	f000 f960 	bl	8002880 <TFT_send_command>
	_TIM1_delay_ms( 120);
 80025c0:	2078      	movs	r0, #120	; 0x78
 80025c2:	f002 f829 	bl	8004618 <_TIM1_delay_ms>

	TFT_send_data(0b00001000 );
 80025c6:	2008      	movs	r0, #8
 80025c8:	f000 f97c 	bl	80028c4 <TFT_send_data>

	_TIM1_delay_ms( 120);
 80025cc:	2078      	movs	r0, #120	; 0x78
 80025ce:	f002 f823 	bl	8004618 <_TIM1_delay_ms>

	///////////////////////

	/////////////////////////
	TFT_send_command(TFT_Display_On_MODE);
 80025d2:	2029      	movs	r0, #41	; 0x29
 80025d4:	f000 f954 	bl	8002880 <TFT_send_command>
	_TIM1_delay_ms( 120);
 80025d8:	2078      	movs	r0, #120	; 0x78
 80025da:	f002 f81d 	bl	8004618 <_TIM1_delay_ms>





	TFT_SET_BACKGROUND(0x0000,0x01DF,0x0000,0x013F,0xff,0xff,0xff);
 80025de:	23ff      	movs	r3, #255	; 0xff
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	23ff      	movs	r3, #255	; 0xff
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f240 133f 	movw	r3, #319	; 0x13f
 80025ee:	2200      	movs	r2, #0
 80025f0:	f240 11df 	movw	r1, #479	; 0x1df
 80025f4:	2000      	movs	r0, #0
 80025f6:	f000 f8df 	bl	80027b8 <TFT_SET_BACKGROUND>



}
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	080055f4 	.word	0x080055f4
 8002608:	40013000 	.word	0x40013000
 800260c:	40010800 	.word	0x40010800

08002610 <TFT_SET_LOCATION>:
void TFT_SET_LOCATION(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2){
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4623      	mov	r3, r4
 8002620:	80fb      	strh	r3, [r7, #6]
 8002622:	4603      	mov	r3, r0
 8002624:	80bb      	strh	r3, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	807b      	strh	r3, [r7, #2]
 800262a:	4613      	mov	r3, r2
 800262c:	803b      	strh	r3, [r7, #0]
	/***********************************/
	TFT_send_command(TFT_SET_Column_MODE);
 800262e:	202a      	movs	r0, #42	; 0x2a
 8002630:	f000 f926 	bl	8002880 <TFT_send_command>
	TFT_send_data((y1>>8));
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f941 	bl	80028c4 <TFT_send_data>
	TFT_send_data(((uint8_t)y1));
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f93c 	bl	80028c4 <TFT_send_data>


	TFT_send_data((y2>>8));
 800264c:	883b      	ldrh	r3, [r7, #0]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	b29b      	uxth	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f935 	bl	80028c4 <TFT_send_data>
	TFT_send_data(((uint8_t)y2));
 800265a:	883b      	ldrh	r3, [r7, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f930 	bl	80028c4 <TFT_send_data>
	/***********************************/
	TFT_send_command(TFT_SET_Row_MODE);
 8002664:	202b      	movs	r0, #43	; 0x2b
 8002666:	f000 f90b 	bl	8002880 <TFT_send_command>
	TFT_send_data((x1>>8));
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	b29b      	uxth	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f926 	bl	80028c4 <TFT_send_data>
	TFT_send_data(((uint8_t)x1));
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f921 	bl	80028c4 <TFT_send_data>


	TFT_send_data((x2>>8));
 8002682:	88bb      	ldrh	r3, [r7, #4]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	b29b      	uxth	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f91a 	bl	80028c4 <TFT_send_data>
	TFT_send_data(((uint8_t)x2));
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f915 	bl	80028c4 <TFT_send_data>
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
	...

080026a4 <TFT_SEND_Image>:

void TFT_SEND_Image(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint16_t* image){
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4604      	mov	r4, r0
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	80fb      	strh	r3, [r7, #6]
 80026b6:	4603      	mov	r3, r0
 80026b8:	80bb      	strh	r3, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
 80026be:	4613      	mov	r3, r2
 80026c0:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	883a      	ldrh	r2, [r7, #0]
 80026cc:	1c51      	adds	r1, r2, #1
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	1a8a      	subs	r2, r1, r2
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	613b      	str	r3, [r7, #16]
	uint8_t r=0,g=0,b=0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	2300      	movs	r3, #0
 80026de:	73bb      	strb	r3, [r7, #14]
 80026e0:	2300      	movs	r3, #0
 80026e2:	737b      	strb	r3, [r7, #13]

	TFT_SET_LOCATION(x1,x2,y1,y2);
 80026e4:	883b      	ldrh	r3, [r7, #0]
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	88b9      	ldrh	r1, [r7, #4]
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	f7ff ff90 	bl	8002610 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 80026f0:	202c      	movs	r0, #44	; 0x2c
 80026f2:	f000 f8c5 	bl	8002880 <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e04d      	b.n	8002798 <TFT_SEND_Image+0xf4>
		r = (image[i] & 0xF800) >> 11;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	0adb      	lsrs	r3, r3, #11
 8002708:	b29b      	uxth	r3, r3
 800270a:	73fb      	strb	r3, [r7, #15]
		g = (image[i] & 0x07E0) >> 5;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002712:	4413      	add	r3, r2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	115b      	asrs	r3, r3, #5
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271e:	73bb      	strb	r3, [r7, #14]
		b = image[i] & 0x001F;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	737b      	strb	r3, [r7, #13]
		r = (r * 255) / 31;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	4613      	mov	r3, r2
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <TFT_SEND_Image+0x10c>)
 800273c:	fb82 1203 	smull	r1, r2, r2, r3
 8002740:	441a      	add	r2, r3
 8002742:	1112      	asrs	r2, r2, #4
 8002744:	17db      	asrs	r3, r3, #31
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	73fb      	strb	r3, [r7, #15]
		g = (g * 255) / 63;
 800274a:	7bba      	ldrb	r2, [r7, #14]
 800274c:	4613      	mov	r3, r2
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <TFT_SEND_Image+0x110>)
 8002754:	fb82 1203 	smull	r1, r2, r2, r3
 8002758:	441a      	add	r2, r3
 800275a:	1152      	asrs	r2, r2, #5
 800275c:	17db      	asrs	r3, r3, #31
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	73bb      	strb	r3, [r7, #14]
		b = (b * 255) / 31;
 8002762:	7b7a      	ldrb	r2, [r7, #13]
 8002764:	4613      	mov	r3, r2
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <TFT_SEND_Image+0x10c>)
 800276c:	fb82 1203 	smull	r1, r2, r2, r3
 8002770:	441a      	add	r2, r3
 8002772:	1112      	asrs	r2, r2, #4
 8002774:	17db      	asrs	r3, r3, #31
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	737b      	strb	r3, [r7, #13]

		TFT_send_data(r);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f8a1 	bl	80028c4 <TFT_send_data>
		TFT_send_data(g);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f89d 	bl	80028c4 <TFT_send_data>
		TFT_send_data(b);
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f899 	bl	80028c4 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3ad      	bcc.n	80026fc <TFT_SEND_Image+0x58>
	}
	TFT_send_command(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f000 f86d 	bl	8002880 <TFT_send_command>


}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	84210843 	.word	0x84210843
 80027b4:	82082083 	.word	0x82082083

080027b8 <TFT_SET_BACKGROUND>:
void TFT_SET_BACKGROUND(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint8_t r,uint8_t g,uint8_t b){
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	80fb      	strh	r3, [r7, #6]
 80027ca:	4603      	mov	r3, r0
 80027cc:	80bb      	strh	r3, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
 80027d2:	4613      	mov	r3, r2
 80027d4:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 80027d6:	88bb      	ldrh	r3, [r7, #4]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	883a      	ldrh	r2, [r7, #0]
 80027e0:	1c51      	adds	r1, r2, #1
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	1a8a      	subs	r2, r1, r2
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	60bb      	str	r3, [r7, #8]
	TFT_SET_LOCATION(x1,x2,y1,y2);
 80027ec:	883b      	ldrh	r3, [r7, #0]
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	88b9      	ldrh	r1, [r7, #4]
 80027f2:	88f8      	ldrh	r0, [r7, #6]
 80027f4:	f7ff ff0c 	bl	8002610 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 80027f8:	202c      	movs	r0, #44	; 0x2c
 80027fa:	f000 f841 	bl	8002880 <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e011      	b.n	8002828 <TFT_SET_BACKGROUND+0x70>
		TFT_send_data(r);
 8002804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f85b 	bl	80028c4 <TFT_send_data>
		TFT_send_data(g);
 800280e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f856 	bl	80028c4 <TFT_send_data>
		TFT_send_data(b);
 8002818:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f851 	bl	80028c4 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3e9      	bcc.n	8002804 <TFT_SET_BACKGROUND+0x4c>
	}
	TFT_send_command(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f825 	bl	8002880 <TFT_send_command>


}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}

0800283e <TFT_MAKE_option>:
void TFT_MAKE_option(IMAGE_option OPTION){
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
	TFT_send_command(TFT_Memory_Access_Control);
 8002848:	2036      	movs	r0, #54	; 0x36
 800284a:	f000 f819 	bl	8002880 <TFT_send_command>
	_TIM1_delay_ms( 120);
 800284e:	2078      	movs	r0, #120	; 0x78
 8002850:	f001 fee2 	bl	8004618 <_TIM1_delay_ms>
	switch(OPTION){
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d002      	beq.n	8002860 <TFT_MAKE_option+0x22>
 800285a:	2b02      	cmp	r3, #2
 800285c:	d004      	beq.n	8002868 <TFT_MAKE_option+0x2a>
 800285e:	e007      	b.n	8002870 <TFT_MAKE_option+0x32>
	case X_ROTATE:
		TFT_send_data(0b01001000 );
 8002860:	2048      	movs	r0, #72	; 0x48
 8002862:	f000 f82f 	bl	80028c4 <TFT_send_data>
		break;
 8002866:	e007      	b.n	8002878 <TFT_MAKE_option+0x3a>
	case Y_ROTATE:
		TFT_send_data(0b10001000 );
 8002868:	2088      	movs	r0, #136	; 0x88
 800286a:	f000 f82b 	bl	80028c4 <TFT_send_data>
		break;
 800286e:	e003      	b.n	8002878 <TFT_MAKE_option+0x3a>
	default:
		TFT_send_data(0b00001000 );
 8002870:	2008      	movs	r0, #8
 8002872:	f000 f827 	bl	80028c4 <TFT_send_data>
		break;
 8002876:	bf00      	nop
	}
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <TFT_send_command>:
void TFT_send_command(uint8_t command)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 800288a:	2200      	movs	r2, #0
 800288c:	2104      	movs	r1, #4
 800288e:	480b      	ldr	r0, [pc, #44]	; (80028bc <TFT_send_command+0x3c>)
 8002890:	f001 f980 	bl	8003b94 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_LOW);
 8002894:	2200      	movs	r2, #0
 8002896:	2103      	movs	r1, #3
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <TFT_send_command+0x3c>)
 800289a:	f001 f97b 	bl	8003b94 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, command);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <TFT_send_command+0x40>)
 80028a4:	f001 fc14 	bl	80040d0 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2104      	movs	r1, #4
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <TFT_send_command+0x3c>)
 80028ae:	f001 f971 	bl	8003b94 <MCAL_write_PIN>

}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40010800 	.word	0x40010800
 80028c0:	40013000 	.word	0x40013000

080028c4 <TFT_send_data>:


void TFT_send_data(uint8_t data){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]

	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 80028ce:	2200      	movs	r2, #0
 80028d0:	2104      	movs	r1, #4
 80028d2:	480b      	ldr	r0, [pc, #44]	; (8002900 <TFT_send_data+0x3c>)
 80028d4:	f001 f95e 	bl	8003b94 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_HIGH);
 80028d8:	2201      	movs	r2, #1
 80028da:	2103      	movs	r1, #3
 80028dc:	4808      	ldr	r0, [pc, #32]	; (8002900 <TFT_send_data+0x3c>)
 80028de:	f001 f959 	bl	8003b94 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, data);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <TFT_send_data+0x40>)
 80028e8:	f001 fbf2 	bl	80040d0 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 80028ec:	2201      	movs	r2, #1
 80028ee:	2104      	movs	r1, #4
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <TFT_send_data+0x3c>)
 80028f2:	f001 f94f 	bl	8003b94 <MCAL_write_PIN>


}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40010800 	.word	0x40010800
 8002904:	40013000 	.word	0x40013000

08002908 <TFT_send_image>:



uint8_t TFT_send_image(uint8_t image_flag){
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af04      	add	r7, sp, #16
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]


	TFT_SET_BACKGROUND(0x008C,0x0153,0x006E,0x00D1,0xff,0xff,0xff);
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	23ff      	movs	r3, #255	; 0xff
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	23ff      	movs	r3, #255	; 0xff
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	23d1      	movs	r3, #209	; 0xd1
 8002920:	226e      	movs	r2, #110	; 0x6e
 8002922:	f240 1153 	movw	r1, #339	; 0x153
 8002926:	208c      	movs	r0, #140	; 0x8c
 8002928:	f7ff ff46 	bl	80027b8 <TFT_SET_BACKGROUND>
	switch(image_flag){
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	3b08      	subs	r3, #8
 8002930:	2b0b      	cmp	r3, #11
 8002932:	d87a      	bhi.n	8002a2a <TFT_send_image+0x122>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <TFT_send_image+0x34>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	080029c3 	.word	0x080029c3
 8002940:	0800296d 	.word	0x0800296d
 8002944:	08002a2b 	.word	0x08002a2b
 8002948:	08002a2b 	.word	0x08002a2b
 800294c:	08002a2b 	.word	0x08002a2b
 8002950:	08002a2b 	.word	0x08002a2b
 8002954:	08002a2b 	.word	0x08002a2b
 8002958:	08002a2b 	.word	0x08002a2b
 800295c:	0800299b 	.word	0x0800299b
 8002960:	08002a2b 	.word	0x08002a2b
 8002964:	08002a2b 	.word	0x08002a2b
 8002968:	080029fd 	.word	0x080029fd
	case (_100_KM_SIGN_FLAG):
	TFT_MAKE_option(default_option);
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff ff66 	bl	800283e <TFT_MAKE_option>
	TFT_SEND_Image(0x008C, 0x0153, 0x006E, 0x009F, _100_KM_SIGN);
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <TFT_send_image+0x158>)
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	239f      	movs	r3, #159	; 0x9f
 8002978:	226e      	movs	r2, #110	; 0x6e
 800297a:	f240 1153 	movw	r1, #339	; 0x153
 800297e:	208c      	movs	r0, #140	; 0x8c
 8002980:	f7ff fe90 	bl	80026a4 <TFT_SEND_Image>
	TFT_SEND_Image(0x008C, 0x0153, 0x00A0, 0x00D1, image_data_zeroh);
 8002984:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <TFT_send_image+0x15c>)
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	23d1      	movs	r3, #209	; 0xd1
 800298a:	22a0      	movs	r2, #160	; 0xa0
 800298c:	f240 1153 	movw	r1, #339	; 0x153
 8002990:	208c      	movs	r0, #140	; 0x8c
 8002992:	f7ff fe87 	bl	80026a4 <TFT_SEND_Image>

	return 0;
 8002996:	2300      	movs	r3, #0
 8002998:	e05e      	b.n	8002a58 <TFT_send_image+0x150>
	break;

	case _120_KM_SIGN_FLAG:
		TFT_SEND_Image(0x008C, 0x0153, 0x006E, 0x009F, _120_KM_SIGN);
 800299a:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <TFT_send_image+0x160>)
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	239f      	movs	r3, #159	; 0x9f
 80029a0:	226e      	movs	r2, #110	; 0x6e
 80029a2:	f240 1153 	movw	r1, #339	; 0x153
 80029a6:	208c      	movs	r0, #140	; 0x8c
 80029a8:	f7ff fe7c 	bl	80026a4 <TFT_SEND_Image>
		TFT_SEND_Image(0x008C, 0x0153, 0x00A0, 0x00D1, image_data_zeroh);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <TFT_send_image+0x15c>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	23d1      	movs	r3, #209	; 0xd1
 80029b2:	22a0      	movs	r2, #160	; 0xa0
 80029b4:	f240 1153 	movw	r1, #339	; 0x153
 80029b8:	208c      	movs	r0, #140	; 0x8c
 80029ba:	f7ff fe73 	bl	80026a4 <TFT_SEND_Image>


		return 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	e04a      	b.n	8002a58 <TFT_send_image+0x150>
		break;


		break;
	case NO_WAITING_SIGN_FLAG:
		TFT_MAKE_option(default_option);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff ff3b 	bl	800283e <TFT_MAKE_option>
		TFT_SEND_Image(0x008C, 0x0153, 0x006E, 0x009F, NO_WAITING_SIGN);
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <TFT_send_image+0x164>)
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	239f      	movs	r3, #159	; 0x9f
 80029ce:	226e      	movs	r2, #110	; 0x6e
 80029d0:	f240 1153 	movw	r1, #339	; 0x153
 80029d4:	208c      	movs	r0, #140	; 0x8c
 80029d6:	f7ff fe65 	bl	80026a4 <TFT_SEND_Image>
		TFT_MAKE_option(X_ROTATE);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff ff2f 	bl	800283e <TFT_MAKE_option>
		TFT_SEND_Image(0x008C, 0x0153, 0x006E, 0x009F, NO_WAITING_SIGN);
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <TFT_send_image+0x164>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	239f      	movs	r3, #159	; 0x9f
 80029e6:	226e      	movs	r2, #110	; 0x6e
 80029e8:	f240 1153 	movw	r1, #339	; 0x153
 80029ec:	208c      	movs	r0, #140	; 0x8c
 80029ee:	f7ff fe59 	bl	80026a4 <TFT_SEND_Image>
		TFT_MAKE_option(default_option);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff ff23 	bl	800283e <TFT_MAKE_option>

		return 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e02d      	b.n	8002a58 <TFT_send_image+0x150>
		break;
	case _40_KM_SIGN_FLAG:
		TFT_MAKE_option(default_option);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff ff1e 	bl	800283e <TFT_MAKE_option>
		TFT_SEND_Image(0x008C, 0x0153, 0x006E, 0x009F, _40_KM_SIGN);
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <TFT_send_image+0x168>)
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	239f      	movs	r3, #159	; 0x9f
 8002a08:	226e      	movs	r2, #110	; 0x6e
 8002a0a:	f240 1153 	movw	r1, #339	; 0x153
 8002a0e:	208c      	movs	r0, #140	; 0x8c
 8002a10:	f7ff fe48 	bl	80026a4 <TFT_SEND_Image>
		TFT_SEND_Image(0x008C, 0x0153, 0x00A0, 0x00D1, image_data_zeroh);
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <TFT_send_image+0x15c>)
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	23d1      	movs	r3, #209	; 0xd1
 8002a1a:	22a0      	movs	r2, #160	; 0xa0
 8002a1c:	f240 1153 	movw	r1, #339	; 0x153
 8002a20:	208c      	movs	r0, #140	; 0x8c
 8002a22:	f7ff fe3f 	bl	80026a4 <TFT_SEND_Image>

		return 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e016      	b.n	8002a58 <TFT_send_image+0x150>
		break;
	default:
		TFT_SET_BACKGROUND(0x008C,0x0153,0x006E,0x00D1,0xff,0xff,0xff);
 8002a2a:	23ff      	movs	r3, #255	; 0xff
 8002a2c:	9302      	str	r3, [sp, #8]
 8002a2e:	23ff      	movs	r3, #255	; 0xff
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	23ff      	movs	r3, #255	; 0xff
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	23d1      	movs	r3, #209	; 0xd1
 8002a38:	226e      	movs	r2, #110	; 0x6e
 8002a3a:	f240 1153 	movw	r1, #339	; 0x153
 8002a3e:	208c      	movs	r0, #140	; 0x8c
 8002a40:	f7ff feba 	bl	80027b8 <TFT_SET_BACKGROUND>

		TFT_SEND_Image(0x00D7, 0x0108, 0x0087, 0x00B8, _NO_SIGN);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <TFT_send_image+0x16c>)
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	23b8      	movs	r3, #184	; 0xb8
 8002a4a:	2287      	movs	r2, #135	; 0x87
 8002a4c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002a50:	20d7      	movs	r0, #215	; 0xd7
 8002a52:	f7ff fe27 	bl	80026a4 <TFT_SEND_Image>


		return 1;
 8002a56:	2301      	movs	r3, #1





}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	08005714 	.word	0x08005714
 8002a64:	0800f354 	.word	0x0800f354
 8002a68:	08018f94 	.word	0x08018f94
 8002a6c:	08014174 	.word	0x08014174
 8002a70:	0800a534 	.word	0x0800a534
 8002a74:	0801ddb4 	.word	0x0801ddb4

08002a78 <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
	while(1);
 8002a7c:	e7fe      	b.n	8002a7c <ADC_ERROR_HANDLER+0x4>
	...

08002a80 <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	81bb      	strh	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73bb      	strb	r3, [r7, #14]
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
	switch(CHx){
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b0f      	cmp	r3, #15
 8002a9a:	f200 80bf 	bhi.w	8002c1c <ADC_GPIO_CONFIG+0x19c>
 8002a9e:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <ADC_GPIO_CONFIG+0x24>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ae5 	.word	0x08002ae5
 8002aa8:	08002aff 	.word	0x08002aff
 8002aac:	08002b19 	.word	0x08002b19
 8002ab0:	08002b33 	.word	0x08002b33
 8002ab4:	08002b4d 	.word	0x08002b4d
 8002ab8:	08002b67 	.word	0x08002b67
 8002abc:	08002b81 	.word	0x08002b81
 8002ac0:	08002b9b 	.word	0x08002b9b
 8002ac4:	08002bb5 	.word	0x08002bb5
 8002ac8:	08002bcf 	.word	0x08002bcf
 8002acc:	08002c1d 	.word	0x08002c1d
 8002ad0:	08002c1d 	.word	0x08002c1d
 8002ad4:	08002c1d 	.word	0x08002c1d
 8002ad8:	08002c1d 	.word	0x08002c1d
 8002adc:	08002be9 	.word	0x08002be9
 8002ae0:	08002c03 	.word	0x08002c03
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	81bb      	strh	r3, [r7, #12]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	4619      	mov	r1, r3
 8002af6:	484d      	ldr	r0, [pc, #308]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002af8:	f000 ff64 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002afc:	e091      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 8002afe:	2301      	movs	r3, #1
 8002b00:	81bb      	strh	r3, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	73bb      	strb	r3, [r7, #14]
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4846      	ldr	r0, [pc, #280]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b12:	f000 ff57 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b16:	e084      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 8002b18:	2302      	movs	r3, #2
 8002b1a:	81bb      	strh	r3, [r7, #12]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73bb      	strb	r3, [r7, #14]
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4840      	ldr	r0, [pc, #256]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b2c:	f000 ff4a 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b30:	e077      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 8002b32:	2303      	movs	r3, #3
 8002b34:	81bb      	strh	r3, [r7, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	73bb      	strb	r3, [r7, #14]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	4839      	ldr	r0, [pc, #228]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b46:	f000 ff3d 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b4a:	e06a      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	81bb      	strh	r3, [r7, #12]
 8002b50:	2300      	movs	r3, #0
 8002b52:	73bb      	strb	r3, [r7, #14]
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4833      	ldr	r0, [pc, #204]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b60:	f000 ff30 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b64:	e05d      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8002b66:	2305      	movs	r3, #5
 8002b68:	81bb      	strh	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73bb      	strb	r3, [r7, #14]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4619      	mov	r1, r3
 8002b78:	482c      	ldr	r0, [pc, #176]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b7a:	f000 ff23 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b7e:	e050      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8002b80:	2306      	movs	r3, #6
 8002b82:	81bb      	strh	r3, [r7, #12]
 8002b84:	2300      	movs	r3, #0
 8002b86:	73bb      	strb	r3, [r7, #14]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	4619      	mov	r1, r3
 8002b92:	4826      	ldr	r0, [pc, #152]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002b94:	f000 ff16 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002b98:	e043      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	81bb      	strh	r3, [r7, #12]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73bb      	strb	r3, [r7, #14]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA,&PINx);
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	481f      	ldr	r0, [pc, #124]	; (8002c2c <ADC_GPIO_CONFIG+0x1ac>)
 8002bae:	f000 ff09 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002bb2:	e036      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	81bb      	strh	r3, [r7, #12]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB,&PINx);
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	481a      	ldr	r0, [pc, #104]	; (8002c30 <ADC_GPIO_CONFIG+0x1b0>)
 8002bc8:	f000 fefc 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002bcc:	e029      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 8002bce:	2301      	movs	r3, #1
 8002bd0:	81bb      	strh	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73bb      	strb	r3, [r7, #14]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB,&PINx);
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	4619      	mov	r1, r3
 8002be0:	4813      	ldr	r0, [pc, #76]	; (8002c30 <ADC_GPIO_CONFIG+0x1b0>)
 8002be2:	f000 feef 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002be6:	e01c      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 8002be8:	2304      	movs	r3, #4
 8002bea:	81bb      	strh	r3, [r7, #12]
 8002bec:	2300      	movs	r3, #0
 8002bee:	73bb      	strb	r3, [r7, #14]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOC,&PINx);
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480e      	ldr	r0, [pc, #56]	; (8002c34 <ADC_GPIO_CONFIG+0x1b4>)
 8002bfc:	f000 fee2 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002c00:	e00f      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 8002c02:	2305      	movs	r3, #5
 8002c04:	81bb      	strh	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	73bb      	strb	r3, [r7, #14]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOC,&PINx);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <ADC_GPIO_CONFIG+0x1b4>)
 8002c16:	f000 fed5 	bl	80039c4 <MCAL_GPIO_init>
		break;
 8002c1a:	e002      	b.n	8002c22 <ADC_GPIO_CONFIG+0x1a2>
	default:
		ADC_ERROR_HANDLER();
 8002c1c:	f7ff ff2c 	bl	8002a78 <ADC_ERROR_HANDLER>
		break;
 8002c20:	bf00      	nop

	}



}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	40011000 	.word	0x40011000

08002c38 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d905      	bls.n	8002c56 <ADC_init+0x1e>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b0d      	cmp	r3, #13
 8002c50:	d801      	bhi.n	8002c56 <ADC_init+0x1e>
		return ADC_error;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e173      	b.n	8002f3e <ADC_init+0x306>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a98      	ldr	r2, [pc, #608]	; (8002ebc <ADC_init+0x284>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d113      	bne.n	8002c86 <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <ADC_init+0x288>)
 8002c66:	460b      	mov	r3, r1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	440b      	add	r3, r1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8002c78:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <ADC_init+0x28c>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a91      	ldr	r2, [pc, #580]	; (8002ec4 <ADC_init+0x28c>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	e013      	b.n	8002cae <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4a8c      	ldr	r2, [pc, #560]	; (8002ec0 <ADC_init+0x288>)
 8002c8e:	460b      	mov	r3, r1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	33c0      	adds	r3, #192	; 0xc0
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <ADC_init+0x28c>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4a87      	ldr	r2, [pc, #540]	; (8002ec4 <ADC_init+0x28c>)
 8002ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cac:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fee4 	bl	8002a80 <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6893      	ldr	r3, [r2, #8]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f001 fc7c 	bl	80045c0 <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6893      	ldr	r3, [r2, #8]
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 8002cd2:	f001 f929 	bl	8003f28 <MCAL_GET_PCLCK2>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <ADC_init+0x290>)
 8002cda:	fba3 2302 	umull	r2, r3, r3, r2
 8002cde:	0c9b      	lsrs	r3, r3, #18
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d00a      	beq.n	8002cfa <ADC_init+0xc2>
 8002ce4:	2b1c      	cmp	r3, #28
 8002ce6:	d00f      	beq.n	8002d08 <ADC_init+0xd0>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d114      	bne.n	8002d16 <ADC_init+0xde>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <ADC_init+0x28c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <ADC_init+0x28c>)
 8002cf2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cf6:	6053      	str	r3, [r2, #4]
		break;
 8002cf8:	e014      	b.n	8002d24 <ADC_init+0xec>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 8002cfa:	4b72      	ldr	r3, [pc, #456]	; (8002ec4 <ADC_init+0x28c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a71      	ldr	r2, [pc, #452]	; (8002ec4 <ADC_init+0x28c>)
 8002d00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d04:	6053      	str	r3, [r2, #4]
		break;
 8002d06:	e00d      	b.n	8002d24 <ADC_init+0xec>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 8002d08:	4b6e      	ldr	r3, [pc, #440]	; (8002ec4 <ADC_init+0x28c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <ADC_init+0x28c>)
 8002d0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d12:	6053      	str	r3, [r2, #4]
		break;
 8002d14:	e006      	b.n	8002d24 <ADC_init+0xec>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 8002d16:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <ADC_init+0x28c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <ADC_init+0x28c>)
 8002d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d20:	6053      	str	r3, [r2, #4]
		break;
 8002d22:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6893      	ldr	r3, [r2, #8]
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6893      	ldr	r3, [r2, #8]
 8002d32:	f36f 23cb 	bfc	r3, #11, #1
 8002d36:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	f200 80a7 	bhi.w	8002e90 <ADC_init+0x258>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <ADC_init+0x110>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d89 	.word	0x08002d89
 8002d4c:	08002d9f 	.word	0x08002d9f
 8002d50:	08002db5 	.word	0x08002db5
 8002d54:	08002dcb 	.word	0x08002dcb
 8002d58:	08002de1 	.word	0x08002de1
 8002d5c:	08002df7 	.word	0x08002df7
 8002d60:	08002e0d 	.word	0x08002e0d
 8002d64:	08002e23 	.word	0x08002e23
 8002d68:	08002e39 	.word	0x08002e39
 8002d6c:	08002e4f 	.word	0x08002e4f
 8002d70:	08002e91 	.word	0x08002e91
 8002d74:	08002e91 	.word	0x08002e91
 8002d78:	08002e91 	.word	0x08002e91
 8002d7c:	08002e91 	.word	0x08002e91
 8002d80:	08002e65 	.word	0x08002e65
 8002d84:	08002e7b 	.word	0x08002e7b
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	789b      	ldrb	r3, [r3, #2]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	b2d9      	uxtb	r1, r3
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6913      	ldr	r3, [r2, #16]
 8002d96:	f361 0302 	bfi	r3, r1, #0, #3
 8002d9a:	6113      	str	r3, [r2, #16]
		break;
 8002d9c:	e07b      	b.n	8002e96 <ADC_init+0x25e>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	789b      	ldrb	r3, [r3, #2]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6913      	ldr	r3, [r2, #16]
 8002dac:	f361 03c5 	bfi	r3, r1, #3, #3
 8002db0:	6113      	str	r3, [r2, #16]

		break;
 8002db2:	e070      	b.n	8002e96 <ADC_init+0x25e>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	789b      	ldrb	r3, [r3, #2]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	b2d9      	uxtb	r1, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6913      	ldr	r3, [r2, #16]
 8002dc2:	f361 1388 	bfi	r3, r1, #6, #3
 8002dc6:	6113      	str	r3, [r2, #16]

		break;
 8002dc8:	e065      	b.n	8002e96 <ADC_init+0x25e>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	789b      	ldrb	r3, [r3, #2]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6913      	ldr	r3, [r2, #16]
 8002dd8:	f361 234b 	bfi	r3, r1, #9, #3
 8002ddc:	6113      	str	r3, [r2, #16]

		break;
 8002dde:	e05a      	b.n	8002e96 <ADC_init+0x25e>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	789b      	ldrb	r3, [r3, #2]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	b2d9      	uxtb	r1, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6913      	ldr	r3, [r2, #16]
 8002dee:	f361 330e 	bfi	r3, r1, #12, #3
 8002df2:	6113      	str	r3, [r2, #16]

		break;
 8002df4:	e04f      	b.n	8002e96 <ADC_init+0x25e>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	789b      	ldrb	r3, [r3, #2]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	b2d9      	uxtb	r1, r3
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6913      	ldr	r3, [r2, #16]
 8002e04:	f361 33d1 	bfi	r3, r1, #15, #3
 8002e08:	6113      	str	r3, [r2, #16]

		break;
 8002e0a:	e044      	b.n	8002e96 <ADC_init+0x25e>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	b2d9      	uxtb	r1, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6913      	ldr	r3, [r2, #16]
 8002e1a:	f361 4394 	bfi	r3, r1, #18, #3
 8002e1e:	6113      	str	r3, [r2, #16]

		break;
 8002e20:	e039      	b.n	8002e96 <ADC_init+0x25e>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	789b      	ldrb	r3, [r3, #2]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	b2d9      	uxtb	r1, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6913      	ldr	r3, [r2, #16]
 8002e30:	f361 5357 	bfi	r3, r1, #21, #3
 8002e34:	6113      	str	r3, [r2, #16]

		break;
 8002e36:	e02e      	b.n	8002e96 <ADC_init+0x25e>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	789b      	ldrb	r3, [r3, #2]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2d9      	uxtb	r1, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6913      	ldr	r3, [r2, #16]
 8002e46:	f361 631a 	bfi	r3, r1, #24, #3
 8002e4a:	6113      	str	r3, [r2, #16]

		break;
 8002e4c:	e023      	b.n	8002e96 <ADC_init+0x25e>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	789b      	ldrb	r3, [r3, #2]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	b2d9      	uxtb	r1, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6913      	ldr	r3, [r2, #16]
 8002e5c:	f361 63dd 	bfi	r3, r1, #27, #3
 8002e60:	6113      	str	r3, [r2, #16]

		break;
 8002e62:	e018      	b.n	8002e96 <ADC_init+0x25e>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	789b      	ldrb	r3, [r3, #2]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	b2d9      	uxtb	r1, r3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68d3      	ldr	r3, [r2, #12]
 8002e72:	f361 330e 	bfi	r3, r1, #12, #3
 8002e76:	60d3      	str	r3, [r2, #12]

		break;
 8002e78:	e00d      	b.n	8002e96 <ADC_init+0x25e>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	789b      	ldrb	r3, [r3, #2]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	b2d9      	uxtb	r1, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68d3      	ldr	r3, [r2, #12]
 8002e88:	f361 33d1 	bfi	r3, r1, #15, #3
 8002e8c:	60d3      	str	r3, [r2, #12]
		break;
 8002e8e:	e002      	b.n	8002e96 <ADC_init+0x25e>
	default:
		ADC_ERROR_HANDLER();
 8002e90:	f7ff fdf2 	bl	8002a78 <ADC_ERROR_HANDLER>
		break;
 8002e94:	bf00      	nop


	}

	switch(config->mode){
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <ADC_init+0x26c>
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d006      	beq.n	8002eb0 <ADC_init+0x278>
 8002ea2:	e013      	b.n	8002ecc <ADC_init+0x294>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6893      	ldr	r3, [r2, #8]
 8002ea8:	f36f 0341 	bfc	r3, #1, #1
 8002eac:	6093      	str	r3, [r2, #8]
		break;
 8002eae:	e010      	b.n	8002ed2 <ADC_init+0x29a>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6893      	ldr	r3, [r2, #8]
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	6093      	str	r3, [r2, #8]
		break;
 8002eba:	e00a      	b.n	8002ed2 <ADC_init+0x29a>
 8002ebc:	40012400 	.word	0x40012400
 8002ec0:	20003fd4 	.word	0x20003fd4
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8002ecc:	f7ff fdd4 	bl	8002a78 <ADC_ERROR_HANDLER>
		break;
 8002ed0:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d022      	beq.n	8002f28 <ADC_init+0x2f0>
		ADCx->CR1.Bit_Name.AWDEN=1;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6853      	ldr	r3, [r2, #4]
 8002ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eea:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	b2d9      	uxtb	r1, r3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6853      	ldr	r3, [r2, #4]
 8002efa:	f361 0304 	bfi	r3, r1, #0, #5
 8002efe:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	78db      	ldrb	r3, [r3, #3]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <ADC_init+0x2dc>
			ADCx->CR1.Bit_Name.AWDIE=1;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6853      	ldr	r3, [r2, #4]
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f10:	6053      	str	r3, [r2, #4]
 8002f12:	e004      	b.n	8002f1e <ADC_init+0x2e6>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6853      	ldr	r3, [r2, #4]
 8002f18:	f36f 1386 	bfc	r3, #6, #1
 8002f1c:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6853      	ldr	r3, [r2, #4]
 8002f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f26:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6893      	ldr	r3, [r2, #8]
 8002f2c:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8002f30:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6893      	ldr	r3, [r2, #8]
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3a:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop

08002f48 <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	460b      	mov	r3, r1
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a30      	ldr	r2, [pc, #192]	; (8003020 <ADC_read+0xd8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8002f62:	7afa      	ldrb	r2, [r7, #11]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <ADC_read+0xdc>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e008      	b.n	8002f86 <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8002f74:	7afa      	ldrb	r2, [r7, #11]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	33c0      	adds	r3, #192	; 0xc0
 8002f80:	4a28      	ldr	r2, [pc, #160]	; (8003024 <ADC_read+0xdc>)
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	b2d9      	uxtb	r1, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002fa6:	f361 0304 	bfi	r3, r1, #0, #5
 8002faa:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10c      	bne.n	8002fce <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	6893      	ldr	r3, [r2, #8]
 8002fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbc:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 8002fbe:	bf00      	nop
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f8      	beq.n	8002fc0 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	801a      	strh	r2, [r3, #0]
		data++;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 8002fe6:	e016      	b.n	8003016 <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
 8002fec:	e00a      	b.n	8003004 <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	801a      	strh	r2, [r3, #0]
			data++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	3301      	adds	r3, #1
 8003002:	74fb      	strb	r3, [r7, #19]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	f3c3 5303 	ubfx	r3, r3, #20, #4
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	4293      	cmp	r3, r2
 8003014:	d9eb      	bls.n	8002fee <ADC_read+0xa6>
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40012400 	.word	0x40012400
 8003024:	20003fd4 	.word	0x20003fd4

08003028 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <ADC1_2_IRQHandler+0x54>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10f      	bne.n	800305a <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <ADC1_2_IRQHandler+0x54>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <ADC1_2_IRQHandler+0x58>)
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3308      	adds	r3, #8
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 8003058:	e00e      	b.n	8003078 <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <ADC1_2_IRQHandler+0x5c>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4619      	mov	r1, r3
 8003066:	4a06      	ldr	r2, [pc, #24]	; (8003080 <ADC1_2_IRQHandler+0x58>)
 8003068:	460b      	mov	r3, r1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	440b      	add	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	33c8      	adds	r3, #200	; 0xc8
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4798      	blx	r3
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40012400 	.word	0x40012400
 8003080:	20003fd4 	.word	0x20003fd4
 8003084:	40012800 	.word	0x40012800

08003088 <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
	while(1);
 800308c:	e7fe      	b.n	800308c <ERROR_HANDLER+0x4>
	...

08003090 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <MCAL_CAN_SET_GPIO+0x30>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <MCAL_CAN_SET_GPIO+0x34>)
 80030a2:	f000 fc8f 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <MCAL_CAN_SET_GPIO+0x38>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4804      	ldr	r0, [pc, #16]	; (80030c4 <MCAL_CAN_SET_GPIO+0x34>)
 80030b2:	f000 fc87 	bl	80039c4 <MCAL_GPIO_init>

}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	080055f8 	.word	0x080055f8
 80030c4:	40010800 	.word	0x40010800
 80030c8:	080055fc 	.word	0x080055fc

080030cc <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 80030d4:	4b84      	ldr	r3, [pc, #528]	; (80032e8 <MCAL_CAN_init+0x21c>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80030da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 80030de:	4b83      	ldr	r3, [pc, #524]	; (80032ec <MCAL_CAN_init+0x220>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a82      	ldr	r2, [pc, #520]	; (80032ec <MCAL_CAN_init+0x220>)
 80030e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e8:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 80030ea:	f7ff ffd1 	bl	8003090 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 80030ee:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <MCAL_CAN_init+0x224>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11f      	bne.n	800313c <MCAL_CAN_init+0x70>
 80030fc:	4b7c      	ldr	r3, [pc, #496]	; (80032f0 <MCAL_CAN_init+0x224>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d118      	bne.n	800313c <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 800310a:	4a79      	ldr	r2, [pc, #484]	; (80032f0 <MCAL_CAN_init+0x224>)
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	f36f 0341 	bfc	r3, #1, #1
 8003112:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 8003114:	4a76      	ldr	r2, [pc, #472]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 800311e:	bf00      	nop
 8003120:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d1f8      	bne.n	8003120 <MCAL_CAN_init+0x54>
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f1      	bne.n	8003120 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e004      	b.n	800315a <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f36f 1386 	bfc	r3, #6, #1
 8003158:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8003162:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f043 0310 	orr.w	r3, r3, #16
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e004      	b.n	8003178 <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 800316e:	4a60      	ldr	r2, [pc, #384]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003170:	6813      	ldr	r3, [r2, #0]
 8003172:	f36f 1304 	bfc	r3, #4, #1
 8003176:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8003178:	4a5d      	ldr	r2, [pc, #372]	; (80032f0 <MCAL_CAN_init+0x224>)
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	f36f 0382 	bfc	r3, #2, #1
 8003180:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	789b      	ldrb	r3, [r3, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 800318a:	4a59      	ldr	r2, [pc, #356]	; (80032f0 <MCAL_CAN_init+0x224>)
 800318c:	6813      	ldr	r3, [r2, #0]
 800318e:	f043 0308 	orr.w	r3, r3, #8
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e004      	b.n	80031a0 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f36f 03c3 	bfc	r3, #3, #1
 800319e:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 80031a0:	f000 feae 	bl	8003f00 <MCAL_GET_PCLCK1>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <MCAL_CAN_init+0x228>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <MCAL_CAN_init+0xe8>
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <MCAL_CAN_init+0x22c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d023      	beq.n	80031fa <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 80031b2:	e045      	b.n	8003240 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d83e      	bhi.n	800323a <MCAL_CAN_init+0x16e>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <MCAL_CAN_init+0xf8>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031df 	.word	0x080031df
 80031cc:	080031e9 	.word	0x080031e9
 80031d0:	080031f1 	.word	0x080031f1
			CAN1->BTR.ALL_Bits=0x00050000;
 80031d4:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <MCAL_CAN_init+0x224>)
 80031d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80031da:	61da      	str	r2, [r3, #28]
			break;
 80031dc:	e00c      	b.n	80031f8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <MCAL_CAN_init+0x224>)
 80031e0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80031e4:	61da      	str	r2, [r3, #28]
			break;
 80031e6:	e007      	b.n	80031f8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <MCAL_CAN_init+0x224>)
 80031ea:	4a44      	ldr	r2, [pc, #272]	; (80032fc <MCAL_CAN_init+0x230>)
 80031ec:	61da      	str	r2, [r3, #28]
			break;
 80031ee:	e003      	b.n	80031f8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <MCAL_CAN_init+0x224>)
 80031f2:	4a43      	ldr	r2, [pc, #268]	; (8003300 <MCAL_CAN_init+0x234>)
 80031f4:	61da      	str	r2, [r3, #28]
			break;
 80031f6:	bf00      	nop
		break;
 80031f8:	e01f      	b.n	800323a <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	78db      	ldrb	r3, [r3, #3]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d81d      	bhi.n	800323e <MCAL_CAN_init+0x172>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <MCAL_CAN_init+0x13c>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003219 	.word	0x08003219
 800320c:	08003221 	.word	0x08003221
 8003210:	08003229 	.word	0x08003229
 8003214:	08003231 	.word	0x08003231
				CAN1->BTR.ALL_Bits=0x00090001;
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <MCAL_CAN_init+0x224>)
 800321a:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <MCAL_CAN_init+0x238>)
 800321c:	61da      	str	r2, [r3, #28]
				break;
 800321e:	e00b      	b.n	8003238 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003222:	4a39      	ldr	r2, [pc, #228]	; (8003308 <MCAL_CAN_init+0x23c>)
 8003224:	61da      	str	r2, [r3, #28]
				break;
 8003226:	e007      	b.n	8003238 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MCAL_CAN_init+0x224>)
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <MCAL_CAN_init+0x240>)
 800322c:	61da      	str	r2, [r3, #28]
				break;
 800322e:	e003      	b.n	8003238 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003232:	4a37      	ldr	r2, [pc, #220]	; (8003310 <MCAL_CAN_init+0x244>)
 8003234:	61da      	str	r2, [r3, #28]
				break;
 8003236:	bf00      	nop
			break;
 8003238:	e001      	b.n	800323e <MCAL_CAN_init+0x172>
		break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <MCAL_CAN_init+0x174>
			break;
 800323e:	bf00      	nop

	}

	switch(CANx->MODE){
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d837      	bhi.n	80032b8 <MCAL_CAN_init+0x1ec>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <MCAL_CAN_init+0x184>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003277 	.word	0x08003277
 8003258:	0800328d 	.word	0x0800328d
 800325c:	080032a3 	.word	0x080032a3
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8003260:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003262:	69d3      	ldr	r3, [r2, #28]
 8003264:	f36f 73df 	bfc	r3, #31, #1
 8003268:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <MCAL_CAN_init+0x224>)
 800326c:	69d3      	ldr	r3, [r2, #28]
 800326e:	f36f 739e 	bfc	r3, #30, #1
 8003272:	61d3      	str	r3, [r2, #28]

		break;
 8003274:	e023      	b.n	80032be <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003278:	69d3      	ldr	r3, [r2, #28]
 800327a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800327e:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003282:	69d3      	ldr	r3, [r2, #28]
 8003284:	f36f 739e 	bfc	r3, #30, #1
 8003288:	61d3      	str	r3, [r2, #28]
		break;
 800328a:	e018      	b.n	80032be <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <MCAL_CAN_init+0x224>)
 800328e:	69d3      	ldr	r3, [r2, #28]
 8003290:	f36f 73df 	bfc	r3, #31, #1
 8003294:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <MCAL_CAN_init+0x224>)
 8003298:	69d3      	ldr	r3, [r2, #28]
 800329a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329e:	61d3      	str	r3, [r2, #28]
		break;
 80032a0:	e00d      	b.n	80032be <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <MCAL_CAN_init+0x224>)
 80032a4:	69d3      	ldr	r3, [r2, #28]
 80032a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 80032ac:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <MCAL_CAN_init+0x224>)
 80032ae:	69d3      	ldr	r3, [r2, #28]
 80032b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b4:	61d3      	str	r3, [r2, #28]
		break;
 80032b6:	e002      	b.n	80032be <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 80032b8:	f7ff fee6 	bl	8003088 <ERROR_HANDLER>
		break;
 80032bc:	bf00      	nop

	}

	if(CANx->IE){
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	795b      	ldrb	r3, [r3, #5]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <MCAL_CAN_init+0x224>)
 80032c8:	6953      	ldr	r3, [r2, #20]
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 80032d0:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <MCAL_CAN_init+0x224>)
 80032d2:	6953      	ldr	r3, [r2, #20]
 80032d4:	f043 0310 	orr.w	r3, r3, #16
 80032d8:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <MCAL_CAN_init+0x248>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <MCAL_CAN_init+0x248>)
 80032e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e027      	b.n	8003338 <MCAL_CAN_init+0x26c>
 80032e8:	20004154 	.word	0x20004154
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40006400 	.word	0x40006400
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	016e3600 	.word	0x016e3600
 80032fc:	001c0001 	.word	0x001c0001
 8003300:	001c0004 	.word	0x001c0004
 8003304:	00090001 	.word	0x00090001
 8003308:	001c0002 	.word	0x001c0002
 800330c:	001c0005 	.word	0x001c0005
 8003310:	001c000e 	.word	0x001c000e
 8003314:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 800331a:	6953      	ldr	r3, [r2, #20]
 800331c:	f36f 0341 	bfc	r3, #1, #1
 8003320:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8003322:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 8003324:	6953      	ldr	r3, [r2, #20]
 8003326:	f36f 1304 	bfc	r3, #4, #1
 800332a:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <MCAL_CAN_init+0x2dc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <MCAL_CAN_init+0x2dc>)
 8003332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003336:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 8003338:	4a1a      	ldr	r2, [pc, #104]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 800333a:	6953      	ldr	r3, [r2, #20]
 800333c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003340:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 8003344:	6953      	ldr	r3, [r2, #20]
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <MCAL_CAN_init+0x2e0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <MCAL_CAN_init+0x2e0>)
 8003352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003356:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d118      	bne.n	8003398 <MCAL_CAN_init+0x2cc>
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f36f 0341 	bfc	r3, #1, #1
 800337c:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f36f 0300 	bfc	r3, #0, #1
 8003386:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8003388:	bf00      	nop
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MCAL_CAN_init+0x2d8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d0f8      	beq.n	800338a <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40006400 	.word	0x40006400
 80033a8:	e000e180 	.word	0xe000e180
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <MCAL_CAN_RESET+0x24>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <MCAL_CAN_RESET+0x24>)
 80033ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033be:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <MCAL_CAN_RESET+0x24>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4a03      	ldr	r2, [pc, #12]	; (80033d4 <MCAL_CAN_RESET+0x24>)
 80033c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80033ca:	6113      	str	r3, [r2, #16]

}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000

080033d8 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20004154 	.word	0x20004154

080033ec <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <CAN_RX1_IRQHandler+0x10>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4798      	blx	r3
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20004154 	.word	0x20004154

08003400 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 8003404:	f7ff ffd4 	bl	80033b0 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <CAN_SCE_IRQHandler+0x14>)
 800340a:	f7ff fe5f 	bl	80030cc <MCAL_CAN_init>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20004154 	.word	0x20004154

08003418 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b0f      	cmp	r3, #15
 8003426:	d854      	bhi.n	80034d2 <NVIC_ENABLE+0xba>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <NVIC_ENABLE+0x18>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003471 	.word	0x08003471
 8003434:	0800347f 	.word	0x0800347f
 8003438:	0800348d 	.word	0x0800348d
 800343c:	0800349b 	.word	0x0800349b
 8003440:	080034a9 	.word	0x080034a9
 8003444:	080034b7 	.word	0x080034b7
 8003448:	080034b7 	.word	0x080034b7
 800344c:	080034b7 	.word	0x080034b7
 8003450:	080034b7 	.word	0x080034b7
 8003454:	080034b7 	.word	0x080034b7
 8003458:	080034c5 	.word	0x080034c5
 800345c:	080034c5 	.word	0x080034c5
 8003460:	080034c5 	.word	0x080034c5
 8003464:	080034c5 	.word	0x080034c5
 8003468:	080034c5 	.word	0x080034c5
 800346c:	080034c5 	.word	0x080034c5
	case 0:
		NVIC_EXTI0_EN;
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <NVIC_ENABLE+0xc4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <NVIC_ENABLE+0xc4>)
 8003476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347a:	6013      	str	r3, [r2, #0]
		break;
 800347c:	e029      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <NVIC_ENABLE+0xc4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a16      	ldr	r2, [pc, #88]	; (80034dc <NVIC_ENABLE+0xc4>)
 8003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003488:	6013      	str	r3, [r2, #0]
		break;
 800348a:	e022      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <NVIC_ENABLE+0xc4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <NVIC_ENABLE+0xc4>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	6013      	str	r3, [r2, #0]
		break;
 8003498:	e01b      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <NVIC_ENABLE+0xc4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <NVIC_ENABLE+0xc4>)
 80034a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a4:	6013      	str	r3, [r2, #0]
		break;
 80034a6:	e014      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <NVIC_ENABLE+0xc4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <NVIC_ENABLE+0xc4>)
 80034ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b2:	6013      	str	r3, [r2, #0]
		break;
 80034b4:	e00d      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <NVIC_ENABLE+0xc4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <NVIC_ENABLE+0xc4>)
 80034bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034c0:	6013      	str	r3, [r2, #0]
		break;
 80034c2:	e006      	b.n	80034d2 <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <NVIC_ENABLE+0xc8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <NVIC_ENABLE+0xc8>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]
break;
 80034d0:	bf00      	nop

	}
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000e104 	.word	0xe000e104

080034e4 <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d854      	bhi.n	800359e <NVIC_DISABLE+0xba>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <NVIC_DISABLE+0x18>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	0800354b 	.word	0x0800354b
 8003504:	08003559 	.word	0x08003559
 8003508:	08003567 	.word	0x08003567
 800350c:	08003575 	.word	0x08003575
 8003510:	08003583 	.word	0x08003583
 8003514:	08003583 	.word	0x08003583
 8003518:	08003583 	.word	0x08003583
 800351c:	08003583 	.word	0x08003583
 8003520:	08003583 	.word	0x08003583
 8003524:	08003591 	.word	0x08003591
 8003528:	08003591 	.word	0x08003591
 800352c:	08003591 	.word	0x08003591
 8003530:	08003591 	.word	0x08003591
 8003534:	08003591 	.word	0x08003591
 8003538:	08003591 	.word	0x08003591
	case 0:
		NVIC_EXTI0_D;
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003546:	6013      	str	r3, [r2, #0]
		break;
 8003548:	e029      	b.n	800359e <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003554:	6013      	str	r3, [r2, #0]
		break;
 8003556:	e022      	b.n	800359e <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800355e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003562:	6013      	str	r3, [r2, #0]
		break;
 8003564:	e01b      	b.n	800359e <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800356c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003570:	6013      	str	r3, [r2, #0]
		break;
 8003572:	e014      	b.n	800359e <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <NVIC_DISABLE+0xc4>)
 800357a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800357e:	6013      	str	r3, [r2, #0]
		break;
 8003580:	e00d      	b.n	800359e <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <NVIC_DISABLE+0xc4>)
 8003588:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800358c:	6013      	str	r3, [r2, #0]
		break;
 800358e:	e006      	b.n	800359e <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <NVIC_DISABLE+0xc8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <NVIC_DISABLE+0xc8>)
 8003596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]
break;
 800359c:	bf00      	nop

	}
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000e104 	.word	0xe000e104

080035b0 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |=(1<<0);
 80035b8:	4b65      	ldr	r3, [pc, #404]	; (8003750 <MCAL_EXTI_init+0x1a0>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4a64      	ldr	r2, [pc, #400]	; (8003750 <MCAL_EXTI_init+0x1a0>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6193      	str	r3, [r2, #24]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	891b      	ldrh	r3, [r3, #8]
 80035e6:	813b      	strh	r3, [r7, #8]
 80035e8:	2301      	movs	r3, #1
 80035ea:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f107 0208 	add.w	r2, r7, #8
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f9e4 	bl	80039c4 <MCAL_GPIO_init>

		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <MCAL_EXTI_init+0x6c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	4611      	mov	r1, r2
 800360e:	2201      	movs	r2, #1
 8003610:	408a      	lsls	r2, r1
 8003612:	4611      	mov	r1, r2
 8003614:	4a4f      	ldr	r2, [pc, #316]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003616:	430b      	orrs	r3, r1
 8003618:	60d3      	str	r3, [r2, #12]
 800361a:	e029      	b.n	8003670 <MCAL_EXTI_init+0xc0>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7b1b      	ldrb	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10b      	bne.n	800363c <MCAL_EXTI_init+0x8c>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	4611      	mov	r1, r2
 800362e:	2201      	movs	r2, #1
 8003630:	408a      	lsls	r2, r1
 8003632:	4611      	mov	r1, r2
 8003634:	4a47      	ldr	r2, [pc, #284]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003636:	430b      	orrs	r3, r1
 8003638:	6093      	str	r3, [r2, #8]
 800363a:	e019      	b.n	8003670 <MCAL_EXTI_init+0xc0>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7b1b      	ldrb	r3, [r3, #12]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d115      	bne.n	8003670 <MCAL_EXTI_init+0xc0>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	8812      	ldrh	r2, [r2, #0]
 800364c:	4611      	mov	r1, r2
 800364e:	2201      	movs	r2, #1
 8003650:	408a      	lsls	r2, r1
 8003652:	4611      	mov	r1, r2
 8003654:	4a3f      	ldr	r2, [pc, #252]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003656:	430b      	orrs	r3, r1
 8003658:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	8812      	ldrh	r2, [r2, #0]
 8003662:	4611      	mov	r1, r2
 8003664:	2201      	movs	r2, #1
 8003666:	408a      	lsls	r2, r1
 8003668:	4611      	mov	r1, r2
 800366a:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6093      	str	r3, [r2, #8]


		}
		//UPDATE THE ALTERNATIVE FUNC
			AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <MCAL_EXTI_init+0x1a8>)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3302      	adds	r3, #2
 8003676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	210f      	movs	r1, #15
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	4618      	mov	r0, r3
 8003686:	4934      	ldr	r1, [pc, #208]	; (8003758 <MCAL_EXTI_init+0x1a8>)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4002      	ands	r2, r0
 800368c:	3302      	adds	r3, #2
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8003692:	4a31      	ldr	r2, [pc, #196]	; (8003758 <MCAL_EXTI_init+0x1a8>)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3302      	adds	r3, #2
 8003698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	492e      	ldr	r1, [pc, #184]	; (800375c <MCAL_EXTI_init+0x1ac>)
 80036a2:	428b      	cmp	r3, r1
 80036a4:	d016      	beq.n	80036d4 <MCAL_EXTI_init+0x124>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	492d      	ldr	r1, [pc, #180]	; (8003760 <MCAL_EXTI_init+0x1b0>)
 80036ac:	428b      	cmp	r3, r1
 80036ae:	d00f      	beq.n	80036d0 <MCAL_EXTI_init+0x120>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	492b      	ldr	r1, [pc, #172]	; (8003764 <MCAL_EXTI_init+0x1b4>)
 80036b6:	428b      	cmp	r3, r1
 80036b8:	d008      	beq.n	80036cc <MCAL_EXTI_init+0x11c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	492a      	ldr	r1, [pc, #168]	; (8003768 <MCAL_EXTI_init+0x1b8>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d101      	bne.n	80036c8 <MCAL_EXTI_init+0x118>
 80036c4:	2304      	movs	r3, #4
 80036c6:	e006      	b.n	80036d6 <MCAL_EXTI_init+0x126>
 80036c8:	2300      	movs	r3, #0
 80036ca:	e004      	b.n	80036d6 <MCAL_EXTI_init+0x126>
 80036cc:	2303      	movs	r3, #3
 80036ce:	e002      	b.n	80036d6 <MCAL_EXTI_init+0x126>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <MCAL_EXTI_init+0x126>
 80036d4:	2300      	movs	r3, #0
 80036d6:	7bb9      	ldrb	r1, [r7, #14]
 80036d8:	408b      	lsls	r3, r1
 80036da:	4618      	mov	r0, r3
 80036dc:	491e      	ldr	r1, [pc, #120]	; (8003758 <MCAL_EXTI_init+0x1a8>)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4302      	orrs	r2, r0
 80036e2:	3302      	adds	r3, #2
 80036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <MCAL_EXTI_init+0x1bc>)
 80036f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7b5b      	ldrb	r3, [r3, #13]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d111      	bne.n	8003724 <MCAL_EXTI_init+0x174>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	4611      	mov	r1, r2
 800370a:	2201      	movs	r2, #1
 800370c:	408a      	lsls	r2, r1
 800370e:	4611      	mov	r1, r2
 8003710:	4a10      	ldr	r2, [pc, #64]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fe7b 	bl	8003418 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 8003722:	e011      	b.n	8003748 <MCAL_EXTI_init+0x198>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	4611      	mov	r1, r2
 800372e:	2201      	movs	r2, #1
 8003730:	408a      	lsls	r2, r1
 8003732:	43d2      	mvns	r2, r2
 8003734:	4611      	mov	r1, r2
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <MCAL_EXTI_init+0x1a4>)
 8003738:	400b      	ands	r3, r1
 800373a:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fece 	bl	80034e4 <NVIC_DISABLE>
	}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	40010400 	.word	0x40010400
 8003758:	40010000 	.word	0x40010000
 800375c:	40010800 	.word	0x40010800
 8003760:	40010c00 	.word	0x40010c00
 8003764:	40011000 	.word	0x40011000
 8003768:	40011400 	.word	0x40011400
 800376c:	20004194 	.word	0x20004194

08003770 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <EXTI0_IRQHandler+0x1c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <EXTI0_IRQHandler+0x20>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <EXTI0_IRQHandler+0x20>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6153      	str	r3, [r2, #20]
	}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20004194 	.word	0x20004194
 8003790:	40010400 	.word	0x40010400

08003794 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <EXTI1_IRQHandler+0x1c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <EXTI1_IRQHandler+0x20>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <EXTI1_IRQHandler+0x20>)
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	6153      	str	r3, [r2, #20]

	}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20004194 	.word	0x20004194
 80037b4:	40010400 	.word	0x40010400

080037b8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <EXTI2_IRQHandler+0x1c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <EXTI2_IRQHandler+0x20>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <EXTI2_IRQHandler+0x20>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6153      	str	r3, [r2, #20]

	}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20004194 	.word	0x20004194
 80037d8:	40010400 	.word	0x40010400

080037dc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <EXTI3_IRQHandler+0x1c>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <EXTI3_IRQHandler+0x20>)
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <EXTI3_IRQHandler+0x20>)
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6153      	str	r3, [r2, #20]

	}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20004194 	.word	0x20004194
 80037fc:	40010400 	.word	0x40010400

08003800 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <EXTI4_IRQHandler+0x1c>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <EXTI4_IRQHandler+0x20>)
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <EXTI4_IRQHandler+0x20>)
 8003810:	f043 0310 	orr.w	r3, r3, #16
 8003814:	6153      	str	r3, [r2, #20]

	}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20004194 	.word	0x20004194
 8003820:	40010400 	.word	0x40010400

08003824 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8003828:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <EXTI9_5_IRQHandler+0x22>
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	6153      	str	r3, [r2, #20]
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <EXTI9_5_IRQHandler+0xa4>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <EXTI9_5_IRQHandler+0x40>
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385c:	6153      	str	r3, [r2, #20]
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <EXTI9_5_IRQHandler+0xa4>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8003864:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <EXTI9_5_IRQHandler+0x5e>
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387a:	6153      	str	r3, [r2, #20]
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <EXTI9_5_IRQHandler+0xa4>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <EXTI9_5_IRQHandler+0x7c>
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6153      	str	r3, [r2, #20]
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <EXTI9_5_IRQHandler+0xa4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <EXTI9_5_IRQHandler+0x9a>
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <EXTI9_5_IRQHandler+0xa0>)
 80038b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b6:	6153      	str	r3, [r2, #20]
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <EXTI9_5_IRQHandler+0xa4>)
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	4798      	blx	r3
	}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40010400 	.word	0x40010400
 80038c8:	20004194 	.word	0x20004194

080038cc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <EXTI15_10_IRQHandler+0x22>
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4a29      	ldr	r2, [pc, #164]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e6:	6153      	str	r3, [r2, #20]
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <EXTI15_10_IRQHandler+0x40>
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003904:	6153      	str	r3, [r2, #20]
 8003906:	4b21      	ldr	r3, [pc, #132]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <EXTI15_10_IRQHandler+0x5e>
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800391e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003922:	6153      	str	r3, [r2, #20]
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <EXTI15_10_IRQHandler+0x7c>
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4a13      	ldr	r2, [pc, #76]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800393c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003940:	6153      	str	r3, [r2, #20]
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <EXTI15_10_IRQHandler+0x9a>
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 800395a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800395e:	6153      	str	r3, [r2, #20]
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <EXTI15_10_IRQHandler+0xb8>
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <EXTI15_10_IRQHandler+0xbc>)
 8003978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397c:	6153      	str	r3, [r2, #20]
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <EXTI15_10_IRQHandler+0xc0>)
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4798      	blx	r3

	}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40010400 	.word	0x40010400
 800398c:	20004194 	.word	0x20004194

08003990 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b07      	cmp	r3, #7
 800399e:	d803      	bhi.n	80039a8 <Get_PIN_Positon+0x18>
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	e006      	b.n	80039b6 <Get_PIN_Positon+0x26>
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80039ae:	3338      	adds	r3, #56	; 0x38
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	81fb      	strh	r3, [r7, #14]
return positon;
 80039b8:	89fb      	ldrh	r3, [r7, #14]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <MCAL_GPIO_init+0x1b8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d106      	bne.n	80039e4 <MCAL_GPIO_init+0x20>
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	4a69      	ldr	r2, [pc, #420]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6193      	str	r3, [r2, #24]
 80039e2:	e02a      	b.n	8003a3a <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a67      	ldr	r2, [pc, #412]	; (8003b84 <MCAL_GPIO_init+0x1c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d106      	bne.n	80039fa <MCAL_GPIO_init+0x36>
 80039ec:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4a63      	ldr	r2, [pc, #396]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 80039f2:	f043 0308 	orr.w	r3, r3, #8
 80039f6:	6193      	str	r3, [r2, #24]
 80039f8:	e01f      	b.n	8003a3a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a62      	ldr	r2, [pc, #392]	; (8003b88 <MCAL_GPIO_init+0x1c4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d106      	bne.n	8003a10 <MCAL_GPIO_init+0x4c>
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6193      	str	r3, [r2, #24]
 8003a0e:	e014      	b.n	8003a3a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a5e      	ldr	r2, [pc, #376]	; (8003b8c <MCAL_GPIO_init+0x1c8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d106      	bne.n	8003a26 <MCAL_GPIO_init+0x62>
 8003a18:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	6193      	str	r3, [r2, #24]
 8003a24:	e009      	b.n	8003a3a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a59      	ldr	r2, [pc, #356]	; (8003b90 <MCAL_GPIO_init+0x1cc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d105      	bne.n	8003a3a <MCAL_GPIO_init+0x76>
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	4a53      	ldr	r2, [pc, #332]	; (8003b80 <MCAL_GPIO_init+0x1bc>)
 8003a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a38:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b07      	cmp	r3, #7
 8003a42:	d801      	bhi.n	8003a48 <MCAL_GPIO_init+0x84>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	e001      	b.n	8003a4c <MCAL_GPIO_init+0x88>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff9b 	bl	8003990 <Get_PIN_Positon>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	230f      	movs	r3, #15
 8003a60:	4093      	lsls	r3, r2
 8003a62:	43da      	mvns	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	401a      	ands	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	789b      	ldrb	r3, [r3, #2]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <MCAL_GPIO_init+0xd2>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d009      	beq.n	8003a96 <MCAL_GPIO_init+0xd2>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d004      	beq.n	8003a96 <MCAL_GPIO_init+0xd2>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	789b      	ldrb	r3, [r3, #2]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d156      	bne.n	8003b44 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	789b      	ldrb	r3, [r3, #2]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d11c      	bne.n	8003ada <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff72 	bl	8003990 <Get_PIN_Positon>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	fa03 f202 	lsl.w	r2, r3, r2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2301      	movs	r3, #1
 8003aca:	4093      	lsls	r3, r2
 8003acc:	43da      	mvns	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8003ad8:	e04c      	b.n	8003b74 <MCAL_GPIO_init+0x1b0>
		}

		else if(PINx->MODE == INPUT_PU){
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	789b      	ldrb	r3, [r3, #2]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d11c      	bne.n	8003b1e <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff50 	bl	8003990 <Get_PIN_Positon>
 8003af0:	4603      	mov	r3, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	2308      	movs	r3, #8
 8003af6:	fa03 f202 	lsl.w	r2, r3, r2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	fa03 f202 	lsl.w	r2, r3, r2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8003b1c:	e02a      	b.n	8003b74 <MCAL_GPIO_init+0x1b0>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	789b      	ldrb	r3, [r3, #2]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	009c      	lsls	r4, r3, #2
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff2f 	bl	8003990 <Get_PIN_Positon>
 8003b32:	4603      	mov	r3, r0
 8003b34:	fa04 f203 	lsl.w	r2, r4, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8003b42:	e017      	b.n	8003b74 <MCAL_GPIO_init+0x1b0>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	789b      	ldrb	r3, [r3, #2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	78d2      	ldrb	r2, [r2, #3]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	ea43 0402 	orr.w	r4, r3, r2
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff16 	bl	8003990 <Get_PIN_Positon>
 8003b64:	4603      	mov	r3, r0
 8003b66:	fa04 f203 	lsl.w	r2, r4, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

	}

}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010c00 	.word	0x40010c00
 8003b88:	40011000 	.word	0x40011000
 8003b8c:	40011400 	.word	0x40011400
 8003b90:	40011800 	.word	0x40011800

08003b94 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d10b      	bne.n	8003bc4 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	fa03 f202 	lsl.w	r2, r3, r2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]

	}



}
 8003bc2:	e00a      	b.n	8003bda <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4093      	lsls	r3, r2
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60da      	str	r2, [r3, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	40d3      	lsrs	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	b29b      	uxth	r3, r3

}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8003c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	7813      	ldrb	r3, [r2, #0]
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8003c2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c30:	6913      	ldr	r3, [r2, #16]
 8003c32:	f36f 0300 	bfc	r3, #0, #1
 8003c36:	6113      	str	r3, [r2, #16]
 8003c38:	e04e      	b.n	8003cd8 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8003c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	7813      	ldrb	r3, [r2, #0]
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8003c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c58:	6913      	ldr	r3, [r2, #16]
 8003c5a:	f36f 0341 	bfc	r3, #1, #1
 8003c5e:	6113      	str	r3, [r2, #16]
 8003c60:	e03a      	b.n	8003cd8 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8003c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	7813      	ldrb	r3, [r2, #0]
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8003c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c80:	6913      	ldr	r3, [r2, #16]
 8003c82:	f36f 0382 	bfc	r3, #2, #1
 8003c86:	6113      	str	r3, [r2, #16]
 8003c88:	e026      	b.n	8003cd8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8003c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	7813      	ldrb	r3, [r2, #0]
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8003ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ca8:	6913      	ldr	r3, [r2, #16]
 8003caa:	f36f 03c3 	bfc	r3, #3, #1
 8003cae:	6113      	str	r3, [r2, #16]
 8003cb0:	e012      	b.n	8003cd8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8003cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	7813      	ldrb	r3, [r2, #0]
 8003cc6:	f043 0310 	orr.w	r3, r3, #16
 8003cca:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8003ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd0:	6913      	ldr	r3, [r2, #16]
 8003cd2:	f36f 1304 	bfc	r3, #4, #1
 8003cd6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <TIM2_IRQHandler+0xdc>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3

}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200041d0 	.word	0x200041d0

08003cec <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8003cf2:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	7813      	ldrb	r3, [r2, #0]
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d0c:	6913      	ldr	r3, [r2, #16]
 8003d0e:	f36f 0300 	bfc	r3, #0, #1
 8003d12:	6113      	str	r3, [r2, #16]
 8003d14:	e046      	b.n	8003da4 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8003d16:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8003d2e:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d30:	6913      	ldr	r3, [r2, #16]
 8003d32:	f36f 0341 	bfc	r3, #1, #1
 8003d36:	6113      	str	r3, [r2, #16]
 8003d38:	e034      	b.n	8003da4 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	7813      	ldrb	r3, [r2, #0]
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8003d52:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d54:	6913      	ldr	r3, [r2, #16]
 8003d56:	f36f 0382 	bfc	r3, #2, #1
 8003d5a:	6113      	str	r3, [r2, #16]
 8003d5c:	e022      	b.n	8003da4 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	7813      	ldrb	r3, [r2, #0]
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d78:	6913      	ldr	r3, [r2, #16]
 8003d7a:	f36f 03c3 	bfc	r3, #3, #1
 8003d7e:	6113      	str	r3, [r2, #16]
 8003d80:	e010      	b.n	8003da4 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	7813      	ldrb	r3, [r2, #0]
 8003d94:	f043 0310 	orr.w	r3, r3, #16
 8003d98:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8003d9a:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <TIM3_IRQHandler+0xc8>)
 8003d9c:	6913      	ldr	r3, [r2, #16]
 8003d9e:	f36f 1304 	bfc	r3, #4, #1
 8003da2:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <TIM3_IRQHandler+0xcc>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40000400 	.word	0x40000400
 8003db8:	200041d0 	.word	0x200041d0

08003dbc <TIM4_IRQHandler>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	7813      	ldrb	r3, [r2, #0]
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003ddc:	6913      	ldr	r3, [r2, #16]
 8003dde:	f36f 0300 	bfc	r3, #0, #1
 8003de2:	6113      	str	r3, [r2, #16]
 8003de4:	e04b      	b.n	8003e7e <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	7813      	ldrb	r3, [r2, #0]
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e00:	6913      	ldr	r3, [r2, #16]
 8003e02:	f36f 0341 	bfc	r3, #1, #1
 8003e06:	6113      	str	r3, [r2, #16]
 8003e08:	e039      	b.n	8003e7e <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00f      	beq.n	8003e38 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	7813      	ldrb	r3, [r2, #0]
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e24:	6913      	ldr	r3, [r2, #16]
 8003e26:	f36f 0382 	bfc	r3, #2, #1
 8003e2a:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	7813      	ldrb	r3, [r2, #0]
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	7013      	strb	r3, [r2, #0]
 8003e36:	e022      	b.n	8003e7e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	7813      	ldrb	r3, [r2, #0]
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8003e50:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e52:	6913      	ldr	r3, [r2, #16]
 8003e54:	f36f 03c3 	bfc	r3, #3, #1
 8003e58:	6113      	str	r3, [r2, #16]
 8003e5a:	e010      	b.n	8003e7e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	7813      	ldrb	r3, [r2, #0]
 8003e6e:	f043 0310 	orr.w	r3, r3, #16
 8003e72:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8003e74:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <TIM4_IRQHandler+0xd4>)
 8003e76:	6913      	ldr	r3, [r2, #16]
 8003e78:	f36f 1304 	bfc	r3, #4, #1
 8003e7c:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <TIM4_IRQHandler+0xd8>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3


}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40000800 	.word	0x40000800
 8003e94:	200041d0 	.word	0x200041d0

08003e98 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <MCAL_GET_SYS_CLCK+0x30>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d006      	beq.n	8003eb8 <MCAL_GET_SYS_CLCK+0x20>
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d302      	bcc.n	8003eb4 <MCAL_GET_SYS_CLCK+0x1c>
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d004      	beq.n	8003ebc <MCAL_GET_SYS_CLCK+0x24>
 8003eb2:	e005      	b.n	8003ec0 <MCAL_GET_SYS_CLCK+0x28>
	case 0:
		return HSI_CLOCK;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <MCAL_GET_SYS_CLCK+0x34>)
 8003eb6:	e003      	b.n	8003ec0 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 1:
		return HSE_CLOCK;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <MCAL_GET_SYS_CLCK+0x38>)
 8003eba:	e001      	b.n	8003ec0 <MCAL_GET_SYS_CLCK+0x28>
		break;
	case 2:
		return PLL_CLOCK;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <MCAL_GET_SYS_CLCK+0x3c>)
 8003ebe:	e7ff      	b.n	8003ec0 <MCAL_GET_SYS_CLCK+0x28>

		break;
	}

}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	007a1200 	.word	0x007a1200
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	01ab3f00 	.word	0x01ab3f00

08003ed8 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8003edc:	f7ff ffdc 	bl	8003e98 <MCAL_GET_SYS_CLCK>
 8003ee0:	4601      	mov	r1, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <MCAL_GET_H_CLCK+0x20>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	4a03      	ldr	r2, [pc, #12]	; (8003efc <MCAL_GET_H_CLCK+0x24>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	20000010 	.word	0x20000010

08003f00 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8003f04:	f7ff ffe8 	bl	8003ed8 <MCAL_GET_H_CLCK>
 8003f08:	4601      	mov	r1, r0
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <MCAL_GET_PCLCK1+0x20>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4a03      	ldr	r2, [pc, #12]	; (8003f24 <MCAL_GET_PCLCK1+0x24>)
 8003f16:	5cd3      	ldrb	r3, [r2, r3]
 8003f18:	fa21 f303 	lsr.w	r3, r1, r3

}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	20000008 	.word	0x20000008

08003f28 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8003f2c:	f7ff ffd4 	bl	8003ed8 <MCAL_GET_H_CLCK>
 8003f30:	4601      	mov	r1, r0
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <MCAL_GET_PCLCK2+0x20>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	0adb      	lsrs	r3, r3, #11
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4a03      	ldr	r2, [pc, #12]	; (8003f4c <MCAL_GET_PCLCK2+0x24>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	fa21 f303 	lsr.w	r3, r1, r3

}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	20000008 	.word	0x20000008

08003f50 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a57      	ldr	r2, [pc, #348]	; (80040bc <MCAL_SPI_init+0x16c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d10c      	bne.n	8003f7c <MCAL_SPI_init+0x2c>
 8003f62:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <MCAL_SPI_init+0x170>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4614      	mov	r4, r2
 8003f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003f6e:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <MCAL_SPI_init+0x174>)
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	4a54      	ldr	r2, [pc, #336]	; (80040c4 <MCAL_SPI_init+0x174>)
 8003f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f78:	6193      	str	r3, [r2, #24]
 8003f7a:	e011      	b.n	8003fa0 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a52      	ldr	r2, [pc, #328]	; (80040c8 <MCAL_SPI_init+0x178>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10d      	bne.n	8003fa0 <MCAL_SPI_init+0x50>
 8003f84:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <MCAL_SPI_init+0x170>)
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	f103 0410 	add.w	r4, r3, #16
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003f94:	4b4b      	ldr	r3, [pc, #300]	; (80040c4 <MCAL_SPI_init+0x174>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <MCAL_SPI_init+0x174>)
 8003f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f9e:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	789b      	ldrb	r3, [r3, #2]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	8813      	ldrh	r3, [r2, #0]
 8003fae:	f361 23cb 	bfi	r3, r1, #11, #1
 8003fb2:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	799b      	ldrb	r3, [r3, #6]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	b2d9      	uxtb	r1, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	8813      	ldrh	r3, [r2, #0]
 8003fc2:	f361 0341 	bfi	r3, r1, #1, #1
 8003fc6:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	79db      	ldrb	r3, [r3, #7]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	b2d9      	uxtb	r1, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	8813      	ldrh	r3, [r2, #0]
 8003fd6:	f361 0300 	bfi	r3, r1, #0, #1
 8003fda:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	78db      	ldrb	r3, [r3, #3]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	b2d9      	uxtb	r1, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	8813      	ldrh	r3, [r2, #0]
 8003fea:	f361 13c7 	bfi	r3, r1, #7, #1
 8003fee:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	791b      	ldrb	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <MCAL_SPI_init+0xb4>
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	8813      	ldrh	r3, [r2, #0]
 8003ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004000:	8013      	strh	r3, [r2, #0]
 8004002:	e01c      	b.n	800403e <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	791b      	ldrb	r3, [r3, #4]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10a      	bne.n	8004022 <MCAL_SPI_init+0xd2>
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	8813      	ldrh	r3, [r2, #0]
 8004010:	f36f 2349 	bfc	r3, #9, #1
 8004014:	8013      	strh	r3, [r2, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	7913      	ldrb	r3, [r2, #4]
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	7113      	strb	r3, [r2, #4]
 8004020:	e00d      	b.n	800403e <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	791b      	ldrb	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d109      	bne.n	800403e <MCAL_SPI_init+0xee>
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	8813      	ldrh	r3, [r2, #0]
 800402e:	f36f 2349 	bfc	r3, #9, #1
 8004032:	8013      	strh	r3, [r2, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	7913      	ldrb	r3, [r2, #4]
 8004038:	f36f 0382 	bfc	r3, #2, #1
 800403c:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	8813      	ldrh	r3, [r2, #0]
 800404c:	f361 0382 	bfi	r3, r1, #2, #1
 8004050:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	795b      	ldrb	r3, [r3, #5]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	b2d9      	uxtb	r1, r3
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	8813      	ldrh	r3, [r2, #0]
 8004060:	f361 03c5 	bfi	r3, r1, #3, #3
 8004064:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	7a1b      	ldrb	r3, [r3, #8]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d114      	bne.n	8004098 <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a12      	ldr	r2, [pc, #72]	; (80040bc <MCAL_SPI_init+0x16c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d106      	bne.n	8004084 <MCAL_SPI_init+0x134>
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <MCAL_SPI_init+0x17c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <MCAL_SPI_init+0x17c>)
 800407c:	f043 0308 	orr.w	r3, r3, #8
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e009      	b.n	8004098 <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <MCAL_SPI_init+0x178>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d105      	bne.n	8004098 <MCAL_SPI_init+0x148>
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MCAL_SPI_init+0x17c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <MCAL_SPI_init+0x17c>)
 8004092:	f043 0310 	orr.w	r3, r3, #16
 8004096:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f853 	bl	8004144 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2d9      	uxtb	r1, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	8813      	ldrh	r3, [r2, #0]
 80040ac:	f361 1386 	bfi	r3, r1, #6, #1
 80040b0:	8013      	strh	r3, [r2, #0]




}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd90      	pop	{r4, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40013000 	.word	0x40013000
 80040c0:	20004160 	.word	0x20004160
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40003800 	.word	0x40003800
 80040cc:	e000e104 	.word	0xe000e104

080040d0 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a14      	ldr	r2, [pc, #80]	; (8004134 <MCAL_SPI_SendData+0x64>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d102      	bne.n	80040ee <MCAL_SPI_SendData+0x1e>
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <MCAL_SPI_SendData+0x68>)
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e005      	b.n	80040fa <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a12      	ldr	r2, [pc, #72]	; (800413c <MCAL_SPI_SendData+0x6c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <MCAL_SPI_SendData+0x2a>
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <MCAL_SPI_SendData+0x70>)
 80040f8:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	7a1b      	ldrb	r3, [r3, #8]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	7913      	ldrb	r3, [r2, #4]
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	7113      	strb	r3, [r2, #4]
 800410c:	e007      	b.n	800411e <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 800410e:	bf00      	nop
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f8      	beq.n	8004110 <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	b2db      	uxtb	r3, r3

}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40013000 	.word	0x40013000
 8004138:	20004160 	.word	0x20004160
 800413c:	40003800 	.word	0x40003800
 8004140:	20004170 	.word	0x20004170

08004144 <MCAL_SET_GPIO>:
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);


}

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a6c      	ldr	r2, [pc, #432]	; (8004304 <MCAL_SET_GPIO+0x1c0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d169      	bne.n	800422c <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 8004158:	4b6b      	ldr	r3, [pc, #428]	; (8004308 <MCAL_SET_GPIO+0x1c4>)
 800415a:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 800415c:	4b6b      	ldr	r3, [pc, #428]	; (800430c <MCAL_SET_GPIO+0x1c8>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	4a6a      	ldr	r2, [pc, #424]	; (800430c <MCAL_SET_GPIO+0x1c8>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	791b      	ldrb	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <MCAL_SET_GPIO+0x3e>
 8004170:	4b67      	ldr	r3, [pc, #412]	; (8004310 <MCAL_SET_GPIO+0x1cc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	4a63      	ldr	r2, [pc, #396]	; (8004304 <MCAL_SET_GPIO+0x1c0>)
 8004178:	8813      	ldrh	r3, [r2, #0]
 800417a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417e:	8013      	strh	r3, [r2, #0]
 8004180:	e00e      	b.n	80041a0 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	791b      	ldrb	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d103      	bne.n	8004192 <MCAL_SET_GPIO+0x4e>
 800418a:	4b62      	ldr	r3, [pc, #392]	; (8004314 <MCAL_SET_GPIO+0x1d0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	e006      	b.n	80041a0 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	791b      	ldrb	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d102      	bne.n	80041a0 <MCAL_SET_GPIO+0x5c>
 800419a:	4b5f      	ldr	r3, [pc, #380]	; (8004318 <MCAL_SET_GPIO+0x1d4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4619      	mov	r1, r3
 80041a6:	485d      	ldr	r0, [pc, #372]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80041a8:	f7ff fc0c 	bl	80039c4 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d103      	bne.n	80041bc <MCAL_SET_GPIO+0x78>
 80041b4:	4b5a      	ldr	r3, [pc, #360]	; (8004320 <MCAL_SET_GPIO+0x1dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	e006      	b.n	80041ca <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <MCAL_SET_GPIO+0x86>
 80041c4:	4b57      	ldr	r3, [pc, #348]	; (8004324 <MCAL_SET_GPIO+0x1e0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	4619      	mov	r1, r3
 80041d0:	4852      	ldr	r0, [pc, #328]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80041d2:	f7ff fbf7 	bl	80039c4 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d103      	bne.n	80041e6 <MCAL_SET_GPIO+0xa2>
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <MCAL_SET_GPIO+0x1e4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	e006      	b.n	80041f4 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <MCAL_SET_GPIO+0xb0>
 80041ee:	4b4f      	ldr	r3, [pc, #316]	; (800432c <MCAL_SET_GPIO+0x1e8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	4619      	mov	r1, r3
 80041fa:	4848      	ldr	r0, [pc, #288]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80041fc:	f7ff fbe2 	bl	80039c4 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d103      	bne.n	8004210 <MCAL_SET_GPIO+0xcc>
 8004208:	4b49      	ldr	r3, [pc, #292]	; (8004330 <MCAL_SET_GPIO+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	e006      	b.n	800421e <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <MCAL_SET_GPIO+0xda>
 8004218:	4b46      	ldr	r3, [pc, #280]	; (8004334 <MCAL_SET_GPIO+0x1f0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60bb      	str	r3, [r7, #8]
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4619      	mov	r1, r3
 8004224:	483d      	ldr	r0, [pc, #244]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 8004226:	f7ff fbcd 	bl	80039c4 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 800422a:	e067      	b.n	80042fc <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a42      	ldr	r2, [pc, #264]	; (8004338 <MCAL_SET_GPIO+0x1f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d163      	bne.n	80042fc <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <MCAL_SET_GPIO+0x1f8>)
 8004236:	60fb      	str	r3, [r7, #12]
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <MCAL_SET_GPIO+0x1c8>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <MCAL_SET_GPIO+0x1c8>)
 800423e:	f043 0308 	orr.w	r3, r3, #8
 8004242:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	791b      	ldrb	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <MCAL_SET_GPIO+0x110>
 800424c:	4b3c      	ldr	r3, [pc, #240]	; (8004340 <MCAL_SET_GPIO+0x1fc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	e00e      	b.n	8004272 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	791b      	ldrb	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d103      	bne.n	8004264 <MCAL_SET_GPIO+0x120>
 800425c:	4b38      	ldr	r3, [pc, #224]	; (8004340 <MCAL_SET_GPIO+0x1fc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	e006      	b.n	8004272 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d102      	bne.n	8004272 <MCAL_SET_GPIO+0x12e>
 800426c:	4b35      	ldr	r3, [pc, #212]	; (8004344 <MCAL_SET_GPIO+0x200>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	4619      	mov	r1, r3
 8004278:	4828      	ldr	r0, [pc, #160]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 800427a:	f7ff fba3 	bl	80039c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d103      	bne.n	800428e <MCAL_SET_GPIO+0x14a>
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <MCAL_SET_GPIO+0x204>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	e006      	b.n	800429c <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <MCAL_SET_GPIO+0x158>
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <MCAL_SET_GPIO+0x208>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60bb      	str	r3, [r7, #8]
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	4619      	mov	r1, r3
 80042a2:	481e      	ldr	r0, [pc, #120]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80042a4:	f7ff fb8e 	bl	80039c4 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d103      	bne.n	80042b8 <MCAL_SET_GPIO+0x174>
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <MCAL_SET_GPIO+0x20c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	e006      	b.n	80042c6 <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <MCAL_SET_GPIO+0x182>
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <MCAL_SET_GPIO+0x210>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60bb      	str	r3, [r7, #8]
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	4619      	mov	r1, r3
 80042cc:	4813      	ldr	r0, [pc, #76]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80042ce:	f7ff fb79 	bl	80039c4 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d103      	bne.n	80042e2 <MCAL_SET_GPIO+0x19e>
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <MCAL_SET_GPIO+0x214>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	e006      	b.n	80042f0 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <MCAL_SET_GPIO+0x1ac>
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <MCAL_SET_GPIO+0x218>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60bb      	str	r3, [r7, #8]
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	4619      	mov	r1, r3
 80042f6:	4809      	ldr	r0, [pc, #36]	; (800431c <MCAL_SET_GPIO+0x1d8>)
 80042f8:	f7ff fb64 	bl	80039c4 <MCAL_GPIO_init>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40013000 	.word	0x40013000
 8004308:	20004160 	.word	0x20004160
 800430c:	40021000 	.word	0x40021000
 8004310:	08005600 	.word	0x08005600
 8004314:	08005604 	.word	0x08005604
 8004318:	08005608 	.word	0x08005608
 800431c:	40010800 	.word	0x40010800
 8004320:	0800560c 	.word	0x0800560c
 8004324:	08005610 	.word	0x08005610
 8004328:	08005614 	.word	0x08005614
 800432c:	08005618 	.word	0x08005618
 8004330:	0800561c 	.word	0x0800561c
 8004334:	08005620 	.word	0x08005620
 8004338:	40003800 	.word	0x40003800
 800433c:	20004170 	.word	0x20004170
 8004340:	08005624 	.word	0x08005624
 8004344:	08005628 	.word	0x08005628
 8004348:	0800562c 	.word	0x0800562c
 800434c:	08005630 	.word	0x08005630
 8004350:	08005634 	.word	0x08005634
 8004354:	08005638 	.word	0x08005638
 8004358:	0800563c 	.word	0x0800563c
 800435c:	08005640 	.word	0x08005640

08004360 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	4905      	ldr	r1, [pc, #20]	; (8004380 <SPI1_IRQHandler+0x20>)
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f80c 	bl	8004388 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <SPI1_IRQHandler+0x24>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	7938      	ldrb	r0, [r7, #4]
 8004376:	4798      	blx	r3
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40013000 	.word	0x40013000
 8004384:	20004160 	.word	0x20004160

08004388 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	7813      	ldrb	r3, [r2, #0]
 80043a4:	f36f 0300 	bfc	r3, #0, #1
 80043a8:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	7813      	ldrb	r3, [r2, #0]
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	7913      	ldrb	r3, [r2, #4]
 80043b8:	f36f 1386 	bfc	r3, #6, #1
 80043bc:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 80043be:	e015      	b.n	80043ec <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	7813      	ldrb	r3, [r2, #0]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	7813      	ldrb	r3, [r2, #0]
 80043dc:	f36f 0341 	bfc	r3, #1, #1
 80043e0:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	7913      	ldrb	r3, [r2, #4]
 80043e6:	f36f 13c7 	bfc	r3, #7, #1
 80043ea:	7113      	strb	r3, [r2, #4]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <MCAL_SET_TIMx_GPIO+0x24>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	4619      	mov	r1, r3
 800440c:	4804      	ldr	r0, [pc, #16]	; (8004420 <MCAL_SET_TIMx_GPIO+0x28>)
 800440e:	f7ff fad9 	bl	80039c4 <MCAL_GPIO_init>
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	08005644 	.word	0x08005644
 8004420:	40010800 	.word	0x40010800

08004424 <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 800442e:	4a3b      	ldr	r2, [pc, #236]	; (800451c <TIMER_1_8_start+0xf8>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4614      	mov	r4, r2
 8004434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <TIMER_1_8_start+0xfc>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a38      	ldr	r2, [pc, #224]	; (8004524 <TIMER_1_8_start+0x100>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d105      	bne.n	8004454 <TIMER_1_8_start+0x30>
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <TIMER_1_8_start+0x104>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4a36      	ldr	r2, [pc, #216]	; (8004528 <TIMER_1_8_start+0x104>)
 800444e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004452:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	885b      	ldrh	r3, [r3, #2]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	889b      	ldrh	r3, [r3, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	7a5b      	ldrb	r3, [r3, #9]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d00e      	beq.n	80044a2 <TIMER_1_8_start+0x7e>
 8004484:	2b02      	cmp	r3, #2
 8004486:	d017      	beq.n	80044b8 <TIMER_1_8_start+0x94>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11b      	bne.n	80044c4 <TIMER_1_8_start+0xa0>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	f36f 1346 	bfc	r3, #5, #2
 8004494:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	f36f 1304 	bfc	r3, #4, #1
 800449e:	6013      	str	r3, [r2, #0]
		break;
 80044a0:	e013      	b.n	80044ca <TIMER_1_8_start+0xa6>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	f36f 1346 	bfc	r3, #5, #2
 80044aa:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	f043 0310 	orr.w	r3, r3, #16
 80044b4:	6013      	str	r3, [r2, #0]
		break;
 80044b6:	e008      	b.n	80044ca <TIMER_1_8_start+0xa6>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044c0:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 80044c2:	e002      	b.n	80044ca <TIMER_1_8_start+0xa6>
	default:
		ERROR_HANDLER();
 80044c4:	f7fe fde0 	bl	8003088 <ERROR_HANDLER>
		break;
 80044c8:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff94 	bl	80043f8 <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	7a1b      	ldrb	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <TIMER_1_8_start+0xd6>

		TIMx->DIER.BIT_NAME.UIE=1;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d3      	ldr	r3, [r2, #12]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <TIMER_1_8_start+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <TIMER_1_8_start+0x108>)
 80044f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044f6:	6013      	str	r3, [r2, #0]
	}else{
 		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 80044f8:	e00c      	b.n	8004514 <TIMER_1_8_start+0xf0>
 		while(!TIMx->SR.BIT_NAME.UIF);
 80044fa:	bf00      	nop
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f8      	beq.n	80044fc <TIMER_1_8_start+0xd8>
		TIMx->SR.BIT_NAME.UIF=0;
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6913      	ldr	r3, [r2, #16]
 800450e:	f36f 0300 	bfc	r3, #0, #1
 8004512:	6113      	str	r3, [r2, #16]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bd90      	pop	{r4, r7, pc}
 800451c:	2000420c 	.word	0x2000420c
 8004520:	2000421c 	.word	0x2000421c
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40021000 	.word	0x40021000
 800452c:	e000e100 	.word	0xe000e100

08004530 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <TIM1_UP_IRQHandler+0x1c>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <TIM1_UP_IRQHandler+0x20>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	6913      	ldr	r3, [r2, #16]
 8004540:	f36f 0300 	bfc	r3, #0, #1
 8004544:	6113      	str	r3, [r2, #16]

}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000420c 	.word	0x2000420c
 8004550:	2000421c 	.word	0x2000421c

08004554 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <TIM1_CC_IRQHandler+0x1c>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <TIM1_CC_IRQHandler+0x20>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	6913      	ldr	r3, [r2, #16]
 8004564:	f36f 0341 	bfc	r3, #1, #1
 8004568:	6113      	str	r3, [r2, #16]

}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	2000420c 	.word	0x2000420c
 8004574:	2000421c 	.word	0x2000421c

08004578 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <TIM1_BRK_IRQHandler+0x1c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <TIM1_BRK_IRQHandler+0x20>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	6913      	ldr	r3, [r2, #16]
 8004588:	f36f 0300 	bfc	r3, #0, #1
 800458c:	6113      	str	r3, [r2, #16]

}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	2000420c 	.word	0x2000420c
 8004598:	2000421c 	.word	0x2000421c

0800459c <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <TIM1_TRG_COM_IRQHandler+0x1c>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <TIM1_TRG_COM_IRQHandler+0x20>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	6913      	ldr	r3, [r2, #16]
 80045ac:	f36f 0300 	bfc	r3, #0, #1
 80045b0:	6113      	str	r3, [r2, #16]

}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000420c 	.word	0x2000420c
 80045bc:	2000421c 	.word	0x2000421c

080045c0 <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 80045ca:	f7ff fcad 	bl	8003f28 <MCAL_GET_PCLCK2>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <_TIM1_delay_us+0x50>)
 80045d2:	fba3 2302 	umull	r2, r3, r3, r2
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29b      	uxth	r3, r3
 80045de:	813b      	strh	r3, [r7, #8]
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	817b      	strh	r3, [r7, #10]
 80045e8:	2300      	movs	r3, #0
 80045ea:	81bb      	strh	r3, [r7, #12]
 80045ec:	2300      	movs	r3, #0
 80045ee:	81fb      	strh	r3, [r7, #14]
 80045f0:	2301      	movs	r3, #1
 80045f2:	743b      	strb	r3, [r7, #16]
 80045f4:	2300      	movs	r3, #0
 80045f6:	747b      	strb	r3, [r7, #17]
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4619      	mov	r1, r3
 8004602:	4804      	ldr	r0, [pc, #16]	; (8004614 <_TIM1_delay_us+0x54>)
 8004604:	f7ff ff0e 	bl	8004424 <TIMER_1_8_start>

}
 8004608:	bf00      	nop
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	431bde83 	.word	0x431bde83
 8004614:	40012c00 	.word	0x40012c00

08004618 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e006      	b.n	8004636 <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 8004628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800462c:	f7ff ffc8 	bl	80045c0 <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3f4      	bcc.n	8004628 <_TIM1_delay_ms+0x10>

}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4aa9      	ldr	r2, [pc, #676]	; (80048fc <MCAL_USART_init+0x2b4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10c      	bne.n	8004674 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 800465a:	4aa9      	ldr	r2, [pc, #676]	; (8004900 <MCAL_USART_init+0x2b8>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4614      	mov	r4, r2
 8004660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8004666:	4ba7      	ldr	r3, [pc, #668]	; (8004904 <MCAL_USART_init+0x2bc>)
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	4aa6      	ldr	r2, [pc, #664]	; (8004904 <MCAL_USART_init+0x2bc>)
 800466c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004670:	6193      	str	r3, [r2, #24]
 8004672:	e024      	b.n	80046be <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4aa4      	ldr	r2, [pc, #656]	; (8004908 <MCAL_USART_init+0x2c0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d10e      	bne.n	800469a <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 800467c:	4ba0      	ldr	r3, [pc, #640]	; (8004900 <MCAL_USART_init+0x2b8>)
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	f103 0410 	add.w	r4, r3, #16
 8004684:	4613      	mov	r3, r2
 8004686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 800468c:	4b9d      	ldr	r3, [pc, #628]	; (8004904 <MCAL_USART_init+0x2bc>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4a9c      	ldr	r2, [pc, #624]	; (8004904 <MCAL_USART_init+0x2bc>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	61d3      	str	r3, [r2, #28]
 8004698:	e011      	b.n	80046be <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a9b      	ldr	r2, [pc, #620]	; (800490c <MCAL_USART_init+0x2c4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10d      	bne.n	80046be <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80046a2:	4b97      	ldr	r3, [pc, #604]	; (8004900 <MCAL_USART_init+0x2b8>)
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	f103 0420 	add.w	r4, r3, #32
 80046aa:	4613      	mov	r3, r2
 80046ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80046b2:	4b94      	ldr	r3, [pc, #592]	; (8004904 <MCAL_USART_init+0x2bc>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a93      	ldr	r2, [pc, #588]	; (8004904 <MCAL_USART_init+0x2bc>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	7912      	ldrb	r2, [r2, #4]
 80046d2:	0312      	lsls	r2, r2, #12
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	79d2      	ldrb	r2, [r2, #7]
 80046e2:	0312      	lsls	r2, r2, #12
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	7a5b      	ldrb	r3, [r3, #9]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f043 0208 	orr.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f043 0204 	orr.w	r2, r3, #4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	7a1b      	ldrb	r3, [r3, #8]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d826      	bhi.n	8004760 <MCAL_USART_init+0x118>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <MCAL_USART_init+0xd0>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004729 	.word	0x08004729
 800471c:	08004737 	.word	0x08004737
 8004720:	08004745 	.word	0x08004745
 8004724:	08004753 	.word	0x08004753
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	615a      	str	r2, [r3, #20]
		break;
 8004734:	e014      	b.n	8004760 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]
		break;
 8004742:	e00d      	b.n	8004760 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	615a      	str	r2, [r3, #20]
		break;
 8004750:	e006      	b.n	8004760 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	615a      	str	r2, [r3, #20]
		break;
 800475e:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	7952      	ldrb	r2, [r2, #5]
 8004768:	0252      	lsls	r2, r2, #9
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	799b      	ldrb	r3, [r3, #6]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d125      	bne.n	80047c4 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a60      	ldr	r2, [pc, #384]	; (80048fc <MCAL_USART_init+0x2b4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 8004780:	4b63      	ldr	r3, [pc, #396]	; (8004910 <MCAL_USART_init+0x2c8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a62      	ldr	r2, [pc, #392]	; (8004910 <MCAL_USART_init+0x2c8>)
 8004786:	f043 0320 	orr.w	r3, r3, #32
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e014      	b.n	80047b8 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <MCAL_USART_init+0x2c0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d106      	bne.n	80047a4 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8004796:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <MCAL_USART_init+0x2c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a5d      	ldr	r2, [pc, #372]	; (8004910 <MCAL_USART_init+0x2c8>)
 800479c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e009      	b.n	80047b8 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a59      	ldr	r2, [pc, #356]	; (800490c <MCAL_USART_init+0x2c4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d105      	bne.n	80047b8 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80047ac:	4b58      	ldr	r3, [pc, #352]	; (8004910 <MCAL_USART_init+0x2c8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a57      	ldr	r2, [pc, #348]	; (8004910 <MCAL_USART_init+0x2c8>)
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a4d      	ldr	r2, [pc, #308]	; (80048fc <MCAL_USART_init+0x2b4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d12d      	bne.n	8004828 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80047cc:	f7ff fbac 	bl	8003f28 <MCAL_GET_PCLCK2>
 80047d0:	4602      	mov	r2, r0
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	011c      	lsls	r4, r3, #4
 80047de:	f7ff fba3 	bl	8003f28 <MCAL_GET_PCLCK2>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047f8:	f7ff fb96 	bl	8003f28 <MCAL_GET_PCLCK2>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	2264      	movs	r2, #100	; 0x64
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	1aeb      	subs	r3, r5, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <MCAL_USART_init+0x2cc>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	ea44 0203 	orr.w	r2, r4, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	e062      	b.n	80048ee <MCAL_USART_init+0x2a6>
			}else if(USARTx==USART2){
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a37      	ldr	r2, [pc, #220]	; (8004908 <MCAL_USART_init+0x2c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d12d      	bne.n	800488c <MCAL_USART_init+0x244>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8004830:	f7ff fb66 	bl	8003f00 <MCAL_GET_PCLCK1>
 8004834:	4602      	mov	r2, r0
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	011c      	lsls	r4, r3, #4
 8004842:	f7ff fb5d 	bl	8003f00 <MCAL_GET_PCLCK1>
 8004846:	4602      	mov	r2, r0
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f5f3 	udiv	r5, r2, r3
 800485c:	f7ff fb50 	bl	8003f00 <MCAL_GET_PCLCK1>
 8004860:	4602      	mov	r2, r0
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	2264      	movs	r2, #100	; 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1aeb      	subs	r3, r5, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	4a27      	ldr	r2, [pc, #156]	; (8004914 <MCAL_USART_init+0x2cc>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	ea44 0203 	orr.w	r2, r4, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	e030      	b.n	80048ee <MCAL_USART_init+0x2a6>

		}else if(USARTx==USART3){
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1f      	ldr	r2, [pc, #124]	; (800490c <MCAL_USART_init+0x2c4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d12c      	bne.n	80048ee <MCAL_USART_init+0x2a6>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8004894:	f7ff fb34 	bl	8003f00 <MCAL_GET_PCLCK1>
 8004898:	4602      	mov	r2, r0
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f7ff fb2b 	bl	8003f00 <MCAL_GET_PCLCK1>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80048c0:	f7ff fb1e 	bl	8003f00 <MCAL_GET_PCLCK1>
 80048c4:	4602      	mov	r2, r0
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	2264      	movs	r2, #100	; 0x64
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	1aeb      	subs	r3, r5, r3
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <MCAL_USART_init+0x2cc>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	ea44 0203 	orr.w	r2, r4, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f89c 	bl	8004a2c <SET_GPIO>
	}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bdb0      	pop	{r4, r5, r7, pc}
 80048fc:	40013800 	.word	0x40013800
 8004900:	20004220 	.word	0x20004220
 8004904:	40021000 	.word	0x40021000
 8004908:	40004400 	.word	0x40004400
 800490c:	40004800 	.word	0x40004800
 8004910:	e000e104 	.word	0xe000e104
 8004914:	51eb851f 	.word	0x51eb851f

08004918 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
//	USARTx->DR=0;
	if(USARTx==USART1){
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <MCAL_USART_SendData+0x68>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d102      	bne.n	8004936 <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MCAL_USART_SendData+0x6c>)
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e00c      	b.n	8004950 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <MCAL_USART_SendData+0x70>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d102      	bne.n	8004944 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <MCAL_USART_SendData+0x74>)
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e005      	b.n	8004950 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <MCAL_USART_SendData+0x78>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <MCAL_USART_SendData+0x7c>)
 800494e:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8004950:	bf00      	nop
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f9      	beq.n	8004952 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	791b      	ldrb	r3, [r3, #4]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d103      	bne.n	800496e <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 800496c:	e002      	b.n	8004974 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40013800 	.word	0x40013800
 8004984:	20004220 	.word	0x20004220
 8004988:	40004400 	.word	0x40004400
 800498c:	20004230 	.word	0x20004230
 8004990:	40004800 	.word	0x40004800
 8004994:	20004240 	.word	0x20004240

08004998 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <MCAL_USART_ReciveData+0x7c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d102      	bne.n	80049b2 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <MCAL_USART_ReciveData+0x80>)
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e00c      	b.n	80049cc <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <MCAL_USART_ReciveData+0x84>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d102      	bne.n	80049c0 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80049ba:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <MCAL_USART_ReciveData+0x88>)
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e005      	b.n	80049cc <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <MCAL_USART_ReciveData+0x8c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <MCAL_USART_ReciveData+0x90>)
 80049ca:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	799b      	ldrb	r3, [r3, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80049d4:	bf00      	nop
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f9      	beq.n	80049d6 <MCAL_USART_ReciveData+0x3e>
 80049e2:	e002      	b.n	80049ea <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	799b      	ldrb	r3, [r3, #6]
 80049e8:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	795b      	ldrb	r3, [r3, #5]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	e006      	b.n	8004a0a <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a08:	b29b      	uxth	r3, r3

		}

}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40013800 	.word	0x40013800
 8004a18:	20004220 	.word	0x20004220
 8004a1c:	40004400 	.word	0x40004400
 8004a20:	20004230 	.word	0x20004230
 8004a24:	40004800 	.word	0x40004800
 8004a28:	20004240 	.word	0x20004240

08004a2c <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <SET_GPIO+0xbc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	; (8004aec <SET_GPIO+0xc0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d115      	bne.n	8004a6e <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <SET_GPIO+0xc4>)
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	4a2a      	ldr	r2, [pc, #168]	; (8004af0 <SET_GPIO+0xc4>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4619      	mov	r1, r3
 8004a54:	4827      	ldr	r0, [pc, #156]	; (8004af4 <SET_GPIO+0xc8>)
 8004a56:	f7fe ffb5 	bl	80039c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <SET_GPIO+0xcc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	4619      	mov	r1, r3
 8004a66:	4823      	ldr	r0, [pc, #140]	; (8004af4 <SET_GPIO+0xc8>)
 8004a68:	f7fe ffac 	bl	80039c4 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8004a6c:	e038      	b.n	8004ae0 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a22      	ldr	r2, [pc, #136]	; (8004afc <SET_GPIO+0xd0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d118      	bne.n	8004aa8 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <SET_GPIO+0xc4>)
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <SET_GPIO+0xc4>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8004a82:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <SET_GPIO+0xd4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4819      	ldr	r0, [pc, #100]	; (8004af4 <SET_GPIO+0xc8>)
 8004a90:	f7fe ff98 	bl	80039c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <SET_GPIO+0xd8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4814      	ldr	r0, [pc, #80]	; (8004af4 <SET_GPIO+0xc8>)
 8004aa2:	f7fe ff8f 	bl	80039c4 <MCAL_GPIO_init>
}
 8004aa6:	e01b      	b.n	8004ae0 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <SET_GPIO+0xdc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d117      	bne.n	8004ae0 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <SET_GPIO+0xc4>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <SET_GPIO+0xc4>)
 8004ab6:	f043 0308 	orr.w	r3, r3, #8
 8004aba:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <SET_GPIO+0xe0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4811      	ldr	r0, [pc, #68]	; (8004b10 <SET_GPIO+0xe4>)
 8004aca:	f7fe ff7b 	bl	80039c4 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <SET_GPIO+0xe8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4619      	mov	r1, r3
 8004ada:	480d      	ldr	r0, [pc, #52]	; (8004b10 <SET_GPIO+0xe4>)
 8004adc:	f7fe ff72 	bl	80039c4 <MCAL_GPIO_init>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	08005648 	.word	0x08005648
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40010800 	.word	0x40010800
 8004af8:	0800564c 	.word	0x0800564c
 8004afc:	40004400 	.word	0x40004400
 8004b00:	08005650 	.word	0x08005650
 8004b04:	08005654 	.word	0x08005654
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	08005658 	.word	0x08005658
 8004b10:	40010c00 	.word	0x40010c00
 8004b14:	0800565c 	.word	0x0800565c

08004b18 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8004b1c:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <USART1_IRQHandler+0x10>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4798      	blx	r3
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20004220 	.word	0x20004220

08004b2c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <USART2_IRQHandler+0x10>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20004220 	.word	0x20004220

08004b40 <USART3_IRQHandler>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <USART3_IRQHandler+0x10>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4798      	blx	r3
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20004220 	.word	0x20004220

08004b54 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
	while(1);
 8004b58:	e7fe      	b.n	8004b58 <Error_Handller+0x4>
	...

08004b5c <Sys_Clk_init>:
}


void Sys_Clk_init(){
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	// system speed 28Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b66:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8004b6a:	6053      	str	r3, [r2, #4]
	//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	//	RCC->CFGR |=(1 <<16); //PLL entry clock source
	//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a03      	ldr	r2, [pc, #12]	; (8004b8c <Sys_Clk_init+0x30>)
 8004b7e:	f043 0302 	orr.w	r3, r3, #2
 8004b82:	6053      	str	r3, [r2, #4]

}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	40021000 	.word	0x40021000

08004b90 <DMS_Handller_TASK>:
/************DMS TASK*************/
/************DMS TASK*************/
/************DMS TASK*************/


void DMS_Handller_TASK(){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	while(1){
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <DMS_Handller_TASK+0x2c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2105      	movs	r1, #5
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fd20 	bl	80005e0 <xQueueSemaphoreTake>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d104      	bne.n	8004bb0 <DMS_Handller_TASK+0x20>
			// here the action would take
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_TAKE_ACTION);
 8004ba6:	2166      	movs	r1, #102	; 0x66
 8004ba8:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <DMS_Handller_TASK+0x30>)
 8004baa:	f7ff feb5 	bl	8004918 <MCAL_USART_SendData>
 8004bae:	e7f1      	b.n	8004b94 <DMS_Handller_TASK+0x4>
		}else{
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_Release_ACTION);
 8004bb0:	2155      	movs	r1, #85	; 0x55
 8004bb2:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <DMS_Handller_TASK+0x30>)
 8004bb4:	f7ff feb0 	bl	8004918 <MCAL_USART_SendData>
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 8004bb8:	e7ec      	b.n	8004b94 <DMS_Handller_TASK+0x4>
 8004bba:	bf00      	nop
 8004bbc:	20004250 	.word	0x20004250
 8004bc0:	40013800 	.word	0x40013800

08004bc4 <DMS_read_TASK>:
		}

	}
}
void DMS_read_TASK(){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	while(1){
		if(DMS_read() ==0){
 8004bc8:	f7fd fa6e 	bl	80020a8 <DMS_read>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1fa      	bne.n	8004bc8 <DMS_read_TASK+0x4>
			xSemaphoreGive(DMS_Semaphore);
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <DMS_read_TASK+0x20>)
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2100      	movs	r1, #0
 8004bdc:	f7fb fc56 	bl	800048c <xQueueGenericSend>
		if(DMS_read() ==0){
 8004be0:	e7f2      	b.n	8004bc8 <DMS_read_TASK+0x4>
 8004be2:	bf00      	nop
 8004be4:	20004250 	.word	0x20004250

08004be8 <ACC_ADC_CallBack>:



uint16_t ACC_THROTTEL_DATA=0x00;
uint8_t  ACC_DICIMAL_VAL=0;
void ACC_ADC_CallBack(){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <ACC_ADC_CallBack+0x14>)
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4803      	ldr	r0, [pc, #12]	; (8004c00 <ACC_ADC_CallBack+0x18>)
 8004bf2:	f7fe f9a9 	bl	8002f48 <ADC_read>

}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20004190 	.word	0x20004190
 8004c00:	40012400 	.word	0x40012400

08004c04 <ACC_throtel_init>:

void ACC_throtel_init(){
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 8004c14:	2300      	movs	r3, #0
 8004c16:	713b      	strb	r3, [r7, #4]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	717b      	strb	r3, [r7, #5]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	71bb      	strb	r3, [r7, #6]
 8004c20:	2300      	movs	r3, #0
 8004c22:	71fb      	strb	r3, [r7, #7]
 8004c24:	f107 0310 	add.w	r3, r7, #16
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <ACC_throtel_init+0x54>)
 8004c2c:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	480a      	ldr	r0, [pc, #40]	; (8004c5c <ACC_throtel_init+0x58>)
 8004c34:	f7fe f800 	bl	8002c38 <ADC_init>
	//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 8004c38:	2300      	movs	r3, #0
 8004c3a:	803b      	strh	r3, [r7, #0]
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	70bb      	strb	r3, [r7, #2]
 8004c40:	2300      	movs	r3, #0
 8004c42:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 8004c44:	463b      	mov	r3, r7
 8004c46:	4619      	mov	r1, r3
 8004c48:	4805      	ldr	r0, [pc, #20]	; (8004c60 <ACC_throtel_init+0x5c>)
 8004c4a:	f7fe febb 	bl	80039c4 <MCAL_GPIO_init>

}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08004be9 	.word	0x08004be9
 8004c5c:	40012400 	.word	0x40012400
 8004c60:	40010c00 	.word	0x40010c00

08004c64 <ACC_DAC_init>:
void ACC_DAC_init(){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	PIN_config PINx={ACC_DAC_0,OUTPUT_PP,SPEED_10};
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <ACC_DAC_init+0x90>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4820      	ldr	r0, [pc, #128]	; (8004cf8 <ACC_DAC_init+0x94>)
 8004c76:	f7fe fea5 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_1,OUTPUT_PP,SPEED_10};
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <ACC_DAC_init+0x98>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	481e      	ldr	r0, [pc, #120]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004c86:	f7fe fe9d 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_2,OUTPUT_PP,SPEED_10};
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <ACC_DAC_init+0xa0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	481a      	ldr	r0, [pc, #104]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004c96:	f7fe fe95 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_3,OUTPUT_PP,SPEED_10};
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <ACC_DAC_init+0xa4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4816      	ldr	r0, [pc, #88]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004ca6:	f7fe fe8d 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_4,OUTPUT_PP,SPEED_10};
 8004caa:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <ACC_DAC_init+0xa8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004cb0:	1d3b      	adds	r3, r7, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4812      	ldr	r0, [pc, #72]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004cb6:	f7fe fe85 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_5,OUTPUT_PP,SPEED_10};
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <ACC_DAC_init+0xac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	480e      	ldr	r0, [pc, #56]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004cc6:	f7fe fe7d 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_6,OUTPUT_PP,SPEED_10};
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <ACC_DAC_init+0xb0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	480a      	ldr	r0, [pc, #40]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004cd6:	f7fe fe75 	bl	80039c4 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_7,OUTPUT_PP,SPEED_10};
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <ACC_DAC_init+0xb4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4806      	ldr	r0, [pc, #24]	; (8004d00 <ACC_DAC_init+0x9c>)
 8004ce6:	f7fe fe6d 	bl	80039c4 <MCAL_GPIO_init>

}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	08005660 	.word	0x08005660
 8004cf8:	40010800 	.word	0x40010800
 8004cfc:	08005664 	.word	0x08005664
 8004d00:	40010c00 	.word	0x40010c00
 8004d04:	08005668 	.word	0x08005668
 8004d08:	0800566c 	.word	0x0800566c
 8004d0c:	08005670 	.word	0x08005670
 8004d10:	08005674 	.word	0x08005674
 8004d14:	08005678 	.word	0x08005678
 8004d18:	0800567c 	.word	0x0800567c

08004d1c <ACC_FROM_ADC_TO_DAC>:
 * Note-
 */



void ACC_FROM_ADC_TO_DAC(uint16_t decimal_val){
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
	//	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	//	PWM_V=((PWM_V*35)/100);
	MCAL_write_PIN(GPIOA, ACC_DAC_0, ((decimal_val >>0) &1));
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	210f      	movs	r1, #15
 8004d34:	482d      	ldr	r0, [pc, #180]	; (8004dec <ACC_FROM_ADC_TO_DAC+0xd0>)
 8004d36:	f7fe ff2d 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_1, ((decimal_val >>1) &1));
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2103      	movs	r1, #3
 8004d4c:	4828      	ldr	r0, [pc, #160]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d4e:	f7fe ff21 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_2, ((decimal_val >>2) &1));
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	2104      	movs	r1, #4
 8004d64:	4822      	ldr	r0, [pc, #136]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d66:	f7fe ff15 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_3, ((decimal_val >>3) &1));
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	08db      	lsrs	r3, r3, #3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2105      	movs	r1, #5
 8004d7c:	481c      	ldr	r0, [pc, #112]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d7e:	f7fe ff09 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_4, ((decimal_val >>4) &1));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	2106      	movs	r1, #6
 8004d94:	4816      	ldr	r0, [pc, #88]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d96:	f7fe fefd 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_5, ((decimal_val >>5) &1));
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	2107      	movs	r1, #7
 8004dac:	4810      	ldr	r0, [pc, #64]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004dae:	f7fe fef1 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_6, ((decimal_val >>6) &1));
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2108      	movs	r1, #8
 8004dc4:	480a      	ldr	r0, [pc, #40]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004dc6:	f7fe fee5 	bl	8003b94 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_7, ((decimal_val >>7) &1));
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2109      	movs	r1, #9
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004dde:	f7fe fed9 	bl	8003b94 <MCAL_write_PIN>

}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40010800 	.word	0x40010800
 8004df0:	40010c00 	.word	0x40010c00

08004df4 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	while(1){

//			ACC_AMP=500;
			if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <ACC_Handller_TASK+0x44>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	2b63      	cmp	r3, #99	; 0x63
 8004dfe:	d9fb      	bls.n	8004df8 <ACC_Handller_TASK+0x4>
					if(LUNA_dis <= Distance_SET){
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <ACC_Handller_TASK+0x48>)
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004e08:	d803      	bhi.n	8004e12 <ACC_Handller_TASK+0x1e>
						// here should send CAN fram to atmega to stop the motor
						ACC_ACTION=ACC_CAR_STOP;
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <ACC_Handller_TASK+0x4c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e7f2      	b.n	8004df8 <ACC_Handller_TASK+0x4>

					}else if((LUNA_dis > Distance_SET) &&(LUNA_dis <MAX_Distance_SET)){
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <ACC_Handller_TASK+0x48>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004e1a:	d908      	bls.n	8004e2e <ACC_Handller_TASK+0x3a>
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <ACC_Handller_TASK+0x48>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e24:	d203      	bcs.n	8004e2e <ACC_Handller_TASK+0x3a>
						ACC_ACTION=ACC_CAR_SLOW_DOWN;
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <ACC_Handller_TASK+0x4c>)
 8004e28:	2202      	movs	r2, #2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e002      	b.n	8004e34 <ACC_Handller_TASK+0x40>


					}else{
						ACC_ACTION=ACC_CAR_GO;
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <ACC_Handller_TASK+0x4c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
			if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004e34:	e7e0      	b.n	8004df8 <ACC_Handller_TASK+0x4>
 8004e36:	bf00      	nop
 8004e38:	20003fce 	.word	0x20003fce
 8004e3c:	20003fcc 	.word	0x20003fcc
 8004e40:	20000021 	.word	0x20000021

08004e44 <ACC_throttel_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_throttel_Handller_TASK(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
	uint8_t ACC_counter=0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_to_send=0,ADC_SAVED=0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	807b      	strh	r3, [r7, #2]
 8004e52:	2300      	movs	r3, #0
 8004e54:	80bb      	strh	r3, [r7, #4]
	while(1){

		if(ACC_ST==ACC_ON){
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <ACC_throttel_Handller_TASK+0xd0>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d134      	bne.n	8004ec8 <ACC_throttel_Handller_TASK+0x84>
			if(ACC_counter ==0){
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <ACC_throttel_Handller_TASK+0x2c>
				ADC_SAVED=ACC_THROTTEL_DATA;
 8004e64:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <ACC_throttel_Handller_TASK+0xd4>)
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	80bb      	strh	r3, [r7, #4]
				ACC_counter++;
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	71fb      	strb	r3, [r7, #7]
			}
			if(ADC_SAVED<ACC_THROTTEL_DATA){
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <ACC_throttel_Handller_TASK+0xd4>)
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	88ba      	ldrh	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d206      	bcs.n	8004e88 <ACC_throttel_Handller_TASK+0x44>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <ACC_throttel_Handller_TASK+0xd8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff4b 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004e86:	e7e6      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>

			}else{
				if(ACC_ACTION ==ACC_CAR_STOP){
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d103      	bne.n	8004e98 <ACC_throttel_Handller_TASK+0x54>
					ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004e90:	2040      	movs	r0, #64	; 0x40
 8004e92:	f7ff ff43 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004e96:	e7de      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
				}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d108      	bne.n	8004eb2 <ACC_throttel_Handller_TASK+0x6e>

					ACC_FROM_ADC_TO_DAC((ACC_DICIMAL_VAL/2));
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <ACC_throttel_Handller_TASK+0xd8>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff ff36 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004eb0:	e7d1      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
				}else if(ACC_ACTION ==ACC_CAR_GO){
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1cd      	bne.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
					ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <ACC_throttel_Handller_TASK+0xd8>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff2b 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004ec6:	e7c6      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>

				}
			}


		}else if(ACC_ST==ACC_OFF){
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <ACC_throttel_Handller_TASK+0xd0>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1c2      	bne.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
			ACC_counter=0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	71fb      	strb	r3, [r7, #7]
			if(ACC_ACTION ==ACC_CAR_STOP){
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d103      	bne.n	8004ee4 <ACC_throttel_Handller_TASK+0xa0>
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004edc:	2040      	movs	r0, #64	; 0x40
 8004ede:	f7ff ff1d 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004ee2:	e7b8      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
			}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d108      	bne.n	8004efe <ACC_throttel_Handller_TASK+0xba>
				ACC_FROM_ADC_TO_DAC((ACC_DICIMAL_VAL/2));
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <ACC_throttel_Handller_TASK+0xd8>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff10 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
 8004efc:	e7ab      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
			}else if(ACC_ACTION ==ACC_CAR_GO){
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <ACC_throttel_Handller_TASK+0xdc>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1a7      	bne.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <ACC_throttel_Handller_TASK+0xd8>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff05 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
		if(ACC_ST==ACC_ON){
 8004f12:	e7a0      	b.n	8004e56 <ACC_throttel_Handller_TASK+0x12>
 8004f14:	2000418d 	.word	0x2000418d
 8004f18:	20004190 	.word	0x20004190
 8004f1c:	20004192 	.word	0x20004192
 8004f20:	20000021 	.word	0x20000021

08004f24 <ACC_STATE_READ_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_STATE_READ_TASK(){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	while(1){

		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4822      	ldr	r0, [pc, #136]	; (8004fb4 <ACC_STATE_READ_TASK+0x90>)
 8004f2c:	f7fe fe5a 	bl	8003be4 <MCAL_Read_PIN>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <ACC_STATE_READ_TASK+0x2e>
		      _TIM1_delay_ms(30);
 8004f36:	201e      	movs	r0, #30
 8004f38:	f7ff fb6e 	bl	8004618 <_TIM1_delay_ms>
		      if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	481d      	ldr	r0, [pc, #116]	; (8004fb4 <ACC_STATE_READ_TASK+0x90>)
 8004f40:	f7fe fe50 	bl	8003be4 <MCAL_Read_PIN>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <ACC_STATE_READ_TASK+0x34>
		        ACC_ST=1;
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <ACC_STATE_READ_TASK+0x94>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <ACC_STATE_READ_TASK+0x34>
		      }
		    }else{
		      ACC_ST=0;
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <ACC_STATE_READ_TASK+0x94>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

		    }
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <ACC_STATE_READ_TASK+0x98>)
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4818      	ldr	r0, [pc, #96]	; (8004fc0 <ACC_STATE_READ_TASK+0x9c>)
 8004f5e:	f7fd fff3 	bl	8002f48 <ADC_read>
		if(ACC_THROTTEL_DATA<ACC_TROTTEL_MIN_ADC_VAL){
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <ACC_STATE_READ_TASK+0x98>)
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004f6a:	d203      	bcs.n	8004f74 <ACC_STATE_READ_TASK+0x50>
			ACC_DICIMAL_VAL=64;
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <ACC_STATE_READ_TASK+0xa0>)
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e7d9      	b.n	8004f28 <ACC_STATE_READ_TASK+0x4>
		}else if(ACC_THROTTEL_DATA>ACC_TROTTEL_Max_ADC_VAL){
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <ACC_STATE_READ_TASK+0x98>)
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	f640 1206 	movw	r2, #2310	; 0x906
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d903      	bls.n	8004f88 <ACC_STATE_READ_TASK+0x64>
			ACC_DICIMAL_VAL=255;
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <ACC_STATE_READ_TASK+0xa0>)
 8004f82:	22ff      	movs	r2, #255	; 0xff
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e7cf      	b.n	8004f28 <ACC_STATE_READ_TASK+0x4>
		else{
//		uint32_t step1=((uint32_t)(ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL)); //884.3
//		uint32_t step2=(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL);//1539
//		uint32_t step3=(step1/step2);
//		ACC_DICIMAL_VAL=step3+ACC_DAC_MIN_DECIMAL;
		ACC_DICIMAL_VAL=((((ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <ACC_STATE_READ_TASK+0x98>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8004f90:	4613      	mov	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <ACC_STATE_READ_TASK+0xa4>)
 8004f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8004fa0:	441a      	add	r2, r3
 8004fa2:	1292      	asrs	r2, r2, #10
 8004fa4:	17db      	asrs	r3, r3, #31
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	3340      	adds	r3, #64	; 0x40
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <ACC_STATE_READ_TASK+0xa0>)
 8004fb0:	701a      	strb	r2, [r3, #0]
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004fb2:	e7b9      	b.n	8004f28 <ACC_STATE_READ_TASK+0x4>
 8004fb4:	40010c00 	.word	0x40010c00
 8004fb8:	2000418d 	.word	0x2000418d
 8004fbc:	20004190 	.word	0x20004190
 8004fc0:	40012400 	.word	0x40012400
 8004fc4:	20004192 	.word	0x20004192
 8004fc8:	ec2a6fa1 	.word	0xec2a6fa1

08004fcc <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  while(1){
//	  if(GR_TSR_FLAG_OLED_send !=0x99){
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <TSR_Handller_TASK+0x28>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fe0c 	bl	8000bf4 <vTaskPrioritySet>
      TFT_send_image(GR_TSR_FLAG_OLED_send);
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <TSR_Handller_TASK+0x2c>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fd fc91 	bl	8002908 <TFT_send_image>
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004fe6:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <TSR_Handller_TASK+0x28>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2102      	movs	r1, #2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fe01 	bl	8000bf4 <vTaskPrioritySet>
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004ff2:	e7ed      	b.n	8004fd0 <TSR_Handller_TASK+0x4>
 8004ff4:	2000425c 	.word	0x2000425c
 8004ff8:	20004182 	.word	0x20004182

08004ffc <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
	if(  USART1->SR &(1<<5)){
 8005000:	4b6b      	ldr	r3, [pc, #428]	; (80051b0 <TSR_call_Back+0x1b4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d006      	beq.n	800501a <TSR_call_Back+0x1e>
		PC_Uart_Flag=  MCAL_USART_ReciveData(USART1);
 800500c:	4868      	ldr	r0, [pc, #416]	; (80051b0 <TSR_call_Back+0x1b4>)
 800500e:	f7ff fcc3 	bl	8004998 <MCAL_USART_ReciveData>
 8005012:	4603      	mov	r3, r0
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4b67      	ldr	r3, [pc, #412]	; (80051b4 <TSR_call_Back+0x1b8>)
 8005018:	701a      	strb	r2, [r3, #0]
	  0x0008

	  0x0000 | 0x0008
	  0x0008
	 */
	switch(PC_Uart_Flag){
 800501a:	4b66      	ldr	r3, [pc, #408]	; (80051b4 <TSR_call_Back+0x1b8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	3b23      	subs	r3, #35	; 0x23
 8005020:	2b0c      	cmp	r3, #12
 8005022:	d833      	bhi.n	800508c <TSR_call_Back+0x90>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <TSR_call_Back+0x30>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005061 	.word	0x08005061
 8005030:	0800508d 	.word	0x0800508d
 8005034:	0800508d 	.word	0x0800508d
 8005038:	0800508d 	.word	0x0800508d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800508d 	.word	0x0800508d
 8005044:	0800508d 	.word	0x0800508d
 8005048:	0800506f 	.word	0x0800506f
 800504c:	08005085 	.word	0x08005085
 8005050:	0800508d 	.word	0x0800508d
 8005054:	0800508d 	.word	0x0800508d
 8005058:	0800508d 	.word	0x0800508d
 800505c:	08005077 	.word	0x08005077
	case '#':
		TSR_START_Flag=1;
 8005060:	4b55      	ldr	r3, [pc, #340]	; (80051b8 <TSR_call_Back+0x1bc>)
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
		TSR_END_Flag=0;
 8005066:	4b55      	ldr	r3, [pc, #340]	; (80051bc <TSR_call_Back+0x1c0>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
		break;
 800506c:	e00e      	b.n	800508c <TSR_call_Back+0x90>
	case '*':
		TSR_END_Flag=1;
 800506e:	4b53      	ldr	r3, [pc, #332]	; (80051bc <TSR_call_Back+0x1c0>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
		break;
 8005074:	e00a      	b.n	800508c <TSR_call_Back+0x90>
	case 0x2F:
		FACE_START_Flag=1;
 8005076:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <TSR_call_Back+0x1c4>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
		FACE_END_Flag=0;
 800507c:	4b51      	ldr	r3, [pc, #324]	; (80051c4 <TSR_call_Back+0x1c8>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
		break;
 8005082:	e003      	b.n	800508c <TSR_call_Back+0x90>
	case 0x2B:
		FACE_END_Flag=1;
 8005084:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <TSR_call_Back+0x1c8>)
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
		break;
 800508a:	bf00      	nop
	}



	if (FACE_START_Flag){
 800508c:	4b4c      	ldr	r3, [pc, #304]	; (80051c0 <TSR_call_Back+0x1c4>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d043      	beq.n	800511c <TSR_call_Back+0x120>
		if(PC_Counter ==0)
 8005094:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <TSR_call_Back+0x1cc>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <TSR_call_Back+0xa6>
			PC_Uart_Flag=0;
 800509c:	4b45      	ldr	r3, [pc, #276]	; (80051b4 <TSR_call_Back+0x1b8>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]

		if(FACE_END_Flag ==0){
 80050a2:	4b48      	ldr	r3, [pc, #288]	; (80051c4 <TSR_call_Back+0x1c8>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d112      	bne.n	80050d0 <TSR_call_Back+0xd4>
			GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 80050aa:	4b48      	ldr	r3, [pc, #288]	; (80051cc <TSR_call_Back+0x1d0>)
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	b21a      	sxth	r2, r3
 80050b2:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <TSR_call_Back+0x1b8>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b21b      	sxth	r3, r3
 80050b8:	4313      	orrs	r3, r2
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	b29a      	uxth	r2, r3
 80050be:	4b43      	ldr	r3, [pc, #268]	; (80051cc <TSR_call_Back+0x1d0>)
 80050c0:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <TSR_call_Back+0x1cc>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <TSR_call_Back+0x1cc>)
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e025      	b.n	800511c <TSR_call_Back+0x120>
			 * 0x0000 | 0x2F =0x
			 *
			 * */

		}else{
			GR_FACE_FLAG_ &=0x0F0F;
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <TSR_call_Back+0x1d0>)
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80050d8:	4013      	ands	r3, r2
 80050da:	b29a      	uxth	r2, r3
 80050dc:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <TSR_call_Back+0x1d0>)
 80050de:	801a      	strh	r2, [r3, #0]
			GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 80050e0:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <TSR_call_Back+0x1d0>)
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	111b      	asrs	r3, r3, #4
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	f023 030f 	bic.w	r3, r3, #15
 80050ec:	b25a      	sxtb	r2, r3
 80050ee:	4b37      	ldr	r3, [pc, #220]	; (80051cc <TSR_call_Back+0x1d0>)
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <TSR_call_Back+0x1d4>)
 8005102:	701a      	strb	r2, [r3, #0]
			GR_FACE_FLAG_=0;
 8005104:	4b31      	ldr	r3, [pc, #196]	; (80051cc <TSR_call_Back+0x1d0>)
 8005106:	2200      	movs	r2, #0
 8005108:	801a      	strh	r2, [r3, #0]

			///////////////
			FACE_START_Flag=0;
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <TSR_call_Back+0x1c4>)
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
			FACE_END_Flag=0;
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <TSR_call_Back+0x1c8>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8005116:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <TSR_call_Back+0x1cc>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(TSR_START_Flag){
 800511c:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <TSR_call_Back+0x1bc>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d043      	beq.n	80051ac <TSR_call_Back+0x1b0>
		if(PC_Counter ==0)
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <TSR_call_Back+0x1cc>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <TSR_call_Back+0x136>
			PC_Uart_Flag=0;
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <TSR_call_Back+0x1b8>)
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]

		if(TSR_END_Flag ==0){
 8005132:	4b22      	ldr	r3, [pc, #136]	; (80051bc <TSR_call_Back+0x1c0>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d112      	bne.n	8005160 <TSR_call_Back+0x164>
			GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <TSR_call_Back+0x1d8>)
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	b21a      	sxth	r2, r3
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <TSR_call_Back+0x1b8>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b21b      	sxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b21b      	sxth	r3, r3
 800514c:	b29a      	uxth	r2, r3
 800514e:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <TSR_call_Back+0x1d8>)
 8005150:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <TSR_call_Back+0x1cc>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <TSR_call_Back+0x1cc>)
 800515c:	701a      	strb	r2, [r3, #0]
	//    GR_TSR_FLAG_OLED=0;
	//
	//  }


}
 800515e:	e025      	b.n	80051ac <TSR_call_Back+0x1b0>
			GR_TSR_FLAG_OLED &=0x0F0F;
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <TSR_call_Back+0x1d8>)
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005168:	4013      	ands	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <TSR_call_Back+0x1d8>)
 800516e:	801a      	strh	r2, [r3, #0]
			GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 8005170:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <TSR_call_Back+0x1d8>)
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	111b      	asrs	r3, r3, #4
 8005176:	b25b      	sxtb	r3, r3
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	b25a      	sxtb	r2, r3
 800517e:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <TSR_call_Back+0x1d8>)
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	b25b      	sxtb	r3, r3
 800518a:	4313      	orrs	r3, r2
 800518c:	b25b      	sxtb	r3, r3
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <TSR_call_Back+0x1dc>)
 8005192:	701a      	strb	r2, [r3, #0]
			GR_TSR_FLAG_OLED=0;
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <TSR_call_Back+0x1d8>)
 8005196:	2200      	movs	r2, #0
 8005198:	801a      	strh	r2, [r3, #0]
			TSR_END_Flag=0;
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <TSR_call_Back+0x1c0>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
			TSR_START_Flag=0;
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <TSR_call_Back+0x1bc>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <TSR_call_Back+0x1cc>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40013800 	.word	0x40013800
 80051b4:	20004184 	.word	0x20004184
 80051b8:	20004185 	.word	0x20004185
 80051bc:	20004186 	.word	0x20004186
 80051c0:	20004187 	.word	0x20004187
 80051c4:	20004188 	.word	0x20004188
 80051c8:	20004183 	.word	0x20004183
 80051cc:	2000418a 	.word	0x2000418a
 80051d0:	2000418c 	.word	0x2000418c
 80051d4:	20004180 	.word	0x20004180
 80051d8:	20004182 	.word	0x20004182

080051dc <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <TSR_init+0x24>)
 80051e4:	463c      	mov	r4, r7
 80051e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 80051ec:	463b      	mov	r3, r7
 80051ee:	4619      	mov	r1, r3
 80051f0:	4804      	ldr	r0, [pc, #16]	; (8005204 <TSR_init+0x28>)
 80051f2:	f7ff fa29 	bl	8004648 <MCAL_USART_init>
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd90      	pop	{r4, r7, pc}
 80051fe:	bf00      	nop
 8005200:	08005680 	.word	0x08005680
 8005204:	40013800 	.word	0x40013800

08005208 <CAR_ON_Handler>:

/************FACE ID TASK*************/
/************FACE ID TASK*************/
/************FACE ID TASK*************/

void CAR_ON_Handler(){
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(GPIOB, PIN_1)==0) ){
 800520c:	2101      	movs	r1, #1
 800520e:	4819      	ldr	r0, [pc, #100]	; (8005274 <CAR_ON_Handler+0x6c>)
 8005210:	f7fe fce8 	bl	8003be4 <MCAL_Read_PIN>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d12a      	bne.n	8005270 <CAR_ON_Handler+0x68>
		_TIM1_delay_ms(30);
 800521a:	201e      	movs	r0, #30
 800521c:	f7ff f9fc 	bl	8004618 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(GPIOB, PIN_1)==0) ){
 8005220:	2101      	movs	r1, #1
 8005222:	4814      	ldr	r0, [pc, #80]	; (8005274 <CAR_ON_Handler+0x6c>)
 8005224:	f7fe fcde 	bl	8003be4 <MCAL_Read_PIN>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d120      	bne.n	8005270 <CAR_ON_Handler+0x68>

			if(CAR_ON_counter ==1 &&GR_FACE_FLAG_send !=0x99&&GR_FACE_FLAG_send !=0x00){
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <CAR_ON_Handler+0x70>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d11c      	bne.n	8005270 <CAR_ON_Handler+0x68>
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <CAR_ON_Handler+0x74>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b99      	cmp	r3, #153	; 0x99
 800523c:	d018      	beq.n	8005270 <CAR_ON_Handler+0x68>
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <CAR_ON_Handler+0x74>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <CAR_ON_Handler+0x68>
//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
//				NVIC_ISER1 |=(1<<(USART1_IRQ-32));
				CAR_ON_counter=0;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <CAR_ON_Handler+0x70>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
				GR_FACE_FLAG_send=0;
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <CAR_ON_Handler+0x74>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <CAR_ON_Handler+0x78>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
				//UART SEND
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8005258:	2040      	movs	r0, #64	; 0x40
 800525a:	f7ff fd5f 	bl	8004d1c <ACC_FROM_ADC_TO_DAC>
				MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
 800525e:	2133      	movs	r1, #51	; 0x33
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <CAR_ON_Handler+0x7c>)
 8005262:	f7ff fb59 	bl	8004918 <MCAL_USART_SendData>
				vTaskResume(FACE_ID_TASK_Handle);
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <CAR_ON_Handler+0x80>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb fe36 	bl	8000edc <vTaskResume>
		}

	}


}
 8005270:	bf00      	nop
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40010c00 	.word	0x40010c00
 8005278:	2000418e 	.word	0x2000418e
 800527c:	2000418c 	.word	0x2000418c
 8005280:	2000418f 	.word	0x2000418f
 8005284:	40013800 	.word	0x40013800
 8005288:	20004258 	.word	0x20004258

0800528c <CAR_ON_init>:
void CAR_ON_init(){
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
	EXTI_config_t CAR_BOTTON_SITTING={EXT1PB1,FALLING,ENABLE,CAR_ON_Handler};
 8005292:	2301      	movs	r3, #1
 8005294:	80bb      	strh	r3, [r7, #4]
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <CAR_ON_init+0x48>)
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	2301      	movs	r3, #1
 800529c:	81bb      	strh	r3, [r7, #12]
 800529e:	2307      	movs	r3, #7
 80052a0:	81fb      	strh	r3, [r7, #14]
 80052a2:	2300      	movs	r3, #0
 80052a4:	743b      	strb	r3, [r7, #16]
 80052a6:	2301      	movs	r3, #1
 80052a8:	747b      	strb	r3, [r7, #17]
 80052aa:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <CAR_ON_init+0x4c>)
 80052ac:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_init(&CAR_BOTTON_SITTING);
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fe f97d 	bl	80035b0 <MCAL_EXTI_init>
	PIN_config pin={CONTACT_BOTTON_PIN,INPUT_PD};
 80052b6:	2300      	movs	r3, #0
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	2301      	movs	r3, #1
 80052bc:	803b      	strh	r3, [r7, #0]
 80052be:	2303      	movs	r3, #3
 80052c0:	70bb      	strb	r3, [r7, #2]
	  MCAL_GPIO_init(CONTACT_BOTTON_PORT, &pin);
 80052c2:	463b      	mov	r3, r7
 80052c4:	4619      	mov	r1, r3
 80052c6:	4803      	ldr	r0, [pc, #12]	; (80052d4 <CAR_ON_init+0x48>)
 80052c8:	f7fe fb7c 	bl	80039c4 <MCAL_GPIO_init>
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40010c00 	.word	0x40010c00
 80052d8:	08005209 	.word	0x08005209

080052dc <FACE_ID_TASK>:
void FACE_ID_TASK(){
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
	while(1){

		if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 80052e0:	2101      	movs	r1, #1
 80052e2:	481b      	ldr	r0, [pc, #108]	; (8005350 <FACE_ID_TASK+0x74>)
 80052e4:	f7fe fc7e 	bl	8003be4 <MCAL_Read_PIN>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d12b      	bne.n	8005346 <FACE_ID_TASK+0x6a>
			_TIM1_delay_ms(30);
 80052ee:	201e      	movs	r0, #30
 80052f0:	f7ff f992 	bl	8004618 <_TIM1_delay_ms>
			if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 80052f4:	2101      	movs	r1, #1
 80052f6:	4816      	ldr	r0, [pc, #88]	; (8005350 <FACE_ID_TASK+0x74>)
 80052f8:	f7fe fc74 	bl	8003be4 <MCAL_Read_PIN>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d1ee      	bne.n	80052e0 <FACE_ID_TASK+0x4>
			//UART SEND

//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
				if(CAR_login_counter==0){
 8005302:	4b14      	ldr	r3, [pc, #80]	; (8005354 <FACE_ID_TASK+0x78>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <FACE_ID_TASK+0x42>
					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 800530a:	2122      	movs	r1, #34	; 0x22
 800530c:	4812      	ldr	r0, [pc, #72]	; (8005358 <FACE_ID_TASK+0x7c>)
 800530e:	f7ff fb03 	bl	8004918 <MCAL_USART_SendData>
					CAR_login_counter++;
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <FACE_ID_TASK+0x78>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <FACE_ID_TASK+0x78>)
 800531c:	701a      	strb	r2, [r3, #0]
				}
//				if(GR_FACE_FLAG_send ==0x99){
//					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
//
//				}
			if(GR_FACE_FLAG_send !=0x99 && GR_FACE_FLAG_send !=0x00){
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <FACE_ID_TASK+0x80>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b99      	cmp	r3, #153	; 0x99
 8005324:	d0dc      	beq.n	80052e0 <FACE_ID_TASK+0x4>
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <FACE_ID_TASK+0x80>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0d8      	beq.n	80052e0 <FACE_ID_TASK+0x4>
				CAR_ON_counter=1;
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <FACE_ID_TASK+0x84>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <FACE_ID_TASK+0x78>)
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
//				////////////*********LUNA_INIT***************//////////////////
//				LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
//				LUNA_ENABLE();
				vTaskSuspend(FACE_ID_TASK_Handle);
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <FACE_ID_TASK+0x88>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb fd1c 	bl	8000d7c <vTaskSuspend>
 8005344:	e7cc      	b.n	80052e0 <FACE_ID_TASK+0x4>

			}
		}
		}else{
			//			MCAL_write_PIN(GPIOB, PIN_13, 0);
						CAR_login_counter=0;
 8005346:	4b03      	ldr	r3, [pc, #12]	; (8005354 <FACE_ID_TASK+0x78>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
		if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 800534c:	e7c8      	b.n	80052e0 <FACE_ID_TASK+0x4>
 800534e:	bf00      	nop
 8005350:	40010c00 	.word	0x40010c00
 8005354:	2000418f 	.word	0x2000418f
 8005358:	40013800 	.word	0x40013800
 800535c:	2000418c 	.word	0x2000418c
 8005360:	2000418e 	.word	0x2000418e
 8005364:	20004258 	.word	0x20004258

08005368 <HW_init>:





void HW_init(){
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 800536c:	f7ff fbf6 	bl	8004b5c <Sys_Clk_init>
	////////////*********TFT_init***************//////////////////
	TFT_init(RGB_5_6_5);
 8005370:	2055      	movs	r0, #85	; 0x55
 8005372:	f7fd f8d1 	bl	8002518 <TFT_init>
	////////////*********TSR init***************//////////////////
	TSR_init();
 8005376:	f7ff ff31 	bl	80051dc <TSR_init>

	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 800537a:	f7ff fc43 	bl	8004c04 <ACC_throtel_init>
	////////////*********DAC init***************//////////////////
	ACC_DAC_init();
 800537e:	f7ff fc71 	bl	8004c64 <ACC_DAC_init>
	////////////*********DMS_init***************//////////////////
	DMS_init();
 8005382:	f7fc fe5f 	bl	8002044 <DMS_init>
	////////////*********CAR_ON_init***************//////////////////
	CAR_ON_init();
 8005386:	f7ff ff81 	bl	800528c <CAR_ON_init>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 800538a:	2100      	movs	r1, #0
 800538c:	2000      	movs	r0, #0
 800538e:	f7fc ff9b 	bl	80022c8 <LUNA_INIT>
//	PIN_config PINx={PIN_13,OUTPUT_PP,SPEED_10};
//	MCAL_GPIO_init(GPIOB, &PINx);



}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <main>:
int main(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af02      	add	r7, sp, #8
	HW_init();
 800539e:	f7ff ffe3 	bl	8005368 <HW_init>
	///////////////////////////
	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 80053a2:	2300      	movs	r3, #0
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2302      	movs	r3, #2
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053b0:	493d      	ldr	r1, [pc, #244]	; (80054a8 <main+0x110>)
 80053b2:	483e      	ldr	r0, [pc, #248]	; (80054ac <main+0x114>)
 80053b4:	f7fb fadd 	bl	8000972 <xTaskCreate>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <main+0x2a>
		Error_Handller();
 80053be:	f7ff fbc9 	bl	8004b54 <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 80053c2:	2300      	movs	r3, #0
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	2302      	movs	r3, #2
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <main+0x118>)
 80053d2:	4838      	ldr	r0, [pc, #224]	; (80054b4 <main+0x11c>)
 80053d4:	f7fb facd 	bl	8000972 <xTaskCreate>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <main+0x4a>
		Error_Handller();
 80053de:	f7ff fbb9 	bl	8004b54 <Error_Handller>
	}


	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,NULL)!=pdPASS ){
 80053e2:	2300      	movs	r3, #0
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2302      	movs	r3, #2
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f0:	4931      	ldr	r1, [pc, #196]	; (80054b8 <main+0x120>)
 80053f2:	4832      	ldr	r0, [pc, #200]	; (80054bc <main+0x124>)
 80053f4:	f7fb fabd 	bl	8000972 <xTaskCreate>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <main+0x6a>
		Error_Handller();
 80053fe:	f7ff fba9 	bl	8004b54 <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",256,NULL,2,&TSR_Handller_TASK_Handle)!=pdPASS ){
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <main+0x128>)
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2302      	movs	r3, #2
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005410:	492c      	ldr	r1, [pc, #176]	; (80054c4 <main+0x12c>)
 8005412:	482d      	ldr	r0, [pc, #180]	; (80054c8 <main+0x130>)
 8005414:	f7fb faad 	bl	8000972 <xTaskCreate>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <main+0x8a>
		Error_Handller();
 800541e:	f7ff fb99 	bl	8004b54 <Error_Handller>
	}

	///////////////////////

	if(xTaskCreate(DMS_Handller_TASK,"DMS_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8005422:	2300      	movs	r3, #0
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	2302      	movs	r3, #2
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	2300      	movs	r3, #0
 800542c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005430:	4926      	ldr	r1, [pc, #152]	; (80054cc <main+0x134>)
 8005432:	4827      	ldr	r0, [pc, #156]	; (80054d0 <main+0x138>)
 8005434:	f7fb fa9d 	bl	8000972 <xTaskCreate>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <main+0xaa>
		Error_Handller();
 800543e:	f7ff fb89 	bl	8004b54 <Error_Handller>
	}

	if(xTaskCreate(DMS_read_TASK,"DMS_read_TASK",256,NULL,2,NULL)!=pdPASS ){
 8005442:	2300      	movs	r3, #0
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2302      	movs	r3, #2
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005450:	4920      	ldr	r1, [pc, #128]	; (80054d4 <main+0x13c>)
 8005452:	4821      	ldr	r0, [pc, #132]	; (80054d8 <main+0x140>)
 8005454:	f7fb fa8d 	bl	8000972 <xTaskCreate>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <main+0xca>
		Error_Handller();
 800545e:	f7ff fb79 	bl	8004b54 <Error_Handller>
	}
	///////////////////////
	if(xTaskCreate(FACE_ID_TASK,"FACE_ID_TASK",256,NULL,5,&FACE_ID_TASK_Handle)!=pdPASS ){
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <main+0x144>)
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	2305      	movs	r3, #5
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005470:	491b      	ldr	r1, [pc, #108]	; (80054e0 <main+0x148>)
 8005472:	481c      	ldr	r0, [pc, #112]	; (80054e4 <main+0x14c>)
 8005474:	f7fb fa7d 	bl	8000972 <xTaskCreate>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <main+0xea>
		Error_Handller();
 800547e:	f7ff fb69 	bl	8004b54 <Error_Handller>
	}


	DMS_Semaphore = xSemaphoreCreateBinary();
 8005482:	2203      	movs	r2, #3
 8005484:	2100      	movs	r1, #0
 8005486:	2001      	movs	r0, #1
 8005488:	f7fa ff9c 	bl	80003c4 <xQueueGenericCreate>
 800548c:	4602      	mov	r2, r0
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <main+0x150>)
 8005490:	601a      	str	r2, [r3, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8005492:	2200      	movs	r2, #0
 8005494:	2101      	movs	r1, #1
 8005496:	200a      	movs	r0, #10
 8005498:	f7fa ff94 	bl	80003c4 <xQueueGenericCreate>
 800549c:	4602      	mov	r2, r0
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <main+0x154>)
 80054a0:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 80054a2:	f7fb fd93 	bl	8000fcc <vTaskStartScheduler>

	for(;;);
 80054a6:	e7fe      	b.n	80054a6 <main+0x10e>
 80054a8:	08005690 	.word	0x08005690
 80054ac:	08004e45 	.word	0x08004e45
 80054b0:	080056ac 	.word	0x080056ac
 80054b4:	08004df5 	.word	0x08004df5
 80054b8:	080056c0 	.word	0x080056c0
 80054bc:	08004f25 	.word	0x08004f25
 80054c0:	2000425c 	.word	0x2000425c
 80054c4:	080056cc 	.word	0x080056cc
 80054c8:	08004fcd 	.word	0x08004fcd
 80054cc:	080056e0 	.word	0x080056e0
 80054d0:	08004b91 	.word	0x08004b91
 80054d4:	080056f4 	.word	0x080056f4
 80054d8:	08004bc5 	.word	0x08004bc5
 80054dc:	20004258 	.word	0x20004258
 80054e0:	08005704 	.word	0x08005704
 80054e4:	080052dd 	.word	0x080052dd
 80054e8:	20004250 	.word	0x20004250
 80054ec:	20004254 	.word	0x20004254

080054f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054f0:	480d      	ldr	r0, [pc, #52]	; (8005528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80054f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80054f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054f8:	480c      	ldr	r0, [pc, #48]	; (800552c <LoopForever+0x6>)
  ldr r1, =_edata
 80054fa:	490d      	ldr	r1, [pc, #52]	; (8005530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <LoopForever+0xe>)
  movs r3, #0
 80054fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005500:	e002      	b.n	8005508 <LoopCopyDataInit>

08005502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005506:	3304      	adds	r3, #4

08005508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800550a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800550c:	d3f9      	bcc.n	8005502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <LoopForever+0x16>)
  movs r3, #0
 8005512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005514:	e001      	b.n	800551a <LoopFillZerobss>

08005516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005518:	3204      	adds	r2, #4

0800551a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800551a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800551c:	d3fb      	bcc.n	8005516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800551e:	f000 f811 	bl	8005544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005522:	f7ff ff39 	bl	8005398 <main>

08005526 <LoopForever>:

LoopForever:
  b LoopForever
 8005526:	e7fe      	b.n	8005526 <LoopForever>
  ldr   r0, =_estack
 8005528:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800552c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005530:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8005534:	0801f144 	.word	0x0801f144
  ldr r2, =_sbss
 8005538:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800553c:	20004270 	.word	0x20004270

08005540 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005540:	e7fe      	b.n	8005540 <ADC3_IRQHandler>
	...

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	2500      	movs	r5, #0
 8005548:	4e0c      	ldr	r6, [pc, #48]	; (800557c <__libc_init_array+0x38>)
 800554a:	4c0d      	ldr	r4, [pc, #52]	; (8005580 <__libc_init_array+0x3c>)
 800554c:	1ba4      	subs	r4, r4, r6
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	42a5      	cmp	r5, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	f000 f82e 	bl	80055b4 <_init>
 8005558:	2500      	movs	r5, #0
 800555a:	4e0a      	ldr	r6, [pc, #40]	; (8005584 <__libc_init_array+0x40>)
 800555c:	4c0a      	ldr	r4, [pc, #40]	; (8005588 <__libc_init_array+0x44>)
 800555e:	1ba4      	subs	r4, r4, r6
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	42a5      	cmp	r5, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800556c:	4798      	blx	r3
 800556e:	3501      	adds	r5, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005576:	4798      	blx	r3
 8005578:	3501      	adds	r5, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	0801f13c 	.word	0x0801f13c
 8005580:	0801f13c 	.word	0x0801f13c
 8005584:	0801f13c 	.word	0x0801f13c
 8005588:	0801f140 	.word	0x0801f140

0800558c <memcpy>:
 800558c:	b510      	push	{r4, lr}
 800558e:	1e43      	subs	r3, r0, #1
 8005590:	440a      	add	r2, r1
 8005592:	4291      	cmp	r1, r2
 8005594:	d100      	bne.n	8005598 <memcpy+0xc>
 8005596:	bd10      	pop	{r4, pc}
 8005598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a0:	e7f7      	b.n	8005592 <memcpy+0x6>

080055a2 <memset>:
 80055a2:	4603      	mov	r3, r0
 80055a4:	4402      	add	r2, r0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d100      	bne.n	80055ac <memset+0xa>
 80055aa:	4770      	bx	lr
 80055ac:	f803 1b01 	strb.w	r1, [r3], #1
 80055b0:	e7f9      	b.n	80055a6 <memset+0x4>
	...

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
