
Graduation_Project_Finall.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000187e8  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd88  0801dd88  00030024  2**0
                  CONTENTS
  4 .ARM          00000000  0801dd88  0801dd88  00030024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801dd88  0801dd88  00030024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd88  0801dd88  0002dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd8c  0801dd8c  0002dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0801dd90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  20000024  0801ddb4  00030024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  0801ddb4  00034258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa25  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d2  00000000  00000000  0003fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00003f16  00000000  00000000  00042087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008a0  00000000  00000000  00045fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000778  00000000  00000000  00046840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001b4d  00000000  00000000  00046fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b376  00000000  00000000  00048b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000144bf  00000000  00000000  00053e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f7c  00000000  00000000  0006833c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08005588 	.word	0x08005588

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08005588 	.word	0x08005588

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d05d      	beq.n	80003a4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d059      	beq.n	80003a4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	fba3 2302 	umull	r2, r3, r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d000      	beq.n	8000304 <xQueueGenericReset+0x34>
 8000302:	2101      	movs	r1, #1
 8000304:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000306:	2b00      	cmp	r3, #0
 8000308:	d14c      	bne.n	80003a4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800030a:	f001 fda7 	bl	8001e5c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800031a:	fb01 f303 	mul.w	r3, r1, r3
 800031e:	441a      	add	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	2200      	movs	r2, #0
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800033a:	3b01      	subs	r3, #1
 800033c:	68b9      	ldr	r1, [r7, #8]
 800033e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000340:	fb01 f303 	mul.w	r3, r1, r3
 8000344:	441a      	add	r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	22ff      	movs	r2, #255	; 0xff
 800034e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d114      	bne.n	800038a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01a      	beq.n	800039e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3310      	adds	r3, #16
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f8b9 	bl	80014e4 <xTaskRemoveFromEventList>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d012      	beq.n	800039e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <xQueueGenericReset+0xe4>)
 800037a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	f3bf 8f4f 	dsb	sy
 8000384:	f3bf 8f6f 	isb	sy
 8000388:	e009      	b.n	800039e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	3310      	adds	r3, #16
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff feee 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3324      	adds	r3, #36	; 0x24
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff fee9 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800039e:	f001 fd77 	bl	8001e90 <vPortExitCritical>
 80003a2:	e001      	b.n	80003a8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80003a8:	68fb      	ldr	r3, [r7, #12]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000ed04 	.word	0xe000ed04

080003b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af02      	add	r7, sp, #8
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	4613      	mov	r3, r2
 80003c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d02d      	beq.n	800042c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003d0:	2100      	movs	r1, #0
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	fba3 2302 	umull	r2, r3, r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d000      	beq.n	80003e0 <xQueueGenericCreate+0x28>
 80003de:	2101      	movs	r1, #1
 80003e0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d122      	bne.n	800042c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003ee:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003f2:	d81b      	bhi.n	800042c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	fb02 f303 	mul.w	r3, r2, r3
 80003fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	3348      	adds	r3, #72	; 0x48
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fdc4 	bl	8001f90 <pvPortMalloc>
 8000408:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d00d      	beq.n	800042c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000410:	69fb      	ldr	r3, [r7, #28]
 8000412:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	3348      	adds	r3, #72	; 0x48
 8000418:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800041a:	79fa      	ldrb	r2, [r7, #7]
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	4613      	mov	r3, r2
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	68b9      	ldr	r1, [r7, #8]
 8000426:	68f8      	ldr	r0, [r7, #12]
 8000428:	f000 f805 	bl	8000436 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800042c:	69fb      	ldr	r3, [r7, #28]
    }
 800042e:	4618      	mov	r0, r3
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d103      	bne.n	8000452 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	69ba      	ldr	r2, [r7, #24]
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	e002      	b.n	8000458 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000464:	2101      	movs	r1, #1
 8000466:	69b8      	ldr	r0, [r7, #24]
 8000468:	f7ff ff32 	bl	80002d0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800048a:	f001 fce7 	bl	8001e5c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800048e:	6a3b      	ldr	r3, [r7, #32]
 8000490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000492:	6a3b      	ldr	r3, [r7, #32]
 8000494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000496:	429a      	cmp	r2, r3
 8000498:	d302      	bcc.n	80004a0 <xQueueGenericSend+0x2c>
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d129      	bne.n	80004f4 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	68b9      	ldr	r1, [r7, #8]
 80004a4:	6a38      	ldr	r0, [r7, #32]
 80004a6:	f000 f96e 	bl	8000786 <prvCopyDataToQueue>
 80004aa:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d010      	beq.n	80004d6 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004b4:	6a3b      	ldr	r3, [r7, #32]
 80004b6:	3324      	adds	r3, #36	; 0x24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f813 	bl	80014e4 <xTaskRemoveFromEventList>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d013      	beq.n	80004ec <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004c4:	4b3f      	ldr	r3, [pc, #252]	; (80005c4 <xQueueGenericSend+0x150>)
 80004c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	f3bf 8f4f 	dsb	sy
 80004d0:	f3bf 8f6f 	isb	sy
 80004d4:	e00a      	b.n	80004ec <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d007      	beq.n	80004ec <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <xQueueGenericSend+0x150>)
 80004de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	f3bf 8f4f 	dsb	sy
 80004e8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004ec:	f001 fcd0 	bl	8001e90 <vPortExitCritical>
                return pdPASS;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e063      	b.n	80005bc <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d103      	bne.n	8000502 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004fa:	f001 fcc9 	bl	8001e90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	e05c      	b.n	80005bc <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000504:	2b00      	cmp	r3, #0
 8000506:	d106      	bne.n	8000516 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	4618      	mov	r0, r3
 800050e:	f001 f8b1 	bl	8001674 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000512:	2301      	movs	r3, #1
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000516:	f001 fcbb 	bl	8001e90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800051a:	f000 fd87 	bl	800102c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800051e:	f001 fc9d 	bl	8001e5c <vPortEnterCritical>
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000528:	b25b      	sxtb	r3, r3
 800052a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052e:	d103      	bne.n	8000538 <xQueueGenericSend+0xc4>
 8000530:	6a3b      	ldr	r3, [r7, #32]
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000538:	6a3b      	ldr	r3, [r7, #32]
 800053a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800053e:	b25b      	sxtb	r3, r3
 8000540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000544:	d103      	bne.n	800054e <xQueueGenericSend+0xda>
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800054e:	f001 fc9f 	bl	8001e90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000552:	1d3a      	adds	r2, r7, #4
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f8a0 	bl	80016a0 <xTaskCheckForTimeOut>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d124      	bne.n	80005b0 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000566:	6a38      	ldr	r0, [r7, #32]
 8000568:	f000 f9df 	bl	800092a <prvIsQueueFull>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d018      	beq.n	80005a4 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3310      	adds	r3, #16
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff9c 	bl	80014b8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000580:	6a38      	ldr	r0, [r7, #32]
 8000582:	f000 f96a 	bl	800085a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000586:	f000 fd5f 	bl	8001048 <xTaskResumeAll>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	f47f af7c 	bne.w	800048a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <xQueueGenericSend+0x150>)
 8000594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	f3bf 8f4f 	dsb	sy
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	e772      	b.n	800048a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80005a4:	6a38      	ldr	r0, [r7, #32]
 80005a6:	f000 f958 	bl	800085a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80005aa:	f000 fd4d 	bl	8001048 <xTaskResumeAll>
 80005ae:	e76c      	b.n	800048a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80005b0:	6a38      	ldr	r0, [r7, #32]
 80005b2:	f000 f952 	bl	800085a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80005b6:	f000 fd47 	bl	8001048 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80005ba:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	e000ed04 	.word	0xe000ed04

080005c8 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005de:	f001 fc3d 	bl	8001e5c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e6:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d024      	beq.n	8000638 <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d104      	bne.n	8000608 <xQueueSemaphoreTake+0x40>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80005fe:	f001 fb0b 	bl	8001c18 <pvTaskIncrementMutexHeldCount>
 8000602:	4602      	mov	r2, r0
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00f      	beq.n	8000630 <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	3310      	adds	r3, #16
 8000614:	4618      	mov	r0, r3
 8000616:	f000 ff65 	bl	80014e4 <xTaskRemoveFromEventList>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000620:	4b4c      	ldr	r3, [pc, #304]	; (8000754 <xQueueSemaphoreTake+0x18c>)
 8000622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000630:	f001 fc2e 	bl	8001e90 <vPortExitCritical>
                return pdPASS;
 8000634:	2301      	movs	r3, #1
 8000636:	e089      	b.n	800074c <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <xQueueSemaphoreTake+0x7e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800063e:	f001 fc27 	bl	8001e90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000642:	2300      	movs	r3, #0
 8000644:	e082      	b.n	800074c <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	2b00      	cmp	r3, #0
 800064a:	d106      	bne.n	800065a <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f80f 	bl	8001674 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000656:	2301      	movs	r3, #1
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800065a:	f001 fc19 	bl	8001e90 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800065e:	f000 fce5 	bl	800102c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000662:	f001 fbfb 	bl	8001e5c <vPortEnterCritical>
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800066c:	b25b      	sxtb	r3, r3
 800066e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000672:	d103      	bne.n	800067c <xQueueSemaphoreTake+0xb4>
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000688:	d103      	bne.n	8000692 <xQueueSemaphoreTake+0xca>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000692:	f001 fbfd 	bl	8001e90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000696:	463a      	mov	r2, r7
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fffe 	bl	80016a0 <xTaskCheckForTimeOut>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d132      	bne.n	8000710 <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006aa:	69f8      	ldr	r0, [r7, #28]
 80006ac:	f000 f927 	bl	80008fe <prvIsQueueEmpty>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d026      	beq.n	8000704 <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d109      	bne.n	80006d2 <xQueueSemaphoreTake+0x10a>
                    {
                        taskENTER_CRITICAL();
 80006be:	f001 fbcd 	bl	8001e5c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f8f0 	bl	80018ac <xTaskPriorityInherit>
 80006cc:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 80006ce:	f001 fbdf 	bl	8001e90 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3324      	adds	r3, #36	; 0x24
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 feec 	bl	80014b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006e0:	69f8      	ldr	r0, [r7, #28]
 80006e2:	f000 f8ba 	bl	800085a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80006e6:	f000 fcaf 	bl	8001048 <xTaskResumeAll>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f47f af76 	bne.w	80005de <xQueueSemaphoreTake+0x16>
                {
                    portYIELD_WITHIN_API();
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <xQueueSemaphoreTake+0x18c>)
 80006f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	e76c      	b.n	80005de <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000704:	69f8      	ldr	r0, [r7, #28]
 8000706:	f000 f8a8 	bl	800085a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800070a:	f000 fc9d 	bl	8001048 <xTaskResumeAll>
 800070e:	e766      	b.n	80005de <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000710:	69f8      	ldr	r0, [r7, #28]
 8000712:	f000 f8a2 	bl	800085a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000716:	f000 fc97 	bl	8001048 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800071a:	69f8      	ldr	r0, [r7, #28]
 800071c:	f000 f8ef 	bl	80008fe <prvIsQueueEmpty>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	f43f af5b 	beq.w	80005de <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00d      	beq.n	800074a <xQueueSemaphoreTake+0x182>
                    {
                        taskENTER_CRITICAL();
 800072e:	f001 fb95 	bl	8001e5c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000732:	69f8      	ldr	r0, [r7, #28]
 8000734:	f000 f810 	bl	8000758 <prvGetDisinheritPriorityAfterTimeout>
 8000738:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	6979      	ldr	r1, [r7, #20]
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f9d3 	bl	8001aec <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000746:	f001 fba3 	bl	8001e90 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800074a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800074c:	4618      	mov	r0, r3
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	e000ed04 	.word	0xe000ed04

08000758 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f1c3 0305 	rsb	r3, r3, #5
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e001      	b.n	800077a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800077a:	68fb      	ldr	r3, [r7, #12]
    }
 800077c:	4618      	mov	r0, r3
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10d      	bne.n	80007c0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d14d      	bne.n	8000848 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f919 	bl	80019e8 <xTaskPriorityDisinherit>
 80007b6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	e043      	b.n	8000848 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d119      	bne.n	80007fa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6858      	ldr	r0, [r3, #4]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	461a      	mov	r2, r3
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	f004 fecb 	bl	800556c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	441a      	add	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d32b      	bcc.n	8000848 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	e026      	b.n	8000848 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68d8      	ldr	r0, [r3, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	461a      	mov	r2, r3
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	f004 feb1 	bl	800556c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	68da      	ldr	r2, [r3, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	425b      	negs	r3, r3
 8000814:	441a      	add	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d207      	bcs.n	8000836 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	425b      	negs	r3, r3
 8000830:	441a      	add	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d105      	bne.n	8000848 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3b01      	subs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000850:	697b      	ldr	r3, [r7, #20]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000862:	f001 fafb 	bl	8001e5c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800086c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800086e:	e011      	b.n	8000894 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	2b00      	cmp	r3, #0
 8000876:	d012      	beq.n	800089e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3324      	adds	r3, #36	; 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fe31 	bl	80014e4 <xTaskRemoveFromEventList>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000888:	f000 ff54 	bl	8001734 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	3b01      	subs	r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	2b00      	cmp	r3, #0
 800089a:	dce9      	bgt.n	8000870 <prvUnlockQueue+0x16>
 800089c:	e000      	b.n	80008a0 <prvUnlockQueue+0x46>
                    break;
 800089e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80008a8:	f001 faf2 	bl	8001e90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80008ac:	f001 fad6 	bl	8001e5c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008b6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008b8:	e011      	b.n	80008de <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d012      	beq.n	80008e8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3310      	adds	r3, #16
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fe0c 	bl	80014e4 <xTaskRemoveFromEventList>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80008d2:	f000 ff2f 	bl	8001734 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	3b01      	subs	r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dce9      	bgt.n	80008ba <prvUnlockQueue+0x60>
 80008e6:	e000      	b.n	80008ea <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80008e8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80008f2:	f001 facd 	bl	8001e90 <vPortExitCritical>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000906:	f001 faa9 	bl	8001e5c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000912:	2301      	movs	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e001      	b.n	800091c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800091c:	f001 fab8 	bl	8001e90 <vPortExitCritical>

    return xReturn;
 8000920:	68fb      	ldr	r3, [r7, #12]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000932:	f001 fa93 	bl	8001e5c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	429a      	cmp	r2, r3
 8000940:	d102      	bne.n	8000948 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000942:	2301      	movs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e001      	b.n	800094c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800094c:	f001 faa0 	bl	8001e90 <vPortExitCritical>

    return xReturn;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800095a:	b580      	push	{r7, lr}
 800095c:	b08c      	sub	sp, #48	; 0x30
 800095e:	af04      	add	r7, sp, #16
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4613      	mov	r3, r2
 8000968:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fb0e 	bl	8001f90 <pvPortMalloc>
 8000974:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d013      	beq.n	80009a4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800097c:	2054      	movs	r0, #84	; 0x54
 800097e:	f001 fb07 	bl	8001f90 <pvPortMalloc>
 8000982:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d008      	beq.n	800099c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800098a:	2254      	movs	r2, #84	; 0x54
 800098c:	2100      	movs	r1, #0
 800098e:	69f8      	ldr	r0, [r7, #28]
 8000990:	f004 fdbf 	bl	8005512 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
 800099a:	e005      	b.n	80009a8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800099c:	6978      	ldr	r0, [r7, #20]
 800099e:	f001 fb49 	bl	8002034 <vPortFree>
 80009a2:	e001      	b.n	80009a8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d013      	beq.n	80009d6 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80009ae:	88fa      	ldrh	r2, [r7, #6]
 80009b0:	2300      	movs	r3, #0
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f80e 	bl	80009e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80009ca:	69f8      	ldr	r0, [r7, #28]
 80009cc:	f000 f874 	bl	8000ab8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	e002      	b.n	80009dc <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80009dc:	69bb      	ldr	r3, [r7, #24]
    }
 80009de:	4618      	mov	r0, r3
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009fe:	3b01      	subs	r3, #1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	f023 0307 	bic.w	r3, r3, #7
 8000a0c:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d01e      	beq.n	8000a52 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e012      	b.n	8000a40 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	4413      	add	r3, r2
 8000a20:	7819      	ldrb	r1, [r3, #0]
 8000a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4413      	add	r3, r2
 8000a28:	3334      	adds	r3, #52	; 0x34
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d9e9      	bls.n	8000a1a <prvInitialiseNewTask+0x34>
 8000a46:	e000      	b.n	8000a4a <prvInitialiseNewTask+0x64>
            {
                break;
 8000a48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d901      	bls.n	8000a5c <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	6a3a      	ldr	r2, [r7, #32]
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	6a3a      	ldr	r2, [r7, #32]
 8000a66:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fb9e 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	3318      	adds	r3, #24
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fb99 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a80:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	f1c3 0205 	rsb	r2, r3, #5
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	6938      	ldr	r0, [r7, #16]
 8000a98:	f001 f952 	bl	8001d40 <pxPortInitialiseStack>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ac0:	f001 f9cc 	bl	8001e5c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ac4:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <prvAddNewTaskToReadyList+0x108>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a3d      	ldr	r2, [pc, #244]	; (8000bc0 <prvAddNewTaskToReadyList+0x108>)
 8000acc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <prvAddNewTaskToReadyList+0x10c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <prvAddNewTaskToReadyList+0x10c>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000adc:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <prvAddNewTaskToReadyList+0x108>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d110      	bne.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ae4:	f000 fe4a 	bl	800177c <prvInitialiseTaskLists>
 8000ae8:	e00d      	b.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <prvAddNewTaskToReadyList+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d109      	bne.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <prvAddNewTaskToReadyList+0x10c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d802      	bhi.n	8000b06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000b00:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <prvAddNewTaskToReadyList+0x10c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <prvAddNewTaskToReadyList+0x114>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <prvAddNewTaskToReadyList+0x114>)
 8000b0e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	2201      	movs	r2, #1
 8000b16:	409a      	lsls	r2, r3
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <prvAddNewTaskToReadyList+0x118>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <prvAddNewTaskToReadyList+0x118>)
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b26:	492b      	ldr	r1, [pc, #172]	; (8000bd4 <prvAddNewTaskToReadyList+0x11c>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3304      	adds	r3, #4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	3204      	adds	r2, #4
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1d1a      	adds	r2, r3, #4
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <prvAddNewTaskToReadyList+0x11c>)
 8000b66:	441a      	add	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b70:	4918      	ldr	r1, [pc, #96]	; (8000bd4 <prvAddNewTaskToReadyList+0x11c>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1c59      	adds	r1, r3, #1
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <prvAddNewTaskToReadyList+0x11c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4403      	add	r3, r0
 8000b8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b8e:	f001 f97f 	bl	8001e90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <prvAddNewTaskToReadyList+0x110>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00e      	beq.n	8000bb8 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <prvAddNewTaskToReadyList+0x10c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <prvAddNewTaskToReadyList+0x120>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000118 	.word	0x20000118
 8000bc4:	20000040 	.word	0x20000040
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	20000134 	.word	0x20000134
 8000bd0:	20000120 	.word	0x20000120
 8000bd4:	20000044 	.word	0x20000044
 8000bd8:	e000ed04 	.word	0xe000ed04

08000bdc <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d901      	bls.n	8000bf4 <vTaskPrioritySet+0x18>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8000bf4:	f001 f932 	bl	8001e5c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <vTaskPrioritySet+0x28>
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <vTaskPrioritySet+0x178>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	e000      	b.n	8000c06 <vTaskPrioritySet+0x2a>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	f000 8098 	beq.w	8000d48 <vTaskPrioritySet+0x16c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d90d      	bls.n	8000c3c <vTaskPrioritySet+0x60>
                {
                    if( pxTCB != pxCurrentTCB )
 8000c20:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <vTaskPrioritySet+0x178>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d00f      	beq.n	8000c4a <vTaskPrioritySet+0x6e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <vTaskPrioritySet+0x178>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d309      	bcc.n	8000c4a <vTaskPrioritySet+0x6e>
                        {
                            xYieldRequired = pdTRUE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e006      	b.n	8000c4a <vTaskPrioritySet+0x6e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8000c3c:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <vTaskPrioritySet+0x178>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d101      	bne.n	8000c4a <vTaskPrioritySet+0x6e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d102      	bne.n	8000c62 <vTaskPrioritySet+0x86>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db04      	blt.n	8000c7a <vTaskPrioritySet+0x9e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f1c3 0205 	rsb	r2, r3, #5
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	6959      	ldr	r1, [r3, #20]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <vTaskPrioritySet+0x17c>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	d150      	bne.n	8000d32 <vTaskPrioritySet+0x156>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	3304      	adds	r3, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff faf1 	bl	800027c <uxListRemove>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d109      	bne.n	8000cb4 <vTaskPrioritySet+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <vTaskPrioritySet+0x180>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <vTaskPrioritySet+0x180>)
 8000cb2:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	2201      	movs	r2, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <vTaskPrioritySet+0x180>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <vTaskPrioritySet+0x180>)
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cca:	4923      	ldr	r1, [pc, #140]	; (8000d58 <vTaskPrioritySet+0x17c>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	3204      	adds	r2, #4
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <vTaskPrioritySet+0x17c>)
 8000d0a:	441a      	add	r2, r3
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	4910      	ldr	r1, [pc, #64]	; (8000d58 <vTaskPrioritySet+0x17c>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1c59      	adds	r1, r3, #1
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <vTaskPrioritySet+0x17c>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4403      	add	r3, r0
 8000d30:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <vTaskPrioritySet+0x16c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <vTaskPrioritySet+0x184>)
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8000d48:	f001 f8a2 	bl	8001e90 <vPortExitCritical>
    }
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000040 	.word	0x20000040
 8000d58:	20000044 	.word	0x20000044
 8000d5c:	20000120 	.word	0x20000120
 8000d60:	e000ed04 	.word	0xe000ed04

08000d64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000d6c:	f001 f876 	bl	8001e5c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <vTaskSuspend+0x18>
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <vTaskSuspend+0x100>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	e000      	b.n	8000d7e <vTaskSuspend+0x1a>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3304      	adds	r3, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fa79 	bl	800027c <uxListRemove>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d115      	bne.n	8000dbc <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	4934      	ldr	r1, [pc, #208]	; (8000e68 <vTaskSuspend+0x104>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10a      	bne.n	8000dbc <vTaskSuspend+0x58>
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	2201      	movs	r2, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43da      	mvns	r2, r3
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <vTaskSuspend+0x108>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4013      	ands	r3, r2
 8000db8:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <vTaskSuspend+0x108>)
 8000dba:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fa57 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4826      	ldr	r0, [pc, #152]	; (8000e70 <vTaskSuspend+0x10c>)
 8000dd6:	f7ff f9f6 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e010      	b.n	8000e02 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4413      	add	r3, r2
 8000de6:	3350      	adds	r3, #80	; 0x50
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	3350      	adds	r3, #80	; 0x50
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	ddeb      	ble.n	8000de0 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000e08:	f001 f842 	bl	8001e90 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <vTaskSuspend+0x110>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000e14:	f001 f822 	bl	8001e5c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000e18:	f000 fd2e 	bl	8001878 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000e1c:	f001 f838 	bl	8001e90 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <vTaskSuspend+0x100>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d118      	bne.n	8000e5c <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <vTaskSuspend+0x110>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d008      	beq.n	8000e44 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <vTaskSuspend+0x114>)
 8000e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	f3bf 8f4f 	dsb	sy
 8000e3e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e42:	e00b      	b.n	8000e5c <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <vTaskSuspend+0x10c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <vTaskSuspend+0x118>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d103      	bne.n	8000e58 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <vTaskSuspend+0x100>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
    }
 8000e56:	e001      	b.n	8000e5c <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8000e58:	f000 fae8 	bl	800142c <vTaskSwitchContext>
    }
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000040 	.word	0x20000040
 8000e68:	20000044 	.word	0x20000044
 8000e6c:	20000120 	.word	0x20000120
 8000e70:	20000104 	.word	0x20000104
 8000e74:	20000124 	.word	0x20000124
 8000e78:	e000ed04 	.word	0xe000ed04
 8000e7c:	20000118 	.word	0x20000118

08000e80 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <prvTaskIsTaskSuspended+0x3c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10a      	bne.n	8000eb0 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <prvTaskIsTaskSuspended+0x40>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d005      	beq.n	8000eb0 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000104 	.word	0x20000104
 8000ec0:	200000d8 	.word	0x200000d8

08000ec4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <vTaskResume+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d05f      	beq.n	8000f9a <vTaskResume+0xd6>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d05c      	beq.n	8000f9a <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 8000ee0:	f000 ffbc 	bl	8001e5c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff ffcb 	bl	8000e80 <prvTaskIsTaskSuspended>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d052      	beq.n	8000f96 <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f9c1 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	2201      	movs	r2, #1
 8000f00:	409a      	lsls	r2, r3
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <vTaskResume+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <vTaskResume+0xe4>)
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f10:	4926      	ldr	r1, [pc, #152]	; (8000fac <vTaskResume+0xe8>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	3204      	adds	r2, #4
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1d1a      	adds	r2, r3, #4
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <vTaskResume+0xe8>)
 8000f50:	441a      	add	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5a:	4914      	ldr	r1, [pc, #80]	; (8000fac <vTaskResume+0xe8>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1c59      	adds	r1, r3, #1
 8000f6a:	4810      	ldr	r0, [pc, #64]	; (8000fac <vTaskResume+0xe8>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4403      	add	r3, r0
 8000f76:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <vTaskResume+0xe0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d307      	bcc.n	8000f96 <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <vTaskResume+0xec>)
 8000f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000f96:	f000 ff7b 	bl	8001e90 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000040 	.word	0x20000040
 8000fa8:	20000120 	.word	0x20000120
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	e000ed04 	.word	0xe000ed04

08000fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <vTaskStartScheduler+0x5c>)
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	4912      	ldr	r1, [pc, #72]	; (8001014 <vTaskStartScheduler+0x60>)
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <vTaskStartScheduler+0x64>)
 8000fcc:	f7ff fcc5 	bl	800095a <xTaskCreate>
 8000fd0:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d115      	bne.n	8001004 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000fd8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000fea:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <vTaskStartScheduler+0x68>)
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <vTaskStartScheduler+0x6c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <vTaskStartScheduler+0x70>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001000:	f000 ff0c 	bl	8001e1c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <vTaskStartScheduler+0x74>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000013c 	.word	0x2000013c
 8001014:	080055a0 	.word	0x080055a0
 8001018:	0800174d 	.word	0x0800174d
 800101c:	20000138 	.word	0x20000138
 8001020:	20000124 	.word	0x20000124
 8001024:	2000011c 	.word	0x2000011c
 8001028:	20000000 	.word	0x20000000

0800102c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <vTaskSuspendAll+0x18>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <vTaskSuspendAll+0x18>)
 8001038:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000140 	.word	0x20000140

08001048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001056:	f000 ff01 	bl	8001e5c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800105a:	4b68      	ldr	r3, [pc, #416]	; (80011fc <xTaskResumeAll+0x1b4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a66      	ldr	r2, [pc, #408]	; (80011fc <xTaskResumeAll+0x1b4>)
 8001062:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001064:	4b65      	ldr	r3, [pc, #404]	; (80011fc <xTaskResumeAll+0x1b4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f040 80c0 	bne.w	80011ee <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800106e:	4b64      	ldr	r3, [pc, #400]	; (8001200 <xTaskResumeAll+0x1b8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80bb 	beq.w	80011ee <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001078:	e08a      	b.n	8001190 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <xTaskResumeAll+0x1bc>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	6a12      	ldr	r2, [r2, #32]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	69d2      	ldr	r2, [r2, #28]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3318      	adds	r3, #24
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d103      	bne.n	80010b0 <xTaskResumeAll+0x68>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	6a1a      	ldr	r2, [r3, #32]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	6892      	ldr	r2, [r2, #8]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3304      	adds	r3, #4
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d103      	bne.n	80010ee <xTaskResumeAll+0xa6>
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	2201      	movs	r2, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <xTaskResumeAll+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4313      	orrs	r3, r2
 800110c:	4a3e      	ldr	r2, [pc, #248]	; (8001208 <xTaskResumeAll+0x1c0>)
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	493d      	ldr	r1, [pc, #244]	; (800120c <xTaskResumeAll+0x1c4>)
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	3204      	adds	r2, #4
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	1d1a      	adds	r2, r3, #4
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <xTaskResumeAll+0x1c4>)
 8001154:	441a      	add	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115e:	492b      	ldr	r1, [pc, #172]	; (800120c <xTaskResumeAll+0x1c4>)
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1c59      	adds	r1, r3, #1
 800116e:	4827      	ldr	r0, [pc, #156]	; (800120c <xTaskResumeAll+0x1c4>)
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <xTaskResumeAll+0x1c8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	429a      	cmp	r2, r3
 8001188:	d302      	bcc.n	8001190 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <xTaskResumeAll+0x1cc>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <xTaskResumeAll+0x1bc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f af70 	bne.w	800107a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80011a0:	f000 fb6a 	bl	8001878 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <xTaskResumeAll+0x1d0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d010      	beq.n	80011d2 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80011b0:	f000 f836 	bl	8001220 <xTaskIncrementTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <xTaskResumeAll+0x1cc>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f1      	bne.n	80011b0 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <xTaskResumeAll+0x1d0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <xTaskResumeAll+0x1cc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80011da:	2301      	movs	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <xTaskResumeAll+0x1d4>)
 80011e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011ee:	f000 fe4f 	bl	8001e90 <vPortExitCritical>

    return xAlreadyYielded;
 80011f2:	693b      	ldr	r3, [r7, #16]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000140 	.word	0x20000140
 8001200:	20000118 	.word	0x20000118
 8001204:	200000d8 	.word	0x200000d8
 8001208:	20000120 	.word	0x20000120
 800120c:	20000044 	.word	0x20000044
 8001210:	20000040 	.word	0x20000040
 8001214:	2000012c 	.word	0x2000012c
 8001218:	20000128 	.word	0x20000128
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800122a:	4b75      	ldr	r3, [pc, #468]	; (8001400 <xTaskIncrementTick+0x1e0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80dc 	bne.w	80013ec <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001234:	4b73      	ldr	r3, [pc, #460]	; (8001404 <xTaskIncrementTick+0x1e4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800123c:	4a71      	ldr	r2, [pc, #452]	; (8001404 <xTaskIncrementTick+0x1e4>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d110      	bne.n	800126a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001248:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <xTaskIncrementTick+0x1e8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	4b6f      	ldr	r3, [pc, #444]	; (800140c <xTaskIncrementTick+0x1ec>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6d      	ldr	r2, [pc, #436]	; (8001408 <xTaskIncrementTick+0x1e8>)
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4a6d      	ldr	r2, [pc, #436]	; (800140c <xTaskIncrementTick+0x1ec>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <xTaskIncrementTick+0x1f0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a6b      	ldr	r2, [pc, #428]	; (8001410 <xTaskIncrementTick+0x1f0>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	f000 fb07 	bl	8001878 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800126a:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <xTaskIncrementTick+0x1f4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	429a      	cmp	r2, r3
 8001272:	f0c0 80a6 	bcc.w	80013c2 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <xTaskIncrementTick+0x1e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <xTaskIncrementTick+0x1f4>)
 8001282:	f04f 32ff 	mov.w	r2, #4294967295
 8001286:	601a      	str	r2, [r3, #0]
                    break;
 8001288:	e09b      	b.n	80013c2 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800128a:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <xTaskIncrementTick+0x1e8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d203      	bcs.n	80012aa <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012a2:	4a5c      	ldr	r2, [pc, #368]	; (8001414 <xTaskIncrementTick+0x1f4>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80012a8:	e08b      	b.n	80013c2 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68d2      	ldr	r2, [r2, #12]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	6892      	ldr	r2, [r2, #8]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	3304      	adds	r3, #4
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d103      	bne.n	80012d8 <xTaskIncrementTick+0xb8>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d01e      	beq.n	800132e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	6a12      	ldr	r2, [r2, #32]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	69d2      	ldr	r2, [r2, #28]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3318      	adds	r3, #24
 8001312:	429a      	cmp	r2, r3
 8001314:	d103      	bne.n	800131e <xTaskIncrementTick+0xfe>
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1e5a      	subs	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	2201      	movs	r2, #1
 8001334:	409a      	lsls	r2, r3
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <xTaskIncrementTick+0x1f8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4313      	orrs	r3, r2
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <xTaskIncrementTick+0x1f8>)
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <xTaskIncrementTick+0x1fc>)
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	3304      	adds	r3, #4
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	3204      	adds	r2, #4
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1d1a      	adds	r2, r3, #4
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <xTaskIncrementTick+0x1fc>)
 8001384:	441a      	add	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138e:	4923      	ldr	r1, [pc, #140]	; (800141c <xTaskIncrementTick+0x1fc>)
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c59      	adds	r1, r3, #1
 800139e:	481f      	ldr	r0, [pc, #124]	; (800141c <xTaskIncrementTick+0x1fc>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <xTaskIncrementTick+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	429a      	cmp	r2, r3
 80013b8:	f67f af5d 	bls.w	8001276 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 80013bc:	2301      	movs	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013c0:	e759      	b.n	8001276 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <xTaskIncrementTick+0x200>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	4914      	ldr	r1, [pc, #80]	; (800141c <xTaskIncrementTick+0x1fc>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d901      	bls.n	80013de <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <xTaskIncrementTick+0x204>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e004      	b.n	80013f6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <xTaskIncrementTick+0x208>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <xTaskIncrementTick+0x208>)
 80013f4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80013f6:	69fb      	ldr	r3, [r7, #28]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000140 	.word	0x20000140
 8001404:	2000011c 	.word	0x2000011c
 8001408:	200000d0 	.word	0x200000d0
 800140c:	200000d4 	.word	0x200000d4
 8001410:	20000130 	.word	0x20000130
 8001414:	20000138 	.word	0x20000138
 8001418:	20000120 	.word	0x20000120
 800141c:	20000044 	.word	0x20000044
 8001420:	20000040 	.word	0x20000040
 8001424:	2000012c 	.word	0x2000012c
 8001428:	20000128 	.word	0x20000128

0800142c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <vTaskSwitchContext+0x78>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <vTaskSwitchContext+0x7c>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001440:	e02a      	b.n	8001498 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <vTaskSwitchContext+0x7c>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <vTaskSwitchContext+0x80>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f1c3 031f 	rsb	r3, r3, #31
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <vTaskSwitchContext+0x84>)
 800146a:	4413      	add	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3308      	adds	r3, #8
 8001480:	429a      	cmp	r2, r3
 8001482:	d104      	bne.n	800148e <vTaskSwitchContext+0x62>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <vTaskSwitchContext+0x88>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000140 	.word	0x20000140
 80014a8:	2000012c 	.word	0x2000012c
 80014ac:	20000120 	.word	0x20000120
 80014b0:	20000044 	.word	0x20000044
 80014b4:	20000040 	.word	0x20000040

080014b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <vTaskPlaceOnEventList+0x28>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3318      	adds	r3, #24
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe9e 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80014d0:	2101      	movs	r1, #1
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f000 fbb4 	bl	8001c40 <prvAddCurrentTaskToDelayedList>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000040 	.word	0x20000040

080014e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	6a12      	ldr	r2, [r2, #32]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69d2      	ldr	r2, [r2, #28]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	3318      	adds	r3, #24
 8001516:	429a      	cmp	r2, r3
 8001518:	d103      	bne.n	8001522 <xTaskRemoveFromEventList+0x3e>
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <xTaskRemoveFromEventList+0x178>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d15e      	bne.n	80015f8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	68d2      	ldr	r2, [r2, #12]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	6892      	ldr	r2, [r2, #8]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3304      	adds	r3, #4
 800155c:	429a      	cmp	r2, r3
 800155e:	d103      	bne.n	8001568 <xTaskRemoveFromEventList+0x84>
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1e5a      	subs	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	4b37      	ldr	r3, [pc, #220]	; (8001660 <xTaskRemoveFromEventList+0x17c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4313      	orrs	r3, r2
 8001586:	4a36      	ldr	r2, [pc, #216]	; (8001660 <xTaskRemoveFromEventList+0x17c>)
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	4935      	ldr	r1, [pc, #212]	; (8001664 <xTaskRemoveFromEventList+0x180>)
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	3204      	adds	r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <xTaskRemoveFromEventList+0x180>)
 80015ce:	441a      	add	r2, r3
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	4922      	ldr	r1, [pc, #136]	; (8001664 <xTaskRemoveFromEventList+0x180>)
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <xTaskRemoveFromEventList+0x180>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	6019      	str	r1, [r3, #0]
 80015f6:	e01b      	b.n	8001630 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <xTaskRemoveFromEventList+0x184>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	61da      	str	r2, [r3, #28]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	621a      	str	r2, [r3, #32]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	3218      	adds	r2, #24
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f103 0218 	add.w	r2, r3, #24
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <xTaskRemoveFromEventList+0x184>)
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <xTaskRemoveFromEventList+0x184>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <xTaskRemoveFromEventList+0x184>)
 800162e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <xTaskRemoveFromEventList+0x188>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	429a      	cmp	r2, r3
 800163c:	d905      	bls.n	800164a <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800163e:	2301      	movs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <xTaskRemoveFromEventList+0x18c>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e001      	b.n	800164e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800164e:	69fb      	ldr	r3, [r7, #28]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3724      	adds	r7, #36	; 0x24
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000140 	.word	0x20000140
 8001660:	20000120 	.word	0x20000120
 8001664:	20000044 	.word	0x20000044
 8001668:	200000d8 	.word	0x200000d8
 800166c:	20000040 	.word	0x20000040
 8001670:	2000012c 	.word	0x2000012c

08001674 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <vTaskInternalSetTimeOutState+0x24>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <vTaskInternalSetTimeOutState+0x28>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	605a      	str	r2, [r3, #4]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000130 	.word	0x20000130
 800169c:	2000011c 	.word	0x2000011c

080016a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80016aa:	f000 fbd7 	bl	8001e5c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <xTaskCheckForTimeOut+0x8c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c6:	d102      	bne.n	80016ce <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e026      	b.n	800171c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <xTaskCheckForTimeOut+0x90>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d00a      	beq.n	80016f0 <xTaskCheckForTimeOut+0x50>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d305      	bcc.n	80016f0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e015      	b.n	800171c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d20b      	bcs.n	8001712 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffb4 	bl	8001674 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e004      	b.n	800171c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800171c:	f000 fbb8 	bl	8001e90 <vPortExitCritical>

    return xReturn;
 8001720:	697b      	ldr	r3, [r7, #20]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000011c 	.word	0x2000011c
 8001730:	20000130 	.word	0x20000130

08001734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <vTaskMissedYield+0x14>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000012c 	.word	0x2000012c

0800174c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001754:	f000 f852 	bl	80017fc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <prvIdleTask+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d9f9      	bls.n	8001754 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <prvIdleTask+0x2c>)
 8001762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001770:	e7f0      	b.n	8001754 <prvIdleTask+0x8>
 8001772:	bf00      	nop
 8001774:	20000044 	.word	0x20000044
 8001778:	e000ed04 	.word	0xe000ed04

0800177c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e00c      	b.n	80017a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <prvInitialiseTaskLists+0x60>)
 8001794:	4413      	add	r3, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fcea 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d9ef      	bls.n	8001788 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <prvInitialiseTaskLists+0x64>)
 80017aa:	f7fe fce1 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <prvInitialiseTaskLists+0x68>)
 80017b0:	f7fe fcde 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <prvInitialiseTaskLists+0x6c>)
 80017b6:	f7fe fcdb 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <prvInitialiseTaskLists+0x70>)
 80017bc:	f7fe fcd8 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <prvInitialiseTaskLists+0x74>)
 80017c2:	f7fe fcd5 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <prvInitialiseTaskLists+0x78>)
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <prvInitialiseTaskLists+0x64>)
 80017ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <prvInitialiseTaskLists+0x7c>)
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <prvInitialiseTaskLists+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000044 	.word	0x20000044
 80017e0:	200000a8 	.word	0x200000a8
 80017e4:	200000bc 	.word	0x200000bc
 80017e8:	200000d8 	.word	0x200000d8
 80017ec:	200000ec 	.word	0x200000ec
 80017f0:	20000104 	.word	0x20000104
 80017f4:	200000d0 	.word	0x200000d0
 80017f8:	200000d4 	.word	0x200000d4

080017fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001802:	e019      	b.n	8001838 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001804:	f000 fb2a 	bl	8001e5c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <prvCheckTasksWaitingTermination+0x50>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fd31 	bl	800027c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <prvCheckTasksWaitingTermination+0x54>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <prvCheckTasksWaitingTermination+0x54>)
 8001822:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <prvCheckTasksWaitingTermination+0x58>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <prvCheckTasksWaitingTermination+0x58>)
 800182c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800182e:	f000 fb2f 	bl	8001e90 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f810 	bl	8001858 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <prvCheckTasksWaitingTermination+0x58>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e1      	bne.n	8001804 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000ec 	.word	0x200000ec
 8001850:	20000118 	.word	0x20000118
 8001854:	20000100 	.word	0x20000100

08001858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fbe5 	bl	8002034 <vPortFree>
            vPortFree( pxTCB );
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fbe2 	bl	8002034 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <prvResetNextTaskUnblockTime+0x2c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d104      	bne.n	8001890 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <prvResetNextTaskUnblockTime+0x30>)
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800188e:	e005      	b.n	800189c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <prvResetNextTaskUnblockTime+0x2c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <prvResetNextTaskUnblockTime+0x30>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200000d0 	.word	0x200000d0
 80018a8:	20000138 	.word	0x20000138

080018ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8087 	beq.w	80019d2 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	4b44      	ldr	r3, [pc, #272]	; (80019dc <xTaskPriorityInherit+0x130>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d276      	bcs.n	80019c0 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db06      	blt.n	80018e8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018da:	4b40      	ldr	r3, [pc, #256]	; (80019dc <xTaskPriorityInherit+0x130>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	f1c3 0205 	rsb	r2, r3, #5
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6959      	ldr	r1, [r3, #20]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4a39      	ldr	r2, [pc, #228]	; (80019e0 <xTaskPriorityInherit+0x134>)
 80018fa:	4413      	add	r3, r2
 80018fc:	4299      	cmp	r1, r3
 80018fe:	d157      	bne.n	80019b0 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3304      	adds	r3, #4
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fcb9 	bl	800027c <uxListRemove>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2201      	movs	r2, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <xTaskPriorityInherit+0x138>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4013      	ands	r3, r2
 8001922:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <xTaskPriorityInherit+0x138>)
 8001924:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <xTaskPriorityInherit+0x130>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	2201      	movs	r2, #1
 8001936:	409a      	lsls	r2, r3
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <xTaskPriorityInherit+0x138>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4313      	orrs	r3, r2
 800193e:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <xTaskPriorityInherit+0x138>)
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	4926      	ldr	r1, [pc, #152]	; (80019e0 <xTaskPriorityInherit+0x134>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3304      	adds	r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	3204      	adds	r2, #4
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1d1a      	adds	r2, r3, #4
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <xTaskPriorityInherit+0x134>)
 8001986:	441a      	add	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	4913      	ldr	r1, [pc, #76]	; (80019e0 <xTaskPriorityInherit+0x134>)
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <xTaskPriorityInherit+0x134>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4403      	add	r3, r0
 80019ac:	6019      	str	r1, [r3, #0]
 80019ae:	e004      	b.n	80019ba <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <xTaskPriorityInherit+0x130>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e008      	b.n	80019d2 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <xTaskPriorityInherit+0x130>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d201      	bcs.n	80019d2 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80019d2:	697b      	ldr	r3, [r7, #20]
    }
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000040 	.word	0x20000040
 80019e0:	20000044 	.word	0x20000044
 80019e4:	20000120 	.word	0x20000120

080019e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d061      	beq.n	8001ad8 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d15d      	bne.n	8001ad8 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc2b 	bl	800027c <uxListRemove>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2201      	movs	r2, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <xTaskPriorityDisinherit+0xfc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <xTaskPriorityDisinherit+0xfc>)
 8001a40:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	f1c3 0205 	rsb	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <xTaskPriorityDisinherit+0xfc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <xTaskPriorityDisinherit+0xfc>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <xTaskPriorityDisinherit+0x100>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3304      	adds	r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	3204      	adds	r2, #4
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1d1a      	adds	r2, r3, #4
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <xTaskPriorityDisinherit+0x100>)
 8001aac:	441a      	add	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <xTaskPriorityDisinherit+0x100>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c59      	adds	r1, r3, #1
 8001ac6:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <xTaskPriorityDisinherit+0x100>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4403      	add	r3, r0
 8001ad2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001ad8:	697b      	ldr	r3, [r7, #20]
    }
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000120 	.word	0x20000120
 8001ae8:	20000044 	.word	0x20000044

08001aec <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8081 	beq.w	8001c08 <vTaskPriorityDisinheritAfterTimeout+0x11c>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d902      	bls.n	8001b16 <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	e002      	b.n	8001b1c <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d070      	beq.n	8001c08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d16b      	bne.n	8001c08 <vTaskPriorityDisinheritAfterTimeout+0x11c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db04      	blt.n	8001b4e <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0205 	rsb	r2, r3, #5
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6959      	ldr	r1, [r3, #20]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	4299      	cmp	r1, r3
 8001b62:	d151      	bne.n	8001c08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fb87 	bl	800027c <uxListRemove>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	2201      	movs	r2, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4013      	ands	r3, r2
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b88:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	2201      	movs	r2, #1
 8001b90:	409a      	lsls	r2, r3
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	491b      	ldr	r1, [pc, #108]	; (8001c10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	3304      	adds	r3, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	3204      	adds	r2, #4
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	1d1a      	adds	r2, r3, #4
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001be0:	441a      	add	r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	4909      	ldr	r1, [pc, #36]	; (8001c10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1c59      	adds	r1, r3, #1
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4403      	add	r3, r0
 8001c06:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000044 	.word	0x20000044
 8001c14:	20000120 	.word	0x20000120

08001c18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c2a:	3201      	adds	r2, #1
 8001c2c:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
    }
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000040 	.word	0x20000040

08001c40 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fb10 	bl	800027c <uxListRemove>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10b      	bne.n	8001c7a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <prvAddCurrentTaskToDelayedList+0xec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4013      	ands	r3, r2
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <prvAddCurrentTaskToDelayedList+0xec>)
 8001c78:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d124      	bne.n	8001ccc <prvAddCurrentTaskToDelayedList+0x8c>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d021      	beq.n	8001ccc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	6892      	ldr	r2, [r2, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	3204      	adds	r2, #4
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	1d1a      	adds	r2, r3, #4
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001cca:	e026      	b.n	8001d1a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d209      	bcs.n	8001cf8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3304      	adds	r3, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f7fe fa8b 	bl	800020c <vListInsert>
}
 8001cf6:	e010      	b.n	8001d1a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3304      	adds	r3, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7fe fa81 	bl	800020c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d202      	bcs.n	8001d1a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000011c 	.word	0x2000011c
 8001d28:	20000040 	.word	0x20000040
 8001d2c:	20000120 	.word	0x20000120
 8001d30:	20000104 	.word	0x20000104
 8001d34:	200000d4 	.word	0x200000d4
 8001d38:	200000d0 	.word	0x200000d0
 8001d3c:	20000138 	.word	0x20000138

08001d40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b04      	subs	r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f023 0201 	bic.w	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b04      	subs	r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <pxPortInitialiseStack+0x54>)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b14      	subs	r3, #20
 8001d7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b20      	subs	r3, #32
 8001d86:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	08001d99 	.word	0x08001d99

08001d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001da2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	607b      	str	r3, [r7, #4]
    }
 8001db4:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001db6:	bf00      	nop
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0fc      	beq.n	8001db8 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	0000      	movs	r0, r0
 8001dcc:	0000      	movs	r0, r0
	...

08001dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <pxCurrentTCBConst2>)
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	6808      	ldr	r0, [r1, #0]
 8001dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dda:	f380 8809 	msr	PSP, r0
 8001dde:	f3bf 8f6f 	isb	sy
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f380 8811 	msr	BASEPRI, r0
 8001dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8001dee:	4770      	bx	lr

08001df0 <pxCurrentTCBConst2>:
 8001df0:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop

08001df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <prvPortStartFirstTask+0x1c>)
 8001dfa:	6800      	ldr	r0, [r0, #0]
 8001dfc:	6800      	ldr	r0, [r0, #0]
 8001dfe:	f380 8808 	msr	MSP, r0
 8001e02:	b662      	cpsie	i
 8001e04:	b661      	cpsie	f
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	df00      	svc	0
 8001e10:	bf00      	nop
 8001e12:	0000      	.short	0x0000
 8001e14:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop

08001e1c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <xPortStartScheduler+0x38>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <xPortStartScheduler+0x38>)
 8001e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <xPortStartScheduler+0x38>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <xPortStartScheduler+0x38>)
 8001e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e36:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001e38:	f000 f890 	bl	8001f5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <xPortStartScheduler+0x3c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001e42:	f7ff ffd9 	bl	8001df8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001e46:	f7ff faf1 	bl	800142c <vTaskSwitchContext>
    prvTaskExitError();
 8001e4a:	f7ff ffa5 	bl	8001d98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	e000ed20 	.word	0xe000ed20
 8001e58:	20000004 	.word	0x20000004

08001e5c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
        __asm volatile
 8001e62:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	607b      	str	r3, [r7, #4]
    }
 8001e74:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <vPortEnterCritical+0x30>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <vPortEnterCritical+0x30>)
 8001e7e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000004 	.word	0x20000004

08001e90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <vPortExitCritical+0x30>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <vPortExitCritical+0x30>)
 8001e9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <vPortExitCritical+0x30>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <vPortExitCritical+0x24>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001eb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000004 	.word	0x20000004
	...

08001ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ed0:	f3ef 8009 	mrs	r0, PSP
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <pxCurrentTCBConst>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ee0:	6010      	str	r0, [r2, #0]
 8001ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001ee6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001eea:	f380 8811 	msr	BASEPRI, r0
 8001eee:	f7ff fa9d 	bl	800142c <vTaskSwitchContext>
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f380 8811 	msr	BASEPRI, r0
 8001efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	6808      	ldr	r0, [r1, #0]
 8001f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f06:	f380 8809 	msr	PSP, r0
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	4770      	bx	lr

08001f10 <pxCurrentTCBConst>:
 8001f10:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop

08001f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	607b      	str	r3, [r7, #4]
    }
 8001f30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001f32:	f7ff f975 	bl	8001220 <xTaskIncrementTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <SysTick_Handler+0x40>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f383 8811 	msr	BASEPRI, r3
    }
 8001f4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	e000ed04 	.word	0xe000ed04

08001f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <vPortSetupTimerInterrupt+0x28>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <vPortSetupTimerInterrupt+0x2c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <vPortSetupTimerInterrupt+0x30>)
 8001f6e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001f72:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <vPortSetupTimerInterrupt+0x28>)
 8001f76:	2207      	movs	r2, #7
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010
 8001f88:	e000e018 	.word	0xe000e018
 8001f8c:	e000e014 	.word	0xe000e014

08001f90 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00e      	beq.n	8001fc4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f023 0307 	bic.w	r3, r3, #7
 8001fac:	3308      	adds	r3, #8
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d205      	bcs.n	8001fc0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	3308      	adds	r3, #8
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	e001      	b.n	8001fc4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001fc4:	f7ff f832 	bl	800102c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <pvPortMalloc+0x98>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <pvPortMalloc+0x9c>)
 8001fd2:	f023 0307 	bic.w	r3, r3, #7
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <pvPortMalloc+0x98>)
 8001fda:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01b      	beq.n	800201a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <pvPortMalloc+0xa0>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001fea:	f643 6277 	movw	r2, #15991	; 0x3e77
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d813      	bhi.n	800201a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <pvPortMalloc+0xa0>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <pvPortMalloc+0xa0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90b      	bls.n	800201a <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <pvPortMalloc+0x98>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <pvPortMalloc+0xa0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <pvPortMalloc+0xa0>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a06      	ldr	r2, [pc, #24]	; (8002030 <pvPortMalloc+0xa0>)
 8002018:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800201a:	f7ff f815 	bl	8001048 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20003fc8 	.word	0x20003fc8
 800202c:	2000014b 	.word	0x2000014b
 8002030:	20003fc4 	.word	0x20003fc4

08002034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <DMS_init>:
 */

#include "DMS.h"


void DMS_init(){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
	PIN_config PINx={TOUCH1,INPUT_FI,0};
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <DMS_init+0x58>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	4619      	mov	r1, r3
 800205a:	4812      	ldr	r0, [pc, #72]	; (80020a4 <DMS_init+0x5c>)
 800205c:	f001 fc28 	bl	80038b0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH2,INPUT_FI,0};
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <DMS_init+0x60>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	480d      	ldr	r0, [pc, #52]	; (80020a4 <DMS_init+0x5c>)
 800206e:	f001 fc1f 	bl	80038b0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH3,INPUT_FI,0};
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <DMS_init+0x64>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4619      	mov	r1, r3
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <DMS_init+0x5c>)
 8002080:	f001 fc16 	bl	80038b0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH4,INPUT_FI,0};
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <DMS_init+0x68>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4619      	mov	r1, r3
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <DMS_init+0x5c>)
 8002092:	f001 fc0d 	bl	80038b0 <MCAL_GPIO_init>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	080055a8 	.word	0x080055a8
 80020a4:	40010800 	.word	0x40010800
 80020a8:	080055ac 	.word	0x080055ac
 80020ac:	080055b0 	.word	0x080055b0
 80020b0:	080055b4 	.word	0x080055b4

080020b4 <DMS_read>:


uint8_t DMS_read(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 80020b8:	2101      	movs	r1, #1
 80020ba:	481f      	ldr	r0, [pc, #124]	; (8002138 <DMS_read+0x84>)
 80020bc:	f001 fd0a 	bl	8003ad4 <MCAL_Read_PIN>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d114      	bne.n	80020f0 <DMS_read+0x3c>
 80020c6:	210c      	movs	r1, #12
 80020c8:	481b      	ldr	r0, [pc, #108]	; (8002138 <DMS_read+0x84>)
 80020ca:	f001 fd03 	bl	8003ad4 <MCAL_Read_PIN>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <DMS_read+0x3c>
 80020d4:	210b      	movs	r1, #11
 80020d6:	4818      	ldr	r0, [pc, #96]	; (8002138 <DMS_read+0x84>)
 80020d8:	f001 fcfc 	bl	8003ad4 <MCAL_Read_PIN>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <DMS_read+0x3c>
 80020e2:	2108      	movs	r1, #8
 80020e4:	4814      	ldr	r0, [pc, #80]	; (8002138 <DMS_read+0x84>)
 80020e6:	f001 fcf5 	bl	8003ad4 <MCAL_Read_PIN>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <DMS_read+0x7e>
		_TIM1_delay_ms(100);
 80020f0:	2064      	movs	r0, #100	; 0x64
 80020f2:	f002 fa0f 	bl	8004514 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 80020f6:	2101      	movs	r1, #1
 80020f8:	480f      	ldr	r0, [pc, #60]	; (8002138 <DMS_read+0x84>)
 80020fa:	f001 fceb 	bl	8003ad4 <MCAL_Read_PIN>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d114      	bne.n	800212e <DMS_read+0x7a>
 8002104:	210c      	movs	r1, #12
 8002106:	480c      	ldr	r0, [pc, #48]	; (8002138 <DMS_read+0x84>)
 8002108:	f001 fce4 	bl	8003ad4 <MCAL_Read_PIN>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <DMS_read+0x7a>
 8002112:	210b      	movs	r1, #11
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <DMS_read+0x84>)
 8002116:	f001 fcdd 	bl	8003ad4 <MCAL_Read_PIN>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <DMS_read+0x7a>
 8002120:	2108      	movs	r1, #8
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <DMS_read+0x84>)
 8002124:	f001 fcd6 	bl	8003ad4 <MCAL_Read_PIN>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <DMS_read+0x7e>
		return 1;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <DMS_read+0x80>
		}
	}
	return 0;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010800 	.word	0x40010800

0800213c <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <LUNA_CallBack+0x180>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8002148:	485d      	ldr	r0, [pc, #372]	; (80022c0 <LUNA_CallBack+0x184>)
 800214a:	f002 fbbf 	bl	80048cc <MCAL_USART_ReciveData>
 800214e:	4603      	mov	r3, r0
 8002150:	2b59      	cmp	r3, #89	; 0x59
 8002152:	f040 80b1 	bne.w	80022b8 <LUNA_CallBack+0x17c>
			x++;
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <LUNA_CallBack+0x180>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <LUNA_CallBack+0x180>)
 8002160:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 8002162:	e0a9      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==1){
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <LUNA_CallBack+0x180>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10d      	bne.n	8002188 <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 800216c:	4854      	ldr	r0, [pc, #336]	; (80022c0 <LUNA_CallBack+0x184>)
 800216e:	f002 fbad 	bl	80048cc <MCAL_USART_ReciveData>
 8002172:	4603      	mov	r3, r0
 8002174:	2b59      	cmp	r3, #89	; 0x59
 8002176:	f040 809f 	bne.w	80022b8 <LUNA_CallBack+0x17c>
			x++;
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <LUNA_CallBack+0x180>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <LUNA_CallBack+0x180>)
 8002184:	701a      	strb	r2, [r3, #0]
}
 8002186:	e097      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==2){
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <LUNA_CallBack+0x180>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d110      	bne.n	80021b2 <LUNA_CallBack+0x76>
		x++;
 8002190:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <LUNA_CallBack+0x180>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <LUNA_CallBack+0x180>)
 800219a:	701a      	strb	r2, [r3, #0]
		LUNA_dis=0;
 800219c:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <LUNA_CallBack+0x188>)
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80021a2:	4847      	ldr	r0, [pc, #284]	; (80022c0 <LUNA_CallBack+0x184>)
 80021a4:	f002 fb92 	bl	80048cc <MCAL_USART_ReciveData>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <LUNA_CallBack+0x188>)
 80021ae:	801a      	strh	r2, [r3, #0]
}
 80021b0:	e082      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==3){
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <LUNA_CallBack+0x180>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d114      	bne.n	80021e4 <LUNA_CallBack+0xa8>
		x++;
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <LUNA_CallBack+0x180>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <LUNA_CallBack+0x180>)
 80021c4:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80021c6:	483e      	ldr	r0, [pc, #248]	; (80022c0 <LUNA_CallBack+0x184>)
 80021c8:	f002 fb80 	bl	80048cc <MCAL_USART_ReciveData>
 80021cc:	4603      	mov	r3, r0
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <LUNA_CallBack+0x188>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <LUNA_CallBack+0x188>)
 80021e0:	801a      	strh	r2, [r3, #0]
}
 80021e2:	e069      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==4){
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <LUNA_CallBack+0x180>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d110      	bne.n	800220e <LUNA_CallBack+0xd2>
		x++;
 80021ec:	4b33      	ldr	r3, [pc, #204]	; (80022bc <LUNA_CallBack+0x180>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <LUNA_CallBack+0x180>)
 80021f6:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <LUNA_CallBack+0x18c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80021fe:	4830      	ldr	r0, [pc, #192]	; (80022c0 <LUNA_CallBack+0x184>)
 8002200:	f002 fb64 	bl	80048cc <MCAL_USART_ReciveData>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <LUNA_CallBack+0x18c>)
 800220a:	801a      	strh	r2, [r3, #0]
}
 800220c:	e054      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==5){
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <LUNA_CallBack+0x180>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d114      	bne.n	8002240 <LUNA_CallBack+0x104>
		x++;
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <LUNA_CallBack+0x180>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <LUNA_CallBack+0x180>)
 8002220:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8002222:	4827      	ldr	r0, [pc, #156]	; (80022c0 <LUNA_CallBack+0x184>)
 8002224:	f002 fb52 	bl	80048cc <MCAL_USART_ReciveData>
 8002228:	4603      	mov	r3, r0
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <LUNA_CallBack+0x18c>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21b      	sxth	r3, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <LUNA_CallBack+0x18c>)
 800223c:	801a      	strh	r2, [r3, #0]
}
 800223e:	e03b      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==6){
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <LUNA_CallBack+0x180>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d110      	bne.n	800226a <LUNA_CallBack+0x12e>
		x++;
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <LUNA_CallBack+0x180>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <LUNA_CallBack+0x180>)
 8002252:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <LUNA_CallBack+0x190>)
 8002256:	2200      	movs	r2, #0
 8002258:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 800225a:	4819      	ldr	r0, [pc, #100]	; (80022c0 <LUNA_CallBack+0x184>)
 800225c:	f002 fb36 	bl	80048cc <MCAL_USART_ReciveData>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <LUNA_CallBack+0x190>)
 8002266:	801a      	strh	r2, [r3, #0]
}
 8002268:	e026      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==7){
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <LUNA_CallBack+0x180>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b07      	cmp	r3, #7
 8002270:	d114      	bne.n	800229c <LUNA_CallBack+0x160>
		x++;
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <LUNA_CallBack+0x180>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <LUNA_CallBack+0x180>)
 800227c:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 800227e:	4810      	ldr	r0, [pc, #64]	; (80022c0 <LUNA_CallBack+0x184>)
 8002280:	f002 fb24 	bl	80048cc <MCAL_USART_ReciveData>
 8002284:	4603      	mov	r3, r0
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	b21a      	sxth	r2, r3
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <LUNA_CallBack+0x190>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b21b      	sxth	r3, r3
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <LUNA_CallBack+0x190>)
 8002298:	801a      	strh	r2, [r3, #0]
}
 800229a:	e00d      	b.n	80022b8 <LUNA_CallBack+0x17c>
	}else if(x==8){
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <LUNA_CallBack+0x180>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d109      	bne.n	80022b8 <LUNA_CallBack+0x17c>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <LUNA_CallBack+0x184>)
 80022a6:	f002 fb11 	bl	80048cc <MCAL_USART_ReciveData>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <LUNA_CallBack+0x194>)
 80022b0:	701a      	strb	r2, [r3, #0]
		x=0;
 80022b2:	4b02      	ldr	r3, [pc, #8]	; (80022bc <LUNA_CallBack+0x180>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20003fd3 	.word	0x20003fd3
 80022c0:	40004800 	.word	0x40004800
 80022c4:	20003fcc 	.word	0x20003fcc
 80022c8:	20003fce 	.word	0x20003fce
 80022cc:	20003fd0 	.word	0x20003fd0
 80022d0:	20003fd2 	.word	0x20003fd2

080022d4 <LUNA_INIT>:
	NVIC_ISER1 |=(1<<(USART1_IRQ-32));

}

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 80022e4:	4b8e      	ldr	r3, [pc, #568]	; (8002520 <LUNA_INIT+0x24c>)
 80022e6:	f107 0408 	add.w	r4, r7, #8
 80022ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4619      	mov	r1, r3
 80022f6:	488b      	ldr	r0, [pc, #556]	; (8002524 <LUNA_INIT+0x250>)
 80022f8:	f002 f93c 	bl	8004574 <MCAL_USART_init>
//	LUNA_Disable();
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80022fc:	215a      	movs	r1, #90	; 0x5a
 80022fe:	4889      	ldr	r0, [pc, #548]	; (8002524 <LUNA_INIT+0x250>)
 8002300:	f002 faa4 	bl	800484c <MCAL_USART_SendData>
 8002304:	2108      	movs	r1, #8
 8002306:	4887      	ldr	r0, [pc, #540]	; (8002524 <LUNA_INIT+0x250>)
 8002308:	f002 faa0 	bl	800484c <MCAL_USART_SendData>
 800230c:	2106      	movs	r1, #6
 800230e:	4885      	ldr	r0, [pc, #532]	; (8002524 <LUNA_INIT+0x250>)
 8002310:	f002 fa9c 	bl	800484c <MCAL_USART_SendData>
 8002314:	2100      	movs	r1, #0
 8002316:	4883      	ldr	r0, [pc, #524]	; (8002524 <LUNA_INIT+0x250>)
 8002318:	f002 fa98 	bl	800484c <MCAL_USART_SendData>
 800231c:	21c2      	movs	r1, #194	; 0xc2
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <LUNA_INIT+0x250>)
 8002320:	f002 fa94 	bl	800484c <MCAL_USART_SendData>
 8002324:	2101      	movs	r1, #1
 8002326:	487f      	ldr	r0, [pc, #508]	; (8002524 <LUNA_INIT+0x250>)
 8002328:	f002 fa90 	bl	800484c <MCAL_USART_SendData>
 800232c:	2100      	movs	r1, #0
 800232e:	487d      	ldr	r0, [pc, #500]	; (8002524 <LUNA_INIT+0x250>)
 8002330:	f002 fa8c 	bl	800484c <MCAL_USART_SendData>
 8002334:	2100      	movs	r1, #0
 8002336:	487b      	ldr	r0, [pc, #492]	; (8002524 <LUNA_INIT+0x250>)
 8002338:	f002 fa88 	bl	800484c <MCAL_USART_SendData>
	switch (mode){
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d048      	beq.n	80023d4 <LUNA_INIT+0x100>
 8002342:	2b02      	cmp	r3, #2
 8002344:	dc57      	bgt.n	80023f6 <LUNA_INIT+0x122>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <LUNA_INIT+0x7c>
 800234a:	2b01      	cmp	r3, #1
 800234c:	d019      	beq.n	8002382 <LUNA_INIT+0xae>
 800234e:	e052      	b.n	80023f6 <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002350:	215a      	movs	r1, #90	; 0x5a
 8002352:	4874      	ldr	r0, [pc, #464]	; (8002524 <LUNA_INIT+0x250>)
 8002354:	f002 fa7a 	bl	800484c <MCAL_USART_SendData>
 8002358:	2106      	movs	r1, #6
 800235a:	4872      	ldr	r0, [pc, #456]	; (8002524 <LUNA_INIT+0x250>)
 800235c:	f002 fa76 	bl	800484c <MCAL_USART_SendData>
 8002360:	2103      	movs	r1, #3
 8002362:	4870      	ldr	r0, [pc, #448]	; (8002524 <LUNA_INIT+0x250>)
 8002364:	f002 fa72 	bl	800484c <MCAL_USART_SendData>
 8002368:	2164      	movs	r1, #100	; 0x64
 800236a:	486e      	ldr	r0, [pc, #440]	; (8002524 <LUNA_INIT+0x250>)
 800236c:	f002 fa6e 	bl	800484c <MCAL_USART_SendData>
 8002370:	2100      	movs	r1, #0
 8002372:	486c      	ldr	r0, [pc, #432]	; (8002524 <LUNA_INIT+0x250>)
 8002374:	f002 fa6a 	bl	800484c <MCAL_USART_SendData>
 8002378:	2100      	movs	r1, #0
 800237a:	486a      	ldr	r0, [pc, #424]	; (8002524 <LUNA_INIT+0x250>)
 800237c:	f002 fa66 	bl	800484c <MCAL_USART_SendData>
		break;
 8002380:	e039      	b.n	80023f6 <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002382:	215a      	movs	r1, #90	; 0x5a
 8002384:	4867      	ldr	r0, [pc, #412]	; (8002524 <LUNA_INIT+0x250>)
 8002386:	f002 fa61 	bl	800484c <MCAL_USART_SendData>
 800238a:	2106      	movs	r1, #6
 800238c:	4865      	ldr	r0, [pc, #404]	; (8002524 <LUNA_INIT+0x250>)
 800238e:	f002 fa5d 	bl	800484c <MCAL_USART_SendData>
 8002392:	2103      	movs	r1, #3
 8002394:	4863      	ldr	r0, [pc, #396]	; (8002524 <LUNA_INIT+0x250>)
 8002396:	f002 fa59 	bl	800484c <MCAL_USART_SendData>
 800239a:	2100      	movs	r1, #0
 800239c:	4861      	ldr	r0, [pc, #388]	; (8002524 <LUNA_INIT+0x250>)
 800239e:	f002 fa55 	bl	800484c <MCAL_USART_SendData>
 80023a2:	2100      	movs	r1, #0
 80023a4:	485f      	ldr	r0, [pc, #380]	; (8002524 <LUNA_INIT+0x250>)
 80023a6:	f002 fa51 	bl	800484c <MCAL_USART_SendData>
 80023aa:	2100      	movs	r1, #0
 80023ac:	485d      	ldr	r0, [pc, #372]	; (8002524 <LUNA_INIT+0x250>)
 80023ae:	f002 fa4d 	bl	800484c <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80023b2:	215a      	movs	r1, #90	; 0x5a
 80023b4:	485b      	ldr	r0, [pc, #364]	; (8002524 <LUNA_INIT+0x250>)
 80023b6:	f002 fa49 	bl	800484c <MCAL_USART_SendData>
 80023ba:	2104      	movs	r1, #4
 80023bc:	4859      	ldr	r0, [pc, #356]	; (8002524 <LUNA_INIT+0x250>)
 80023be:	f002 fa45 	bl	800484c <MCAL_USART_SendData>
 80023c2:	2104      	movs	r1, #4
 80023c4:	4857      	ldr	r0, [pc, #348]	; (8002524 <LUNA_INIT+0x250>)
 80023c6:	f002 fa41 	bl	800484c <MCAL_USART_SendData>
 80023ca:	2100      	movs	r1, #0
 80023cc:	4855      	ldr	r0, [pc, #340]	; (8002524 <LUNA_INIT+0x250>)
 80023ce:	f002 fa3d 	bl	800484c <MCAL_USART_SendData>
		break;
 80023d2:	e010      	b.n	80023f6 <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80023d4:	215a      	movs	r1, #90	; 0x5a
 80023d6:	4853      	ldr	r0, [pc, #332]	; (8002524 <LUNA_INIT+0x250>)
 80023d8:	f002 fa38 	bl	800484c <MCAL_USART_SendData>
 80023dc:	2104      	movs	r1, #4
 80023de:	4851      	ldr	r0, [pc, #324]	; (8002524 <LUNA_INIT+0x250>)
 80023e0:	f002 fa34 	bl	800484c <MCAL_USART_SendData>
 80023e4:	213b      	movs	r1, #59	; 0x3b
 80023e6:	484f      	ldr	r0, [pc, #316]	; (8002524 <LUNA_INIT+0x250>)
 80023e8:	f002 fa30 	bl	800484c <MCAL_USART_SendData>
 80023ec:	2100      	movs	r1, #0
 80023ee:	484d      	ldr	r0, [pc, #308]	; (8002524 <LUNA_INIT+0x250>)
 80023f0:	f002 fa2c 	bl	800484c <MCAL_USART_SendData>
		break;
 80023f4:	bf00      	nop
	}
	switch (format)
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	f200 808d 	bhi.w	8002518 <LUNA_INIT+0x244>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <LUNA_INIT+0x130>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002447 	.word	0x08002447
 800240c:	08002471 	.word	0x08002471
 8002410:	0800249b 	.word	0x0800249b
 8002414:	080024c5 	.word	0x080024c5
 8002418:	080024ef 	.word	0x080024ef
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800241c:	215a      	movs	r1, #90	; 0x5a
 800241e:	4841      	ldr	r0, [pc, #260]	; (8002524 <LUNA_INIT+0x250>)
 8002420:	f002 fa14 	bl	800484c <MCAL_USART_SendData>
 8002424:	2105      	movs	r1, #5
 8002426:	483f      	ldr	r0, [pc, #252]	; (8002524 <LUNA_INIT+0x250>)
 8002428:	f002 fa10 	bl	800484c <MCAL_USART_SendData>
 800242c:	2105      	movs	r1, #5
 800242e:	483d      	ldr	r0, [pc, #244]	; (8002524 <LUNA_INIT+0x250>)
 8002430:	f002 fa0c 	bl	800484c <MCAL_USART_SendData>
 8002434:	2101      	movs	r1, #1
 8002436:	483b      	ldr	r0, [pc, #236]	; (8002524 <LUNA_INIT+0x250>)
 8002438:	f002 fa08 	bl	800484c <MCAL_USART_SendData>
 800243c:	2100      	movs	r1, #0
 800243e:	4839      	ldr	r0, [pc, #228]	; (8002524 <LUNA_INIT+0x250>)
 8002440:	f002 fa04 	bl	800484c <MCAL_USART_SendData>
		break;
 8002444:	e068      	b.n	8002518 <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002446:	215a      	movs	r1, #90	; 0x5a
 8002448:	4836      	ldr	r0, [pc, #216]	; (8002524 <LUNA_INIT+0x250>)
 800244a:	f002 f9ff 	bl	800484c <MCAL_USART_SendData>
 800244e:	2105      	movs	r1, #5
 8002450:	4834      	ldr	r0, [pc, #208]	; (8002524 <LUNA_INIT+0x250>)
 8002452:	f002 f9fb 	bl	800484c <MCAL_USART_SendData>
 8002456:	2105      	movs	r1, #5
 8002458:	4832      	ldr	r0, [pc, #200]	; (8002524 <LUNA_INIT+0x250>)
 800245a:	f002 f9f7 	bl	800484c <MCAL_USART_SendData>
 800245e:	2102      	movs	r1, #2
 8002460:	4830      	ldr	r0, [pc, #192]	; (8002524 <LUNA_INIT+0x250>)
 8002462:	f002 f9f3 	bl	800484c <MCAL_USART_SendData>
 8002466:	2100      	movs	r1, #0
 8002468:	482e      	ldr	r0, [pc, #184]	; (8002524 <LUNA_INIT+0x250>)
 800246a:	f002 f9ef 	bl	800484c <MCAL_USART_SendData>
		break;
 800246e:	e053      	b.n	8002518 <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002470:	215a      	movs	r1, #90	; 0x5a
 8002472:	482c      	ldr	r0, [pc, #176]	; (8002524 <LUNA_INIT+0x250>)
 8002474:	f002 f9ea 	bl	800484c <MCAL_USART_SendData>
 8002478:	2105      	movs	r1, #5
 800247a:	482a      	ldr	r0, [pc, #168]	; (8002524 <LUNA_INIT+0x250>)
 800247c:	f002 f9e6 	bl	800484c <MCAL_USART_SendData>
 8002480:	2105      	movs	r1, #5
 8002482:	4828      	ldr	r0, [pc, #160]	; (8002524 <LUNA_INIT+0x250>)
 8002484:	f002 f9e2 	bl	800484c <MCAL_USART_SendData>
 8002488:	2106      	movs	r1, #6
 800248a:	4826      	ldr	r0, [pc, #152]	; (8002524 <LUNA_INIT+0x250>)
 800248c:	f002 f9de 	bl	800484c <MCAL_USART_SendData>
 8002490:	2100      	movs	r1, #0
 8002492:	4824      	ldr	r0, [pc, #144]	; (8002524 <LUNA_INIT+0x250>)
 8002494:	f002 f9da 	bl	800484c <MCAL_USART_SendData>
		break;
 8002498:	e03e      	b.n	8002518 <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800249a:	215a      	movs	r1, #90	; 0x5a
 800249c:	4821      	ldr	r0, [pc, #132]	; (8002524 <LUNA_INIT+0x250>)
 800249e:	f002 f9d5 	bl	800484c <MCAL_USART_SendData>
 80024a2:	2105      	movs	r1, #5
 80024a4:	481f      	ldr	r0, [pc, #124]	; (8002524 <LUNA_INIT+0x250>)
 80024a6:	f002 f9d1 	bl	800484c <MCAL_USART_SendData>
 80024aa:	2105      	movs	r1, #5
 80024ac:	481d      	ldr	r0, [pc, #116]	; (8002524 <LUNA_INIT+0x250>)
 80024ae:	f002 f9cd 	bl	800484c <MCAL_USART_SendData>
 80024b2:	2107      	movs	r1, #7
 80024b4:	481b      	ldr	r0, [pc, #108]	; (8002524 <LUNA_INIT+0x250>)
 80024b6:	f002 f9c9 	bl	800484c <MCAL_USART_SendData>
 80024ba:	2100      	movs	r1, #0
 80024bc:	4819      	ldr	r0, [pc, #100]	; (8002524 <LUNA_INIT+0x250>)
 80024be:	f002 f9c5 	bl	800484c <MCAL_USART_SendData>
		break;
 80024c2:	e029      	b.n	8002518 <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80024c4:	215a      	movs	r1, #90	; 0x5a
 80024c6:	4817      	ldr	r0, [pc, #92]	; (8002524 <LUNA_INIT+0x250>)
 80024c8:	f002 f9c0 	bl	800484c <MCAL_USART_SendData>
 80024cc:	2105      	movs	r1, #5
 80024ce:	4815      	ldr	r0, [pc, #84]	; (8002524 <LUNA_INIT+0x250>)
 80024d0:	f002 f9bc 	bl	800484c <MCAL_USART_SendData>
 80024d4:	2105      	movs	r1, #5
 80024d6:	4813      	ldr	r0, [pc, #76]	; (8002524 <LUNA_INIT+0x250>)
 80024d8:	f002 f9b8 	bl	800484c <MCAL_USART_SendData>
 80024dc:	2108      	movs	r1, #8
 80024de:	4811      	ldr	r0, [pc, #68]	; (8002524 <LUNA_INIT+0x250>)
 80024e0:	f002 f9b4 	bl	800484c <MCAL_USART_SendData>
 80024e4:	2100      	movs	r1, #0
 80024e6:	480f      	ldr	r0, [pc, #60]	; (8002524 <LUNA_INIT+0x250>)
 80024e8:	f002 f9b0 	bl	800484c <MCAL_USART_SendData>
		break;
 80024ec:	e014      	b.n	8002518 <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80024ee:	215a      	movs	r1, #90	; 0x5a
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <LUNA_INIT+0x250>)
 80024f2:	f002 f9ab 	bl	800484c <MCAL_USART_SendData>
 80024f6:	2105      	movs	r1, #5
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <LUNA_INIT+0x250>)
 80024fa:	f002 f9a7 	bl	800484c <MCAL_USART_SendData>
 80024fe:	2105      	movs	r1, #5
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <LUNA_INIT+0x250>)
 8002502:	f002 f9a3 	bl	800484c <MCAL_USART_SendData>
 8002506:	2109      	movs	r1, #9
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <LUNA_INIT+0x250>)
 800250a:	f002 f99f 	bl	800484c <MCAL_USART_SendData>
 800250e:	2100      	movs	r1, #0
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <LUNA_INIT+0x250>)
 8002512:	f002 f99b 	bl	800484c <MCAL_USART_SendData>
		break;
 8002516:	bf00      	nop
	}
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	080055b8 	.word	0x080055b8
 8002524:	40004800 	.word	0x40004800

08002528 <TFT_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TFT_init(RGB_fromat RGB){
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af04      	add	r7, sp, #16
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]

	/**************init the moudles used*************/
	SPI_Config_t TFT_Config={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_2,idle_0,first_clock};
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	2301      	movs	r3, #1
 8002542:	743b      	strb	r3, [r7, #16]
 8002544:	2301      	movs	r3, #1
 8002546:	747b      	strb	r3, [r7, #17]
	PIN_config PINx={TFT_RESET_PIN,OUTPUT_PP,SPEED_10};
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <TFT_init+0xf4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
	MCAL_SPI_init(TFT_SPI_inistant, &TFT_Config);
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	4619      	mov	r1, r3
 8002554:	4832      	ldr	r0, [pc, #200]	; (8002620 <TFT_init+0xf8>)
 8002556:	f001 fc75 	bl	8003e44 <MCAL_SPI_init>
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	4619      	mov	r1, r3
 8002560:	4830      	ldr	r0, [pc, #192]	; (8002624 <TFT_init+0xfc>)
 8002562:	f001 f9a5 	bl	80038b0 <MCAL_GPIO_init>
	PINx.PIN_number =TFT_A0_PIN;
 8002566:	2303      	movs	r3, #3
 8002568:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	4619      	mov	r1, r3
 8002570:	482c      	ldr	r0, [pc, #176]	; (8002624 <TFT_init+0xfc>)
 8002572:	f001 f99d 	bl	80038b0 <MCAL_GPIO_init>
	/**************Start the init*************/
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002576:	2201      	movs	r2, #1
 8002578:	2104      	movs	r1, #4
 800257a:	482a      	ldr	r0, [pc, #168]	; (8002624 <TFT_init+0xfc>)
 800257c:	f001 fa82 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_LOW);
 8002580:	2200      	movs	r2, #0
 8002582:	2102      	movs	r1, #2
 8002584:	4827      	ldr	r0, [pc, #156]	; (8002624 <TFT_init+0xfc>)
 8002586:	f001 fa7d 	bl	8003a84 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800258a:	2078      	movs	r0, #120	; 0x78
 800258c:	f001 ffc2 	bl	8004514 <_TIM1_delay_ms>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_HIGH);
 8002590:	2201      	movs	r2, #1
 8002592:	2102      	movs	r1, #2
 8002594:	4823      	ldr	r0, [pc, #140]	; (8002624 <TFT_init+0xfc>)
 8002596:	f001 fa75 	bl	8003a84 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800259a:	2078      	movs	r0, #120	; 0x78
 800259c:	f001 ffba 	bl	8004514 <_TIM1_delay_ms>

	TFT_send_command(0x01);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f000 f91b 	bl	80027dc <TFT_send_command>
	_TIM1_delay_ms( 120);
 80025a6:	2078      	movs	r0, #120	; 0x78
 80025a8:	f001 ffb4 	bl	8004514 <_TIM1_delay_ms>

	TFT_send_command(TFT_Sleep_Out_MODE);
 80025ac:	2011      	movs	r0, #17
 80025ae:	f000 f915 	bl	80027dc <TFT_send_command>
	_TIM1_delay_ms( 110);
 80025b2:	206e      	movs	r0, #110	; 0x6e
 80025b4:	f001 ffae 	bl	8004514 <_TIM1_delay_ms>

	TFT_send_command(TFT_Pixel_Format_MODE); // Interface Pixel Format
 80025b8:	203a      	movs	r0, #58	; 0x3a
 80025ba:	f000 f90f 	bl	80027dc <TFT_send_command>
	TFT_send_data(RGB); //18 bit
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f92d 	bl	8002820 <TFT_send_data>
	_TIM1_delay_ms( 120);
 80025c6:	2078      	movs	r0, #120	; 0x78
 80025c8:	f001 ffa4 	bl	8004514 <_TIM1_delay_ms>

//		TFT_send_command(0x23); // Interface Pixel Format
	TFT_send_command(0x36);
 80025cc:	2036      	movs	r0, #54	; 0x36
 80025ce:	f000 f905 	bl	80027dc <TFT_send_command>
	_TIM1_delay_ms( 120);
 80025d2:	2078      	movs	r0, #120	; 0x78
 80025d4:	f001 ff9e 	bl	8004514 <_TIM1_delay_ms>

//	TFT_send_data(0b00011000 );
	TFT_send_data(0b10000000 );
 80025d8:	2080      	movs	r0, #128	; 0x80
 80025da:	f000 f921 	bl	8002820 <TFT_send_data>

	_TIM1_delay_ms( 120);
 80025de:	2078      	movs	r0, #120	; 0x78
 80025e0:	f001 ff98 	bl	8004514 <_TIM1_delay_ms>

	/////////////////////
	TFT_send_command(0xB4);
 80025e4:	20b4      	movs	r0, #180	; 0xb4
 80025e6:	f000 f8f9 	bl	80027dc <TFT_send_command>
//	_TIM1_delay_ms( 120);

	TFT_send_data(0 );
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 f918 	bl	8002820 <TFT_send_data>
	/////////////////////////
	TFT_send_command(TFT_Display_On_MODE);
 80025f0:	2029      	movs	r0, #41	; 0x29
 80025f2:	f000 f8f3 	bl	80027dc <TFT_send_command>
	_TIM1_delay_ms( 120);
 80025f6:	2078      	movs	r0, #120	; 0x78
 80025f8:	f001 ff8c 	bl	8004514 <_TIM1_delay_ms>





	TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 80025fc:	23ff      	movs	r3, #255	; 0xff
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	23ff      	movs	r3, #255	; 0xff
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	237f      	movs	r3, #127	; 0x7f
 800260a:	2200      	movs	r2, #0
 800260c:	219f      	movs	r1, #159	; 0x9f
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f8a1 	bl	8002756 <TFT_SET_BACKGROUND>



}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	080055c8 	.word	0x080055c8
 8002620:	40013000 	.word	0x40013000
 8002624:	40010800 	.word	0x40010800

08002628 <TFT_SET_LOCATION>:
void TFT_SET_LOCATION(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2){
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	80fb      	strh	r3, [r7, #6]
 800263a:	4603      	mov	r3, r0
 800263c:	80bb      	strh	r3, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	807b      	strh	r3, [r7, #2]
 8002642:	4613      	mov	r3, r2
 8002644:	803b      	strh	r3, [r7, #0]
	/***********************************/
	TFT_send_command(TFT_SET_Column_MODE);
 8002646:	202a      	movs	r0, #42	; 0x2a
 8002648:	f000 f8c8 	bl	80027dc <TFT_send_command>
	TFT_send_data((y1>>8));
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	b29b      	uxth	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f8e3 	bl	8002820 <TFT_send_data>
	TFT_send_data(((uint8_t)y1));
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f8de 	bl	8002820 <TFT_send_data>


	TFT_send_data((y2>>8));
 8002664:	883b      	ldrh	r3, [r7, #0]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	b29b      	uxth	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8d7 	bl	8002820 <TFT_send_data>
	TFT_send_data(((uint8_t)y2));
 8002672:	883b      	ldrh	r3, [r7, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f8d2 	bl	8002820 <TFT_send_data>
	/***********************************/
	TFT_send_command(TFT_SET_Row_MODE);
 800267c:	202b      	movs	r0, #43	; 0x2b
 800267e:	f000 f8ad 	bl	80027dc <TFT_send_command>
	TFT_send_data((x1>>8));
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	b29b      	uxth	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8c8 	bl	8002820 <TFT_send_data>
	TFT_send_data(((uint8_t)x1));
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f8c3 	bl	8002820 <TFT_send_data>


	TFT_send_data((x2>>8));
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	b29b      	uxth	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f8bc 	bl	8002820 <TFT_send_data>
	TFT_send_data(((uint8_t)x2));
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f8b7 	bl	8002820 <TFT_send_data>
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}

080026ba <TFT_SEND_Image>:

void TFT_SEND_Image(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint16_t* image){
 80026ba:	b590      	push	{r4, r7, lr}
 80026bc:	b087      	sub	sp, #28
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4604      	mov	r4, r0
 80026c2:	4608      	mov	r0, r1
 80026c4:	4611      	mov	r1, r2
 80026c6:	461a      	mov	r2, r3
 80026c8:	4623      	mov	r3, r4
 80026ca:	80fb      	strh	r3, [r7, #6]
 80026cc:	4603      	mov	r3, r0
 80026ce:	80bb      	strh	r3, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	883a      	ldrh	r2, [r7, #0]
 80026e2:	1c51      	adds	r1, r2, #1
 80026e4:	887a      	ldrh	r2, [r7, #2]
 80026e6:	1a8a      	subs	r2, r1, r2
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	613b      	str	r3, [r7, #16]
	uint8_t r=0,g=0,b=0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	2300      	movs	r3, #0
 80026f4:	73bb      	strb	r3, [r7, #14]
 80026f6:	2300      	movs	r3, #0
 80026f8:	737b      	strb	r3, [r7, #13]

	TFT_SET_LOCATION(x1,x2,y1,y2);
 80026fa:	883b      	ldrh	r3, [r7, #0]
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	88b9      	ldrh	r1, [r7, #4]
 8002700:	88f8      	ldrh	r0, [r7, #6]
 8002702:	f7ff ff91 	bl	8002628 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 8002706:	202c      	movs	r0, #44	; 0x2c
 8002708:	f000 f868 	bl	80027dc <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e016      	b.n	8002740 <TFT_SEND_Image+0x86>
//		b = (b * 255) / 31;
//
//		TFT_send_data(r);
//		TFT_send_data(g);
//		TFT_send_data(b);
				TFT_send_data(((image[i])>>8));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002718:	4413      	add	r3, r2
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f87c 	bl	8002820 <TFT_send_data>
				TFT_send_data(image[i]);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f873 	bl	8002820 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3e4      	bcc.n	8002712 <TFT_SEND_Image+0x58>
	}
	TFT_send_command(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f000 f847 	bl	80027dc <TFT_send_command>


}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}

08002756 <TFT_SET_BACKGROUND>:
void TFT_SET_BACKGROUND(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint8_t r,uint8_t g,uint8_t b){
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	461a      	mov	r2, r3
 8002764:	4623      	mov	r3, r4
 8002766:	80fb      	strh	r3, [r7, #6]
 8002768:	4603      	mov	r3, r0
 800276a:	80bb      	strh	r3, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	883a      	ldrh	r2, [r7, #0]
 800277e:	1c51      	adds	r1, r2, #1
 8002780:	887a      	ldrh	r2, [r7, #2]
 8002782:	1a8a      	subs	r2, r1, r2
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	60bb      	str	r3, [r7, #8]
	TFT_SET_LOCATION(x1,x2,y1,y2);
 800278a:	883b      	ldrh	r3, [r7, #0]
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	88b9      	ldrh	r1, [r7, #4]
 8002790:	88f8      	ldrh	r0, [r7, #6]
 8002792:	f7ff ff49 	bl	8002628 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 8002796:	202c      	movs	r0, #44	; 0x2c
 8002798:	f000 f820 	bl	80027dc <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e011      	b.n	80027c6 <TFT_SET_BACKGROUND+0x70>
		TFT_send_data(r);
 80027a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f83a 	bl	8002820 <TFT_send_data>
		TFT_send_data(g);
 80027ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f835 	bl	8002820 <TFT_send_data>
		TFT_send_data(b);
 80027b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f830 	bl	8002820 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3e9      	bcc.n	80027a2 <TFT_SET_BACKGROUND+0x4c>
	}
	TFT_send_command(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f000 f804 	bl	80027dc <TFT_send_command>


}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <TFT_send_command>:

		break;
	}
}
void TFT_send_command(uint8_t command)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 80027e6:	2200      	movs	r2, #0
 80027e8:	2104      	movs	r1, #4
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <TFT_send_command+0x3c>)
 80027ec:	f001 f94a 	bl	8003a84 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_LOW);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2103      	movs	r1, #3
 80027f4:	4808      	ldr	r0, [pc, #32]	; (8002818 <TFT_send_command+0x3c>)
 80027f6:	f001 f945 	bl	8003a84 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, command);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4807      	ldr	r0, [pc, #28]	; (800281c <TFT_send_command+0x40>)
 8002800:	f001 fbe0 	bl	8003fc4 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002804:	2201      	movs	r2, #1
 8002806:	2104      	movs	r1, #4
 8002808:	4803      	ldr	r0, [pc, #12]	; (8002818 <TFT_send_command+0x3c>)
 800280a:	f001 f93b 	bl	8003a84 <MCAL_write_PIN>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40010800 	.word	0x40010800
 800281c:	40013000 	.word	0x40013000

08002820 <TFT_send_data>:


void TFT_send_data(uint8_t data){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]

	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 800282a:	2200      	movs	r2, #0
 800282c:	2104      	movs	r1, #4
 800282e:	480b      	ldr	r0, [pc, #44]	; (800285c <TFT_send_data+0x3c>)
 8002830:	f001 f928 	bl	8003a84 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_HIGH);
 8002834:	2201      	movs	r2, #1
 8002836:	2103      	movs	r1, #3
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <TFT_send_data+0x3c>)
 800283a:	f001 f923 	bl	8003a84 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, data);
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <TFT_send_data+0x40>)
 8002844:	f001 fbbe 	bl	8003fc4 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002848:	2201      	movs	r2, #1
 800284a:	2104      	movs	r1, #4
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <TFT_send_data+0x3c>)
 800284e:	f001 f919 	bl	8003a84 <MCAL_write_PIN>


}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40010800 	.word	0x40010800
 8002860:	40013000 	.word	0x40013000

08002864 <TFT_send_image>:



uint8_t TFT_send_image(uint8_t image_flag){
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af02      	add	r7, sp, #8
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]


//	TFT_SET_BACKGROUND(0x008C,0x0153,0x006E,0x00D1,0xff,0xff,0xff);
	switch(image_flag){
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	3b08      	subs	r3, #8
 8002872:	2b0b      	cmp	r3, #11
 8002874:	d842      	bhi.n	80028fc <TFT_send_image+0x98>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <TFT_send_image+0x18>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028d5 	.word	0x080028d5
 8002880:	080028ad 	.word	0x080028ad
 8002884:	080028fd 	.word	0x080028fd
 8002888:	080028fd 	.word	0x080028fd
 800288c:	080028fd 	.word	0x080028fd
 8002890:	080028fd 	.word	0x080028fd
 8002894:	080028fd 	.word	0x080028fd
 8002898:	080028fd 	.word	0x080028fd
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028fd 	.word	0x080028fd
 80028a4:	080028fd 	.word	0x080028fd
 80028a8:	080028e9 	.word	0x080028e9
	case (_100_KM_SIGN_FLAG):
	TFT_SEND_Image(30, 129, 14, 113, _100_KM_SIGN);
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <TFT_send_image+0xb4>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2371      	movs	r3, #113	; 0x71
 80028b2:	220e      	movs	r2, #14
 80028b4:	2181      	movs	r1, #129	; 0x81
 80028b6:	201e      	movs	r0, #30
 80028b8:	f7ff feff 	bl	80026ba <TFT_SEND_Image>

	return 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	e026      	b.n	800290e <TFT_send_image+0xaa>
	break;

	case _120_KM_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, _120_KM_SIGN);
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <TFT_send_image+0xb8>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2371      	movs	r3, #113	; 0x71
 80028c6:	220e      	movs	r2, #14
 80028c8:	2181      	movs	r1, #129	; 0x81
 80028ca:	201e      	movs	r0, #30
 80028cc:	f7ff fef5 	bl	80026ba <TFT_SEND_Image>


		return 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e01c      	b.n	800290e <TFT_send_image+0xaa>
		break;


		break;
	case NO_WAITING_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, NO_WAITING_SIGN);
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <TFT_send_image+0xbc>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2371      	movs	r3, #113	; 0x71
 80028da:	220e      	movs	r2, #14
 80028dc:	2181      	movs	r1, #129	; 0x81
 80028de:	201e      	movs	r0, #30
 80028e0:	f7ff feeb 	bl	80026ba <TFT_SEND_Image>

		return 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e012      	b.n	800290e <TFT_send_image+0xaa>
		break;
	case _40_KM_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, _40_KM_SIGN);
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <TFT_send_image+0xc0>)
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2371      	movs	r3, #113	; 0x71
 80028ee:	220e      	movs	r2, #14
 80028f0:	2181      	movs	r1, #129	; 0x81
 80028f2:	201e      	movs	r0, #30
 80028f4:	f7ff fee1 	bl	80026ba <TFT_SEND_Image>

		return 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e008      	b.n	800290e <TFT_send_image+0xaa>
		break;
	default:
		TFT_SEND_Image(30, 129, 14, 113, _NO_SIGN);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <TFT_send_image+0xc4>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2371      	movs	r3, #113	; 0x71
 8002902:	220e      	movs	r2, #14
 8002904:	2181      	movs	r1, #129	; 0x81
 8002906:	201e      	movs	r0, #30
 8002908:	f7ff fed7 	bl	80026ba <TFT_SEND_Image>

		return 1;
 800290c:	2301      	movs	r3, #1





}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	080056e8 	.word	0x080056e8
 800291c:	08014148 	.word	0x08014148
 8002920:	0800f328 	.word	0x0800f328
 8002924:	0800a508 	.word	0x0800a508
 8002928:	08018f68 	.word	0x08018f68

0800292c <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	while(1);
 8002930:	e7fe      	b.n	8002930 <ADC_ERROR_HANDLER+0x4>
	...

08002934 <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	; 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 800293e:	2300      	movs	r3, #0
 8002940:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002942:	2300      	movs	r3, #0
 8002944:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002948:	2300      	movs	r3, #0
 800294a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	f200 80d7 	bhi.w	8002b04 <ADC_GPIO_CONFIG+0x1d0>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <ADC_GPIO_CONFIG+0x28>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800299d 	.word	0x0800299d
 8002960:	080029bb 	.word	0x080029bb
 8002964:	080029d9 	.word	0x080029d9
 8002968:	080029f7 	.word	0x080029f7
 800296c:	08002a15 	.word	0x08002a15
 8002970:	08002a33 	.word	0x08002a33
 8002974:	08002a51 	.word	0x08002a51
 8002978:	08002a6f 	.word	0x08002a6f
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002aab 	.word	0x08002aab
 8002984:	08002b05 	.word	0x08002b05
 8002988:	08002b05 	.word	0x08002b05
 800298c:	08002b05 	.word	0x08002b05
 8002990:	08002b05 	.word	0x08002b05
 8002994:	08002ac9 	.word	0x08002ac9
 8002998:	08002ae7 	.word	0x08002ae7
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 800299c:	2300      	movs	r3, #0
 800299e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80029ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029b0:	4619      	mov	r1, r3
 80029b2:	4858      	ldr	r0, [pc, #352]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 80029b4:	f000 ff7c 	bl	80038b0 <MCAL_GPIO_init>
		break;
 80029b8:	e0a7      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 80029ba:	2301      	movs	r3, #1
 80029bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80029ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ce:	4619      	mov	r1, r3
 80029d0:	4850      	ldr	r0, [pc, #320]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 80029d2:	f000 ff6d 	bl	80038b0 <MCAL_GPIO_init>
		break;
 80029d6:	e098      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 80029d8:	2302      	movs	r3, #2
 80029da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80029e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ec:	4619      	mov	r1, r3
 80029ee:	4849      	ldr	r0, [pc, #292]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 80029f0:	f000 ff5e 	bl	80038b0 <MCAL_GPIO_init>
		break;
 80029f4:	e089      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 80029f6:	2303      	movs	r3, #3
 80029f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002a06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4841      	ldr	r0, [pc, #260]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 8002a0e:	f000 ff4f 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002a12:	e07a      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 8002a14:	2304      	movs	r3, #4
 8002a16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002a24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	483a      	ldr	r0, [pc, #232]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 8002a2c:	f000 ff40 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002a30:	e06b      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8002a32:	2305      	movs	r3, #5
 8002a34:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a46:	4619      	mov	r1, r3
 8002a48:	4832      	ldr	r0, [pc, #200]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 8002a4a:	f000 ff31 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002a4e:	e05c      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8002a50:	2306      	movs	r3, #6
 8002a52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002a60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a64:	4619      	mov	r1, r3
 8002a66:	482b      	ldr	r0, [pc, #172]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 8002a68:	f000 ff22 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002a6c:	e04d      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8002a6e:	2307      	movs	r3, #7
 8002a70:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002a7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a82:	4619      	mov	r1, r3
 8002a84:	4823      	ldr	r0, [pc, #140]	; (8002b14 <ADC_GPIO_CONFIG+0x1e0>)
 8002a86:	f000 ff13 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002a8a:	e03e      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8002a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	481d      	ldr	r0, [pc, #116]	; (8002b18 <ADC_GPIO_CONFIG+0x1e4>)
 8002aa4:	f000 ff04 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002aa8:	e02f      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 8002aaa:	2301      	movs	r3, #1
 8002aac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8002aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4815      	ldr	r0, [pc, #84]	; (8002b18 <ADC_GPIO_CONFIG+0x1e4>)
 8002ac2:	f000 fef5 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002ac6:	e020      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 8002ac8:	2304      	movs	r3, #4
 8002aca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8002ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002adc:	4619      	mov	r1, r3
 8002ade:	480f      	ldr	r0, [pc, #60]	; (8002b1c <ADC_GPIO_CONFIG+0x1e8>)
 8002ae0:	f000 fee6 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002ae4:	e011      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8002af6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afa:	4619      	mov	r1, r3
 8002afc:	4807      	ldr	r0, [pc, #28]	; (8002b1c <ADC_GPIO_CONFIG+0x1e8>)
 8002afe:	f000 fed7 	bl	80038b0 <MCAL_GPIO_init>
		break;
 8002b02:	e002      	b.n	8002b0a <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 8002b04:	f7ff ff12 	bl	800292c <ADC_ERROR_HANDLER>
		break;
 8002b08:	bf00      	nop

	}



}
 8002b0a:	bf00      	nop
 8002b0c:	3740      	adds	r7, #64	; 0x40
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	40011000 	.word	0x40011000

08002b20 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	d905      	bls.n	8002b3e <ADC_init+0x1e>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b0d      	cmp	r3, #13
 8002b38:	d801      	bhi.n	8002b3e <ADC_init+0x1e>
		return ADC_error;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e177      	b.n	8002e2e <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a9a      	ldr	r2, [pc, #616]	; (8002dac <ADC_init+0x28c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d113      	bne.n	8002b6e <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4a98      	ldr	r2, [pc, #608]	; (8002db0 <ADC_init+0x290>)
 8002b4e:	460b      	mov	r3, r1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	440b      	add	r3, r1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8002b60:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <ADC_init+0x294>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a93      	ldr	r2, [pc, #588]	; (8002db4 <ADC_init+0x294>)
 8002b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	e013      	b.n	8002b96 <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4a8e      	ldr	r2, [pc, #568]	; (8002db0 <ADC_init+0x290>)
 8002b76:	460b      	mov	r3, r1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	33c0      	adds	r3, #192	; 0xc0
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <ADC_init+0x294>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4a89      	ldr	r2, [pc, #548]	; (8002db4 <ADC_init+0x294>)
 8002b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b94:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff feca 	bl	8002934 <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6893      	ldr	r3, [r2, #8]
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 8002baa:	200a      	movs	r0, #10
 8002bac:	f001 fc86 	bl	80044bc <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6893      	ldr	r3, [r2, #8]
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 8002bba:	f001 f92f 	bl	8003e1c <MCAL_GET_PCLCK2>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a7d      	ldr	r2, [pc, #500]	; (8002db8 <ADC_init+0x298>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	2b1c      	cmp	r3, #28
 8002bca:	d014      	beq.n	8002bf6 <ADC_init+0xd6>
 8002bcc:	2b1c      	cmp	r3, #28
 8002bce:	d819      	bhi.n	8002c04 <ADC_init+0xe4>
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d002      	beq.n	8002bda <ADC_init+0xba>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d007      	beq.n	8002be8 <ADC_init+0xc8>
 8002bd8:	e014      	b.n	8002c04 <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <ADC_init+0x294>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a75      	ldr	r2, [pc, #468]	; (8002db4 <ADC_init+0x294>)
 8002be0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002be4:	6053      	str	r3, [r2, #4]
		break;
 8002be6:	e014      	b.n	8002c12 <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 8002be8:	4b72      	ldr	r3, [pc, #456]	; (8002db4 <ADC_init+0x294>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <ADC_init+0x294>)
 8002bee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bf2:	6053      	str	r3, [r2, #4]
		break;
 8002bf4:	e00d      	b.n	8002c12 <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <ADC_init+0x294>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a6e      	ldr	r2, [pc, #440]	; (8002db4 <ADC_init+0x294>)
 8002bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c00:	6053      	str	r3, [r2, #4]
		break;
 8002c02:	e006      	b.n	8002c12 <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <ADC_init+0x294>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <ADC_init+0x294>)
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	6053      	str	r3, [r2, #4]
		break;
 8002c10:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6893      	ldr	r3, [r2, #8]
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6893      	ldr	r3, [r2, #8]
 8002c20:	f36f 23cb 	bfc	r3, #11, #1
 8002c24:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f200 80a8 	bhi.w	8002d80 <ADC_init+0x260>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <ADC_init+0x118>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c79 	.word	0x08002c79
 8002c3c:	08002c8f 	.word	0x08002c8f
 8002c40:	08002ca5 	.word	0x08002ca5
 8002c44:	08002cbb 	.word	0x08002cbb
 8002c48:	08002cd1 	.word	0x08002cd1
 8002c4c:	08002ce7 	.word	0x08002ce7
 8002c50:	08002cfd 	.word	0x08002cfd
 8002c54:	08002d13 	.word	0x08002d13
 8002c58:	08002d29 	.word	0x08002d29
 8002c5c:	08002d3f 	.word	0x08002d3f
 8002c60:	08002d81 	.word	0x08002d81
 8002c64:	08002d81 	.word	0x08002d81
 8002c68:	08002d81 	.word	0x08002d81
 8002c6c:	08002d81 	.word	0x08002d81
 8002c70:	08002d55 	.word	0x08002d55
 8002c74:	08002d6b 	.word	0x08002d6b
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	789b      	ldrb	r3, [r3, #2]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	b2d9      	uxtb	r1, r3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6913      	ldr	r3, [r2, #16]
 8002c86:	f361 0302 	bfi	r3, r1, #0, #3
 8002c8a:	6113      	str	r3, [r2, #16]
		break;
 8002c8c:	e07b      	b.n	8002d86 <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	789b      	ldrb	r3, [r3, #2]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	b2d9      	uxtb	r1, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6913      	ldr	r3, [r2, #16]
 8002c9c:	f361 03c5 	bfi	r3, r1, #3, #3
 8002ca0:	6113      	str	r3, [r2, #16]

		break;
 8002ca2:	e070      	b.n	8002d86 <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	b2d9      	uxtb	r1, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6913      	ldr	r3, [r2, #16]
 8002cb2:	f361 1388 	bfi	r3, r1, #6, #3
 8002cb6:	6113      	str	r3, [r2, #16]

		break;
 8002cb8:	e065      	b.n	8002d86 <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6913      	ldr	r3, [r2, #16]
 8002cc8:	f361 234b 	bfi	r3, r1, #9, #3
 8002ccc:	6113      	str	r3, [r2, #16]

		break;
 8002cce:	e05a      	b.n	8002d86 <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	789b      	ldrb	r3, [r3, #2]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	b2d9      	uxtb	r1, r3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6913      	ldr	r3, [r2, #16]
 8002cde:	f361 330e 	bfi	r3, r1, #12, #3
 8002ce2:	6113      	str	r3, [r2, #16]

		break;
 8002ce4:	e04f      	b.n	8002d86 <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	789b      	ldrb	r3, [r3, #2]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	b2d9      	uxtb	r1, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6913      	ldr	r3, [r2, #16]
 8002cf4:	f361 33d1 	bfi	r3, r1, #15, #3
 8002cf8:	6113      	str	r3, [r2, #16]

		break;
 8002cfa:	e044      	b.n	8002d86 <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	789b      	ldrb	r3, [r3, #2]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	b2d9      	uxtb	r1, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6913      	ldr	r3, [r2, #16]
 8002d0a:	f361 4394 	bfi	r3, r1, #18, #3
 8002d0e:	6113      	str	r3, [r2, #16]

		break;
 8002d10:	e039      	b.n	8002d86 <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	789b      	ldrb	r3, [r3, #2]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	b2d9      	uxtb	r1, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6913      	ldr	r3, [r2, #16]
 8002d20:	f361 5357 	bfi	r3, r1, #21, #3
 8002d24:	6113      	str	r3, [r2, #16]

		break;
 8002d26:	e02e      	b.n	8002d86 <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	789b      	ldrb	r3, [r3, #2]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	b2d9      	uxtb	r1, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6913      	ldr	r3, [r2, #16]
 8002d36:	f361 631a 	bfi	r3, r1, #24, #3
 8002d3a:	6113      	str	r3, [r2, #16]

		break;
 8002d3c:	e023      	b.n	8002d86 <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	789b      	ldrb	r3, [r3, #2]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	b2d9      	uxtb	r1, r3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6913      	ldr	r3, [r2, #16]
 8002d4c:	f361 63dd 	bfi	r3, r1, #27, #3
 8002d50:	6113      	str	r3, [r2, #16]

		break;
 8002d52:	e018      	b.n	8002d86 <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	789b      	ldrb	r3, [r3, #2]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68d3      	ldr	r3, [r2, #12]
 8002d62:	f361 330e 	bfi	r3, r1, #12, #3
 8002d66:	60d3      	str	r3, [r2, #12]

		break;
 8002d68:	e00d      	b.n	8002d86 <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	b2d9      	uxtb	r1, r3
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68d3      	ldr	r3, [r2, #12]
 8002d78:	f361 33d1 	bfi	r3, r1, #15, #3
 8002d7c:	60d3      	str	r3, [r2, #12]
		break;
 8002d7e:	e002      	b.n	8002d86 <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 8002d80:	f7ff fdd4 	bl	800292c <ADC_ERROR_HANDLER>
		break;
 8002d84:	bf00      	nop


	}

	switch(config->mode){
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	785b      	ldrb	r3, [r3, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <ADC_init+0x274>
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d006      	beq.n	8002da0 <ADC_init+0x280>
 8002d92:	e013      	b.n	8002dbc <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6893      	ldr	r3, [r2, #8]
 8002d98:	f36f 0341 	bfc	r3, #1, #1
 8002d9c:	6093      	str	r3, [r2, #8]
		break;
 8002d9e:	e010      	b.n	8002dc2 <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6893      	ldr	r3, [r2, #8]
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6093      	str	r3, [r2, #8]
		break;
 8002daa:	e00a      	b.n	8002dc2 <ADC_init+0x2a2>
 8002dac:	40012400 	.word	0x40012400
 8002db0:	20003fd4 	.word	0x20003fd4
 8002db4:	40021000 	.word	0x40021000
 8002db8:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8002dbc:	f7ff fdb6 	bl	800292c <ADC_ERROR_HANDLER>
		break;
 8002dc0:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d022      	beq.n	8002e18 <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6853      	ldr	r3, [r2, #4]
 8002dd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dda:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	b2d9      	uxtb	r1, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6853      	ldr	r3, [r2, #4]
 8002dea:	f361 0304 	bfi	r3, r1, #0, #5
 8002dee:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	78db      	ldrb	r3, [r3, #3]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6853      	ldr	r3, [r2, #4]
 8002dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e00:	6053      	str	r3, [r2, #4]
 8002e02:	e004      	b.n	8002e0e <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6853      	ldr	r3, [r2, #4]
 8002e08:	f36f 1386 	bfc	r3, #6, #1
 8002e0c:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6853      	ldr	r3, [r2, #4]
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6893      	ldr	r3, [r2, #8]
 8002e1c:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8002e20:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6893      	ldr	r3, [r2, #8]
 8002e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2a:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop

08002e38 <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	460b      	mov	r3, r1
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <ADC_read+0xd8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8002e52:	7afa      	ldrb	r2, [r7, #11]
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <ADC_read+0xdc>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e008      	b.n	8002e76 <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8002e64:	7afa      	ldrb	r2, [r7, #11]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	33c0      	adds	r3, #192	; 0xc0
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <ADC_read+0xdc>)
 8002e72:	4413      	add	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	b2d9      	uxtb	r1, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e96:	f361 0304 	bfi	r3, r1, #0, #5
 8002e9a:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10c      	bne.n	8002ebe <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6893      	ldr	r3, [r2, #8]
 8002ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eac:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 8002eae:	bf00      	nop
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f8      	beq.n	8002eb0 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	78db      	ldrb	r3, [r3, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	801a      	strh	r2, [r3, #0]
		data++;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 8002ed6:	e016      	b.n	8002f06 <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	74fb      	strb	r3, [r7, #19]
 8002edc:	e00a      	b.n	8002ef4 <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	801a      	strh	r2, [r3, #0]
			data++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3302      	adds	r3, #2
 8002eec:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	74fb      	strb	r3, [r7, #19]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f3c3 5303 	ubfx	r3, r3, #20, #4
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d9eb      	bls.n	8002ede <ADC_read+0xa6>
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012400 	.word	0x40012400
 8002f14:	20003fd4 	.word	0x20003fd4

08002f18 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <ADC1_2_IRQHandler+0x54>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10f      	bne.n	8002f4a <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <ADC1_2_IRQHandler+0x54>)
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <ADC1_2_IRQHandler+0x58>)
 8002f38:	460b      	mov	r3, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 8002f48:	e00e      	b.n	8002f68 <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <ADC1_2_IRQHandler+0x5c>)
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <ADC1_2_IRQHandler+0x58>)
 8002f58:	460b      	mov	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	440b      	add	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	33c8      	adds	r3, #200	; 0xc8
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4798      	blx	r3
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012400 	.word	0x40012400
 8002f70:	20003fd4 	.word	0x20003fd4
 8002f74:	40012800 	.word	0x40012800

08002f78 <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
	while(1);
 8002f7c:	e7fe      	b.n	8002f7c <ERROR_HANDLER+0x4>
	...

08002f80 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <MCAL_CAN_SET_GPIO+0x30>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <MCAL_CAN_SET_GPIO+0x34>)
 8002f92:	f000 fc8d 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MCAL_CAN_SET_GPIO+0x38>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MCAL_CAN_SET_GPIO+0x34>)
 8002fa2:	f000 fc85 	bl	80038b0 <MCAL_GPIO_init>

}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	080055cc 	.word	0x080055cc
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	080055d0 	.word	0x080055d0

08002fbc <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 8002fc4:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <MCAL_CAN_init+0x21c>)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 8002fce:	4b83      	ldr	r3, [pc, #524]	; (80031dc <MCAL_CAN_init+0x220>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a82      	ldr	r2, [pc, #520]	; (80031dc <MCAL_CAN_init+0x220>)
 8002fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 8002fda:	f7ff ffd1 	bl	8002f80 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 8002fde:	4b80      	ldr	r3, [pc, #512]	; (80031e0 <MCAL_CAN_init+0x224>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11f      	bne.n	800302c <MCAL_CAN_init+0x70>
 8002fec:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <MCAL_CAN_init+0x224>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d118      	bne.n	800302c <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8002ffa:	4a79      	ldr	r2, [pc, #484]	; (80031e0 <MCAL_CAN_init+0x224>)
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	f36f 0341 	bfc	r3, #1, #1
 8003002:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 8003004:	4a76      	ldr	r2, [pc, #472]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 800300e:	bf00      	nop
 8003010:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d1f8      	bne.n	8003010 <MCAL_CAN_init+0x54>
 800301e:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f1      	bne.n	8003010 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e004      	b.n	800304a <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8003040:	4a67      	ldr	r2, [pc, #412]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	f36f 1386 	bfc	r3, #6, #1
 8003048:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8003052:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e004      	b.n	8003068 <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 800305e:	4a60      	ldr	r2, [pc, #384]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003060:	6813      	ldr	r3, [r2, #0]
 8003062:	f36f 1304 	bfc	r3, #4, #1
 8003066:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8003068:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <MCAL_CAN_init+0x224>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f36f 0382 	bfc	r3, #2, #1
 8003070:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	789b      	ldrb	r3, [r3, #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 800307a:	4a59      	ldr	r2, [pc, #356]	; (80031e0 <MCAL_CAN_init+0x224>)
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e004      	b.n	8003090 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f36f 03c3 	bfc	r3, #3, #1
 800308e:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 8003090:	f000 feb0 	bl	8003df4 <MCAL_GET_PCLCK1>
 8003094:	4603      	mov	r3, r0
 8003096:	4a53      	ldr	r2, [pc, #332]	; (80031e4 <MCAL_CAN_init+0x228>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <MCAL_CAN_init+0xe8>
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <MCAL_CAN_init+0x22c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d023      	beq.n	80030ea <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 80030a2:	e045      	b.n	8003130 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	78db      	ldrb	r3, [r3, #3]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d83e      	bhi.n	800312a <MCAL_CAN_init+0x16e>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <MCAL_CAN_init+0xf8>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030cf 	.word	0x080030cf
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	080030e1 	.word	0x080030e1
			CAN1->BTR.ALL_Bits=0x00050000;
 80030c4:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <MCAL_CAN_init+0x224>)
 80030c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80030ca:	61da      	str	r2, [r3, #28]
			break;
 80030cc:	e00c      	b.n	80030e8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 80030ce:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <MCAL_CAN_init+0x224>)
 80030d0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80030d4:	61da      	str	r2, [r3, #28]
			break;
 80030d6:	e007      	b.n	80030e8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 80030d8:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <MCAL_CAN_init+0x224>)
 80030da:	4a44      	ldr	r2, [pc, #272]	; (80031ec <MCAL_CAN_init+0x230>)
 80030dc:	61da      	str	r2, [r3, #28]
			break;
 80030de:	e003      	b.n	80030e8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <MCAL_CAN_init+0x224>)
 80030e2:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <MCAL_CAN_init+0x234>)
 80030e4:	61da      	str	r2, [r3, #28]
			break;
 80030e6:	bf00      	nop
		break;
 80030e8:	e01f      	b.n	800312a <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	78db      	ldrb	r3, [r3, #3]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d81d      	bhi.n	800312e <MCAL_CAN_init+0x172>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <MCAL_CAN_init+0x13c>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003109 	.word	0x08003109
 80030fc:	08003111 	.word	0x08003111
 8003100:	08003119 	.word	0x08003119
 8003104:	08003121 	.word	0x08003121
				CAN1->BTR.ALL_Bits=0x00090001;
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <MCAL_CAN_init+0x224>)
 800310a:	4a3a      	ldr	r2, [pc, #232]	; (80031f4 <MCAL_CAN_init+0x238>)
 800310c:	61da      	str	r2, [r3, #28]
				break;
 800310e:	e00b      	b.n	8003128 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003112:	4a39      	ldr	r2, [pc, #228]	; (80031f8 <MCAL_CAN_init+0x23c>)
 8003114:	61da      	str	r2, [r3, #28]
				break;
 8003116:	e007      	b.n	8003128 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <MCAL_CAN_init+0x224>)
 800311a:	4a38      	ldr	r2, [pc, #224]	; (80031fc <MCAL_CAN_init+0x240>)
 800311c:	61da      	str	r2, [r3, #28]
				break;
 800311e:	e003      	b.n	8003128 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003122:	4a37      	ldr	r2, [pc, #220]	; (8003200 <MCAL_CAN_init+0x244>)
 8003124:	61da      	str	r2, [r3, #28]
				break;
 8003126:	bf00      	nop
			break;
 8003128:	e001      	b.n	800312e <MCAL_CAN_init+0x172>
		break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <MCAL_CAN_init+0x174>
			break;
 800312e:	bf00      	nop

	}

	switch(CANx->MODE){
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d837      	bhi.n	80031a8 <MCAL_CAN_init+0x1ec>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <MCAL_CAN_init+0x184>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003167 	.word	0x08003167
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003193 	.word	0x08003193
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8003150:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003152:	69d3      	ldr	r3, [r2, #28]
 8003154:	f36f 73df 	bfc	r3, #31, #1
 8003158:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <MCAL_CAN_init+0x224>)
 800315c:	69d3      	ldr	r3, [r2, #28]
 800315e:	f36f 739e 	bfc	r3, #30, #1
 8003162:	61d3      	str	r3, [r2, #28]

		break;
 8003164:	e023      	b.n	80031ae <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003168:	69d3      	ldr	r3, [r2, #28]
 800316a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800316e:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8003170:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003172:	69d3      	ldr	r3, [r2, #28]
 8003174:	f36f 739e 	bfc	r3, #30, #1
 8003178:	61d3      	str	r3, [r2, #28]
		break;
 800317a:	e018      	b.n	80031ae <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <MCAL_CAN_init+0x224>)
 800317e:	69d3      	ldr	r3, [r2, #28]
 8003180:	f36f 73df 	bfc	r3, #31, #1
 8003184:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003188:	69d3      	ldr	r3, [r2, #28]
 800318a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800318e:	61d3      	str	r3, [r2, #28]
		break;
 8003190:	e00d      	b.n	80031ae <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <MCAL_CAN_init+0x224>)
 8003194:	69d3      	ldr	r3, [r2, #28]
 8003196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800319a:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <MCAL_CAN_init+0x224>)
 800319e:	69d3      	ldr	r3, [r2, #28]
 80031a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031a4:	61d3      	str	r3, [r2, #28]
		break;
 80031a6:	e002      	b.n	80031ae <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 80031a8:	f7ff fee6 	bl	8002f78 <ERROR_HANDLER>
		break;
 80031ac:	bf00      	nop

	}

	if(CANx->IE){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	795b      	ldrb	r3, [r3, #5]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d028      	beq.n	8003208 <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <MCAL_CAN_init+0x224>)
 80031b8:	6953      	ldr	r3, [r2, #20]
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <MCAL_CAN_init+0x224>)
 80031c2:	6953      	ldr	r3, [r2, #20]
 80031c4:	f043 0310 	orr.w	r3, r3, #16
 80031c8:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MCAL_CAN_init+0x248>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <MCAL_CAN_init+0x248>)
 80031d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e027      	b.n	8003228 <MCAL_CAN_init+0x26c>
 80031d8:	20004154 	.word	0x20004154
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40006400 	.word	0x40006400
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	016e3600 	.word	0x016e3600
 80031ec:	001c0001 	.word	0x001c0001
 80031f0:	001c0004 	.word	0x001c0004
 80031f4:	00090001 	.word	0x00090001
 80031f8:	001c0002 	.word	0x001c0002
 80031fc:	001c0005 	.word	0x001c0005
 8003200:	001c000e 	.word	0x001c000e
 8003204:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <MCAL_CAN_init+0x2d8>)
 800320a:	6953      	ldr	r3, [r2, #20]
 800320c:	f36f 0341 	bfc	r3, #1, #1
 8003210:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8003212:	4a20      	ldr	r2, [pc, #128]	; (8003294 <MCAL_CAN_init+0x2d8>)
 8003214:	6953      	ldr	r3, [r2, #20]
 8003216:	f36f 1304 	bfc	r3, #4, #1
 800321a:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <MCAL_CAN_init+0x2dc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <MCAL_CAN_init+0x2dc>)
 8003222:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003226:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <MCAL_CAN_init+0x2d8>)
 800322a:	6953      	ldr	r3, [r2, #20]
 800322c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003230:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <MCAL_CAN_init+0x2d8>)
 8003234:	6953      	ldr	r3, [r2, #20]
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <MCAL_CAN_init+0x2e0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a16      	ldr	r2, [pc, #88]	; (800329c <MCAL_CAN_init+0x2e0>)
 8003242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003246:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <MCAL_CAN_init+0x2d8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d118      	bne.n	8003288 <MCAL_CAN_init+0x2cc>
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MCAL_CAN_init+0x2d8>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <MCAL_CAN_init+0x2d8>)
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	f36f 0341 	bfc	r3, #1, #1
 800326c:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <MCAL_CAN_init+0x2d8>)
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f36f 0300 	bfc	r3, #0, #1
 8003276:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8003278:	bf00      	nop
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <MCAL_CAN_init+0x2d8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d0f8      	beq.n	800327a <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40006400 	.word	0x40006400
 8003298:	e000e180 	.word	0xe000e180
 800329c:	e000e100 	.word	0xe000e100

080032a0 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <MCAL_CAN_RESET+0x24>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <MCAL_CAN_RESET+0x24>)
 80032aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ae:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <MCAL_CAN_RESET+0x24>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <MCAL_CAN_RESET+0x24>)
 80032b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80032ba:	6113      	str	r3, [r2, #16]

}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000

080032c8 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4798      	blx	r3
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20004154 	.word	0x20004154

080032dc <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <CAN_RX1_IRQHandler+0x10>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4798      	blx	r3
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20004154 	.word	0x20004154

080032f0 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 80032f4:	f7ff ffd4 	bl	80032a0 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <CAN_SCE_IRQHandler+0x14>)
 80032fa:	f7ff fe5f 	bl	8002fbc <MCAL_CAN_init>
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20004154 	.word	0x20004154

08003308 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d854      	bhi.n	80033c2 <NVIC_ENABLE+0xba>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <NVIC_ENABLE+0x18>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003361 	.word	0x08003361
 8003324:	0800336f 	.word	0x0800336f
 8003328:	0800337d 	.word	0x0800337d
 800332c:	0800338b 	.word	0x0800338b
 8003330:	08003399 	.word	0x08003399
 8003334:	080033a7 	.word	0x080033a7
 8003338:	080033a7 	.word	0x080033a7
 800333c:	080033a7 	.word	0x080033a7
 8003340:	080033a7 	.word	0x080033a7
 8003344:	080033a7 	.word	0x080033a7
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033b5 	.word	0x080033b5
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
	case 0:
		NVIC_EXTI0_EN;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	6013      	str	r3, [r2, #0]
		break;
 800336c:	e029      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003378:	6013      	str	r3, [r2, #0]
		break;
 800337a:	e022      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <NVIC_ENABLE+0xc4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	6013      	str	r3, [r2, #0]
		break;
 8003388:	e01b      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <NVIC_ENABLE+0xc4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <NVIC_ENABLE+0xc4>)
 8003390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003394:	6013      	str	r3, [r2, #0]
		break;
 8003396:	e014      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <NVIC_ENABLE+0xc4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <NVIC_ENABLE+0xc4>)
 800339e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a2:	6013      	str	r3, [r2, #0]
		break;
 80033a4:	e00d      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <NVIC_ENABLE+0xc4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <NVIC_ENABLE+0xc4>)
 80033ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b0:	6013      	str	r3, [r2, #0]
		break;
 80033b2:	e006      	b.n	80033c2 <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <NVIC_ENABLE+0xc8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <NVIC_ENABLE+0xc8>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]
break;
 80033c0:	bf00      	nop

	}
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000e104 	.word	0xe000e104

080033d4 <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d854      	bhi.n	800348e <NVIC_DISABLE+0xba>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <NVIC_DISABLE+0x18>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	0800342d 	.word	0x0800342d
 80033f0:	0800343b 	.word	0x0800343b
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003457 	.word	0x08003457
 80033fc:	08003465 	.word	0x08003465
 8003400:	08003473 	.word	0x08003473
 8003404:	08003473 	.word	0x08003473
 8003408:	08003473 	.word	0x08003473
 800340c:	08003473 	.word	0x08003473
 8003410:	08003473 	.word	0x08003473
 8003414:	08003481 	.word	0x08003481
 8003418:	08003481 	.word	0x08003481
 800341c:	08003481 	.word	0x08003481
 8003420:	08003481 	.word	0x08003481
 8003424:	08003481 	.word	0x08003481
 8003428:	08003481 	.word	0x08003481
	case 0:
		NVIC_EXTI0_D;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <NVIC_DISABLE+0xc4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003436:	6013      	str	r3, [r2, #0]
		break;
 8003438:	e029      	b.n	800348e <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <NVIC_DISABLE+0xc4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003444:	6013      	str	r3, [r2, #0]
		break;
 8003446:	e022      	b.n	800348e <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <NVIC_DISABLE+0xc4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <NVIC_DISABLE+0xc4>)
 800344e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003452:	6013      	str	r3, [r2, #0]
		break;
 8003454:	e01b      	b.n	800348e <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <NVIC_DISABLE+0xc4>)
 800345c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003460:	6013      	str	r3, [r2, #0]
		break;
 8003462:	e014      	b.n	800348e <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <NVIC_DISABLE+0xc4>)
 800346a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800346e:	6013      	str	r3, [r2, #0]
		break;
 8003470:	e00d      	b.n	800348e <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <NVIC_DISABLE+0xc4>)
 8003478:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800347c:	6013      	str	r3, [r2, #0]
		break;
 800347e:	e006      	b.n	800348e <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <NVIC_DISABLE+0xc8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <NVIC_DISABLE+0xc8>)
 8003486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348a:	6013      	str	r3, [r2, #0]
break;
 800348c:	bf00      	nop

	}
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000e104 	.word	0xe000e104

080034a0 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |=(1<<0);
 80034a8:	4b65      	ldr	r3, [pc, #404]	; (8003640 <MCAL_EXTI_init+0x1a0>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	4a64      	ldr	r2, [pc, #400]	; (8003640 <MCAL_EXTI_init+0x1a0>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6193      	str	r3, [r2, #24]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	891b      	ldrh	r3, [r3, #8]
 80034d6:	813b      	strh	r3, [r7, #8]
 80034d8:	2301      	movs	r3, #1
 80034da:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f107 0208 	add.w	r2, r7, #8
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f9e2 	bl	80038b0 <MCAL_GPIO_init>

		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7b1b      	ldrb	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <MCAL_EXTI_init+0x6c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	4611      	mov	r1, r2
 80034fe:	2201      	movs	r2, #1
 8003500:	408a      	lsls	r2, r1
 8003502:	4611      	mov	r1, r2
 8003504:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
 800350a:	e029      	b.n	8003560 <MCAL_EXTI_init+0xc0>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7b1b      	ldrb	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10b      	bne.n	800352c <MCAL_EXTI_init+0x8c>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	8812      	ldrh	r2, [r2, #0]
 800351c:	4611      	mov	r1, r2
 800351e:	2201      	movs	r2, #1
 8003520:	408a      	lsls	r2, r1
 8003522:	4611      	mov	r1, r2
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6093      	str	r3, [r2, #8]
 800352a:	e019      	b.n	8003560 <MCAL_EXTI_init+0xc0>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7b1b      	ldrb	r3, [r3, #12]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d115      	bne.n	8003560 <MCAL_EXTI_init+0xc0>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003534:	4b43      	ldr	r3, [pc, #268]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	8812      	ldrh	r2, [r2, #0]
 800353c:	4611      	mov	r1, r2
 800353e:	2201      	movs	r2, #1
 8003540:	408a      	lsls	r2, r1
 8003542:	4611      	mov	r1, r2
 8003544:	4a3f      	ldr	r2, [pc, #252]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003546:	430b      	orrs	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4611      	mov	r1, r2
 8003554:	2201      	movs	r2, #1
 8003556:	408a      	lsls	r2, r1
 8003558:	4611      	mov	r1, r2
 800355a:	4a3a      	ldr	r2, [pc, #232]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 800355c:	430b      	orrs	r3, r1
 800355e:	6093      	str	r3, [r2, #8]


		}
		//UPDATE THE ALTERNATIVE FUNC
			AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8003560:	4a39      	ldr	r2, [pc, #228]	; (8003648 <MCAL_EXTI_init+0x1a8>)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	3302      	adds	r3, #2
 8003566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800356a:	7bbb      	ldrb	r3, [r7, #14]
 800356c:	210f      	movs	r1, #15
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <MCAL_EXTI_init+0x1a8>)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	4002      	ands	r2, r0
 800357c:	3302      	adds	r3, #2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8003582:	4a31      	ldr	r2, [pc, #196]	; (8003648 <MCAL_EXTI_init+0x1a8>)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	3302      	adds	r3, #2
 8003588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	492e      	ldr	r1, [pc, #184]	; (800364c <MCAL_EXTI_init+0x1ac>)
 8003592:	428b      	cmp	r3, r1
 8003594:	d016      	beq.n	80035c4 <MCAL_EXTI_init+0x124>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	492d      	ldr	r1, [pc, #180]	; (8003650 <MCAL_EXTI_init+0x1b0>)
 800359c:	428b      	cmp	r3, r1
 800359e:	d00f      	beq.n	80035c0 <MCAL_EXTI_init+0x120>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	492b      	ldr	r1, [pc, #172]	; (8003654 <MCAL_EXTI_init+0x1b4>)
 80035a6:	428b      	cmp	r3, r1
 80035a8:	d008      	beq.n	80035bc <MCAL_EXTI_init+0x11c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	492a      	ldr	r1, [pc, #168]	; (8003658 <MCAL_EXTI_init+0x1b8>)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d101      	bne.n	80035b8 <MCAL_EXTI_init+0x118>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e006      	b.n	80035c6 <MCAL_EXTI_init+0x126>
 80035b8:	2300      	movs	r3, #0
 80035ba:	e004      	b.n	80035c6 <MCAL_EXTI_init+0x126>
 80035bc:	2303      	movs	r3, #3
 80035be:	e002      	b.n	80035c6 <MCAL_EXTI_init+0x126>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <MCAL_EXTI_init+0x126>
 80035c4:	2300      	movs	r3, #0
 80035c6:	7bb9      	ldrb	r1, [r7, #14]
 80035c8:	408b      	lsls	r3, r1
 80035ca:	4618      	mov	r0, r3
 80035cc:	491e      	ldr	r1, [pc, #120]	; (8003648 <MCAL_EXTI_init+0x1a8>)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	4302      	orrs	r2, r0
 80035d2:	3302      	adds	r3, #2
 80035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	4619      	mov	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <MCAL_EXTI_init+0x1bc>)
 80035e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7b5b      	ldrb	r3, [r3, #13]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d111      	bne.n	8003614 <MCAL_EXTI_init+0x174>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	4611      	mov	r1, r2
 80035fa:	2201      	movs	r2, #1
 80035fc:	408a      	lsls	r2, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	4a10      	ldr	r2, [pc, #64]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003602:	430b      	orrs	r3, r1
 8003604:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fe7b 	bl	8003308 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 8003612:	e011      	b.n	8003638 <MCAL_EXTI_init+0x198>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	8812      	ldrh	r2, [r2, #0]
 800361c:	4611      	mov	r1, r2
 800361e:	2201      	movs	r2, #1
 8003620:	408a      	lsls	r2, r1
 8003622:	43d2      	mvns	r2, r2
 8003624:	4611      	mov	r1, r2
 8003626:	4a07      	ldr	r2, [pc, #28]	; (8003644 <MCAL_EXTI_init+0x1a4>)
 8003628:	400b      	ands	r3, r1
 800362a:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fece 	bl	80033d4 <NVIC_DISABLE>
	}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	40010400 	.word	0x40010400
 8003648:	40010000 	.word	0x40010000
 800364c:	40010800 	.word	0x40010800
 8003650:	40010c00 	.word	0x40010c00
 8003654:	40011000 	.word	0x40011000
 8003658:	40011400 	.word	0x40011400
 800365c:	20004160 	.word	0x20004160

08003660 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <EXTI0_IRQHandler+0x1c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <EXTI0_IRQHandler+0x20>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <EXTI0_IRQHandler+0x20>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6153      	str	r3, [r2, #20]
	}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20004160 	.word	0x20004160
 8003680:	40010400 	.word	0x40010400

08003684 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <EXTI1_IRQHandler+0x1c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <EXTI1_IRQHandler+0x20>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <EXTI1_IRQHandler+0x20>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	6153      	str	r3, [r2, #20]

	}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20004160 	.word	0x20004160
 80036a4:	40010400 	.word	0x40010400

080036a8 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <EXTI2_IRQHandler+0x1c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <EXTI2_IRQHandler+0x20>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <EXTI2_IRQHandler+0x20>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6153      	str	r3, [r2, #20]

	}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20004160 	.word	0x20004160
 80036c8:	40010400 	.word	0x40010400

080036cc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <EXTI3_IRQHandler+0x1c>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <EXTI3_IRQHandler+0x20>)
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <EXTI3_IRQHandler+0x20>)
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	6153      	str	r3, [r2, #20]

	}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20004160 	.word	0x20004160
 80036ec:	40010400 	.word	0x40010400

080036f0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <EXTI4_IRQHandler+0x1c>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <EXTI4_IRQHandler+0x20>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4a04      	ldr	r2, [pc, #16]	; (8003710 <EXTI4_IRQHandler+0x20>)
 8003700:	f043 0310 	orr.w	r3, r3, #16
 8003704:	6153      	str	r3, [r2, #20]

	}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20004160 	.word	0x20004160
 8003710:	40010400 	.word	0x40010400

08003714 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <EXTI9_5_IRQHandler+0x22>
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 800372a:	f043 0320 	orr.w	r3, r3, #32
 800372e:	6153      	str	r3, [r2, #20]
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <EXTI9_5_IRQHandler+0xa4>)
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8003736:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <EXTI9_5_IRQHandler+0x40>
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374c:	6153      	str	r3, [r2, #20]
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <EXTI9_5_IRQHandler+0xa4>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <EXTI9_5_IRQHandler+0x5e>
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	6153      	str	r3, [r2, #20]
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <EXTI9_5_IRQHandler+0xa4>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <EXTI9_5_IRQHandler+0x7c>
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6153      	str	r3, [r2, #20]
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <EXTI9_5_IRQHandler+0xa4>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <EXTI9_5_IRQHandler+0x9a>
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <EXTI9_5_IRQHandler+0xa0>)
 80037a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a6:	6153      	str	r3, [r2, #20]
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <EXTI9_5_IRQHandler+0xa4>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	4798      	blx	r3
	}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40010400 	.word	0x40010400
 80037b8:	20004160 	.word	0x20004160

080037bc <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <EXTI15_10_IRQHandler+0x22>
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4a29      	ldr	r2, [pc, #164]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d6:	6153      	str	r3, [r2, #20]
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <EXTI15_10_IRQHandler+0x40>
 80037ea:	4b23      	ldr	r3, [pc, #140]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037f4:	6153      	str	r3, [r2, #20]
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <EXTI15_10_IRQHandler+0x5e>
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800380e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003812:	6153      	str	r3, [r2, #20]
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <EXTI15_10_IRQHandler+0x7c>
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800382c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003830:	6153      	str	r3, [r2, #20]
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <EXTI15_10_IRQHandler+0x9a>
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 800384a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384e:	6153      	str	r3, [r2, #20]
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <EXTI15_10_IRQHandler+0xb8>
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <EXTI15_10_IRQHandler+0xbc>)
 8003868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386c:	6153      	str	r3, [r2, #20]
 800386e:	4b03      	ldr	r3, [pc, #12]	; (800387c <EXTI15_10_IRQHandler+0xc0>)
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	4798      	blx	r3

	}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400
 800387c:	20004160 	.word	0x20004160

08003880 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b07      	cmp	r3, #7
 800388e:	d803      	bhi.n	8003898 <Get_PIN_Positon+0x18>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	b29b      	uxth	r3, r3
 8003896:	e004      	b.n	80038a2 <Get_PIN_Positon+0x22>
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	3b08      	subs	r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	81fb      	strh	r3, [r7, #14]
return positon;
 80038a4:	89fb      	ldrh	r3, [r7, #14]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <MCAL_GPIO_init+0x1bc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d106      	bne.n	80038d0 <MCAL_GPIO_init+0x20>
 80038c2:	4b6b      	ldr	r3, [pc, #428]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6193      	str	r3, [r2, #24]
 80038ce:	e02a      	b.n	8003926 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <MCAL_GPIO_init+0x1c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d106      	bne.n	80038e6 <MCAL_GPIO_init+0x36>
 80038d8:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4a64      	ldr	r2, [pc, #400]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038de:	f043 0308 	orr.w	r3, r3, #8
 80038e2:	6193      	str	r3, [r2, #24]
 80038e4:	e01f      	b.n	8003926 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a63      	ldr	r2, [pc, #396]	; (8003a78 <MCAL_GPIO_init+0x1c8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d106      	bne.n	80038fc <MCAL_GPIO_init+0x4c>
 80038ee:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	6193      	str	r3, [r2, #24]
 80038fa:	e014      	b.n	8003926 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a5f      	ldr	r2, [pc, #380]	; (8003a7c <MCAL_GPIO_init+0x1cc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d106      	bne.n	8003912 <MCAL_GPIO_init+0x62>
 8003904:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4a59      	ldr	r2, [pc, #356]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	e009      	b.n	8003926 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a5a      	ldr	r2, [pc, #360]	; (8003a80 <MCAL_GPIO_init+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d105      	bne.n	8003926 <MCAL_GPIO_init+0x76>
 800391a:	4b55      	ldr	r3, [pc, #340]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <MCAL_GPIO_init+0x1c0>)
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b07      	cmp	r3, #7
 800392e:	d801      	bhi.n	8003934 <MCAL_GPIO_init+0x84>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	e001      	b.n	8003938 <MCAL_GPIO_init+0x88>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff9d 	bl	8003880 <Get_PIN_Positon>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	230f      	movs	r3, #15
 800394c:	4093      	lsls	r3, r2
 800394e:	43da      	mvns	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	401a      	ands	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	789b      	ldrb	r3, [r3, #2]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <MCAL_GPIO_init+0xd2>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d009      	beq.n	8003982 <MCAL_GPIO_init+0xd2>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d004      	beq.n	8003982 <MCAL_GPIO_init+0xd2>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b03      	cmp	r3, #3
 8003980:	d156      	bne.n	8003a30 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	789b      	ldrb	r3, [r3, #2]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d11c      	bne.n	80039c6 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ff74 	bl	8003880 <Get_PIN_Positon>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	2308      	movs	r3, #8
 800399e:	fa03 f202 	lsl.w	r2, r3, r2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	2301      	movs	r3, #1
 80039b6:	4093      	lsls	r3, r2
 80039b8:	43da      	mvns	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	401a      	ands	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80039c4:	e04d      	b.n	8003a62 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	789b      	ldrb	r3, [r3, #2]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d11c      	bne.n	8003a0a <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff52 	bl	8003880 <Get_PIN_Positon>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	2308      	movs	r3, #8
 80039e2:	fa03 f202 	lsl.w	r2, r3, r2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	2301      	movs	r3, #1
 80039fa:	fa03 f202 	lsl.w	r2, r3, r2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8003a08:	e02b      	b.n	8003a62 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	789b      	ldrb	r3, [r3, #2]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	009c      	lsls	r4, r3, #2
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff31 	bl	8003880 <Get_PIN_Positon>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	fa04 f203 	lsl.w	r2, r4, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8003a2e:	e018      	b.n	8003a62 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	789b      	ldrb	r3, [r3, #2]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3b04      	subs	r3, #4
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	78d2      	ldrb	r2, [r2, #3]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	ea43 0402 	orr.w	r4, r3, r2
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff18 	bl	8003880 <Get_PIN_Positon>
 8003a50:	4603      	mov	r3, r0
 8003a52:	fa04 f203 	lsl.w	r2, r4, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

	}

}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40010800 	.word	0x40010800
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40010c00 	.word	0x40010c00
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	40011400 	.word	0x40011400
 8003a80:	40011800 	.word	0x40011800

08003a84 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
 8003a90:	4613      	mov	r3, r2
 8003a92:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10b      	bne.n	8003ab4 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	fa03 f202 	lsl.w	r2, r3, r2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60da      	str	r2, [r3, #12]

	}



}
 8003ab2:	e00a      	b.n	8003aca <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	4093      	lsls	r3, r2
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	40d3      	lsrs	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	b29b      	uxth	r3, r3

}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8003b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	7813      	ldrb	r3, [r2, #0]
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8003b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b20:	6913      	ldr	r3, [r2, #16]
 8003b22:	f36f 0300 	bfc	r3, #0, #1
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	e04e      	b.n	8003bc8 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8003b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	7813      	ldrb	r3, [r2, #0]
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8003b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b48:	6913      	ldr	r3, [r2, #16]
 8003b4a:	f36f 0341 	bfc	r3, #1, #1
 8003b4e:	6113      	str	r3, [r2, #16]
 8003b50:	e03a      	b.n	8003bc8 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8003b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	7813      	ldrb	r3, [r2, #0]
 8003b66:	f043 0304 	orr.w	r3, r3, #4
 8003b6a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8003b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b70:	6913      	ldr	r3, [r2, #16]
 8003b72:	f36f 0382 	bfc	r3, #2, #1
 8003b76:	6113      	str	r3, [r2, #16]
 8003b78:	e026      	b.n	8003bc8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8003b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	7813      	ldrb	r3, [r2, #0]
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8003b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b98:	6913      	ldr	r3, [r2, #16]
 8003b9a:	f36f 03c3 	bfc	r3, #3, #1
 8003b9e:	6113      	str	r3, [r2, #16]
 8003ba0:	e012      	b.n	8003bc8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8003ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	7813      	ldrb	r3, [r2, #0]
 8003bb6:	f043 0310 	orr.w	r3, r3, #16
 8003bba:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8003bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bc0:	6913      	ldr	r3, [r2, #16]
 8003bc2:	f36f 1304 	bfc	r3, #4, #1
 8003bc6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <TIM2_IRQHandler+0xdc>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3

}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	2000419c 	.word	0x2000419c

08003bdc <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	7813      	ldrb	r3, [r2, #0]
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003bfc:	6913      	ldr	r3, [r2, #16]
 8003bfe:	f36f 0300 	bfc	r3, #0, #1
 8003c02:	6113      	str	r3, [r2, #16]
 8003c04:	e046      	b.n	8003c94 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	7813      	ldrb	r3, [r2, #0]
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8003c1e:	4a21      	ldr	r2, [pc, #132]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c20:	6913      	ldr	r3, [r2, #16]
 8003c22:	f36f 0341 	bfc	r3, #1, #1
 8003c26:	6113      	str	r3, [r2, #16]
 8003c28:	e034      	b.n	8003c94 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	7813      	ldrb	r3, [r2, #0]
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c44:	6913      	ldr	r3, [r2, #16]
 8003c46:	f36f 0382 	bfc	r3, #2, #1
 8003c4a:	6113      	str	r3, [r2, #16]
 8003c4c:	e022      	b.n	8003c94 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	7813      	ldrb	r3, [r2, #0]
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c68:	6913      	ldr	r3, [r2, #16]
 8003c6a:	f36f 03c3 	bfc	r3, #3, #1
 8003c6e:	6113      	str	r3, [r2, #16]
 8003c70:	e010      	b.n	8003c94 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	7813      	ldrb	r3, [r2, #0]
 8003c84:	f043 0310 	orr.w	r3, r3, #16
 8003c88:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8003c8a:	4a06      	ldr	r2, [pc, #24]	; (8003ca4 <TIM3_IRQHandler+0xc8>)
 8003c8c:	6913      	ldr	r3, [r2, #16]
 8003c8e:	f36f 1304 	bfc	r3, #4, #1
 8003c92:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <TIM3_IRQHandler+0xcc>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	2000419c 	.word	0x2000419c

08003cac <TIM4_IRQHandler>:
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	7813      	ldrb	r3, [r2, #0]
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003ccc:	6913      	ldr	r3, [r2, #16]
 8003cce:	f36f 0300 	bfc	r3, #0, #1
 8003cd2:	6113      	str	r3, [r2, #16]
 8003cd4:	e04b      	b.n	8003d6e <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	7813      	ldrb	r3, [r2, #0]
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003cf0:	6913      	ldr	r3, [r2, #16]
 8003cf2:	f36f 0341 	bfc	r3, #1, #1
 8003cf6:	6113      	str	r3, [r2, #16]
 8003cf8:	e039      	b.n	8003d6e <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00f      	beq.n	8003d28 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	7813      	ldrb	r3, [r2, #0]
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8003d12:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003d14:	6913      	ldr	r3, [r2, #16]
 8003d16:	f36f 0382 	bfc	r3, #2, #1
 8003d1a:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	7813      	ldrb	r3, [r2, #0]
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	7013      	strb	r3, [r2, #0]
 8003d26:	e022      	b.n	8003d6e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	7813      	ldrb	r3, [r2, #0]
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003d42:	6913      	ldr	r3, [r2, #16]
 8003d44:	f36f 03c3 	bfc	r3, #3, #1
 8003d48:	6113      	str	r3, [r2, #16]
 8003d4a:	e010      	b.n	8003d6e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	7813      	ldrb	r3, [r2, #0]
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8003d64:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <TIM4_IRQHandler+0xd4>)
 8003d66:	6913      	ldr	r3, [r2, #16]
 8003d68:	f36f 1304 	bfc	r3, #4, #1
 8003d6c:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <TIM4_IRQHandler+0xd8>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3


}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40000800 	.word	0x40000800
 8003d84:	2000419c 	.word	0x2000419c

08003d88 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <MCAL_GET_SYS_CLCK+0x34>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d00a      	beq.n	8003db0 <MCAL_GET_SYS_CLCK+0x28>
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d80a      	bhi.n	8003db4 <MCAL_GET_SYS_CLCK+0x2c>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <MCAL_GET_SYS_CLCK+0x20>
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d002      	beq.n	8003dac <MCAL_GET_SYS_CLCK+0x24>
 8003da6:	e005      	b.n	8003db4 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <MCAL_GET_SYS_CLCK+0x38>)
 8003daa:	e003      	b.n	8003db4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <MCAL_GET_SYS_CLCK+0x3c>)
 8003dae:	e001      	b.n	8003db4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <MCAL_GET_SYS_CLCK+0x40>)
 8003db2:	e7ff      	b.n	8003db4 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	007a1200 	.word	0x007a1200
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	02255100 	.word	0x02255100

08003dcc <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8003dd0:	f7ff ffda 	bl	8003d88 <MCAL_GET_SYS_CLCK>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <MCAL_GET_H_CLCK+0x20>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <MCAL_GET_H_CLCK+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	20000010 	.word	0x20000010

08003df4 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8003df8:	f7ff ffe8 	bl	8003dcc <MCAL_GET_H_CLCK>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <MCAL_GET_PCLCK1+0x20>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	; (8003e18 <MCAL_GET_PCLCK1+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	20000008 	.word	0x20000008

08003e1c <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8003e20:	f7ff ffd4 	bl	8003dcc <MCAL_GET_H_CLCK>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <MCAL_GET_PCLCK2+0x20>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	0adb      	lsrs	r3, r3, #11
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4903      	ldr	r1, [pc, #12]	; (8003e40 <MCAL_GET_PCLCK2+0x24>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	20000008 	.word	0x20000008

08003e44 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <MCAL_SPI_init+0x16c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10c      	bne.n	8003e70 <MCAL_SPI_init+0x2c>
 8003e56:	4a57      	ldr	r2, [pc, #348]	; (8003fb4 <MCAL_SPI_init+0x170>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003e62:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <MCAL_SPI_init+0x174>)
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	4a54      	ldr	r2, [pc, #336]	; (8003fb8 <MCAL_SPI_init+0x174>)
 8003e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e6c:	6193      	str	r3, [r2, #24]
 8003e6e:	e011      	b.n	8003e94 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a52      	ldr	r2, [pc, #328]	; (8003fbc <MCAL_SPI_init+0x178>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10d      	bne.n	8003e94 <MCAL_SPI_init+0x50>
 8003e78:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <MCAL_SPI_init+0x170>)
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	f103 0410 	add.w	r4, r3, #16
 8003e80:	4613      	mov	r3, r2
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003e88:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <MCAL_SPI_init+0x174>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	4a4a      	ldr	r2, [pc, #296]	; (8003fb8 <MCAL_SPI_init+0x174>)
 8003e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e92:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	789b      	ldrb	r3, [r3, #2]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	8813      	ldrh	r3, [r2, #0]
 8003ea2:	f361 23cb 	bfi	r3, r1, #11, #1
 8003ea6:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	799b      	ldrb	r3, [r3, #6]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	b2d9      	uxtb	r1, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	8813      	ldrh	r3, [r2, #0]
 8003eb6:	f361 0341 	bfi	r3, r1, #1, #1
 8003eba:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	79db      	ldrb	r3, [r3, #7]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	b2d9      	uxtb	r1, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	8813      	ldrh	r3, [r2, #0]
 8003eca:	f361 0300 	bfi	r3, r1, #0, #1
 8003ece:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	78db      	ldrb	r3, [r3, #3]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	b2d9      	uxtb	r1, r3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	8813      	ldrh	r3, [r2, #0]
 8003ede:	f361 13c7 	bfi	r3, r1, #7, #1
 8003ee2:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <MCAL_SPI_init+0xb4>
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	8813      	ldrh	r3, [r2, #0]
 8003ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef4:	8013      	strh	r3, [r2, #0]
 8003ef6:	e01c      	b.n	8003f32 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	791b      	ldrb	r3, [r3, #4]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10a      	bne.n	8003f16 <MCAL_SPI_init+0xd2>
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	8813      	ldrh	r3, [r2, #0]
 8003f04:	f36f 2349 	bfc	r3, #9, #1
 8003f08:	8013      	strh	r3, [r2, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	7913      	ldrb	r3, [r2, #4]
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	7113      	strb	r3, [r2, #4]
 8003f14:	e00d      	b.n	8003f32 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	791b      	ldrb	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d109      	bne.n	8003f32 <MCAL_SPI_init+0xee>
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	8813      	ldrh	r3, [r2, #0]
 8003f22:	f36f 2349 	bfc	r3, #9, #1
 8003f26:	8013      	strh	r3, [r2, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	7913      	ldrb	r3, [r2, #4]
 8003f2c:	f36f 0382 	bfc	r3, #2, #1
 8003f30:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	b2d9      	uxtb	r1, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	8813      	ldrh	r3, [r2, #0]
 8003f40:	f361 0382 	bfi	r3, r1, #2, #1
 8003f44:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	795b      	ldrb	r3, [r3, #5]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	b2d9      	uxtb	r1, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	8813      	ldrh	r3, [r2, #0]
 8003f54:	f361 03c5 	bfi	r3, r1, #3, #3
 8003f58:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	7a1b      	ldrb	r3, [r3, #8]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d114      	bne.n	8003f8c <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <MCAL_SPI_init+0x16c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d106      	bne.n	8003f78 <MCAL_SPI_init+0x134>
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <MCAL_SPI_init+0x17c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <MCAL_SPI_init+0x17c>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e009      	b.n	8003f8c <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <MCAL_SPI_init+0x178>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d105      	bne.n	8003f8c <MCAL_SPI_init+0x148>
 8003f80:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <MCAL_SPI_init+0x17c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <MCAL_SPI_init+0x17c>)
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f853 	bl	8004038 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	b2d9      	uxtb	r1, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	8813      	ldrh	r3, [r2, #0]
 8003fa0:	f361 1386 	bfi	r3, r1, #6, #1
 8003fa4:	8013      	strh	r3, [r2, #0]




}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40013000 	.word	0x40013000
 8003fb4:	200041cc 	.word	0x200041cc
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40003800 	.word	0x40003800
 8003fc0:	e000e104 	.word	0xe000e104

08003fc4 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <MCAL_SPI_SendData+0x64>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d102      	bne.n	8003fe2 <MCAL_SPI_SendData+0x1e>
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <MCAL_SPI_SendData+0x68>)
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e005      	b.n	8003fee <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a12      	ldr	r2, [pc, #72]	; (8004030 <MCAL_SPI_SendData+0x6c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <MCAL_SPI_SendData+0x2a>
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <MCAL_SPI_SendData+0x70>)
 8003fec:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	7a1b      	ldrb	r3, [r3, #8]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	7913      	ldrb	r3, [r2, #4]
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	7113      	strb	r3, [r2, #4]
 8004000:	e007      	b.n	8004012 <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 8004002:	bf00      	nop
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f8      	beq.n	8004004 <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	b2db      	uxtb	r3, r3

}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	40013000 	.word	0x40013000
 800402c:	200041cc 	.word	0x200041cc
 8004030:	40003800 	.word	0x40003800
 8004034:	200041dc 	.word	0x200041dc

08004038 <MCAL_SET_GPIO>:
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);


}

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 8004038:	b580      	push	{r7, lr}
 800403a:	b096      	sub	sp, #88	; 0x58
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	657b      	str	r3, [r7, #84]	; 0x54
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a6c      	ldr	r2, [pc, #432]	; (80041f8 <MCAL_SET_GPIO+0x1c0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d169      	bne.n	8004120 <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 800404c:	4b6b      	ldr	r3, [pc, #428]	; (80041fc <MCAL_SET_GPIO+0x1c4>)
 800404e:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 8004050:	4b6b      	ldr	r3, [pc, #428]	; (8004200 <MCAL_SET_GPIO+0x1c8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a6a      	ldr	r2, [pc, #424]	; (8004200 <MCAL_SET_GPIO+0x1c8>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <MCAL_SET_GPIO+0x3e>
 8004064:	4b67      	ldr	r3, [pc, #412]	; (8004204 <MCAL_SET_GPIO+0x1cc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
 800406a:	4a63      	ldr	r2, [pc, #396]	; (80041f8 <MCAL_SET_GPIO+0x1c0>)
 800406c:	8813      	ldrh	r3, [r2, #0]
 800406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004072:	8013      	strh	r3, [r2, #0]
 8004074:	e00e      	b.n	8004094 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8004076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d103      	bne.n	8004086 <MCAL_SET_GPIO+0x4e>
 800407e:	4b62      	ldr	r3, [pc, #392]	; (8004208 <MCAL_SET_GPIO+0x1d0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
 8004084:	e006      	b.n	8004094 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	791b      	ldrb	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d102      	bne.n	8004094 <MCAL_SET_GPIO+0x5c>
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <MCAL_SET_GPIO+0x1d4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8004094:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004098:	4619      	mov	r1, r3
 800409a:	485d      	ldr	r0, [pc, #372]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 800409c:	f7ff fc08 	bl	80038b0 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d103      	bne.n	80040b0 <MCAL_SET_GPIO+0x78>
 80040a8:	4b5a      	ldr	r3, [pc, #360]	; (8004214 <MCAL_SET_GPIO+0x1dc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 80040ae:	e006      	b.n	80040be <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <MCAL_SET_GPIO+0x86>
 80040b8:	4b57      	ldr	r3, [pc, #348]	; (8004218 <MCAL_SET_GPIO+0x1e0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80040be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040c2:	4619      	mov	r1, r3
 80040c4:	4852      	ldr	r0, [pc, #328]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 80040c6:	f7ff fbf3 	bl	80038b0 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d103      	bne.n	80040da <MCAL_SET_GPIO+0xa2>
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <MCAL_SET_GPIO+0x1e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
 80040d8:	e006      	b.n	80040e8 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 80040da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <MCAL_SET_GPIO+0xb0>
 80040e2:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <MCAL_SET_GPIO+0x1e8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80040e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040ec:	4619      	mov	r1, r3
 80040ee:	4848      	ldr	r0, [pc, #288]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 80040f0:	f7ff fbde 	bl	80038b0 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 80040f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d103      	bne.n	8004104 <MCAL_SET_GPIO+0xcc>
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <MCAL_SET_GPIO+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
 8004102:	e006      	b.n	8004112 <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <MCAL_SET_GPIO+0xda>
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <MCAL_SET_GPIO+0x1f0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8004112:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004116:	4619      	mov	r1, r3
 8004118:	483d      	ldr	r0, [pc, #244]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 800411a:	f7ff fbc9 	bl	80038b0 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 800411e:	e067      	b.n	80041f0 <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a42      	ldr	r2, [pc, #264]	; (800422c <MCAL_SET_GPIO+0x1f4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d163      	bne.n	80041f0 <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 8004128:	4b41      	ldr	r3, [pc, #260]	; (8004230 <MCAL_SET_GPIO+0x1f8>)
 800412a:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 800412c:	4b34      	ldr	r3, [pc, #208]	; (8004200 <MCAL_SET_GPIO+0x1c8>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4a33      	ldr	r2, [pc, #204]	; (8004200 <MCAL_SET_GPIO+0x1c8>)
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	791b      	ldrb	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <MCAL_SET_GPIO+0x110>
 8004140:	4b3c      	ldr	r3, [pc, #240]	; (8004234 <MCAL_SET_GPIO+0x1fc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	653b      	str	r3, [r7, #80]	; 0x50
 8004146:	e00e      	b.n	8004166 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8004148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414a:	791b      	ldrb	r3, [r3, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d103      	bne.n	8004158 <MCAL_SET_GPIO+0x120>
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <MCAL_SET_GPIO+0x1fc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
 8004156:	e006      	b.n	8004166 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	791b      	ldrb	r3, [r3, #4]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d102      	bne.n	8004166 <MCAL_SET_GPIO+0x12e>
 8004160:	4b35      	ldr	r3, [pc, #212]	; (8004238 <MCAL_SET_GPIO+0x200>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8004166:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800416a:	4619      	mov	r1, r3
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 800416e:	f7ff fb9f 	bl	80038b0 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 8004172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d103      	bne.n	8004182 <MCAL_SET_GPIO+0x14a>
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <MCAL_SET_GPIO+0x204>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
 8004180:	e006      	b.n	8004190 <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <MCAL_SET_GPIO+0x158>
 800418a:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <MCAL_SET_GPIO+0x208>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	653b      	str	r3, [r7, #80]	; 0x50
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8004190:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004194:	4619      	mov	r1, r3
 8004196:	481e      	ldr	r0, [pc, #120]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 8004198:	f7ff fb8a 	bl	80038b0 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d103      	bne.n	80041ac <MCAL_SET_GPIO+0x174>
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <MCAL_SET_GPIO+0x20c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	653b      	str	r3, [r7, #80]	; 0x50
 80041aa:	e006      	b.n	80041ba <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <MCAL_SET_GPIO+0x182>
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <MCAL_SET_GPIO+0x210>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	653b      	str	r3, [r7, #80]	; 0x50
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80041ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041be:	4619      	mov	r1, r3
 80041c0:	4813      	ldr	r0, [pc, #76]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 80041c2:	f7ff fb75 	bl	80038b0 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d103      	bne.n	80041d6 <MCAL_SET_GPIO+0x19e>
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <MCAL_SET_GPIO+0x214>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
 80041d4:	e006      	b.n	80041e4 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <MCAL_SET_GPIO+0x1ac>
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <MCAL_SET_GPIO+0x218>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	653b      	str	r3, [r7, #80]	; 0x50
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80041e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041e8:	4619      	mov	r1, r3
 80041ea:	4809      	ldr	r0, [pc, #36]	; (8004210 <MCAL_SET_GPIO+0x1d8>)
 80041ec:	f7ff fb60 	bl	80038b0 <MCAL_GPIO_init>
}
 80041f0:	bf00      	nop
 80041f2:	3758      	adds	r7, #88	; 0x58
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013000 	.word	0x40013000
 80041fc:	200041cc 	.word	0x200041cc
 8004200:	40021000 	.word	0x40021000
 8004204:	080055d4 	.word	0x080055d4
 8004208:	080055d8 	.word	0x080055d8
 800420c:	080055dc 	.word	0x080055dc
 8004210:	40010800 	.word	0x40010800
 8004214:	080055e0 	.word	0x080055e0
 8004218:	080055e4 	.word	0x080055e4
 800421c:	080055e8 	.word	0x080055e8
 8004220:	080055ec 	.word	0x080055ec
 8004224:	080055f0 	.word	0x080055f0
 8004228:	080055f4 	.word	0x080055f4
 800422c:	40003800 	.word	0x40003800
 8004230:	200041dc 	.word	0x200041dc
 8004234:	080055f8 	.word	0x080055f8
 8004238:	080055fc 	.word	0x080055fc
 800423c:	08005600 	.word	0x08005600
 8004240:	08005604 	.word	0x08005604
 8004244:	08005608 	.word	0x08005608
 8004248:	0800560c 	.word	0x0800560c
 800424c:	08005610 	.word	0x08005610
 8004250:	08005614 	.word	0x08005614

08004254 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	4905      	ldr	r1, [pc, #20]	; (8004274 <SPI1_IRQHandler+0x20>)
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f80c 	bl	800427c <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <SPI1_IRQHandler+0x24>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	7938      	ldrb	r0, [r7, #4]
 800426a:	4798      	blx	r3
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40013000 	.word	0x40013000
 8004278:	200041cc 	.word	0x200041cc

0800427c <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00f      	beq.n	80042b4 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	7813      	ldrb	r3, [r2, #0]
 8004298:	f36f 0300 	bfc	r3, #0, #1
 800429c:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	7813      	ldrb	r3, [r2, #0]
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	7913      	ldrb	r3, [r2, #4]
 80042ac:	f36f 1386 	bfc	r3, #6, #1
 80042b0:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 80042b2:	e015      	b.n	80042e0 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	7813      	ldrb	r3, [r2, #0]
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	7813      	ldrb	r3, [r2, #0]
 80042d0:	f36f 0341 	bfc	r3, #1, #1
 80042d4:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	7913      	ldrb	r3, [r2, #4]
 80042da:	f36f 13c7 	bfc	r3, #7, #1
 80042de:	7113      	strb	r3, [r2, #4]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
	...

080042ec <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <MCAL_SET_TIMx_GPIO+0x24>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 80042fa:	f107 030c 	add.w	r3, r7, #12
 80042fe:	4619      	mov	r1, r3
 8004300:	4804      	ldr	r0, [pc, #16]	; (8004314 <MCAL_SET_TIMx_GPIO+0x28>)
 8004302:	f7ff fad5 	bl	80038b0 <MCAL_GPIO_init>
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	08005618 	.word	0x08005618
 8004314:	40010800 	.word	0x40010800

08004318 <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 8004322:	4a3d      	ldr	r2, [pc, #244]	; (8004418 <TIMER_1_8_start+0x100>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4614      	mov	r4, r2
 8004328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800432a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 800432e:	4a3b      	ldr	r2, [pc, #236]	; (800441c <TIMER_1_8_start+0x104>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <TIMER_1_8_start+0x108>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d105      	bne.n	8004348 <TIMER_1_8_start+0x30>
 800433c:	4b39      	ldr	r3, [pc, #228]	; (8004424 <TIMER_1_8_start+0x10c>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4a38      	ldr	r2, [pc, #224]	; (8004424 <TIMER_1_8_start+0x10c>)
 8004342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004346:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	885b      	ldrh	r3, [r3, #2]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	889b      	ldrh	r3, [r3, #4]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	7a5b      	ldrb	r3, [r3, #9]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d01c      	beq.n	80043b2 <TIMER_1_8_start+0x9a>
 8004378:	2b02      	cmp	r3, #2
 800437a:	dc20      	bgt.n	80043be <TIMER_1_8_start+0xa6>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <TIMER_1_8_start+0x6e>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d00b      	beq.n	800439c <TIMER_1_8_start+0x84>
 8004384:	e01b      	b.n	80043be <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	f36f 1346 	bfc	r3, #5, #2
 800438e:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	f36f 1304 	bfc	r3, #4, #1
 8004398:	6013      	str	r3, [r2, #0]
		break;
 800439a:	e013      	b.n	80043c4 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	f36f 1346 	bfc	r3, #5, #2
 80043a4:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6813      	ldr	r3, [r2, #0]
 80043aa:	f043 0310 	orr.w	r3, r3, #16
 80043ae:	6013      	str	r3, [r2, #0]
		break;
 80043b0:	e008      	b.n	80043c4 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6813      	ldr	r3, [r2, #0]
 80043b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043ba:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 80043bc:	e002      	b.n	80043c4 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 80043be:	f7fe fddb 	bl	8002f78 <ERROR_HANDLER>
		break;
 80043c2:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff91 	bl	80042ec <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	7a1b      	ldrb	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68d3      	ldr	r3, [r2, #12]
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <TIMER_1_8_start+0x110>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <TIMER_1_8_start+0x110>)
 80043ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043f0:	6013      	str	r3, [r2, #0]
	}else{
 		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 80043f2:	e00c      	b.n	800440e <TIMER_1_8_start+0xf6>
 		while(!TIMx->SR.BIT_NAME.UIF);
 80043f4:	bf00      	nop
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f8      	beq.n	80043f6 <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6913      	ldr	r3, [r2, #16]
 8004408:	f36f 0300 	bfc	r3, #0, #1
 800440c:	6113      	str	r3, [r2, #16]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	200041ec 	.word	0x200041ec
 800441c:	200041fc 	.word	0x200041fc
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40021000 	.word	0x40021000
 8004428:	e000e100 	.word	0xe000e100

0800442c <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <TIM1_UP_IRQHandler+0x1c>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <TIM1_UP_IRQHandler+0x20>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	6913      	ldr	r3, [r2, #16]
 800443c:	f36f 0300 	bfc	r3, #0, #1
 8004440:	6113      	str	r3, [r2, #16]

}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200041ec 	.word	0x200041ec
 800444c:	200041fc 	.word	0x200041fc

08004450 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <TIM1_CC_IRQHandler+0x1c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <TIM1_CC_IRQHandler+0x20>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	6913      	ldr	r3, [r2, #16]
 8004460:	f36f 0341 	bfc	r3, #1, #1
 8004464:	6113      	str	r3, [r2, #16]

}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200041ec 	.word	0x200041ec
 8004470:	200041fc 	.word	0x200041fc

08004474 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <TIM1_BRK_IRQHandler+0x1c>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <TIM1_BRK_IRQHandler+0x20>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	6913      	ldr	r3, [r2, #16]
 8004484:	f36f 0300 	bfc	r3, #0, #1
 8004488:	6113      	str	r3, [r2, #16]

}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200041ec 	.word	0x200041ec
 8004494:	200041fc 	.word	0x200041fc

08004498 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <TIM1_TRG_COM_IRQHandler+0x20>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	6913      	ldr	r3, [r2, #16]
 80044a8:	f36f 0300 	bfc	r3, #0, #1
 80044ac:	6113      	str	r3, [r2, #16]

}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	200041ec 	.word	0x200041ec
 80044b8:	200041fc 	.word	0x200041fc

080044bc <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 80044c6:	f7ff fca9 	bl	8003e1c <MCAL_GET_PCLCK2>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a0f      	ldr	r2, [pc, #60]	; (800450c <_TIM1_delay_us+0x50>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0c9b      	lsrs	r3, r3, #18
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29b      	uxth	r3, r3
 80044da:	813b      	strh	r3, [r7, #8]
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	817b      	strh	r3, [r7, #10]
 80044e4:	2300      	movs	r3, #0
 80044e6:	81bb      	strh	r3, [r7, #12]
 80044e8:	2300      	movs	r3, #0
 80044ea:	81fb      	strh	r3, [r7, #14]
 80044ec:	2301      	movs	r3, #1
 80044ee:	743b      	strb	r3, [r7, #16]
 80044f0:	2300      	movs	r3, #0
 80044f2:	747b      	strb	r3, [r7, #17]
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 80044f8:	f107 0308 	add.w	r3, r7, #8
 80044fc:	4619      	mov	r1, r3
 80044fe:	4804      	ldr	r0, [pc, #16]	; (8004510 <_TIM1_delay_us+0x54>)
 8004500:	f7ff ff0a 	bl	8004318 <TIMER_1_8_start>

}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	431bde83 	.word	0x431bde83
 8004510:	40012c00 	.word	0x40012c00

08004514 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e006      	b.n	8004532 <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 8004524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004528:	f7ff ffc8 	bl	80044bc <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d3f4      	bcc.n	8004524 <_TIM1_delay_ms+0x10>

}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_TIM1_delay_s>:
void _TIM1_delay_s(uint16_t delay){
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e006      	b.n	8004562 <_TIM1_delay_s+0x1e>
			_TIM1_delay_ms(1000);
 8004554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004558:	f7ff ffdc 	bl	8004514 <_TIM1_delay_ms>
		for(uint32_t i=0;i<delay;i++)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3f4      	bcc.n	8004554 <_TIM1_delay_s+0x10>

}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a8d      	ldr	r2, [pc, #564]	; (80047b8 <MCAL_USART_init+0x244>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10c      	bne.n	80045a0 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8004586:	4a8d      	ldr	r2, [pc, #564]	; (80047bc <MCAL_USART_init+0x248>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4614      	mov	r4, r2
 800458c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800458e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <MCAL_USART_init+0x24c>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4a8a      	ldr	r2, [pc, #552]	; (80047c0 <MCAL_USART_init+0x24c>)
 8004598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459c:	6193      	str	r3, [r2, #24]
 800459e:	e024      	b.n	80045ea <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a88      	ldr	r2, [pc, #544]	; (80047c4 <MCAL_USART_init+0x250>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10e      	bne.n	80045c6 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 80045a8:	4b84      	ldr	r3, [pc, #528]	; (80047bc <MCAL_USART_init+0x248>)
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	f103 0410 	add.w	r4, r3, #16
 80045b0:	4613      	mov	r3, r2
 80045b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 80045b8:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <MCAL_USART_init+0x24c>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <MCAL_USART_init+0x24c>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	61d3      	str	r3, [r2, #28]
 80045c4:	e011      	b.n	80045ea <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a7f      	ldr	r2, [pc, #508]	; (80047c8 <MCAL_USART_init+0x254>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10d      	bne.n	80045ea <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80045ce:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <MCAL_USART_init+0x248>)
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	f103 0420 	add.w	r4, r3, #32
 80045d6:	4613      	mov	r3, r2
 80045d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80045de:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <MCAL_USART_init+0x24c>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <MCAL_USART_init+0x24c>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e8:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	7912      	ldrb	r2, [r2, #4]
 80045fe:	0312      	lsls	r2, r2, #12
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	79d2      	ldrb	r2, [r2, #7]
 800460e:	0312      	lsls	r2, r2, #12
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	7a5b      	ldrb	r3, [r3, #9]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	7a1b      	ldrb	r3, [r3, #8]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d826      	bhi.n	800468c <MCAL_USART_init+0x118>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <MCAL_USART_init+0xd0>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004655 	.word	0x08004655
 8004648:	08004663 	.word	0x08004663
 800464c:	08004671 	.word	0x08004671
 8004650:	0800467f 	.word	0x0800467f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	615a      	str	r2, [r3, #20]
		break;
 8004660:	e014      	b.n	800468c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	615a      	str	r2, [r3, #20]
		break;
 800466e:	e00d      	b.n	800468c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	615a      	str	r2, [r3, #20]
		break;
 800467c:	e006      	b.n	800468c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	615a      	str	r2, [r3, #20]
		break;
 800468a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	7952      	ldrb	r2, [r2, #5]
 8004694:	0252      	lsls	r2, r2, #9
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	799b      	ldrb	r3, [r3, #6]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d125      	bne.n	80046f0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a44      	ldr	r2, [pc, #272]	; (80047b8 <MCAL_USART_init+0x244>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d106      	bne.n	80046ba <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <MCAL_USART_init+0x258>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a46      	ldr	r2, [pc, #280]	; (80047cc <MCAL_USART_init+0x258>)
 80046b2:	f043 0320 	orr.w	r3, r3, #32
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e014      	b.n	80046e4 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <MCAL_USART_init+0x250>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d106      	bne.n	80046d0 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80046c2:	4b42      	ldr	r3, [pc, #264]	; (80047cc <MCAL_USART_init+0x258>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a41      	ldr	r2, [pc, #260]	; (80047cc <MCAL_USART_init+0x258>)
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e009      	b.n	80046e4 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3d      	ldr	r2, [pc, #244]	; (80047c8 <MCAL_USART_init+0x254>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d105      	bne.n	80046e4 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80046d8:	4b3c      	ldr	r3, [pc, #240]	; (80047cc <MCAL_USART_init+0x258>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <MCAL_USART_init+0x258>)
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <MCAL_USART_init+0x244>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d12d      	bne.n	8004754 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80046f8:	f7ff fb90 	bl	8003e1c <MCAL_GET_PCLCK2>
 80046fc:	4602      	mov	r2, r0
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	011c      	lsls	r4, r3, #4
 800470a:	f7ff fb87 	bl	8003e1c <MCAL_GET_PCLCK2>
 800470e:	4602      	mov	r2, r0
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009a      	lsls	r2, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	fbb2 f5f3 	udiv	r5, r2, r3
 8004724:	f7ff fb7a 	bl	8003e1c <MCAL_GET_PCLCK2>
 8004728:	4602      	mov	r2, r0
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	2264      	movs	r2, #100	; 0x64
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	1aeb      	subs	r3, r5, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <MCAL_USART_init+0x25c>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	ea44 0203 	orr.w	r2, r4, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e070      	b.n	8004836 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <MCAL_USART_init+0x250>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d13b      	bne.n	80047d4 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800475c:	f7ff fb4a 	bl	8003df4 <MCAL_GET_PCLCK1>
 8004760:	4602      	mov	r2, r0
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f7ff fb41 	bl	8003df4 <MCAL_GET_PCLCK1>
 8004772:	4602      	mov	r2, r0
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f5f3 	udiv	r5, r2, r3
 8004788:	f7ff fb34 	bl	8003df4 <MCAL_GET_PCLCK1>
 800478c:	4602      	mov	r2, r0
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	2264      	movs	r2, #100	; 0x64
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	1aeb      	subs	r3, r5, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <MCAL_USART_init+0x25c>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	ea44 0203 	orr.w	r2, r4, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	e03e      	b.n	8004836 <MCAL_USART_init+0x2c2>
 80047b8:	40013800 	.word	0x40013800
 80047bc:	20004200 	.word	0x20004200
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40004400 	.word	0x40004400
 80047c8:	40004800 	.word	0x40004800
 80047cc:	e000e104 	.word	0xe000e104
 80047d0:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <MCAL_USART_init+0x2d0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d12c      	bne.n	8004836 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80047dc:	f7ff fb0a 	bl	8003df4 <MCAL_GET_PCLCK1>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	011c      	lsls	r4, r3, #4
 80047ee:	f7ff fb01 	bl	8003df4 <MCAL_GET_PCLCK1>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009a      	lsls	r2, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fbb2 f5f3 	udiv	r5, r2, r3
 8004808:	f7ff faf4 	bl	8003df4 <MCAL_GET_PCLCK1>
 800480c:	4602      	mov	r2, r0
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	2264      	movs	r2, #100	; 0x64
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	1aeb      	subs	r3, r5, r3
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <MCAL_USART_init+0x2d4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	ea44 0203 	orr.w	r2, r4, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f892 	bl	8004960 <SET_GPIO>
	}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bdb0      	pop	{r4, r5, r7, pc}
 8004844:	40004800 	.word	0x40004800
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
//	USARTx->DR=0;
	if(USARTx==USART1){
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <MCAL_USART_SendData+0x68>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d102      	bne.n	800486a <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <MCAL_USART_SendData+0x6c>)
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e00c      	b.n	8004884 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <MCAL_USART_SendData+0x70>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d102      	bne.n	8004878 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <MCAL_USART_SendData+0x74>)
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e005      	b.n	8004884 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <MCAL_USART_SendData+0x78>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <MCAL_USART_SendData+0x7c>)
 8004882:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8004884:	bf00      	nop
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f9      	beq.n	8004886 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d103      	bne.n	80048a2 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 80048a0:	e002      	b.n	80048a8 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40013800 	.word	0x40013800
 80048b8:	20004200 	.word	0x20004200
 80048bc:	40004400 	.word	0x40004400
 80048c0:	20004210 	.word	0x20004210
 80048c4:	40004800 	.word	0x40004800
 80048c8:	20004220 	.word	0x20004220

080048cc <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <MCAL_USART_ReciveData+0x7c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d102      	bne.n	80048e6 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <MCAL_USART_ReciveData+0x80>)
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e00c      	b.n	8004900 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <MCAL_USART_ReciveData+0x84>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d102      	bne.n	80048f4 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80048ee:	4b19      	ldr	r3, [pc, #100]	; (8004954 <MCAL_USART_ReciveData+0x88>)
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e005      	b.n	8004900 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <MCAL_USART_ReciveData+0x8c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <MCAL_USART_ReciveData+0x90>)
 80048fe:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	799b      	ldrb	r3, [r3, #6]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 8004908:	bf00      	nop
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f9      	beq.n	800490a <MCAL_USART_ReciveData+0x3e>
 8004916:	e002      	b.n	800491e <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	799b      	ldrb	r3, [r3, #6]
 800491c:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	795b      	ldrb	r3, [r3, #5]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	b29b      	uxth	r3, r3
 800492e:	e006      	b.n	800493e <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493c:	b29b      	uxth	r3, r3

		}

}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40013800 	.word	0x40013800
 800494c:	20004200 	.word	0x20004200
 8004950:	40004400 	.word	0x40004400
 8004954:	20004210 	.word	0x20004210
 8004958:	40004800 	.word	0x40004800
 800495c:	20004220 	.word	0x20004220

08004960 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8004968:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <SET_GPIO+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <SET_GPIO+0xc0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d115      	bne.n	80049a2 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8004976:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <SET_GPIO+0xc4>)
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <SET_GPIO+0xc4>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004982:	f107 031c 	add.w	r3, r7, #28
 8004986:	4619      	mov	r1, r3
 8004988:	4827      	ldr	r0, [pc, #156]	; (8004a28 <SET_GPIO+0xc8>)
 800498a:	f7fe ff91 	bl	80038b0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 800498e:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <SET_GPIO+0xcc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004994:	f107 031c 	add.w	r3, r7, #28
 8004998:	4619      	mov	r1, r3
 800499a:	4823      	ldr	r0, [pc, #140]	; (8004a28 <SET_GPIO+0xc8>)
 800499c:	f7fe ff88 	bl	80038b0 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 80049a0:	e038      	b.n	8004a14 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <SET_GPIO+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d118      	bne.n	80049dc <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <SET_GPIO+0xc4>)
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <SET_GPIO+0xc4>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <SET_GPIO+0xd4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	4619      	mov	r1, r3
 80049c2:	4819      	ldr	r0, [pc, #100]	; (8004a28 <SET_GPIO+0xc8>)
 80049c4:	f7fe ff74 	bl	80038b0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <SET_GPIO+0xd8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80049ce:	f107 031c 	add.w	r3, r7, #28
 80049d2:	4619      	mov	r1, r3
 80049d4:	4814      	ldr	r0, [pc, #80]	; (8004a28 <SET_GPIO+0xc8>)
 80049d6:	f7fe ff6b 	bl	80038b0 <MCAL_GPIO_init>
}
 80049da:	e01b      	b.n	8004a14 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <SET_GPIO+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d117      	bne.n	8004a14 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <SET_GPIO+0xc4>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <SET_GPIO+0xc4>)
 80049ea:	f043 0308 	orr.w	r3, r3, #8
 80049ee:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <SET_GPIO+0xe0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	4619      	mov	r1, r3
 80049fc:	4811      	ldr	r0, [pc, #68]	; (8004a44 <SET_GPIO+0xe4>)
 80049fe:	f7fe ff57 	bl	80038b0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <SET_GPIO+0xe8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8004a08:	f107 031c 	add.w	r3, r7, #28
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	480d      	ldr	r0, [pc, #52]	; (8004a44 <SET_GPIO+0xe4>)
 8004a10:	f7fe ff4e 	bl	80038b0 <MCAL_GPIO_init>
}
 8004a14:	bf00      	nop
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	0800561c 	.word	0x0800561c
 8004a20:	40013800 	.word	0x40013800
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40010800 	.word	0x40010800
 8004a2c:	08005620 	.word	0x08005620
 8004a30:	40004400 	.word	0x40004400
 8004a34:	08005624 	.word	0x08005624
 8004a38:	08005628 	.word	0x08005628
 8004a3c:	40004800 	.word	0x40004800
 8004a40:	0800562c 	.word	0x0800562c
 8004a44:	40010c00 	.word	0x40010c00
 8004a48:	08005630 	.word	0x08005630

08004a4c <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <USART1_IRQHandler+0x10>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4798      	blx	r3
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20004200 	.word	0x20004200

08004a60 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <USART2_IRQHandler+0x10>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20004200 	.word	0x20004200

08004a74 <USART3_IRQHandler>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <USART3_IRQHandler+0x10>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4798      	blx	r3
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20004200 	.word	0x20004200

08004a88 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
	while(1);
 8004a8c:	e7fe      	b.n	8004a8c <Error_Handller+0x4>
	...

08004a90 <Sys_Clk_init>:
}


void Sys_Clk_init(){
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	// system speed 36Mhz
	RCC->CFGR |=(0b0001 <<18); //1111: PLL input clock x 16
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9e:	6053      	str	r3, [r2, #4]
//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	RCC->CFGR |=(1 <<16); //PLL entry clock source
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aaa:	6053      	str	r3, [r2, #4]
	RCC->CR|=(1<<16); //HSE clock enable
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]

	RCC->CR|=(1<<24); //PLL ON
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <Sys_Clk_init+0x48>)
 8004aca:	f043 0302 	orr.w	r3, r3, #2
 8004ace:	6053      	str	r3, [r2, #4]


}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40021000 	.word	0x40021000

08004adc <DMS_Handller_TASK>:
/************DMS TASK*************/
/************DMS TASK*************/
/************DMS TASK*************/


void DMS_Handller_TASK(){
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
	while(1){
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <DMS_Handller_TASK+0x2c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2105      	movs	r1, #5
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fd6e 	bl	80005c8 <xQueueSemaphoreTake>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d104      	bne.n	8004afc <DMS_Handller_TASK+0x20>
			// here the action would take
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_TAKE_ACTION);
 8004af2:	2166      	movs	r1, #102	; 0x66
 8004af4:	4805      	ldr	r0, [pc, #20]	; (8004b0c <DMS_Handller_TASK+0x30>)
 8004af6:	f7ff fea9 	bl	800484c <MCAL_USART_SendData>
 8004afa:	e7f1      	b.n	8004ae0 <DMS_Handller_TASK+0x4>
		}else{
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_Release_ACTION);
 8004afc:	2155      	movs	r1, #85	; 0x55
 8004afe:	4803      	ldr	r0, [pc, #12]	; (8004b0c <DMS_Handller_TASK+0x30>)
 8004b00:	f7ff fea4 	bl	800484c <MCAL_USART_SendData>
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 8004b04:	e7ec      	b.n	8004ae0 <DMS_Handller_TASK+0x4>
 8004b06:	bf00      	nop
 8004b08:	20004230 	.word	0x20004230
 8004b0c:	40013800 	.word	0x40013800

08004b10 <DMS_read_TASK>:
		}

	}
}
void DMS_read_TASK(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
	while(1){
		if(DMS_read() ==0){
 8004b14:	f7fd face 	bl	80020b4 <DMS_read>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1fa      	bne.n	8004b14 <DMS_read_TASK+0x4>
			xSemaphoreGive(DMS_Semaphore);
 8004b1e:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <DMS_read_TASK+0x20>)
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	2200      	movs	r2, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	f7fb fca4 	bl	8000474 <xQueueGenericSend>
		if(DMS_read() ==0){
 8004b2c:	e7f2      	b.n	8004b14 <DMS_read_TASK+0x4>
 8004b2e:	bf00      	nop
 8004b30:	20004230 	.word	0x20004230

08004b34 <ACC_CONVERT_ADC_TODICMAL>:



uint16_t ACC_THROTTEL_DATA=0x00;
uint8_t  ACC_DICIMAL_VAL=0;
uint8_t ACC_CONVERT_ADC_TODICMAL(uint8_t ACC_THROTTEL_){
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ACC_DICIMAL_VAL=((((ACC_THROTTEL_-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	019b      	lsls	r3, r3, #6
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <ACC_CONVERT_ADC_TODICMAL+0x3c>)
 8004b50:	fb82 1203 	smull	r1, r2, r2, r3
 8004b54:	441a      	add	r2, r3
 8004b56:	1292      	asrs	r2, r2, #10
 8004b58:	17db      	asrs	r3, r3, #31
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	3340      	adds	r3, #64	; 0x40
 8004b60:	73fb      	strb	r3, [r7, #15]

  return ACC_DICIMAL_VAL;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]

}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	ec2a6fa1 	.word	0xec2a6fa1

08004b74 <ACC_ADC_CallBack>:
void ACC_ADC_CallBack(){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <ACC_ADC_CallBack+0x14>)
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4803      	ldr	r0, [pc, #12]	; (8004b8c <ACC_ADC_CallBack+0x18>)
 8004b7e:	f7fe f95b 	bl	8002e38 <ADC_read>

}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004252 	.word	0x20004252
 8004b8c:	40012400 	.word	0x40012400

08004b90 <ACC_throtel_init>:

void ACC_throtel_init(){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	713b      	strb	r3, [r7, #4]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	717b      	strb	r3, [r7, #5]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	71bb      	strb	r3, [r7, #6]
 8004bac:	2300      	movs	r3, #0
 8004bae:	71fb      	strb	r3, [r7, #7]
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <ACC_throtel_init+0x54>)
 8004bb8:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	480a      	ldr	r0, [pc, #40]	; (8004be8 <ACC_throtel_init+0x58>)
 8004bc0:	f7fd ffae 	bl	8002b20 <ADC_init>
	//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	803b      	strh	r3, [r7, #0]
 8004bc8:	2303      	movs	r3, #3
 8004bca:	70bb      	strb	r3, [r7, #2]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4805      	ldr	r0, [pc, #20]	; (8004bec <ACC_throtel_init+0x5c>)
 8004bd6:	f7fe fe6b 	bl	80038b0 <MCAL_GPIO_init>

}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08004b75 	.word	0x08004b75
 8004be8:	40012400 	.word	0x40012400
 8004bec:	40010c00 	.word	0x40010c00

08004bf0 <ACC_DAC_init>:
void ACC_DAC_init(){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
	PIN_config PINx={ACC_DAC_0,OUTPUT_PP,SPEED_10};
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <ACC_DAC_init+0xa0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PINx);
 8004bfc:	f107 031c 	add.w	r3, r7, #28
 8004c00:	4619      	mov	r1, r3
 8004c02:	4824      	ldr	r0, [pc, #144]	; (8004c94 <ACC_DAC_init+0xa4>)
 8004c04:	f7fe fe54 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_1,OUTPUT_PP,SPEED_10};
 8004c08:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <ACC_DAC_init+0xa8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c0e:	f107 031c 	add.w	r3, r7, #28
 8004c12:	4619      	mov	r1, r3
 8004c14:	4821      	ldr	r0, [pc, #132]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c16:	f7fe fe4b 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_2,OUTPUT_PP,SPEED_10};
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <ACC_DAC_init+0xb0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	4619      	mov	r1, r3
 8004c26:	481d      	ldr	r0, [pc, #116]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c28:	f7fe fe42 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_3,OUTPUT_PP,SPEED_10};
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <ACC_DAC_init+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c32:	f107 031c 	add.w	r3, r7, #28
 8004c36:	4619      	mov	r1, r3
 8004c38:	4818      	ldr	r0, [pc, #96]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c3a:	f7fe fe39 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_4,OUTPUT_PP,SPEED_10};
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <ACC_DAC_init+0xb8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c44:	f107 031c 	add.w	r3, r7, #28
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4814      	ldr	r0, [pc, #80]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c4c:	f7fe fe30 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_5,OUTPUT_PP,SPEED_10};
 8004c50:	4b16      	ldr	r3, [pc, #88]	; (8004cac <ACC_DAC_init+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c56:	f107 031c 	add.w	r3, r7, #28
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	480f      	ldr	r0, [pc, #60]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c5e:	f7fe fe27 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_6,OUTPUT_PP,SPEED_10};
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <ACC_DAC_init+0xc0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	480b      	ldr	r0, [pc, #44]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c70:	f7fe fe1e 	bl	80038b0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_7,OUTPUT_PP,SPEED_10};
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <ACC_DAC_init+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004c7a:	f107 031c 	add.w	r3, r7, #28
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4806      	ldr	r0, [pc, #24]	; (8004c9c <ACC_DAC_init+0xac>)
 8004c82:	f7fe fe15 	bl	80038b0 <MCAL_GPIO_init>

}
 8004c86:	bf00      	nop
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	08005634 	.word	0x08005634
 8004c94:	40010800 	.word	0x40010800
 8004c98:	08005638 	.word	0x08005638
 8004c9c:	40010c00 	.word	0x40010c00
 8004ca0:	0800563c 	.word	0x0800563c
 8004ca4:	08005640 	.word	0x08005640
 8004ca8:	08005644 	.word	0x08005644
 8004cac:	08005648 	.word	0x08005648
 8004cb0:	0800564c 	.word	0x0800564c
 8004cb4:	08005650 	.word	0x08005650

08004cb8 <ACC_FROM_ADC_TO_DAC>:
 * Note-
 */



void ACC_FROM_ADC_TO_DAC(uint16_t decimal_val){
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	80fb      	strh	r3, [r7, #6]
	//	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	//	PWM_V=((PWM_V*35)/100);
	MCAL_write_PIN(GPIOA, ACC_DAC_0, ((decimal_val >>0) &1));
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	210f      	movs	r1, #15
 8004cd0:	482d      	ldr	r0, [pc, #180]	; (8004d88 <ACC_FROM_ADC_TO_DAC+0xd0>)
 8004cd2:	f7fe fed7 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_1, ((decimal_val >>1) &1));
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	4828      	ldr	r0, [pc, #160]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004cea:	f7fe fecb 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_2, ((decimal_val >>2) &1));
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2104      	movs	r1, #4
 8004d00:	4822      	ldr	r0, [pc, #136]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d02:	f7fe febf 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_3, ((decimal_val >>3) &1));
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	2105      	movs	r1, #5
 8004d18:	481c      	ldr	r0, [pc, #112]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d1a:	f7fe feb3 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_4, ((decimal_val >>4) &1));
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2106      	movs	r1, #6
 8004d30:	4816      	ldr	r0, [pc, #88]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d32:	f7fe fea7 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_5, ((decimal_val >>5) &1));
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	2107      	movs	r1, #7
 8004d48:	4810      	ldr	r0, [pc, #64]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d4a:	f7fe fe9b 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_6, ((decimal_val >>6) &1));
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2108      	movs	r1, #8
 8004d60:	480a      	ldr	r0, [pc, #40]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d62:	f7fe fe8f 	bl	8003a84 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_7, ((decimal_val >>7) &1));
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	09db      	lsrs	r3, r3, #7
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	2109      	movs	r1, #9
 8004d78:	4804      	ldr	r0, [pc, #16]	; (8004d8c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004d7a:	f7fe fe83 	bl	8003a84 <MCAL_write_PIN>

}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010800 	.word	0x40010800
 8004d8c:	40010c00 	.word	0x40010c00

08004d90 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	while(1){

		//      ACC_AMP=500;
		    if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <ACC_Handller_TASK+0x64>)
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	2b63      	cmp	r3, #99	; 0x63
 8004d9a:	d922      	bls.n	8004de2 <ACC_Handller_TASK+0x52>
		      if(LUNA_dis ==0x00){
 8004d9c:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <ACC_Handller_TASK+0x68>)
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <ACC_Handller_TASK+0x1c>
		        ACC_ACTION=ACC_CAR_GO;
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <ACC_Handller_TASK+0x6c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e7f3      	b.n	8004d94 <ACC_Handller_TASK+0x4>

		      }else if(LUNA_dis <= Distance_SET){
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <ACC_Handller_TASK+0x68>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004db4:	d803      	bhi.n	8004dbe <ACC_Handller_TASK+0x2e>
		        // here should send CAN fram to atmega to stop the motor
		        ACC_ACTION=ACC_CAR_STOP;
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <ACC_Handller_TASK+0x6c>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e7ea      	b.n	8004d94 <ACC_Handller_TASK+0x4>

		      }else if((LUNA_dis > Distance_SET) &&(LUNA_dis <MAX_Distance_SET)){
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <ACC_Handller_TASK+0x68>)
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004dc6:	d908      	bls.n	8004dda <ACC_Handller_TASK+0x4a>
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <ACC_Handller_TASK+0x68>)
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dd0:	d203      	bcs.n	8004dda <ACC_Handller_TASK+0x4a>
		        ACC_ACTION=ACC_CAR_SLOW_DOWN;
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <ACC_Handller_TASK+0x6c>)
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e00a      	b.n	8004df0 <ACC_Handller_TASK+0x60>


		      }else{
		        ACC_ACTION=ACC_CAR_GO;
 8004dda:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <ACC_Handller_TASK+0x6c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e7d8      	b.n	8004d94 <ACC_Handller_TASK+0x4>


		    }
		    // if the Signal strength indicator not strong dequeue its disance value
		    else{
		      if(LUNA_dis ==0x00){
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <ACC_Handller_TASK+0x68>)
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1d4      	bne.n	8004d94 <ACC_Handller_TASK+0x4>
		        ACC_ACTION=ACC_CAR_GO;
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <ACC_Handller_TASK+0x6c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
		    if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004df0:	e7d0      	b.n	8004d94 <ACC_Handller_TASK+0x4>
 8004df2:	bf00      	nop
 8004df4:	20003fce 	.word	0x20003fce
 8004df8:	20003fcc 	.word	0x20003fcc
 8004dfc:	20000021 	.word	0x20000021

08004e00 <ACC_throttel_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_throttel_Handller_TASK(){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
	uint8_t ACC_counter=0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_to_send=0,ADC_SAVED=0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	807b      	strh	r3, [r7, #2]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	80bb      	strh	r3, [r7, #4]
	while(1){

		if(ACC_ST==ACC_ON){
 8004e12:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <ACC_throttel_Handller_TASK+0xd4>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d136      	bne.n	8004e88 <ACC_throttel_Handller_TASK+0x88>
		      if(ACC_counter ==0){
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <ACC_throttel_Handller_TASK+0x36>
		        ADC_SAVED=ACC_CONVERT_ADC_TODICMAL(ACC_THROTTEL_DATA);
 8004e20:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <ACC_throttel_Handller_TASK+0xd8>)
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fe84 	bl	8004b34 <ACC_CONVERT_ADC_TODICMAL>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	80bb      	strh	r3, [r7, #4]
		        ACC_counter++;
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	3301      	adds	r3, #1
 8004e34:	71fb      	strb	r3, [r7, #7]
		      }
		      if(ADC_SAVED<ACC_DICIMAL_VAL){
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <ACC_throttel_Handller_TASK+0xdc>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	88ba      	ldrh	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d206      	bcs.n	8004e50 <ACC_throttel_Handller_TASK+0x50>
		        ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <ACC_throttel_Handller_TASK+0xdc>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff ff35 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004e4e:	e7e0      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		      }else{

		        if(ACC_ACTION ==ACC_CAR_STOP){
 8004e50:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d103      	bne.n	8004e60 <ACC_throttel_Handller_TASK+0x60>
		          ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004e58:	2040      	movs	r0, #64	; 0x40
 8004e5a:	f7ff ff2d 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004e5e:	e7d8      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		        }else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004e60:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d106      	bne.n	8004e76 <ACC_throttel_Handller_TASK+0x76>

		          ACC_FROM_ADC_TO_DAC((ADC_SAVED/2));
 8004e68:	88bb      	ldrh	r3, [r7, #4]
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff ff22 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004e74:	e7cd      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		        }else if(ACC_ACTION ==ACC_CAR_GO){
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1c9      	bne.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		          ACC_FROM_ADC_TO_DAC(ADC_SAVED);
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff19 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004e86:	e7c4      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>

		        }
		      }


		    }else if(ACC_ST==ACC_OFF){
 8004e88:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <ACC_throttel_Handller_TASK+0xd4>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1c0      	bne.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		      ACC_counter=0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	71fb      	strb	r3, [r7, #7]
		      if(ACC_ACTION ==ACC_CAR_STOP){
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d103      	bne.n	8004ea4 <ACC_throttel_Handller_TASK+0xa4>
		        ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004e9c:	2040      	movs	r0, #64	; 0x40
 8004e9e:	f7ff ff0b 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004ea2:	e7b6      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		      }else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d108      	bne.n	8004ebe <ACC_throttel_Handller_TASK+0xbe>
		        ACC_FROM_ADC_TO_DAC((ACC_DICIMAL_VAL/2));
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <ACC_throttel_Handller_TASK+0xdc>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fefe 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
 8004ebc:	e7a9      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		      }else if(ACC_ACTION ==ACC_CAR_GO){
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <ACC_throttel_Handller_TASK+0xe0>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1a5      	bne.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
		        ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <ACC_throttel_Handller_TASK+0xdc>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fef3 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
		if(ACC_ST==ACC_ON){
 8004ed2:	e79e      	b.n	8004e12 <ACC_throttel_Handller_TASK+0x12>
 8004ed4:	20004245 	.word	0x20004245
 8004ed8:	20004252 	.word	0x20004252
 8004edc:	20004254 	.word	0x20004254
 8004ee0:	20000021 	.word	0x20000021

08004ee4 <ACC_STATE_READ_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_STATE_READ_TASK(){
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	while(1){

		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4822      	ldr	r0, [pc, #136]	; (8004f74 <ACC_STATE_READ_TASK+0x90>)
 8004eec:	f7fe fdf2 	bl	8003ad4 <MCAL_Read_PIN>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <ACC_STATE_READ_TASK+0x2e>
		      _TIM1_delay_ms(30);
 8004ef6:	201e      	movs	r0, #30
 8004ef8:	f7ff fb0c 	bl	8004514 <_TIM1_delay_ms>
		      if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004efc:	2100      	movs	r1, #0
 8004efe:	481d      	ldr	r0, [pc, #116]	; (8004f74 <ACC_STATE_READ_TASK+0x90>)
 8004f00:	f7fe fde8 	bl	8003ad4 <MCAL_Read_PIN>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <ACC_STATE_READ_TASK+0x34>
		        ACC_ST=1;
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <ACC_STATE_READ_TASK+0x94>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e002      	b.n	8004f18 <ACC_STATE_READ_TASK+0x34>
		      }
		    }else{
		      ACC_ST=0;
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <ACC_STATE_READ_TASK+0x94>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]

		    }
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <ACC_STATE_READ_TASK+0x98>)
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4818      	ldr	r0, [pc, #96]	; (8004f80 <ACC_STATE_READ_TASK+0x9c>)
 8004f1e:	f7fd ff8b 	bl	8002e38 <ADC_read>
		if(ACC_THROTTEL_DATA<ACC_TROTTEL_MIN_ADC_VAL){
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <ACC_STATE_READ_TASK+0x98>)
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004f2a:	d203      	bcs.n	8004f34 <ACC_STATE_READ_TASK+0x50>
			ACC_DICIMAL_VAL=64;
 8004f2c:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <ACC_STATE_READ_TASK+0xa0>)
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e7d9      	b.n	8004ee8 <ACC_STATE_READ_TASK+0x4>
		}else if(ACC_THROTTEL_DATA>ACC_TROTTEL_Max_ADC_VAL){
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <ACC_STATE_READ_TASK+0x98>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	f640 1206 	movw	r2, #2310	; 0x906
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d903      	bls.n	8004f48 <ACC_STATE_READ_TASK+0x64>
			ACC_DICIMAL_VAL=255;
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <ACC_STATE_READ_TASK+0xa0>)
 8004f42:	22ff      	movs	r2, #255	; 0xff
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e7cf      	b.n	8004ee8 <ACC_STATE_READ_TASK+0x4>
		else{
//		uint32_t step1=((uint32_t)(ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL)); //884.3
//		uint32_t step2=(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL);//1539
//		uint32_t step3=(step1/step2);
//		ACC_DICIMAL_VAL=step3+ACC_DAC_MIN_DECIMAL;
		ACC_DICIMAL_VAL=((((ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <ACC_STATE_READ_TASK+0x98>)
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	019b      	lsls	r3, r3, #6
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <ACC_STATE_READ_TASK+0xa4>)
 8004f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f60:	441a      	add	r2, r3
 8004f62:	1292      	asrs	r2, r2, #10
 8004f64:	17db      	asrs	r3, r3, #31
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3340      	adds	r3, #64	; 0x40
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <ACC_STATE_READ_TASK+0xa0>)
 8004f70:	701a      	strb	r2, [r3, #0]
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004f72:	e7b9      	b.n	8004ee8 <ACC_STATE_READ_TASK+0x4>
 8004f74:	40010c00 	.word	0x40010c00
 8004f78:	20004245 	.word	0x20004245
 8004f7c:	20004252 	.word	0x20004252
 8004f80:	40012400 	.word	0x40012400
 8004f84:	20004254 	.word	0x20004254
 8004f88:	ec2a6fa1 	.word	0xec2a6fa1

08004f8c <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  while(1){
//	  if(GR_TSR_FLAG_OLED_send !=0x99){
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004f90:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <TSR_Handller_TASK+0x28>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2104      	movs	r1, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fe20 	bl	8000bdc <vTaskPrioritySet>
      TFT_send_image(GR_TSR_FLAG_OLED_send);
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <TSR_Handller_TASK+0x2c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd fc5f 	bl	8002864 <TFT_send_image>
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004fa6:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <TSR_Handller_TASK+0x28>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2102      	movs	r1, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb fe15 	bl	8000bdc <vTaskPrioritySet>
	  vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004fb2:	e7ed      	b.n	8004f90 <TSR_Handller_TASK+0x4>
 8004fb4:	2000424c 	.word	0x2000424c
 8004fb8:	2000423a 	.word	0x2000423a

08004fbc <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	if(  USART1->SR &(1<<5)){
 8004fc0:	4b6b      	ldr	r3, [pc, #428]	; (8005170 <TSR_call_Back+0x1b4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d006      	beq.n	8004fda <TSR_call_Back+0x1e>
		PC_Uart_Flag=  MCAL_USART_ReciveData(USART1);
 8004fcc:	4868      	ldr	r0, [pc, #416]	; (8005170 <TSR_call_Back+0x1b4>)
 8004fce:	f7ff fc7d 	bl	80048cc <MCAL_USART_ReciveData>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4b67      	ldr	r3, [pc, #412]	; (8005174 <TSR_call_Back+0x1b8>)
 8004fd8:	701a      	strb	r2, [r3, #0]
	  0x0008

	  0x0000 | 0x0008
	  0x0008
	 */
	switch(PC_Uart_Flag){
 8004fda:	4b66      	ldr	r3, [pc, #408]	; (8005174 <TSR_call_Back+0x1b8>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3b23      	subs	r3, #35	; 0x23
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d833      	bhi.n	800504c <TSR_call_Back+0x90>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <TSR_call_Back+0x30>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	0800504d 	.word	0x0800504d
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	0800504d 	.word	0x0800504d
 8005004:	0800504d 	.word	0x0800504d
 8005008:	0800502f 	.word	0x0800502f
 800500c:	08005045 	.word	0x08005045
 8005010:	0800504d 	.word	0x0800504d
 8005014:	0800504d 	.word	0x0800504d
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005037 	.word	0x08005037
	case '#':
		TSR_START_Flag=1;
 8005020:	4b55      	ldr	r3, [pc, #340]	; (8005178 <TSR_call_Back+0x1bc>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
		TSR_END_Flag=0;
 8005026:	4b55      	ldr	r3, [pc, #340]	; (800517c <TSR_call_Back+0x1c0>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
		break;
 800502c:	e00e      	b.n	800504c <TSR_call_Back+0x90>
	case '*':
		TSR_END_Flag=1;
 800502e:	4b53      	ldr	r3, [pc, #332]	; (800517c <TSR_call_Back+0x1c0>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
		break;
 8005034:	e00a      	b.n	800504c <TSR_call_Back+0x90>
	case 0x2F:
		FACE_START_Flag=1;
 8005036:	4b52      	ldr	r3, [pc, #328]	; (8005180 <TSR_call_Back+0x1c4>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
		FACE_END_Flag=0;
 800503c:	4b51      	ldr	r3, [pc, #324]	; (8005184 <TSR_call_Back+0x1c8>)
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
		break;
 8005042:	e003      	b.n	800504c <TSR_call_Back+0x90>
	case 0x2B:
		FACE_END_Flag=1;
 8005044:	4b4f      	ldr	r3, [pc, #316]	; (8005184 <TSR_call_Back+0x1c8>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
		break;
 800504a:	bf00      	nop
	}



	if (FACE_START_Flag){
 800504c:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <TSR_call_Back+0x1c4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d043      	beq.n	80050dc <TSR_call_Back+0x120>
		if(PC_Counter ==0)
 8005054:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <TSR_call_Back+0x1cc>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <TSR_call_Back+0xa6>
			PC_Uart_Flag=0;
 800505c:	4b45      	ldr	r3, [pc, #276]	; (8005174 <TSR_call_Back+0x1b8>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]

		if(FACE_END_Flag ==0){
 8005062:	4b48      	ldr	r3, [pc, #288]	; (8005184 <TSR_call_Back+0x1c8>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d112      	bne.n	8005090 <TSR_call_Back+0xd4>
			GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 800506a:	4b48      	ldr	r3, [pc, #288]	; (800518c <TSR_call_Back+0x1d0>)
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b21a      	sxth	r2, r3
 8005072:	4b40      	ldr	r3, [pc, #256]	; (8005174 <TSR_call_Back+0x1b8>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b21b      	sxth	r3, r3
 8005078:	4313      	orrs	r3, r2
 800507a:	b21b      	sxth	r3, r3
 800507c:	b29a      	uxth	r2, r3
 800507e:	4b43      	ldr	r3, [pc, #268]	; (800518c <TSR_call_Back+0x1d0>)
 8005080:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <TSR_call_Back+0x1cc>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <TSR_call_Back+0x1cc>)
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e025      	b.n	80050dc <TSR_call_Back+0x120>
			 * 0x0000 | 0x2F =0x
			 *
			 * */

		}else{
			GR_FACE_FLAG_ &=0x0F0F;
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <TSR_call_Back+0x1d0>)
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005098:	4013      	ands	r3, r2
 800509a:	b29a      	uxth	r2, r3
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <TSR_call_Back+0x1d0>)
 800509e:	801a      	strh	r2, [r3, #0]
			GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 80050a0:	4b3a      	ldr	r3, [pc, #232]	; (800518c <TSR_call_Back+0x1d0>)
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	111b      	asrs	r3, r3, #4
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f023 030f 	bic.w	r3, r3, #15
 80050ac:	b25a      	sxtb	r2, r3
 80050ae:	4b37      	ldr	r3, [pc, #220]	; (800518c <TSR_call_Back+0x1d0>)
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b33      	ldr	r3, [pc, #204]	; (8005190 <TSR_call_Back+0x1d4>)
 80050c2:	701a      	strb	r2, [r3, #0]
			GR_FACE_FLAG_=0;
 80050c4:	4b31      	ldr	r3, [pc, #196]	; (800518c <TSR_call_Back+0x1d0>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	801a      	strh	r2, [r3, #0]

			///////////////
			FACE_START_Flag=0;
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <TSR_call_Back+0x1c4>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
			FACE_END_Flag=0;
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <TSR_call_Back+0x1c8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 80050d6:	4b2c      	ldr	r3, [pc, #176]	; (8005188 <TSR_call_Back+0x1cc>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
		}
	}
	if(TSR_START_Flag){
 80050dc:	4b26      	ldr	r3, [pc, #152]	; (8005178 <TSR_call_Back+0x1bc>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d043      	beq.n	800516c <TSR_call_Back+0x1b0>
		if(PC_Counter ==0)
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <TSR_call_Back+0x1cc>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <TSR_call_Back+0x136>
			PC_Uart_Flag=0;
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <TSR_call_Back+0x1b8>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]

		if(TSR_END_Flag ==0){
 80050f2:	4b22      	ldr	r3, [pc, #136]	; (800517c <TSR_call_Back+0x1c0>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d112      	bne.n	8005120 <TSR_call_Back+0x164>
			GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <TSR_call_Back+0x1d8>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	b21a      	sxth	r2, r3
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <TSR_call_Back+0x1b8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b21b      	sxth	r3, r3
 8005108:	4313      	orrs	r3, r2
 800510a:	b21b      	sxth	r3, r3
 800510c:	b29a      	uxth	r2, r3
 800510e:	4b21      	ldr	r3, [pc, #132]	; (8005194 <TSR_call_Back+0x1d8>)
 8005110:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <TSR_call_Back+0x1cc>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <TSR_call_Back+0x1cc>)
 800511c:	701a      	strb	r2, [r3, #0]
	//    GR_TSR_FLAG_OLED=0;
	//
	//  }


}
 800511e:	e025      	b.n	800516c <TSR_call_Back+0x1b0>
			GR_TSR_FLAG_OLED &=0x0F0F;
 8005120:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <TSR_call_Back+0x1d8>)
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005128:	4013      	ands	r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <TSR_call_Back+0x1d8>)
 800512e:	801a      	strh	r2, [r3, #0]
			GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 8005130:	4b18      	ldr	r3, [pc, #96]	; (8005194 <TSR_call_Back+0x1d8>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	111b      	asrs	r3, r3, #4
 8005136:	b25b      	sxtb	r3, r3
 8005138:	f023 030f 	bic.w	r3, r3, #15
 800513c:	b25a      	sxtb	r2, r3
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <TSR_call_Back+0x1d8>)
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	b25b      	sxtb	r3, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	b25b      	sxtb	r3, r3
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <TSR_call_Back+0x1dc>)
 8005152:	701a      	strb	r2, [r3, #0]
			GR_TSR_FLAG_OLED=0;
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <TSR_call_Back+0x1d8>)
 8005156:	2200      	movs	r2, #0
 8005158:	801a      	strh	r2, [r3, #0]
			TSR_END_Flag=0;
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <TSR_call_Back+0x1c0>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
			TSR_START_Flag=0;
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <TSR_call_Back+0x1bc>)
 8005162:	2200      	movs	r2, #0
 8005164:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <TSR_call_Back+0x1cc>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40013800 	.word	0x40013800
 8005174:	2000423c 	.word	0x2000423c
 8005178:	2000423d 	.word	0x2000423d
 800517c:	2000423e 	.word	0x2000423e
 8005180:	2000423f 	.word	0x2000423f
 8005184:	20004240 	.word	0x20004240
 8005188:	2000423b 	.word	0x2000423b
 800518c:	20004242 	.word	0x20004242
 8005190:	20004244 	.word	0x20004244
 8005194:	20004238 	.word	0x20004238
 8005198:	2000423a 	.word	0x2000423a

0800519c <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 80051a2:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <TSR_init+0x24>)
 80051a4:	463c      	mov	r4, r7
 80051a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 80051ac:	463b      	mov	r3, r7
 80051ae:	4619      	mov	r1, r3
 80051b0:	4804      	ldr	r0, [pc, #16]	; (80051c4 <TSR_init+0x28>)
 80051b2:	f7ff f9df 	bl	8004574 <MCAL_USART_init>
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	08005654 	.word	0x08005654
 80051c4:	40013800 	.word	0x40013800

080051c8 <CAR_ON_Handler>:

/************FACE ID TASK*************/
/************FACE ID TASK*************/
/************FACE ID TASK*************/

void CAR_ON_Handler(){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(GPIOB, PIN_1)==0) ){
 80051cc:	2101      	movs	r1, #1
 80051ce:	4819      	ldr	r0, [pc, #100]	; (8005234 <CAR_ON_Handler+0x6c>)
 80051d0:	f7fe fc80 	bl	8003ad4 <MCAL_Read_PIN>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d12a      	bne.n	8005230 <CAR_ON_Handler+0x68>
		_TIM1_delay_ms(30);
 80051da:	201e      	movs	r0, #30
 80051dc:	f7ff f99a 	bl	8004514 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(GPIOB, PIN_1)==0) ){
 80051e0:	2101      	movs	r1, #1
 80051e2:	4814      	ldr	r0, [pc, #80]	; (8005234 <CAR_ON_Handler+0x6c>)
 80051e4:	f7fe fc76 	bl	8003ad4 <MCAL_Read_PIN>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d120      	bne.n	8005230 <CAR_ON_Handler+0x68>

			if(CAR_ON_counter ==1 &&GR_FACE_FLAG_send !=0x99&&GR_FACE_FLAG_send !=0x00){
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <CAR_ON_Handler+0x70>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d11c      	bne.n	8005230 <CAR_ON_Handler+0x68>
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <CAR_ON_Handler+0x74>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b99      	cmp	r3, #153	; 0x99
 80051fc:	d018      	beq.n	8005230 <CAR_ON_Handler+0x68>
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <CAR_ON_Handler+0x74>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d014      	beq.n	8005230 <CAR_ON_Handler+0x68>
//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
//				NVIC_ISER1 |=(1<<(USART1_IRQ-32));
				CAR_ON_counter=0;
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <CAR_ON_Handler+0x70>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
				GR_FACE_FLAG_send=0;
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <CAR_ON_Handler+0x74>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <CAR_ON_Handler+0x78>)
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
				//UART SEND
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8005218:	2040      	movs	r0, #64	; 0x40
 800521a:	f7ff fd4d 	bl	8004cb8 <ACC_FROM_ADC_TO_DAC>
				MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
 800521e:	2133      	movs	r1, #51	; 0x33
 8005220:	4808      	ldr	r0, [pc, #32]	; (8005244 <CAR_ON_Handler+0x7c>)
 8005222:	f7ff fb13 	bl	800484c <MCAL_USART_SendData>
				vTaskResume(FACE_ID_TASK_Handle);
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <CAR_ON_Handler+0x80>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fb fe4a 	bl	8000ec4 <vTaskResume>
		}

	}


}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40010c00 	.word	0x40010c00
 8005238:	20004250 	.word	0x20004250
 800523c:	20004244 	.word	0x20004244
 8005240:	20004251 	.word	0x20004251
 8005244:	40013800 	.word	0x40013800
 8005248:	20004248 	.word	0x20004248

0800524c <CAR_ON_init>:
void CAR_ON_init(){
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
	EXTI_config_t CAR_BOTTON_SITTING={EXT1PB1,FALLING,ENABLE,CAR_ON_Handler};
 8005252:	2301      	movs	r3, #1
 8005254:	82bb      	strh	r3, [r7, #20]
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <CAR_ON_init+0x50>)
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	2301      	movs	r3, #1
 800525c:	83bb      	strh	r3, [r7, #28]
 800525e:	2307      	movs	r3, #7
 8005260:	83fb      	strh	r3, [r7, #30]
 8005262:	2300      	movs	r3, #0
 8005264:	f887 3020 	strb.w	r3, [r7, #32]
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <CAR_ON_init+0x54>)
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
	MCAL_EXTI_init(&CAR_BOTTON_SITTING);
 8005272:	f107 0314 	add.w	r3, r7, #20
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe f912 	bl	80034a0 <MCAL_EXTI_init>
	PIN_config pin={CONTACT_BOTTON_PIN,INPUT_PD};
 800527c:	2300      	movs	r3, #0
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	2301      	movs	r3, #1
 8005282:	80bb      	strh	r3, [r7, #4]
 8005284:	2303      	movs	r3, #3
 8005286:	71bb      	strb	r3, [r7, #6]
	  MCAL_GPIO_init(CONTACT_BOTTON_PORT, &pin);
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4803      	ldr	r0, [pc, #12]	; (800529c <CAR_ON_init+0x50>)
 800528e:	f7fe fb0f 	bl	80038b0 <MCAL_GPIO_init>
}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40010c00 	.word	0x40010c00
 80052a0:	080051c9 	.word	0x080051c9

080052a4 <FACE_ID_TASK>:
void FACE_ID_TASK(){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
	while(1){

		if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 80052a8:	2101      	movs	r1, #1
 80052aa:	481b      	ldr	r0, [pc, #108]	; (8005318 <FACE_ID_TASK+0x74>)
 80052ac:	f7fe fc12 	bl	8003ad4 <MCAL_Read_PIN>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d12b      	bne.n	800530e <FACE_ID_TASK+0x6a>
			_TIM1_delay_ms(30);
 80052b6:	201e      	movs	r0, #30
 80052b8:	f7ff f92c 	bl	8004514 <_TIM1_delay_ms>
			if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 80052bc:	2101      	movs	r1, #1
 80052be:	4816      	ldr	r0, [pc, #88]	; (8005318 <FACE_ID_TASK+0x74>)
 80052c0:	f7fe fc08 	bl	8003ad4 <MCAL_Read_PIN>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d1ee      	bne.n	80052a8 <FACE_ID_TASK+0x4>
			//UART SEND

//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
				if(CAR_login_counter==0){
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <FACE_ID_TASK+0x78>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <FACE_ID_TASK+0x42>
					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 80052d2:	2122      	movs	r1, #34	; 0x22
 80052d4:	4812      	ldr	r0, [pc, #72]	; (8005320 <FACE_ID_TASK+0x7c>)
 80052d6:	f7ff fab9 	bl	800484c <MCAL_USART_SendData>
					CAR_login_counter++;
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <FACE_ID_TASK+0x78>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <FACE_ID_TASK+0x78>)
 80052e4:	701a      	strb	r2, [r3, #0]
				}
//				if(GR_FACE_FLAG_send ==0x99){
//					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
//
//				}
			if(GR_FACE_FLAG_send !=0x99 && GR_FACE_FLAG_send !=0x00){
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <FACE_ID_TASK+0x80>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b99      	cmp	r3, #153	; 0x99
 80052ec:	d0dc      	beq.n	80052a8 <FACE_ID_TASK+0x4>
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <FACE_ID_TASK+0x80>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0d8      	beq.n	80052a8 <FACE_ID_TASK+0x4>
				CAR_ON_counter=1;
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <FACE_ID_TASK+0x84>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <FACE_ID_TASK+0x78>)
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
//				////////////*********LUNA_INIT***************//////////////////
//				LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
//				LUNA_ENABLE();
				vTaskSuspend(FACE_ID_TASK_Handle);
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <FACE_ID_TASK+0x88>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fb fd2c 	bl	8000d64 <vTaskSuspend>
 800530c:	e7cc      	b.n	80052a8 <FACE_ID_TASK+0x4>

			}
		}
		}else{
			//			MCAL_write_PIN(GPIOB, PIN_13, 0);
						CAR_login_counter=0;
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <FACE_ID_TASK+0x78>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
		if((MCAL_Read_PIN(GPIOB, PIN_1)==1) ){
 8005314:	e7c8      	b.n	80052a8 <FACE_ID_TASK+0x4>
 8005316:	bf00      	nop
 8005318:	40010c00 	.word	0x40010c00
 800531c:	20004251 	.word	0x20004251
 8005320:	40013800 	.word	0x40013800
 8005324:	20004244 	.word	0x20004244
 8005328:	20004250 	.word	0x20004250
 800532c:	20004248 	.word	0x20004248

08005330 <HW_init>:





void HW_init(){
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 8005334:	f7ff fbac 	bl	8004a90 <Sys_Clk_init>
	////////////*********TFT_init***************//////////////////
	TFT_init(RGB_5_6_5);
 8005338:	2055      	movs	r0, #85	; 0x55
 800533a:	f7fd f8f5 	bl	8002528 <TFT_init>
	////////////*********TSR init***************//////////////////
	TSR_init();
 800533e:	f7ff ff2d 	bl	800519c <TSR_init>

	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 8005342:	f7ff fc25 	bl	8004b90 <ACC_throtel_init>
	////////////*********DAC init***************//////////////////
	ACC_DAC_init();
 8005346:	f7ff fc53 	bl	8004bf0 <ACC_DAC_init>
	////////////*********DMS_init***************//////////////////
	DMS_init();
 800534a:	f7fc fe7d 	bl	8002048 <DMS_init>
	////////////*********CAR_ON_init***************//////////////////
	CAR_ON_init();
 800534e:	f7ff ff7d 	bl	800524c <CAR_ON_init>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8005352:	2100      	movs	r1, #0
 8005354:	2000      	movs	r0, #0
 8005356:	f7fc ffbd 	bl	80022d4 <LUNA_INIT>
//	PIN_config PINx={PIN_13,OUTPUT_PP,SPEED_10};
//	MCAL_GPIO_init(GPIOB, &PINx);



}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <main>:
int main(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af02      	add	r7, sp, #8
	_TIM1_delay_s(2);
 8005366:	2002      	movs	r0, #2
 8005368:	f7ff f8ec 	bl	8004544 <_TIM1_delay_s>

	HW_init();
 800536c:	f7ff ffe0 	bl	8005330 <HW_init>
	///////////////////////////
	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8005370:	2300      	movs	r3, #0
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	2302      	movs	r3, #2
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537e:	493e      	ldr	r1, [pc, #248]	; (8005478 <main+0x118>)
 8005380:	483e      	ldr	r0, [pc, #248]	; (800547c <main+0x11c>)
 8005382:	f7fb faea 	bl	800095a <xTaskCreate>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <main+0x30>
		Error_Handller();
 800538c:	f7ff fb7c 	bl	8004a88 <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8005390:	2300      	movs	r3, #0
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	2302      	movs	r3, #2
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800539e:	4938      	ldr	r1, [pc, #224]	; (8005480 <main+0x120>)
 80053a0:	4838      	ldr	r0, [pc, #224]	; (8005484 <main+0x124>)
 80053a2:	f7fb fada 	bl	800095a <xTaskCreate>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <main+0x50>
		Error_Handller();
 80053ac:	f7ff fb6c 	bl	8004a88 <Error_Handller>
	}


	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,NULL)!=pdPASS ){
 80053b0:	2300      	movs	r3, #0
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	2302      	movs	r3, #2
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053be:	4932      	ldr	r1, [pc, #200]	; (8005488 <main+0x128>)
 80053c0:	4832      	ldr	r0, [pc, #200]	; (800548c <main+0x12c>)
 80053c2:	f7fb faca 	bl	800095a <xTaskCreate>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <main+0x70>
		Error_Handller();
 80053cc:	f7ff fb5c 	bl	8004a88 <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",256,NULL,2,&TSR_Handller_TASK_Handle)!=pdPASS ){
 80053d0:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <main+0x130>)
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	2302      	movs	r3, #2
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053de:	492d      	ldr	r1, [pc, #180]	; (8005494 <main+0x134>)
 80053e0:	482d      	ldr	r0, [pc, #180]	; (8005498 <main+0x138>)
 80053e2:	f7fb faba 	bl	800095a <xTaskCreate>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d001      	beq.n	80053f0 <main+0x90>
		Error_Handller();
 80053ec:	f7ff fb4c 	bl	8004a88 <Error_Handller>
	}

	///////////////////////

	if(xTaskCreate(DMS_Handller_TASK,"DMS_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 80053f0:	2300      	movs	r3, #0
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	2302      	movs	r3, #2
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2300      	movs	r3, #0
 80053fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fe:	4927      	ldr	r1, [pc, #156]	; (800549c <main+0x13c>)
 8005400:	4827      	ldr	r0, [pc, #156]	; (80054a0 <main+0x140>)
 8005402:	f7fb faaa 	bl	800095a <xTaskCreate>
 8005406:	4603      	mov	r3, r0
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <main+0xb0>
		Error_Handller();
 800540c:	f7ff fb3c 	bl	8004a88 <Error_Handller>
	}

	if(xTaskCreate(DMS_read_TASK,"DMS_read_TASK",256,NULL,2,NULL)!=pdPASS ){
 8005410:	2300      	movs	r3, #0
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	2302      	movs	r3, #2
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2300      	movs	r3, #0
 800541a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800541e:	4921      	ldr	r1, [pc, #132]	; (80054a4 <main+0x144>)
 8005420:	4821      	ldr	r0, [pc, #132]	; (80054a8 <main+0x148>)
 8005422:	f7fb fa9a 	bl	800095a <xTaskCreate>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <main+0xd0>
		Error_Handller();
 800542c:	f7ff fb2c 	bl	8004a88 <Error_Handller>
	}
	///////////////////////
	if(xTaskCreate(FACE_ID_TASK,"FACE_ID_TASK",256,NULL,5,&FACE_ID_TASK_Handle)!=pdPASS ){
 8005430:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <main+0x14c>)
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	2305      	movs	r3, #5
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800543e:	491c      	ldr	r1, [pc, #112]	; (80054b0 <main+0x150>)
 8005440:	481c      	ldr	r0, [pc, #112]	; (80054b4 <main+0x154>)
 8005442:	f7fb fa8a 	bl	800095a <xTaskCreate>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d001      	beq.n	8005450 <main+0xf0>
		Error_Handller();
 800544c:	f7ff fb1c 	bl	8004a88 <Error_Handller>
	}


	DMS_Semaphore = xSemaphoreCreateBinary();
 8005450:	2203      	movs	r2, #3
 8005452:	2100      	movs	r1, #0
 8005454:	2001      	movs	r0, #1
 8005456:	f7fa ffaf 	bl	80003b8 <xQueueGenericCreate>
 800545a:	4603      	mov	r3, r0
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <main+0x158>)
 800545e:	6013      	str	r3, [r2, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8005460:	2200      	movs	r2, #0
 8005462:	2101      	movs	r1, #1
 8005464:	200a      	movs	r0, #10
 8005466:	f7fa ffa7 	bl	80003b8 <xQueueGenericCreate>
 800546a:	4603      	mov	r3, r0
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <main+0x15c>)
 800546e:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8005470:	f7fb fda0 	bl	8000fb4 <vTaskStartScheduler>

	for(;;);
 8005474:	e7fe      	b.n	8005474 <main+0x114>
 8005476:	bf00      	nop
 8005478:	08005664 	.word	0x08005664
 800547c:	08004e01 	.word	0x08004e01
 8005480:	08005680 	.word	0x08005680
 8005484:	08004d91 	.word	0x08004d91
 8005488:	08005694 	.word	0x08005694
 800548c:	08004ee5 	.word	0x08004ee5
 8005490:	2000424c 	.word	0x2000424c
 8005494:	080056a0 	.word	0x080056a0
 8005498:	08004f8d 	.word	0x08004f8d
 800549c:	080056b4 	.word	0x080056b4
 80054a0:	08004add 	.word	0x08004add
 80054a4:	080056c8 	.word	0x080056c8
 80054a8:	08004b11 	.word	0x08004b11
 80054ac:	20004248 	.word	0x20004248
 80054b0:	080056d8 	.word	0x080056d8
 80054b4:	080052a5 	.word	0x080052a5
 80054b8:	20004230 	.word	0x20004230
 80054bc:	20004234 	.word	0x20004234

080054c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054c0:	480d      	ldr	r0, [pc, #52]	; (80054f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80054c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80054c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054c8:	480c      	ldr	r0, [pc, #48]	; (80054fc <LoopForever+0x6>)
  ldr r1, =_edata
 80054ca:	490d      	ldr	r1, [pc, #52]	; (8005500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054cc:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <LoopForever+0xe>)
  movs r3, #0
 80054ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054d0:	e002      	b.n	80054d8 <LoopCopyDataInit>

080054d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054d6:	3304      	adds	r3, #4

080054d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054dc:	d3f9      	bcc.n	80054d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80054e0:	4c0a      	ldr	r4, [pc, #40]	; (800550c <LoopForever+0x16>)
  movs r3, #0
 80054e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054e4:	e001      	b.n	80054ea <LoopFillZerobss>

080054e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054e8:	3204      	adds	r2, #4

080054ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054ec:	d3fb      	bcc.n	80054e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80054ee:	f000 f819 	bl	8005524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054f2:	f7ff ff35 	bl	8005360 <main>

080054f6 <LoopForever>:

LoopForever:
  b LoopForever
 80054f6:	e7fe      	b.n	80054f6 <LoopForever>
  ldr   r0, =_estack
 80054f8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80054fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005500:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8005504:	0801dd90 	.word	0x0801dd90
  ldr r2, =_sbss
 8005508:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800550c:	20004258 	.word	0x20004258

08005510 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005510:	e7fe      	b.n	8005510 <ADC3_IRQHandler>

08005512 <memset>:
 8005512:	4603      	mov	r3, r0
 8005514:	4402      	add	r2, r0
 8005516:	4293      	cmp	r3, r2
 8005518:	d100      	bne.n	800551c <memset+0xa>
 800551a:	4770      	bx	lr
 800551c:	f803 1b01 	strb.w	r1, [r3], #1
 8005520:	e7f9      	b.n	8005516 <memset+0x4>
	...

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	2600      	movs	r6, #0
 8005528:	4d0c      	ldr	r5, [pc, #48]	; (800555c <__libc_init_array+0x38>)
 800552a:	4c0d      	ldr	r4, [pc, #52]	; (8005560 <__libc_init_array+0x3c>)
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	f000 f828 	bl	8005588 <_init>
 8005538:	2600      	movs	r6, #0
 800553a:	4d0a      	ldr	r5, [pc, #40]	; (8005564 <__libc_init_array+0x40>)
 800553c:	4c0a      	ldr	r4, [pc, #40]	; (8005568 <__libc_init_array+0x44>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	f855 3b04 	ldr.w	r3, [r5], #4
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	f855 3b04 	ldr.w	r3, [r5], #4
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	0801dd88 	.word	0x0801dd88
 8005560:	0801dd88 	.word	0x0801dd88
 8005564:	0801dd88 	.word	0x0801dd88
 8005568:	0801dd8c 	.word	0x0801dd8c

0800556c <memcpy>:
 800556c:	440a      	add	r2, r1
 800556e:	4291      	cmp	r1, r2
 8005570:	f100 33ff 	add.w	r3, r0, #4294967295
 8005574:	d100      	bne.n	8005578 <memcpy+0xc>
 8005576:	4770      	bx	lr
 8005578:	b510      	push	{r4, lr}
 800557a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800557e:	4291      	cmp	r1, r2
 8005580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005584:	d1f9      	bne.n	800557a <memcpy+0xe>
 8005586:	bd10      	pop	{r4, pc}

08005588 <_init>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr

08005594 <_fini>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr
