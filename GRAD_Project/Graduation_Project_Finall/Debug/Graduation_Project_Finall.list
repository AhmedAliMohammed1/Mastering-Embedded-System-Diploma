
Graduation_Project_Finall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000187f8  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d77c  0801d77c  00030028  2**0
                  CONTENTS
  4 .ARM          00000000  0801d77c  0801d77c  00030028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d77c  0801d77c  00030028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d77c  0801d77c  0002d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d780  0801d780  0002d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0801d784  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022fc  20000028  0801d7ac  00030028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002324  0801d7ac  00032324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030051  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6d8  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002527  00000000  00000000  0003f76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00003db2  00000000  00000000  00041c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000880  00000000  00000000  00045a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000758  00000000  00000000  000462c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001ae7  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ae29  00000000  00000000  00048507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00014367  00000000  00000000  00053330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ed8  00000000  00000000  00067698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	08004f6c 	.word	0x08004f6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	08004f6c 	.word	0x08004f6c

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d05d      	beq.n	80003a4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d059      	beq.n	80003a4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	fba3 2302 	umull	r2, r3, r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d000      	beq.n	8000304 <xQueueGenericReset+0x34>
 8000302:	2101      	movs	r1, #1
 8000304:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000306:	2b00      	cmp	r3, #0
 8000308:	d14c      	bne.n	80003a4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800030a:	f001 fd0f 	bl	8001d2c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800031a:	fb01 f303 	mul.w	r3, r1, r3
 800031e:	441a      	add	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	2200      	movs	r2, #0
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800033a:	3b01      	subs	r3, #1
 800033c:	68b9      	ldr	r1, [r7, #8]
 800033e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000340:	fb01 f303 	mul.w	r3, r1, r3
 8000344:	441a      	add	r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	22ff      	movs	r2, #255	; 0xff
 800034e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d114      	bne.n	800038a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01a      	beq.n	800039e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3310      	adds	r3, #16
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f823 	bl	80013b8 <xTaskRemoveFromEventList>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d012      	beq.n	800039e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <xQueueGenericReset+0xe4>)
 800037a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	f3bf 8f4f 	dsb	sy
 8000384:	f3bf 8f6f 	isb	sy
 8000388:	e009      	b.n	800039e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	3310      	adds	r3, #16
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff feee 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3324      	adds	r3, #36	; 0x24
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff fee9 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800039e:	f001 fcdf 	bl	8001d60 <vPortExitCritical>
 80003a2:	e001      	b.n	80003a8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80003a8:	68fb      	ldr	r3, [r7, #12]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000ed04 	.word	0xe000ed04

080003b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af02      	add	r7, sp, #8
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	4613      	mov	r3, r2
 80003c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d02d      	beq.n	800042c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003d0:	2100      	movs	r1, #0
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	fba3 2302 	umull	r2, r3, r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d000      	beq.n	80003e0 <xQueueGenericCreate+0x28>
 80003de:	2101      	movs	r1, #1
 80003e0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d122      	bne.n	800042c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003ee:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003f2:	d81b      	bhi.n	800042c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	fb02 f303 	mul.w	r3, r2, r3
 80003fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	3348      	adds	r3, #72	; 0x48
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fd2c 	bl	8001e60 <pvPortMalloc>
 8000408:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d00d      	beq.n	800042c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000410:	69fb      	ldr	r3, [r7, #28]
 8000412:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	3348      	adds	r3, #72	; 0x48
 8000418:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800041a:	79fa      	ldrb	r2, [r7, #7]
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	4613      	mov	r3, r2
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	68b9      	ldr	r1, [r7, #8]
 8000426:	68f8      	ldr	r0, [r7, #12]
 8000428:	f000 f805 	bl	8000436 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800042c:	69fb      	ldr	r3, [r7, #28]
    }
 800042e:	4618      	mov	r0, r3
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b084      	sub	sp, #16
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d103      	bne.n	8000452 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	69ba      	ldr	r2, [r7, #24]
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	e002      	b.n	8000458 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000464:	2101      	movs	r1, #1
 8000466:	69b8      	ldr	r0, [r7, #24]
 8000468:	f7ff ff32 	bl	80002d0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800048a:	f001 fc4f 	bl	8001d2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800048e:	6a3b      	ldr	r3, [r7, #32]
 8000490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000492:	6a3b      	ldr	r3, [r7, #32]
 8000494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000496:	429a      	cmp	r2, r3
 8000498:	d302      	bcc.n	80004a0 <xQueueGenericSend+0x2c>
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d129      	bne.n	80004f4 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	68b9      	ldr	r1, [r7, #8]
 80004a4:	6a38      	ldr	r0, [r7, #32]
 80004a6:	f000 fa10 	bl	80008ca <prvCopyDataToQueue>
 80004aa:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d010      	beq.n	80004d6 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004b4:	6a3b      	ldr	r3, [r7, #32]
 80004b6:	3324      	adds	r3, #36	; 0x24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 ff7d 	bl	80013b8 <xTaskRemoveFromEventList>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d013      	beq.n	80004ec <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004c4:	4b3f      	ldr	r3, [pc, #252]	; (80005c4 <xQueueGenericSend+0x150>)
 80004c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	f3bf 8f4f 	dsb	sy
 80004d0:	f3bf 8f6f 	isb	sy
 80004d4:	e00a      	b.n	80004ec <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d007      	beq.n	80004ec <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <xQueueGenericSend+0x150>)
 80004de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	f3bf 8f4f 	dsb	sy
 80004e8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004ec:	f001 fc38 	bl	8001d60 <vPortExitCritical>
                return pdPASS;
 80004f0:	2301      	movs	r3, #1
 80004f2:	e063      	b.n	80005bc <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d103      	bne.n	8000502 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004fa:	f001 fc31 	bl	8001d60 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	e05c      	b.n	80005bc <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000504:	2b00      	cmp	r3, #0
 8000506:	d106      	bne.n	8000516 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	4618      	mov	r0, r3
 800050e:	f001 f81b 	bl	8001548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000512:	2301      	movs	r3, #1
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000516:	f001 fc23 	bl	8001d60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800051a:	f000 fcf1 	bl	8000f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800051e:	f001 fc05 	bl	8001d2c <vPortEnterCritical>
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000528:	b25b      	sxtb	r3, r3
 800052a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052e:	d103      	bne.n	8000538 <xQueueGenericSend+0xc4>
 8000530:	6a3b      	ldr	r3, [r7, #32]
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000538:	6a3b      	ldr	r3, [r7, #32]
 800053a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800053e:	b25b      	sxtb	r3, r3
 8000540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000544:	d103      	bne.n	800054e <xQueueGenericSend+0xda>
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800054e:	f001 fc07 	bl	8001d60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000552:	1d3a      	adds	r2, r7, #4
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f80a 	bl	8001574 <xTaskCheckForTimeOut>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d124      	bne.n	80005b0 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000566:	6a38      	ldr	r0, [r7, #32]
 8000568:	f000 faa7 	bl	8000aba <prvIsQueueFull>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d018      	beq.n	80005a4 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3310      	adds	r3, #16
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff06 	bl	800138c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000580:	6a38      	ldr	r0, [r7, #32]
 8000582:	f000 fa32 	bl	80009ea <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000586:	f000 fcc9 	bl	8000f1c <xTaskResumeAll>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	f47f af7c 	bne.w	800048a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <xQueueGenericSend+0x150>)
 8000594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	f3bf 8f4f 	dsb	sy
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	e772      	b.n	800048a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80005a4:	6a38      	ldr	r0, [r7, #32]
 80005a6:	f000 fa20 	bl	80009ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80005aa:	f000 fcb7 	bl	8000f1c <xTaskResumeAll>
 80005ae:	e76c      	b.n	800048a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80005b0:	6a38      	ldr	r0, [r7, #32]
 80005b2:	f000 fa1a 	bl	80009ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80005b6:	f000 fcb1 	bl	8000f1c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80005ba:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	e000ed04 	.word	0xe000ed04

080005c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005dc:	f001 fba6 	bl	8001d2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005e0:	6a3b      	ldr	r3, [r7, #32]
 80005e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01f      	beq.n	800062c <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	6a38      	ldr	r0, [r7, #32]
 80005f0:	f000 f9d5 	bl	800099e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00f      	beq.n	8000624 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000604:	6a3b      	ldr	r3, [r7, #32]
 8000606:	3310      	adds	r3, #16
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fed5 	bl	80013b8 <xTaskRemoveFromEventList>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <xQueueReceive+0x140>)
 8000616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000624:	f001 fb9c 	bl	8001d60 <vPortExitCritical>
                return pdPASS;
 8000628:	2301      	movs	r3, #1
 800062a:	e069      	b.n	8000700 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000632:	f001 fb95 	bl	8001d60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000636:	2300      	movs	r3, #0
 8000638:	e062      	b.n	8000700 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	2b00      	cmp	r3, #0
 800063e:	d106      	bne.n	800064e <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4618      	mov	r0, r3
 8000646:	f000 ff7f 	bl	8001548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800064a:	2301      	movs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800064e:	f001 fb87 	bl	8001d60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000652:	f000 fc55 	bl	8000f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000656:	f001 fb69 	bl	8001d2c <vPortEnterCritical>
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000660:	b25b      	sxtb	r3, r3
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d103      	bne.n	8000670 <xQueueReceive+0xa8>
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000676:	b25b      	sxtb	r3, r3
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <xQueueReceive+0xbe>
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000686:	f001 fb6b 	bl	8001d60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 ff6e 	bl	8001574 <xTaskCheckForTimeOut>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d123      	bne.n	80006e6 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800069e:	6a38      	ldr	r0, [r7, #32]
 80006a0:	f000 f9f5 	bl	8000a8e <prvIsQueueEmpty>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d017      	beq.n	80006da <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	3324      	adds	r3, #36	; 0x24
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fe6a 	bl	800138c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006b8:	6a38      	ldr	r0, [r7, #32]
 80006ba:	f000 f996 	bl	80009ea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80006be:	f000 fc2d 	bl	8000f1c <xTaskResumeAll>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d189      	bne.n	80005dc <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <xQueueReceive+0x140>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	e780      	b.n	80005dc <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80006da:	6a38      	ldr	r0, [r7, #32]
 80006dc:	f000 f985 	bl	80009ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006e0:	f000 fc1c 	bl	8000f1c <xTaskResumeAll>
 80006e4:	e77a      	b.n	80005dc <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80006e6:	6a38      	ldr	r0, [r7, #32]
 80006e8:	f000 f97f 	bl	80009ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006ec:	f000 fc16 	bl	8000f1c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006f0:	6a38      	ldr	r0, [r7, #32]
 80006f2:	f000 f9cc 	bl	8000a8e <prvIsQueueEmpty>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f43f af6f 	beq.w	80005dc <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000700:	4618      	mov	r0, r3
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000722:	f001 fb03 	bl	8001d2c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072a:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d024      	beq.n	800077c <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d104      	bne.n	800074c <xQueueSemaphoreTake+0x40>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000742:	f001 f9d3 	bl	8001aec <pvTaskIncrementMutexHeldCount>
 8000746:	4602      	mov	r2, r0
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00f      	beq.n	8000774 <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3310      	adds	r3, #16
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fe2d 	bl	80013b8 <xTaskRemoveFromEventList>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000764:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <xQueueSemaphoreTake+0x18c>)
 8000766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	f3bf 8f4f 	dsb	sy
 8000770:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000774:	f001 faf4 	bl	8001d60 <vPortExitCritical>
                return pdPASS;
 8000778:	2301      	movs	r3, #1
 800077a:	e089      	b.n	8000890 <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <xQueueSemaphoreTake+0x7e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000782:	f001 faed 	bl	8001d60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000786:	2300      	movs	r3, #0
 8000788:	e082      	b.n	8000890 <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fed7 	bl	8001548 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800079a:	2301      	movs	r3, #1
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800079e:	f001 fadf 	bl	8001d60 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007a2:	f000 fbad 	bl	8000f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007a6:	f001 fac1 	bl	8001d2c <vPortEnterCritical>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b6:	d103      	bne.n	80007c0 <xQueueSemaphoreTake+0xb4>
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d103      	bne.n	80007d6 <xQueueSemaphoreTake+0xca>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80007d6:	f001 fac3 	bl	8001d60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007da:	463a      	mov	r2, r7
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fec6 	bl	8001574 <xTaskCheckForTimeOut>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d132      	bne.n	8000854 <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007ee:	69f8      	ldr	r0, [r7, #28]
 80007f0:	f000 f94d 	bl	8000a8e <prvIsQueueEmpty>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d026      	beq.n	8000848 <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d109      	bne.n	8000816 <xQueueSemaphoreTake+0x10a>
                    {
                        taskENTER_CRITICAL();
 8000802:	f001 fa93 	bl	8001d2c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 ffb8 	bl	8001780 <xTaskPriorityInherit>
 8000810:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8000812:	f001 faa5 	bl	8001d60 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3324      	adds	r3, #36	; 0x24
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fdb4 	bl	800138c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000824:	69f8      	ldr	r0, [r7, #28]
 8000826:	f000 f8e0 	bl	80009ea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800082a:	f000 fb77 	bl	8000f1c <xTaskResumeAll>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	f47f af76 	bne.w	8000722 <xQueueSemaphoreTake+0x16>
                {
                    portYIELD_WITHIN_API();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <xQueueSemaphoreTake+0x18c>)
 8000838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	e76c      	b.n	8000722 <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000848:	69f8      	ldr	r0, [r7, #28]
 800084a:	f000 f8ce 	bl	80009ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800084e:	f000 fb65 	bl	8000f1c <xTaskResumeAll>
 8000852:	e766      	b.n	8000722 <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000854:	69f8      	ldr	r0, [r7, #28]
 8000856:	f000 f8c8 	bl	80009ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800085a:	f000 fb5f 	bl	8000f1c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800085e:	69f8      	ldr	r0, [r7, #28]
 8000860:	f000 f915 	bl	8000a8e <prvIsQueueEmpty>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	f43f af5b 	beq.w	8000722 <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00d      	beq.n	800088e <xQueueSemaphoreTake+0x182>
                    {
                        taskENTER_CRITICAL();
 8000872:	f001 fa5b 	bl	8001d2c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000876:	69f8      	ldr	r0, [r7, #28]
 8000878:	f000 f810 	bl	800089c <prvGetDisinheritPriorityAfterTimeout>
 800087c:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	6979      	ldr	r1, [r7, #20]
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f89b 	bl	80019c0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800088a:	f001 fa69 	bl	8001d60 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800088e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000890:	4618      	mov	r0, r3
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	e000ed04 	.word	0xe000ed04

0800089c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f1c3 0305 	rsb	r3, r3, #5
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e001      	b.n	80008be <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80008be:	68fb      	ldr	r3, [r7, #12]
    }
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008de:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10d      	bne.n	8000904 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d14d      	bne.n	800098c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 ffe1 	bl	80018bc <xTaskPriorityDisinherit>
 80008fa:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	e043      	b.n	800098c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d119      	bne.n	800093e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6858      	ldr	r0, [r3, #4]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	461a      	mov	r2, r3
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	f004 fb1b 	bl	8004f50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	441a      	add	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d32b      	bcc.n	800098c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	e026      	b.n	800098c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	68d8      	ldr	r0, [r3, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	461a      	mov	r2, r3
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	f004 fb01 	bl	8004f50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	425b      	negs	r3, r3
 8000958:	441a      	add	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d207      	bcs.n	800097a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	425b      	negs	r3, r3
 8000974:	441a      	add	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d105      	bne.n	800098c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	3b01      	subs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000994:	697b      	ldr	r3, [r7, #20]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d018      	beq.n	80009e2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	441a      	add	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d303      	bcc.n	80009d2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68d9      	ldr	r1, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	461a      	mov	r2, r3
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f004 fab7 	bl	8004f50 <memcpy>
    }
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80009f2:	f001 f99b 	bl	8001d2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009fc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80009fe:	e011      	b.n	8000a24 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d012      	beq.n	8000a2e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3324      	adds	r3, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fcd3 	bl	80013b8 <xTaskRemoveFromEventList>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a18:	f000 fdf6 	bl	8001608 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dce9      	bgt.n	8000a00 <prvUnlockQueue+0x16>
 8000a2c:	e000      	b.n	8000a30 <prvUnlockQueue+0x46>
                    break;
 8000a2e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000a38:	f001 f992 	bl	8001d60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a3c:	f001 f976 	bl	8001d2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a46:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a48:	e011      	b.n	8000a6e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d012      	beq.n	8000a78 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3310      	adds	r3, #16
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fcae 	bl	80013b8 <xTaskRemoveFromEventList>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a62:	f000 fdd1 	bl	8001608 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dce9      	bgt.n	8000a4a <prvUnlockQueue+0x60>
 8000a76:	e000      	b.n	8000a7a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a78:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000a82:	f001 f96d 	bl	8001d60 <vPortExitCritical>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000a96:	f001 f949 	bl	8001d2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e001      	b.n	8000aac <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000aac:	f001 f958 	bl	8001d60 <vPortExitCritical>

    return xReturn;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ac2:	f001 f933 	bl	8001d2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d102      	bne.n	8000ad8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e001      	b.n	8000adc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000adc:	f001 f940 	bl	8001d60 <vPortExitCritical>

    return xReturn;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b08c      	sub	sp, #48	; 0x30
 8000aee:	af04      	add	r7, sp, #16
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4613      	mov	r3, r2
 8000af8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f9ae 	bl	8001e60 <pvPortMalloc>
 8000b04:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000b0c:	2054      	movs	r0, #84	; 0x54
 8000b0e:	f001 f9a7 	bl	8001e60 <pvPortMalloc>
 8000b12:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d008      	beq.n	8000b2c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000b1a:	2254      	movs	r2, #84	; 0x54
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	69f8      	ldr	r0, [r7, #28]
 8000b20:	f004 f9e9 	bl	8004ef6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
 8000b2a:	e005      	b.n	8000b38 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f001 f9e9 	bl	8001f04 <vPortFree>
 8000b32:	e001      	b.n	8000b38 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d013      	beq.n	8000b66 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9303      	str	r3, [sp, #12]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 f80e 	bl	8000b76 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000b5a:	69f8      	ldr	r0, [r7, #28]
 8000b5c:	f000 f874 	bl	8000c48 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	e002      	b.n	8000b6c <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
    }
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	f023 0307 	bic.w	r3, r3, #7
 8000b9c:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01e      	beq.n	8000be2 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e012      	b.n	8000bd0 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	4413      	add	r3, r2
 8000bb0:	7819      	ldrb	r1, [r3, #0]
 8000bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3334      	adds	r3, #52	; 0x34
 8000bba:	460a      	mov	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d9e9      	bls.n	8000baa <prvInitialiseNewTask+0x34>
 8000bd6:	e000      	b.n	8000bda <prvInitialiseNewTask+0x64>
            {
                break;
 8000bd8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d901      	bls.n	8000bec <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000be8:	2304      	movs	r3, #4
 8000bea:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6a3a      	ldr	r2, [r7, #32]
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	6a3a      	ldr	r2, [r7, #32]
 8000bf6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fad6 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c04:	3318      	adds	r3, #24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fad1 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c10:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	f1c3 0205 	rsb	r2, r3, #5
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f000 fff4 	bl	8001c14 <pxPortInitialiseStack>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c50:	f001 f86c 	bl	8001d2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c54:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c5c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c66:	4a3b      	ldr	r2, [pc, #236]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c6c:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d110      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000c74:	f000 fcec 	bl	8001650 <prvInitialiseTaskLists>
 8000c78:	e00d      	b.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <prvAddNewTaskToReadyList+0x110>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d802      	bhi.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <prvAddNewTaskToReadyList+0x114>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <prvAddNewTaskToReadyList+0x114>)
 8000c9e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb6:	492b      	ldr	r1, [pc, #172]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	3204      	adds	r2, #4
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000cf6:	441a      	add	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	4918      	ldr	r1, [pc, #96]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1c59      	adds	r1, r3, #1
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4403      	add	r3, r0
 8000d1c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d1e:	f001 f81f 	bl	8001d60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <prvAddNewTaskToReadyList+0x110>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00e      	beq.n	8000d48 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <prvAddNewTaskToReadyList+0x120>)
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000011c 	.word	0x2000011c
 8000d54:	20000044 	.word	0x20000044
 8000d58:	20000128 	.word	0x20000128
 8000d5c:	20000138 	.word	0x20000138
 8000d60:	20000124 	.word	0x20000124
 8000d64:	20000048 	.word	0x20000048
 8000d68:	e000ed04 	.word	0xe000ed04

08000d6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000d74:	f000 ffda 	bl	8001d2c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <vTaskSuspend+0x18>
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <vTaskSuspend+0x100>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	e000      	b.n	8000d86 <vTaskSuspend+0x1a>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fa75 	bl	800027c <uxListRemove>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d115      	bne.n	8000dc4 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9c:	4934      	ldr	r1, [pc, #208]	; (8000e70 <vTaskSuspend+0x104>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <vTaskSuspend+0x58>
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	2201      	movs	r2, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43da      	mvns	r2, r3
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <vTaskSuspend+0x108>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <vTaskSuspend+0x108>)
 8000dc2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa53 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4826      	ldr	r0, [pc, #152]	; (8000e78 <vTaskSuspend+0x10c>)
 8000dde:	f7ff f9f2 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e010      	b.n	8000e0a <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	3350      	adds	r3, #80	; 0x50
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d105      	bne.n	8000e04 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3350      	adds	r3, #80	; 0x50
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	ddeb      	ble.n	8000de8 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000e10:	f000 ffa6 	bl	8001d60 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <vTaskSuspend+0x110>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000e1c:	f000 ff86 	bl	8001d2c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000e20:	f000 fc94 	bl	800174c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000e24:	f000 ff9c 	bl	8001d60 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <vTaskSuspend+0x100>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d118      	bne.n	8000e64 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <vTaskSuspend+0x110>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <vTaskSuspend+0x114>)
 8000e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	f3bf 8f4f 	dsb	sy
 8000e46:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e4a:	e00b      	b.n	8000e64 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <vTaskSuspend+0x10c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <vTaskSuspend+0x118>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d103      	bne.n	8000e60 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <vTaskSuspend+0x100>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
    }
 8000e5e:	e001      	b.n	8000e64 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8000e60:	f000 fa4e 	bl	8001300 <vTaskSwitchContext>
    }
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000044 	.word	0x20000044
 8000e70:	20000048 	.word	0x20000048
 8000e74:	20000124 	.word	0x20000124
 8000e78:	20000108 	.word	0x20000108
 8000e7c:	20000128 	.word	0x20000128
 8000e80:	e000ed04 	.word	0xe000ed04
 8000e84:	2000011c 	.word	0x2000011c

08000e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <vTaskStartScheduler+0x5c>)
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	4913      	ldr	r1, [pc, #76]	; (8000ee8 <vTaskStartScheduler+0x60>)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <vTaskStartScheduler+0x64>)
 8000e9e:	f7ff fe24 	bl	8000aea <xTaskCreate>
 8000ea2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d115      	bne.n	8000ed6 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000eaa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000ebc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <vTaskStartScheduler+0x68>)
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <vTaskStartScheduler+0x6c>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <vTaskStartScheduler+0x70>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000ed2:	f000 ff0b 	bl	8001cec <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <vTaskStartScheduler+0x74>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000140 	.word	0x20000140
 8000ee8:	08004f84 	.word	0x08004f84
 8000eec:	08001621 	.word	0x08001621
 8000ef0:	2000013c 	.word	0x2000013c
 8000ef4:	20000128 	.word	0x20000128
 8000ef8:	20000120 	.word	0x20000120
 8000efc:	20000000 	.word	0x20000000

08000f00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <vTaskSuspendAll+0x18>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <vTaskSuspendAll+0x18>)
 8000f0c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000144 	.word	0x20000144

08000f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000f2a:	f000 feff 	bl	8001d2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000f2e:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <xTaskResumeAll+0x1b4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <xTaskResumeAll+0x1b4>)
 8000f36:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f38:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <xTaskResumeAll+0x1b4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f040 80c0 	bne.w	80010c2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f42:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <xTaskResumeAll+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80bb 	beq.w	80010c2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f4c:	e08a      	b.n	8001064 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f4e:	4b62      	ldr	r3, [pc, #392]	; (80010d8 <xTaskResumeAll+0x1bc>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	6a12      	ldr	r2, [r2, #32]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	69d2      	ldr	r2, [r2, #28]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3318      	adds	r3, #24
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d103      	bne.n	8000f84 <xTaskResumeAll+0x68>
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1e5a      	subs	r2, r3, #1
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	68d2      	ldr	r2, [r2, #12]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	6892      	ldr	r2, [r2, #8]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d103      	bne.n	8000fc2 <xTaskResumeAll+0xa6>
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <xTaskResumeAll+0x1c0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <xTaskResumeAll+0x1c0>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe8:	493d      	ldr	r1, [pc, #244]	; (80010e0 <xTaskResumeAll+0x1c4>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	3204      	adds	r2, #4
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	1d1a      	adds	r2, r3, #4
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <xTaskResumeAll+0x1c4>)
 8001028:	441a      	add	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001032:	492b      	ldr	r1, [pc, #172]	; (80010e0 <xTaskResumeAll+0x1c4>)
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1c59      	adds	r1, r3, #1
 8001042:	4827      	ldr	r0, [pc, #156]	; (80010e0 <xTaskResumeAll+0x1c4>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4403      	add	r3, r0
 800104e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <xTaskResumeAll+0x1c8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	429a      	cmp	r2, r3
 800105c:	d302      	bcc.n	8001064 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <xTaskResumeAll+0x1cc>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <xTaskResumeAll+0x1bc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f af70 	bne.w	8000f4e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001074:	f000 fb6a 	bl	800174c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <xTaskResumeAll+0x1d0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d010      	beq.n	80010a6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001084:	f000 f836 	bl	80010f4 <xTaskIncrementTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <xTaskResumeAll+0x1cc>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b01      	subs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f1      	bne.n	8001084 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <xTaskResumeAll+0x1d0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <xTaskResumeAll+0x1cc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d009      	beq.n	80010c2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <xTaskResumeAll+0x1d4>)
 80010b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f3bf 8f4f 	dsb	sy
 80010be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80010c2:	f000 fe4d 	bl	8001d60 <vPortExitCritical>

    return xAlreadyYielded;
 80010c6:	693b      	ldr	r3, [r7, #16]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000144 	.word	0x20000144
 80010d4:	2000011c 	.word	0x2000011c
 80010d8:	200000dc 	.word	0x200000dc
 80010dc:	20000124 	.word	0x20000124
 80010e0:	20000048 	.word	0x20000048
 80010e4:	20000044 	.word	0x20000044
 80010e8:	20000130 	.word	0x20000130
 80010ec:	2000012c 	.word	0x2000012c
 80010f0:	e000ed04 	.word	0xe000ed04

080010f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010fe:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <xTaskIncrementTick+0x1e0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 80dc 	bne.w	80012c0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001108:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <xTaskIncrementTick+0x1e4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001110:	4a71      	ldr	r2, [pc, #452]	; (80012d8 <xTaskIncrementTick+0x1e4>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d110      	bne.n	800113e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800111c:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <xTaskIncrementTick+0x1e8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <xTaskIncrementTick+0x1ec>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <xTaskIncrementTick+0x1e8>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4a6d      	ldr	r2, [pc, #436]	; (80012e0 <xTaskIncrementTick+0x1ec>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <xTaskIncrementTick+0x1f0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a6b      	ldr	r2, [pc, #428]	; (80012e4 <xTaskIncrementTick+0x1f0>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	f000 fb07 	bl	800174c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800113e:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <xTaskIncrementTick+0x1f4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	429a      	cmp	r2, r3
 8001146:	f0c0 80a6 	bcc.w	8001296 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800114a:	4b64      	ldr	r3, [pc, #400]	; (80012dc <xTaskIncrementTick+0x1e8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d104      	bne.n	800115e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001154:	4b64      	ldr	r3, [pc, #400]	; (80012e8 <xTaskIncrementTick+0x1f4>)
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	601a      	str	r2, [r3, #0]
                    break;
 800115c:	e09b      	b.n	8001296 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <xTaskIncrementTick+0x1e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	d203      	bcs.n	800117e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001176:	4a5c      	ldr	r2, [pc, #368]	; (80012e8 <xTaskIncrementTick+0x1f4>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800117c:	e08b      	b.n	8001296 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68d2      	ldr	r2, [r2, #12]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	6892      	ldr	r2, [r2, #8]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	3304      	adds	r3, #4
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d103      	bne.n	80011ac <xTaskIncrementTick+0xb8>
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01e      	beq.n	8001202 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	6a12      	ldr	r2, [r2, #32]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	69d2      	ldr	r2, [r2, #28]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3318      	adds	r3, #24
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d103      	bne.n	80011f2 <xTaskIncrementTick+0xfe>
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6a1a      	ldr	r2, [r3, #32]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2201      	movs	r2, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	4b38      	ldr	r3, [pc, #224]	; (80012ec <xTaskIncrementTick+0x1f8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4313      	orrs	r3, r2
 8001210:	4a36      	ldr	r2, [pc, #216]	; (80012ec <xTaskIncrementTick+0x1f8>)
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <xTaskIncrementTick+0x1fc>)
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	3204      	adds	r2, #4
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1d1a      	adds	r2, r3, #4
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <xTaskIncrementTick+0x1fc>)
 8001258:	441a      	add	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	4923      	ldr	r1, [pc, #140]	; (80012f0 <xTaskIncrementTick+0x1fc>)
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1c59      	adds	r1, r3, #1
 8001272:	481f      	ldr	r0, [pc, #124]	; (80012f0 <xTaskIncrementTick+0x1fc>)
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4403      	add	r3, r0
 800127e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <xTaskIncrementTick+0x200>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	429a      	cmp	r2, r3
 800128c:	f67f af5d 	bls.w	800114a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001294:	e759      	b.n	800114a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <xTaskIncrementTick+0x200>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <xTaskIncrementTick+0x1fc>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d901      	bls.n	80012b2 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <xTaskIncrementTick+0x204>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e004      	b.n	80012ca <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <xTaskIncrementTick+0x208>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <xTaskIncrementTick+0x208>)
 80012c8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80012ca:	69fb      	ldr	r3, [r7, #28]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000144 	.word	0x20000144
 80012d8:	20000120 	.word	0x20000120
 80012dc:	200000d4 	.word	0x200000d4
 80012e0:	200000d8 	.word	0x200000d8
 80012e4:	20000134 	.word	0x20000134
 80012e8:	2000013c 	.word	0x2000013c
 80012ec:	20000124 	.word	0x20000124
 80012f0:	20000048 	.word	0x20000048
 80012f4:	20000044 	.word	0x20000044
 80012f8:	20000130 	.word	0x20000130
 80012fc:	2000012c 	.word	0x2000012c

08001300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <vTaskSwitchContext+0x78>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <vTaskSwitchContext+0x7c>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001314:	e02a      	b.n	800136c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <vTaskSwitchContext+0x7c>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <vTaskSwitchContext+0x80>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f1c3 031f 	rsb	r3, r3, #31
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <vTaskSwitchContext+0x84>)
 800133e:	4413      	add	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3308      	adds	r3, #8
 8001354:	429a      	cmp	r2, r3
 8001356:	d104      	bne.n	8001362 <vTaskSwitchContext+0x62>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <vTaskSwitchContext+0x88>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000144 	.word	0x20000144
 800137c:	20000130 	.word	0x20000130
 8001380:	20000124 	.word	0x20000124
 8001384:	20000048 	.word	0x20000048
 8001388:	20000044 	.word	0x20000044

0800138c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <vTaskPlaceOnEventList+0x28>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3318      	adds	r3, #24
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe ff34 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013a4:	2101      	movs	r1, #1
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f000 fbb4 	bl	8001b14 <prvAddCurrentTaskToDelayedList>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000044 	.word	0x20000044

080013b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	6a12      	ldr	r2, [r2, #32]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69d2      	ldr	r2, [r2, #28]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	3318      	adds	r3, #24
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d103      	bne.n	80013f6 <xTaskRemoveFromEventList+0x3e>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <xTaskRemoveFromEventList+0x178>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d15e      	bne.n	80014cc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	68d2      	ldr	r2, [r2, #12]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	6892      	ldr	r2, [r2, #8]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3304      	adds	r3, #4
 8001430:	429a      	cmp	r2, r3
 8001432:	d103      	bne.n	800143c <xTaskRemoveFromEventList+0x84>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2201      	movs	r2, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <xTaskRemoveFromEventList+0x17c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4313      	orrs	r3, r2
 800145a:	4a36      	ldr	r2, [pc, #216]	; (8001534 <xTaskRemoveFromEventList+0x17c>)
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001462:	4935      	ldr	r1, [pc, #212]	; (8001538 <xTaskRemoveFromEventList+0x180>)
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	3204      	adds	r2, #4
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1d1a      	adds	r2, r3, #4
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4a25      	ldr	r2, [pc, #148]	; (8001538 <xTaskRemoveFromEventList+0x180>)
 80014a2:	441a      	add	r2, r3
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	4922      	ldr	r1, [pc, #136]	; (8001538 <xTaskRemoveFromEventList+0x180>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	481e      	ldr	r0, [pc, #120]	; (8001538 <xTaskRemoveFromEventList+0x180>)
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4403      	add	r3, r0
 80014c8:	6019      	str	r1, [r3, #0]
 80014ca:	e01b      	b.n	8001504 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <xTaskRemoveFromEventList+0x184>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	61da      	str	r2, [r3, #28]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	3218      	adds	r2, #24
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f103 0218 	add.w	r2, r3, #24
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <xTaskRemoveFromEventList+0x184>)
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <xTaskRemoveFromEventList+0x184>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <xTaskRemoveFromEventList+0x184>)
 8001502:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <xTaskRemoveFromEventList+0x188>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	429a      	cmp	r2, r3
 8001510:	d905      	bls.n	800151e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <xTaskRemoveFromEventList+0x18c>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e001      	b.n	8001522 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001522:	69fb      	ldr	r3, [r7, #28]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3724      	adds	r7, #36	; 0x24
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000144 	.word	0x20000144
 8001534:	20000124 	.word	0x20000124
 8001538:	20000048 	.word	0x20000048
 800153c:	200000dc 	.word	0x200000dc
 8001540:	20000044 	.word	0x20000044
 8001544:	20000130 	.word	0x20000130

08001548 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <vTaskInternalSetTimeOutState+0x24>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <vTaskInternalSetTimeOutState+0x28>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000134 	.word	0x20000134
 8001570:	20000120 	.word	0x20000120

08001574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800157e:	f000 fbd5 	bl	8001d2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <xTaskCheckForTimeOut+0x8c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159a:	d102      	bne.n	80015a2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e026      	b.n	80015f0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <xTaskCheckForTimeOut+0x90>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d00a      	beq.n	80015c4 <xTaskCheckForTimeOut+0x50>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d305      	bcc.n	80015c4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e015      	b.n	80015f0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20b      	bcs.n	80015e6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad2      	subs	r2, r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffb4 	bl	8001548 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e004      	b.n	80015f0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80015f0:	f000 fbb6 	bl	8001d60 <vPortExitCritical>

    return xReturn;
 80015f4:	697b      	ldr	r3, [r7, #20]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000120 	.word	0x20000120
 8001604:	20000134 	.word	0x20000134

08001608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <vTaskMissedYield+0x14>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000130 	.word	0x20000130

08001620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001628:	f000 f852 	bl	80016d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <prvIdleTask+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d9f9      	bls.n	8001628 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <prvIdleTask+0x2c>)
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001644:	e7f0      	b.n	8001628 <prvIdleTask+0x8>
 8001646:	bf00      	nop
 8001648:	20000048 	.word	0x20000048
 800164c:	e000ed04 	.word	0xe000ed04

08001650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	e00c      	b.n	8001676 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <prvInitialiseTaskLists+0x60>)
 8001668:	4413      	add	r3, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fd80 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d9ef      	bls.n	800165c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <prvInitialiseTaskLists+0x64>)
 800167e:	f7fe fd77 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <prvInitialiseTaskLists+0x68>)
 8001684:	f7fe fd74 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <prvInitialiseTaskLists+0x6c>)
 800168a:	f7fe fd71 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <prvInitialiseTaskLists+0x70>)
 8001690:	f7fe fd6e 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <prvInitialiseTaskLists+0x74>)
 8001696:	f7fe fd6b 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <prvInitialiseTaskLists+0x78>)
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <prvInitialiseTaskLists+0x64>)
 800169e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <prvInitialiseTaskLists+0x7c>)
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <prvInitialiseTaskLists+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000048 	.word	0x20000048
 80016b4:	200000ac 	.word	0x200000ac
 80016b8:	200000c0 	.word	0x200000c0
 80016bc:	200000dc 	.word	0x200000dc
 80016c0:	200000f0 	.word	0x200000f0
 80016c4:	20000108 	.word	0x20000108
 80016c8:	200000d4 	.word	0x200000d4
 80016cc:	200000d8 	.word	0x200000d8

080016d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016d6:	e019      	b.n	800170c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80016d8:	f000 fb28 	bl	8001d2c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <prvCheckTasksWaitingTermination+0x50>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fdc7 	bl	800027c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <prvCheckTasksWaitingTermination+0x54>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <prvCheckTasksWaitingTermination+0x54>)
 80016f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <prvCheckTasksWaitingTermination+0x58>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <prvCheckTasksWaitingTermination+0x58>)
 8001700:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001702:	f000 fb2d 	bl	8001d60 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f810 	bl	800172c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <prvCheckTasksWaitingTermination+0x58>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e1      	bne.n	80016d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000f0 	.word	0x200000f0
 8001724:	2000011c 	.word	0x2000011c
 8001728:	20000104 	.word	0x20000104

0800172c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fbe3 	bl	8001f04 <vPortFree>
            vPortFree( pxTCB );
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fbe0 	bl	8001f04 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <prvResetNextTaskUnblockTime+0x2c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d104      	bne.n	8001764 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <prvResetNextTaskUnblockTime+0x30>)
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001762:	e005      	b.n	8001770 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <prvResetNextTaskUnblockTime+0x2c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <prvResetNextTaskUnblockTime+0x30>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	200000d4 	.word	0x200000d4
 800177c:	2000013c 	.word	0x2000013c

08001780 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <xTaskPriorityInherit+0x130>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d276      	bcs.n	8001894 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db06      	blt.n	80017bc <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ae:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <xTaskPriorityInherit+0x130>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	f1c3 0205 	rsb	r2, r3, #5
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6959      	ldr	r1, [r3, #20]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <xTaskPriorityInherit+0x134>)
 80017ce:	4413      	add	r3, r2
 80017d0:	4299      	cmp	r1, r3
 80017d2:	d157      	bne.n	8001884 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	3304      	adds	r3, #4
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd4f 	bl	800027c <uxListRemove>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	2201      	movs	r2, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <xTaskPriorityInherit+0x138>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4013      	ands	r3, r2
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <xTaskPriorityInherit+0x138>)
 80017f8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <xTaskPriorityInherit+0x130>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	2201      	movs	r2, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <xTaskPriorityInherit+0x138>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4313      	orrs	r3, r2
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <xTaskPriorityInherit+0x138>)
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181a:	4926      	ldr	r1, [pc, #152]	; (80018b4 <xTaskPriorityInherit+0x134>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3304      	adds	r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	3204      	adds	r2, #4
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1d1a      	adds	r2, r3, #4
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <xTaskPriorityInherit+0x134>)
 800185a:	441a      	add	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <xTaskPriorityInherit+0x134>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1c59      	adds	r1, r3, #1
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <xTaskPriorityInherit+0x134>)
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4403      	add	r3, r0
 8001880:	6019      	str	r1, [r3, #0]
 8001882:	e004      	b.n	800188e <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <xTaskPriorityInherit+0x130>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e008      	b.n	80018a6 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <xTaskPriorityInherit+0x130>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	429a      	cmp	r2, r3
 80018a0:	d201      	bcs.n	80018a6 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80018a6:	697b      	ldr	r3, [r7, #20]
    }
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000044 	.word	0x20000044
 80018b4:	20000048 	.word	0x20000048
 80018b8:	20000124 	.word	0x20000124

080018bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06c      	beq.n	80019ac <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d061      	beq.n	80019ac <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d15d      	bne.n	80019ac <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	3304      	adds	r3, #4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fcc1 	bl	800027c <uxListRemove>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	2201      	movs	r2, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <xTaskPriorityDisinherit+0xfc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4013      	ands	r3, r2
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <xTaskPriorityDisinherit+0xfc>)
 8001914:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f1c3 0205 	rsb	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	2201      	movs	r2, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <xTaskPriorityDisinherit+0xfc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <xTaskPriorityDisinherit+0xfc>)
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	491e      	ldr	r1, [pc, #120]	; (80019bc <xTaskPriorityDisinherit+0x100>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3304      	adds	r3, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	3204      	adds	r2, #4
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1d1a      	adds	r2, r3, #4
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <xTaskPriorityDisinherit+0x100>)
 8001980:	441a      	add	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <xTaskPriorityDisinherit+0x100>)
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1c59      	adds	r1, r3, #1
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <xTaskPriorityDisinherit+0x100>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4403      	add	r3, r0
 80019a6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80019ac:	697b      	ldr	r3, [r7, #20]
    }
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000124 	.word	0x20000124
 80019bc:	20000048 	.word	0x20000048

080019c0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8081 	beq.w	8001adc <vTaskPriorityDisinheritAfterTimeout+0x11c>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d902      	bls.n	80019ea <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e002      	b.n	80019f0 <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d070      	beq.n	8001adc <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d16b      	bne.n	8001adc <vTaskPriorityDisinheritAfterTimeout+0x11c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db04      	blt.n	8001a22 <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0205 	rsb	r2, r3, #5
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6959      	ldr	r1, [r3, #20]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001a32:	4413      	add	r3, r2
 8001a34:	4299      	cmp	r1, r3
 8001a36:	d151      	bne.n	8001adc <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fc1d 	bl	800027c <uxListRemove>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10a      	bne.n	8001a5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001a5c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	2201      	movs	r2, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	3204      	adds	r2, #4
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1d1a      	adds	r2, r3, #4
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001ab4:	441a      	add	r2, r3
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abe:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1c59      	adds	r1, r3, #1
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4403      	add	r3, r0
 8001ada:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000048 	.word	0x20000048
 8001ae8:	20000124 	.word	0x20000124

08001aec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001afe:	3201      	adds	r2, #1
 8001b00:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8001b02:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
    }
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000044 	.word	0x20000044

08001b14 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fba6 	bl	800027c <uxListRemove>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b4c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d124      	bne.n	8001ba0 <prvAddCurrentTaskToDelayedList+0x8c>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d021      	beq.n	8001ba0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	6892      	ldr	r2, [r2, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1d1a      	adds	r2, r3, #4
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b9e:	e026      	b.n	8001bee <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d209      	bcs.n	8001bcc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f7fe fb21 	bl	800020c <vListInsert>
}
 8001bca:	e010      	b.n	8001bee <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <prvAddCurrentTaskToDelayedList+0xf8>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7fe fb17 	bl	800020c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d202      	bcs.n	8001bee <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000120 	.word	0x20000120
 8001bfc:	20000044 	.word	0x20000044
 8001c00:	20000124 	.word	0x20000124
 8001c04:	20000108 	.word	0x20000108
 8001c08:	200000d8 	.word	0x200000d8
 8001c0c:	200000d4 	.word	0x200000d4
 8001c10:	2000013c 	.word	0x2000013c

08001c14 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3b04      	subs	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b04      	subs	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f023 0201 	bic.w	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b04      	subs	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <pxPortInitialiseStack+0x54>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b14      	subs	r3, #20
 8001c4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b20      	subs	r3, #32
 8001c5a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	08001c6d 	.word	0x08001c6d

08001c6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c76:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	607b      	str	r3, [r7, #4]
    }
 8001c88:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001c8a:	bf00      	nop
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0fc      	beq.n	8001c8c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <pxCurrentTCBConst2>)
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	6808      	ldr	r0, [r1, #0]
 8001ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001caa:	f380 8809 	msr	PSP, r0
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f380 8811 	msr	BASEPRI, r0
 8001cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8001cbe:	4770      	bx	lr

08001cc0 <pxCurrentTCBConst2>:
 8001cc0:	20000044 	.word	0x20000044
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop

08001cc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <prvPortStartFirstTask+0x1c>)
 8001cca:	6800      	ldr	r0, [r0, #0]
 8001ccc:	6800      	ldr	r0, [r0, #0]
 8001cce:	f380 8808 	msr	MSP, r0
 8001cd2:	b662      	cpsie	i
 8001cd4:	b661      	cpsie	f
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	df00      	svc	0
 8001ce0:	bf00      	nop
 8001ce2:	0000      	.short	0x0000
 8001ce4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop

08001cec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <xPortStartScheduler+0x38>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <xPortStartScheduler+0x38>)
 8001cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <xPortStartScheduler+0x38>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <xPortStartScheduler+0x38>)
 8001d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d06:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001d08:	f000 f890 	bl	8001e2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <xPortStartScheduler+0x3c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001d12:	f7ff ffd9 	bl	8001cc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001d16:	f7ff faf3 	bl	8001300 <vTaskSwitchContext>
    prvTaskExitError();
 8001d1a:	f7ff ffa7 	bl	8001c6c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	e000ed20 	.word	0xe000ed20
 8001d28:	20000004 	.word	0x20000004

08001d2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
        __asm volatile
 8001d32:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	607b      	str	r3, [r7, #4]
    }
 8001d44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <vPortEnterCritical+0x30>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <vPortEnterCritical+0x30>)
 8001d4e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000004 	.word	0x20000004

08001d60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <vPortExitCritical+0x30>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <vPortExitCritical+0x30>)
 8001d6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <vPortExitCritical+0x30>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <vPortExitCritical+0x24>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001d82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000004 	.word	0x20000004
	...

08001da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001da0:	f3ef 8009 	mrs	r0, PSP
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <pxCurrentTCBConst>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001db0:	6010      	str	r0, [r2, #0]
 8001db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001db6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001dba:	f380 8811 	msr	BASEPRI, r0
 8001dbe:	f7ff fa9f 	bl	8001300 <vTaskSwitchContext>
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f380 8811 	msr	BASEPRI, r0
 8001dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	6808      	ldr	r0, [r1, #0]
 8001dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dd6:	f380 8809 	msr	PSP, r0
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	4770      	bx	lr

08001de0 <pxCurrentTCBConst>:
 8001de0:	20000044 	.word	0x20000044
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop

08001de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
        __asm volatile
 8001dee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	607b      	str	r3, [r7, #4]
    }
 8001e00:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001e02:	f7ff f977 	bl	80010f4 <xTaskIncrementTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SysTick_Handler+0x40>)
 8001e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f383 8811 	msr	BASEPRI, r3
    }
 8001e1e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	e000ed04 	.word	0xe000ed04

08001e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <vPortSetupTimerInterrupt+0x28>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <vPortSetupTimerInterrupt+0x2c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <vPortSetupTimerInterrupt+0x30>)
 8001e3e:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001e42:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <vPortSetupTimerInterrupt+0x28>)
 8001e46:	2207      	movs	r2, #7
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010
 8001e58:	e000e018 	.word	0xe000e018
 8001e5c:	e000e014 	.word	0xe000e014

08001e60 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f023 0307 	bic.w	r3, r3, #7
 8001e7c:	3308      	adds	r3, #8
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d205      	bcs.n	8001e90 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e001      	b.n	8001e94 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001e94:	f7ff f834 	bl	8000f00 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <pvPortMalloc+0x98>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <pvPortMalloc+0x9c>)
 8001ea2:	f023 0307 	bic.w	r3, r3, #7
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <pvPortMalloc+0x98>)
 8001eaa:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d01b      	beq.n	8001eea <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <pvPortMalloc+0xa0>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001eba:	f641 7237 	movw	r2, #7991	; 0x1f37
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d813      	bhi.n	8001eea <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <pvPortMalloc+0xa0>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	441a      	add	r2, r3
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <pvPortMalloc+0xa0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90b      	bls.n	8001eea <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <pvPortMalloc+0x98>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <pvPortMalloc+0xa0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <pvPortMalloc+0xa0>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <pvPortMalloc+0xa0>)
 8001ee8:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001eea:	f7ff f817 	bl	8000f1c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000208c 	.word	0x2000208c
 8001efc:	2000014f 	.word	0x2000014f
 8001f00:	20002088 	.word	0x20002088

08001f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <DMS_read>:
	 PINx=(PIN_config){TOUCH4,INPUT_FI,0};
	MCAL_GPIO_init(DMS_PORT, &PINx);
}


uint8_t DMS_read(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4810      	ldr	r0, [pc, #64]	; (8001f60 <DMS_read+0x48>)
 8001f20:	f001 faa8 	bl	8003474 <MCAL_Read_PIN>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d114      	bne.n	8001f54 <DMS_read+0x3c>
 8001f2a:	210c      	movs	r1, #12
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <DMS_read+0x48>)
 8001f2e:	f001 faa1 	bl	8003474 <MCAL_Read_PIN>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <DMS_read+0x3c>
 8001f38:	210b      	movs	r1, #11
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <DMS_read+0x48>)
 8001f3c:	f001 fa9a 	bl	8003474 <MCAL_Read_PIN>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <DMS_read+0x3c>
 8001f46:	2108      	movs	r1, #8
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <DMS_read+0x48>)
 8001f4a:	f001 fa93 	bl	8003474 <MCAL_Read_PIN>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <DMS_read+0x40>
		return 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <DMS_read+0x42>
	}
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40010800 	.word	0x40010800

08001f64 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 8001f68:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8001f70:	485c      	ldr	r0, [pc, #368]	; (80020e4 <LUNA_CallBack+0x180>)
 8001f72:	f002 f963 	bl	800423c <MCAL_USART_ReciveData>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b59      	cmp	r3, #89	; 0x59
 8001f7a:	f040 80ae 	bne.w	80020da <LUNA_CallBack+0x176>
			x++;
 8001f7e:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001f88:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 8001f8a:	e0a6      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==1){
 8001f8c:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10d      	bne.n	8001fb0 <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8001f94:	4853      	ldr	r0, [pc, #332]	; (80020e4 <LUNA_CallBack+0x180>)
 8001f96:	f002 f951 	bl	800423c <MCAL_USART_ReciveData>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b59      	cmp	r3, #89	; 0x59
 8001f9e:	f040 809c 	bne.w	80020da <LUNA_CallBack+0x176>
		x++;
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fac:	701a      	strb	r2, [r3, #0]
}
 8001fae:	e094      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==2){
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d10d      	bne.n	8001fd4 <LUNA_CallBack+0x70>
		x++;
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fc2:	701a      	strb	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001fc4:	4847      	ldr	r0, [pc, #284]	; (80020e4 <LUNA_CallBack+0x180>)
 8001fc6:	f002 f939 	bl	800423c <MCAL_USART_ReciveData>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <LUNA_CallBack+0x184>)
 8001fd0:	801a      	strh	r2, [r3, #0]
}
 8001fd2:	e082      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==3){
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d114      	bne.n	8002006 <LUNA_CallBack+0xa2>
		x++;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <LUNA_CallBack+0x17c>)
 8001fe6:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001fe8:	483e      	ldr	r0, [pc, #248]	; (80020e4 <LUNA_CallBack+0x180>)
 8001fea:	f002 f927 	bl	800423c <MCAL_USART_ReciveData>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <LUNA_CallBack+0x184>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <LUNA_CallBack+0x184>)
 8002002:	801a      	strh	r2, [r3, #0]
}
 8002004:	e069      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==4){
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d110      	bne.n	8002030 <LUNA_CallBack+0xcc>
		x++;
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002018:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <LUNA_CallBack+0x188>)
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8002020:	4830      	ldr	r0, [pc, #192]	; (80020e4 <LUNA_CallBack+0x180>)
 8002022:	f002 f90b 	bl	800423c <MCAL_USART_ReciveData>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <LUNA_CallBack+0x188>)
 800202c:	801a      	strh	r2, [r3, #0]
}
 800202e:	e054      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==5){
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d114      	bne.n	8002062 <LUNA_CallBack+0xfe>
		x++;
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <LUNA_CallBack+0x17c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002042:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8002044:	4827      	ldr	r0, [pc, #156]	; (80020e4 <LUNA_CallBack+0x180>)
 8002046:	f002 f8f9 	bl	800423c <MCAL_USART_ReciveData>
 800204a:	4603      	mov	r3, r0
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <LUNA_CallBack+0x188>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <LUNA_CallBack+0x188>)
 800205e:	801a      	strh	r2, [r3, #0]
}
 8002060:	e03b      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==6){
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d110      	bne.n	800208c <LUNA_CallBack+0x128>
		x++;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <LUNA_CallBack+0x17c>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002074:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <LUNA_CallBack+0x18c>)
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 800207c:	4819      	ldr	r0, [pc, #100]	; (80020e4 <LUNA_CallBack+0x180>)
 800207e:	f002 f8dd 	bl	800423c <MCAL_USART_ReciveData>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <LUNA_CallBack+0x18c>)
 8002088:	801a      	strh	r2, [r3, #0]
}
 800208a:	e026      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==7){
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <LUNA_CallBack+0x17c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b07      	cmp	r3, #7
 8002092:	d114      	bne.n	80020be <LUNA_CallBack+0x15a>
		x++;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <LUNA_CallBack+0x17c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <LUNA_CallBack+0x17c>)
 800209e:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <LUNA_CallBack+0x180>)
 80020a2:	f002 f8cb 	bl	800423c <MCAL_USART_ReciveData>
 80020a6:	4603      	mov	r3, r0
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <LUNA_CallBack+0x18c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <LUNA_CallBack+0x18c>)
 80020ba:	801a      	strh	r2, [r3, #0]
}
 80020bc:	e00d      	b.n	80020da <LUNA_CallBack+0x176>
	}else if(x==8){
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <LUNA_CallBack+0x17c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d109      	bne.n	80020da <LUNA_CallBack+0x176>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <LUNA_CallBack+0x180>)
 80020c8:	f002 f8b8 	bl	800423c <MCAL_USART_ReciveData>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LUNA_CallBack+0x190>)
 80020d2:	701a      	strb	r2, [r3, #0]
		x=0;
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <LUNA_CallBack+0x17c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20002097 	.word	0x20002097
 80020e4:	40004800 	.word	0x40004800
 80020e8:	20002090 	.word	0x20002090
 80020ec:	20002092 	.word	0x20002092
 80020f0:	20002094 	.word	0x20002094
 80020f4:	20002096 	.word	0x20002096

080020f8 <LUNA_INIT>:

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	460a      	mov	r2, r1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8002108:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <LUNA_INIT+0x24c>)
 800210a:	f107 0408 	add.w	r4, r7, #8
 800210e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	4619      	mov	r1, r3
 800211a:	488b      	ldr	r0, [pc, #556]	; (8002348 <LUNA_INIT+0x250>)
 800211c:	f001 fee2 	bl	8003ee4 <MCAL_USART_init>
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002120:	215a      	movs	r1, #90	; 0x5a
 8002122:	4889      	ldr	r0, [pc, #548]	; (8002348 <LUNA_INIT+0x250>)
 8002124:	f002 f84a 	bl	80041bc <MCAL_USART_SendData>
 8002128:	2108      	movs	r1, #8
 800212a:	4887      	ldr	r0, [pc, #540]	; (8002348 <LUNA_INIT+0x250>)
 800212c:	f002 f846 	bl	80041bc <MCAL_USART_SendData>
 8002130:	2106      	movs	r1, #6
 8002132:	4885      	ldr	r0, [pc, #532]	; (8002348 <LUNA_INIT+0x250>)
 8002134:	f002 f842 	bl	80041bc <MCAL_USART_SendData>
 8002138:	2100      	movs	r1, #0
 800213a:	4883      	ldr	r0, [pc, #524]	; (8002348 <LUNA_INIT+0x250>)
 800213c:	f002 f83e 	bl	80041bc <MCAL_USART_SendData>
 8002140:	21c2      	movs	r1, #194	; 0xc2
 8002142:	4881      	ldr	r0, [pc, #516]	; (8002348 <LUNA_INIT+0x250>)
 8002144:	f002 f83a 	bl	80041bc <MCAL_USART_SendData>
 8002148:	2101      	movs	r1, #1
 800214a:	487f      	ldr	r0, [pc, #508]	; (8002348 <LUNA_INIT+0x250>)
 800214c:	f002 f836 	bl	80041bc <MCAL_USART_SendData>
 8002150:	2100      	movs	r1, #0
 8002152:	487d      	ldr	r0, [pc, #500]	; (8002348 <LUNA_INIT+0x250>)
 8002154:	f002 f832 	bl	80041bc <MCAL_USART_SendData>
 8002158:	2100      	movs	r1, #0
 800215a:	487b      	ldr	r0, [pc, #492]	; (8002348 <LUNA_INIT+0x250>)
 800215c:	f002 f82e 	bl	80041bc <MCAL_USART_SendData>
	switch (mode){
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d048      	beq.n	80021f8 <LUNA_INIT+0x100>
 8002166:	2b02      	cmp	r3, #2
 8002168:	dc57      	bgt.n	800221a <LUNA_INIT+0x122>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <LUNA_INIT+0x7c>
 800216e:	2b01      	cmp	r3, #1
 8002170:	d019      	beq.n	80021a6 <LUNA_INIT+0xae>
 8002172:	e052      	b.n	800221a <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002174:	215a      	movs	r1, #90	; 0x5a
 8002176:	4874      	ldr	r0, [pc, #464]	; (8002348 <LUNA_INIT+0x250>)
 8002178:	f002 f820 	bl	80041bc <MCAL_USART_SendData>
 800217c:	2106      	movs	r1, #6
 800217e:	4872      	ldr	r0, [pc, #456]	; (8002348 <LUNA_INIT+0x250>)
 8002180:	f002 f81c 	bl	80041bc <MCAL_USART_SendData>
 8002184:	2103      	movs	r1, #3
 8002186:	4870      	ldr	r0, [pc, #448]	; (8002348 <LUNA_INIT+0x250>)
 8002188:	f002 f818 	bl	80041bc <MCAL_USART_SendData>
 800218c:	2164      	movs	r1, #100	; 0x64
 800218e:	486e      	ldr	r0, [pc, #440]	; (8002348 <LUNA_INIT+0x250>)
 8002190:	f002 f814 	bl	80041bc <MCAL_USART_SendData>
 8002194:	2100      	movs	r1, #0
 8002196:	486c      	ldr	r0, [pc, #432]	; (8002348 <LUNA_INIT+0x250>)
 8002198:	f002 f810 	bl	80041bc <MCAL_USART_SendData>
 800219c:	2100      	movs	r1, #0
 800219e:	486a      	ldr	r0, [pc, #424]	; (8002348 <LUNA_INIT+0x250>)
 80021a0:	f002 f80c 	bl	80041bc <MCAL_USART_SendData>
		break;
 80021a4:	e039      	b.n	800221a <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80021a6:	215a      	movs	r1, #90	; 0x5a
 80021a8:	4867      	ldr	r0, [pc, #412]	; (8002348 <LUNA_INIT+0x250>)
 80021aa:	f002 f807 	bl	80041bc <MCAL_USART_SendData>
 80021ae:	2106      	movs	r1, #6
 80021b0:	4865      	ldr	r0, [pc, #404]	; (8002348 <LUNA_INIT+0x250>)
 80021b2:	f002 f803 	bl	80041bc <MCAL_USART_SendData>
 80021b6:	2103      	movs	r1, #3
 80021b8:	4863      	ldr	r0, [pc, #396]	; (8002348 <LUNA_INIT+0x250>)
 80021ba:	f001 ffff 	bl	80041bc <MCAL_USART_SendData>
 80021be:	2100      	movs	r1, #0
 80021c0:	4861      	ldr	r0, [pc, #388]	; (8002348 <LUNA_INIT+0x250>)
 80021c2:	f001 fffb 	bl	80041bc <MCAL_USART_SendData>
 80021c6:	2100      	movs	r1, #0
 80021c8:	485f      	ldr	r0, [pc, #380]	; (8002348 <LUNA_INIT+0x250>)
 80021ca:	f001 fff7 	bl	80041bc <MCAL_USART_SendData>
 80021ce:	2100      	movs	r1, #0
 80021d0:	485d      	ldr	r0, [pc, #372]	; (8002348 <LUNA_INIT+0x250>)
 80021d2:	f001 fff3 	bl	80041bc <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80021d6:	215a      	movs	r1, #90	; 0x5a
 80021d8:	485b      	ldr	r0, [pc, #364]	; (8002348 <LUNA_INIT+0x250>)
 80021da:	f001 ffef 	bl	80041bc <MCAL_USART_SendData>
 80021de:	2104      	movs	r1, #4
 80021e0:	4859      	ldr	r0, [pc, #356]	; (8002348 <LUNA_INIT+0x250>)
 80021e2:	f001 ffeb 	bl	80041bc <MCAL_USART_SendData>
 80021e6:	2104      	movs	r1, #4
 80021e8:	4857      	ldr	r0, [pc, #348]	; (8002348 <LUNA_INIT+0x250>)
 80021ea:	f001 ffe7 	bl	80041bc <MCAL_USART_SendData>
 80021ee:	2100      	movs	r1, #0
 80021f0:	4855      	ldr	r0, [pc, #340]	; (8002348 <LUNA_INIT+0x250>)
 80021f2:	f001 ffe3 	bl	80041bc <MCAL_USART_SendData>
		break;
 80021f6:	e010      	b.n	800221a <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80021f8:	215a      	movs	r1, #90	; 0x5a
 80021fa:	4853      	ldr	r0, [pc, #332]	; (8002348 <LUNA_INIT+0x250>)
 80021fc:	f001 ffde 	bl	80041bc <MCAL_USART_SendData>
 8002200:	2104      	movs	r1, #4
 8002202:	4851      	ldr	r0, [pc, #324]	; (8002348 <LUNA_INIT+0x250>)
 8002204:	f001 ffda 	bl	80041bc <MCAL_USART_SendData>
 8002208:	213b      	movs	r1, #59	; 0x3b
 800220a:	484f      	ldr	r0, [pc, #316]	; (8002348 <LUNA_INIT+0x250>)
 800220c:	f001 ffd6 	bl	80041bc <MCAL_USART_SendData>
 8002210:	2100      	movs	r1, #0
 8002212:	484d      	ldr	r0, [pc, #308]	; (8002348 <LUNA_INIT+0x250>)
 8002214:	f001 ffd2 	bl	80041bc <MCAL_USART_SendData>
		break;
 8002218:	bf00      	nop
	}
	switch (format)
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	2b05      	cmp	r3, #5
 800221e:	f200 808d 	bhi.w	800233c <LUNA_INIT+0x244>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <LUNA_INIT+0x130>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002241 	.word	0x08002241
 800222c:	0800226b 	.word	0x0800226b
 8002230:	08002295 	.word	0x08002295
 8002234:	080022bf 	.word	0x080022bf
 8002238:	080022e9 	.word	0x080022e9
 800223c:	08002313 	.word	0x08002313
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002240:	215a      	movs	r1, #90	; 0x5a
 8002242:	4841      	ldr	r0, [pc, #260]	; (8002348 <LUNA_INIT+0x250>)
 8002244:	f001 ffba 	bl	80041bc <MCAL_USART_SendData>
 8002248:	2105      	movs	r1, #5
 800224a:	483f      	ldr	r0, [pc, #252]	; (8002348 <LUNA_INIT+0x250>)
 800224c:	f001 ffb6 	bl	80041bc <MCAL_USART_SendData>
 8002250:	2105      	movs	r1, #5
 8002252:	483d      	ldr	r0, [pc, #244]	; (8002348 <LUNA_INIT+0x250>)
 8002254:	f001 ffb2 	bl	80041bc <MCAL_USART_SendData>
 8002258:	2101      	movs	r1, #1
 800225a:	483b      	ldr	r0, [pc, #236]	; (8002348 <LUNA_INIT+0x250>)
 800225c:	f001 ffae 	bl	80041bc <MCAL_USART_SendData>
 8002260:	2100      	movs	r1, #0
 8002262:	4839      	ldr	r0, [pc, #228]	; (8002348 <LUNA_INIT+0x250>)
 8002264:	f001 ffaa 	bl	80041bc <MCAL_USART_SendData>
		break;
 8002268:	e068      	b.n	800233c <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800226a:	215a      	movs	r1, #90	; 0x5a
 800226c:	4836      	ldr	r0, [pc, #216]	; (8002348 <LUNA_INIT+0x250>)
 800226e:	f001 ffa5 	bl	80041bc <MCAL_USART_SendData>
 8002272:	2105      	movs	r1, #5
 8002274:	4834      	ldr	r0, [pc, #208]	; (8002348 <LUNA_INIT+0x250>)
 8002276:	f001 ffa1 	bl	80041bc <MCAL_USART_SendData>
 800227a:	2105      	movs	r1, #5
 800227c:	4832      	ldr	r0, [pc, #200]	; (8002348 <LUNA_INIT+0x250>)
 800227e:	f001 ff9d 	bl	80041bc <MCAL_USART_SendData>
 8002282:	2102      	movs	r1, #2
 8002284:	4830      	ldr	r0, [pc, #192]	; (8002348 <LUNA_INIT+0x250>)
 8002286:	f001 ff99 	bl	80041bc <MCAL_USART_SendData>
 800228a:	2100      	movs	r1, #0
 800228c:	482e      	ldr	r0, [pc, #184]	; (8002348 <LUNA_INIT+0x250>)
 800228e:	f001 ff95 	bl	80041bc <MCAL_USART_SendData>
		break;
 8002292:	e053      	b.n	800233c <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002294:	215a      	movs	r1, #90	; 0x5a
 8002296:	482c      	ldr	r0, [pc, #176]	; (8002348 <LUNA_INIT+0x250>)
 8002298:	f001 ff90 	bl	80041bc <MCAL_USART_SendData>
 800229c:	2105      	movs	r1, #5
 800229e:	482a      	ldr	r0, [pc, #168]	; (8002348 <LUNA_INIT+0x250>)
 80022a0:	f001 ff8c 	bl	80041bc <MCAL_USART_SendData>
 80022a4:	2105      	movs	r1, #5
 80022a6:	4828      	ldr	r0, [pc, #160]	; (8002348 <LUNA_INIT+0x250>)
 80022a8:	f001 ff88 	bl	80041bc <MCAL_USART_SendData>
 80022ac:	2106      	movs	r1, #6
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <LUNA_INIT+0x250>)
 80022b0:	f001 ff84 	bl	80041bc <MCAL_USART_SendData>
 80022b4:	2100      	movs	r1, #0
 80022b6:	4824      	ldr	r0, [pc, #144]	; (8002348 <LUNA_INIT+0x250>)
 80022b8:	f001 ff80 	bl	80041bc <MCAL_USART_SendData>
		break;
 80022bc:	e03e      	b.n	800233c <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80022be:	215a      	movs	r1, #90	; 0x5a
 80022c0:	4821      	ldr	r0, [pc, #132]	; (8002348 <LUNA_INIT+0x250>)
 80022c2:	f001 ff7b 	bl	80041bc <MCAL_USART_SendData>
 80022c6:	2105      	movs	r1, #5
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <LUNA_INIT+0x250>)
 80022ca:	f001 ff77 	bl	80041bc <MCAL_USART_SendData>
 80022ce:	2105      	movs	r1, #5
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <LUNA_INIT+0x250>)
 80022d2:	f001 ff73 	bl	80041bc <MCAL_USART_SendData>
 80022d6:	2107      	movs	r1, #7
 80022d8:	481b      	ldr	r0, [pc, #108]	; (8002348 <LUNA_INIT+0x250>)
 80022da:	f001 ff6f 	bl	80041bc <MCAL_USART_SendData>
 80022de:	2100      	movs	r1, #0
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <LUNA_INIT+0x250>)
 80022e2:	f001 ff6b 	bl	80041bc <MCAL_USART_SendData>
		break;
 80022e6:	e029      	b.n	800233c <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80022e8:	215a      	movs	r1, #90	; 0x5a
 80022ea:	4817      	ldr	r0, [pc, #92]	; (8002348 <LUNA_INIT+0x250>)
 80022ec:	f001 ff66 	bl	80041bc <MCAL_USART_SendData>
 80022f0:	2105      	movs	r1, #5
 80022f2:	4815      	ldr	r0, [pc, #84]	; (8002348 <LUNA_INIT+0x250>)
 80022f4:	f001 ff62 	bl	80041bc <MCAL_USART_SendData>
 80022f8:	2105      	movs	r1, #5
 80022fa:	4813      	ldr	r0, [pc, #76]	; (8002348 <LUNA_INIT+0x250>)
 80022fc:	f001 ff5e 	bl	80041bc <MCAL_USART_SendData>
 8002300:	2108      	movs	r1, #8
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <LUNA_INIT+0x250>)
 8002304:	f001 ff5a 	bl	80041bc <MCAL_USART_SendData>
 8002308:	2100      	movs	r1, #0
 800230a:	480f      	ldr	r0, [pc, #60]	; (8002348 <LUNA_INIT+0x250>)
 800230c:	f001 ff56 	bl	80041bc <MCAL_USART_SendData>
		break;
 8002310:	e014      	b.n	800233c <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8002312:	215a      	movs	r1, #90	; 0x5a
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <LUNA_INIT+0x250>)
 8002316:	f001 ff51 	bl	80041bc <MCAL_USART_SendData>
 800231a:	2105      	movs	r1, #5
 800231c:	480a      	ldr	r0, [pc, #40]	; (8002348 <LUNA_INIT+0x250>)
 800231e:	f001 ff4d 	bl	80041bc <MCAL_USART_SendData>
 8002322:	2105      	movs	r1, #5
 8002324:	4808      	ldr	r0, [pc, #32]	; (8002348 <LUNA_INIT+0x250>)
 8002326:	f001 ff49 	bl	80041bc <MCAL_USART_SendData>
 800232a:	2109      	movs	r1, #9
 800232c:	4806      	ldr	r0, [pc, #24]	; (8002348 <LUNA_INIT+0x250>)
 800232e:	f001 ff45 	bl	80041bc <MCAL_USART_SendData>
 8002332:	2100      	movs	r1, #0
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <LUNA_INIT+0x250>)
 8002336:	f001 ff41 	bl	80041bc <MCAL_USART_SendData>
		break;
 800233a:	bf00      	nop
	}
}
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	08004f8c 	.word	0x08004f8c
 8002348:	40004800 	.word	0x40004800

0800234c <TFT_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TFT_init(RGB_fromat RGB){
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]

	/**************init the moudles used*************/
	SPI_Config_t TFT_Config={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_2,idle_0,first_clock};
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	2301      	movs	r3, #1
 8002366:	743b      	strb	r3, [r7, #16]
 8002368:	2301      	movs	r3, #1
 800236a:	747b      	strb	r3, [r7, #17]
	PIN_config PINx={TFT_RESET_PIN,OUTPUT_PP,SPEED_10};
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <TFT_init+0xd0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
	MCAL_SPI_init(TFT_SPI_inistant, &TFT_Config);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	4829      	ldr	r0, [pc, #164]	; (8002420 <TFT_init+0xd4>)
 800237a:	f001 fa33 	bl	80037e4 <MCAL_SPI_init>
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4619      	mov	r1, r3
 8002384:	4827      	ldr	r0, [pc, #156]	; (8002424 <TFT_init+0xd8>)
 8002386:	f000 ff63 	bl	8003250 <MCAL_GPIO_init>
	PINx.PIN_number =TFT_A0_PIN;
 800238a:	2303      	movs	r3, #3
 800238c:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4619      	mov	r1, r3
 8002394:	4823      	ldr	r0, [pc, #140]	; (8002424 <TFT_init+0xd8>)
 8002396:	f000 ff5b 	bl	8003250 <MCAL_GPIO_init>
	/**************Start the init*************/
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 800239a:	2201      	movs	r2, #1
 800239c:	2104      	movs	r1, #4
 800239e:	4821      	ldr	r0, [pc, #132]	; (8002424 <TFT_init+0xd8>)
 80023a0:	f001 f840 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_LOW);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2102      	movs	r1, #2
 80023a8:	481e      	ldr	r0, [pc, #120]	; (8002424 <TFT_init+0xd8>)
 80023aa:	f001 f83b 	bl	8003424 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 80023ae:	2078      	movs	r0, #120	; 0x78
 80023b0:	f001 fd80 	bl	8003eb4 <_TIM1_delay_ms>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_HIGH);
 80023b4:	2201      	movs	r2, #1
 80023b6:	2102      	movs	r1, #2
 80023b8:	481a      	ldr	r0, [pc, #104]	; (8002424 <TFT_init+0xd8>)
 80023ba:	f001 f833 	bl	8003424 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 80023be:	2078      	movs	r0, #120	; 0x78
 80023c0:	f001 fd78 	bl	8003eb4 <_TIM1_delay_ms>

	TFT_send_command(0x01);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 f82f 	bl	8002428 <TFT_send_command>
	_TIM1_delay_ms( 120);
 80023ca:	2078      	movs	r0, #120	; 0x78
 80023cc:	f001 fd72 	bl	8003eb4 <_TIM1_delay_ms>

	TFT_send_command(TFT_Sleep_Out_MODE);
 80023d0:	2011      	movs	r0, #17
 80023d2:	f000 f829 	bl	8002428 <TFT_send_command>
	_TIM1_delay_ms( 110);
 80023d6:	206e      	movs	r0, #110	; 0x6e
 80023d8:	f001 fd6c 	bl	8003eb4 <_TIM1_delay_ms>

	TFT_send_command(TFT_Pixel_Format_MODE); // Interface Pixel Format
 80023dc:	203a      	movs	r0, #58	; 0x3a
 80023de:	f000 f823 	bl	8002428 <TFT_send_command>
	TFT_send_data(0x6); //18 bit
 80023e2:	2006      	movs	r0, #6
 80023e4:	f000 f842 	bl	800246c <TFT_send_data>
	_TIM1_delay_ms( 120);
 80023e8:	2078      	movs	r0, #120	; 0x78
 80023ea:	f001 fd63 	bl	8003eb4 <_TIM1_delay_ms>

	//	TFT_send_command(0x23); // Interface Pixel Format
	TFT_send_command(0x36);
 80023ee:	2036      	movs	r0, #54	; 0x36
 80023f0:	f000 f81a 	bl	8002428 <TFT_send_command>
	_TIM1_delay_ms( 120);
 80023f4:	2078      	movs	r0, #120	; 0x78
 80023f6:	f001 fd5d 	bl	8003eb4 <_TIM1_delay_ms>

	TFT_send_data(0x8 );
 80023fa:	2008      	movs	r0, #8
 80023fc:	f000 f836 	bl	800246c <TFT_send_data>
	_TIM1_delay_ms( 120);
 8002400:	2078      	movs	r0, #120	; 0x78
 8002402:	f001 fd57 	bl	8003eb4 <_TIM1_delay_ms>
	///////////////////////



	/////////////////////////
	TFT_send_command(TFT_Display_On_MODE);
 8002406:	2029      	movs	r0, #41	; 0x29
 8002408:	f000 f80e 	bl	8002428 <TFT_send_command>
	_TIM1_delay_ms( 120);
 800240c:	2078      	movs	r0, #120	; 0x78
 800240e:	f001 fd51 	bl	8003eb4 <_TIM1_delay_ms>




}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	08004f9c 	.word	0x08004f9c
 8002420:	40013000 	.word	0x40013000
 8002424:	40010800 	.word	0x40010800

08002428 <TFT_send_command>:
void TFT_send_command(uint8_t command)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 8002432:	2200      	movs	r2, #0
 8002434:	2104      	movs	r1, #4
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <TFT_send_command+0x3c>)
 8002438:	f000 fff4 	bl	8003424 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_LOW);
 800243c:	2200      	movs	r2, #0
 800243e:	2103      	movs	r1, #3
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <TFT_send_command+0x3c>)
 8002442:	f000 ffef 	bl	8003424 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, command);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4619      	mov	r1, r3
 800244a:	4807      	ldr	r0, [pc, #28]	; (8002468 <TFT_send_command+0x40>)
 800244c:	f001 fa8a 	bl	8003964 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002450:	2201      	movs	r2, #1
 8002452:	2104      	movs	r1, #4
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <TFT_send_command+0x3c>)
 8002456:	f000 ffe5 	bl	8003424 <MCAL_write_PIN>

}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40010800 	.word	0x40010800
 8002468:	40013000 	.word	0x40013000

0800246c <TFT_send_data>:


void TFT_send_data(uint8_t data){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]

	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	480b      	ldr	r0, [pc, #44]	; (80024a8 <TFT_send_data+0x3c>)
 800247c:	f000 ffd2 	bl	8003424 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_HIGH);
 8002480:	2201      	movs	r2, #1
 8002482:	2103      	movs	r1, #3
 8002484:	4808      	ldr	r0, [pc, #32]	; (80024a8 <TFT_send_data+0x3c>)
 8002486:	f000 ffcd 	bl	8003424 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, data);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4619      	mov	r1, r3
 800248e:	4807      	ldr	r0, [pc, #28]	; (80024ac <TFT_send_data+0x40>)
 8002490:	f001 fa68 	bl	8003964 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8002494:	2201      	movs	r2, #1
 8002496:	2104      	movs	r1, #4
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <TFT_send_data+0x3c>)
 800249a:	f000 ffc3 	bl	8003424 <MCAL_write_PIN>


}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40010800 	.word	0x40010800
 80024ac:	40013000 	.word	0x40013000

080024b0 <TFT_send_image>:



void TFT_send_image(uint8_t image_flag){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]

	volatile uint16_t *image=NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]



	/***********************************/
	TFT_send_command(TFT_SET_Column_MODE);
 80024be:	202a      	movs	r0, #42	; 0x2a
 80024c0:	f7ff ffb2 	bl	8002428 <TFT_send_command>
	TFT_send_data(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff ffd1 	bl	800246c <TFT_send_data>
	TFT_send_data(0x6E);
 80024ca:	206e      	movs	r0, #110	; 0x6e
 80024cc:	f7ff ffce 	bl	800246c <TFT_send_data>


	TFT_send_data(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff ffcb 	bl	800246c <TFT_send_data>
	TFT_send_data(0xD1);
 80024d6:	20d1      	movs	r0, #209	; 0xd1
 80024d8:	f7ff ffc8 	bl	800246c <TFT_send_data>
	/***********************************/
	TFT_send_command(TFT_SET_Row_MODE);
 80024dc:	202b      	movs	r0, #43	; 0x2b
 80024de:	f7ff ffa3 	bl	8002428 <TFT_send_command>
	TFT_send_data(0x00);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff ffc2 	bl	800246c <TFT_send_data>
	TFT_send_data(0xBE);
 80024e8:	20be      	movs	r0, #190	; 0xbe
 80024ea:	f7ff ffbf 	bl	800246c <TFT_send_data>


	TFT_send_data(0x01);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff ffbc 	bl	800246c <TFT_send_data>
	TFT_send_data(0x22);
 80024f4:	2022      	movs	r0, #34	; 0x22
 80024f6:	f7ff ffb9 	bl	800246c <TFT_send_data>
	/***********************************/


	switch(image_flag){
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	3b08      	subs	r3, #8
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d81a      	bhi.n	8002538 <TFT_send_image+0x88>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <TFT_send_image+0x58>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	0800252d 	.word	0x0800252d
 800250c:	08002521 	.word	0x08002521
 8002510:	08002527 	.word	0x08002527
 8002514:	08002539 	.word	0x08002539
 8002518:	08002539 	.word	0x08002539
 800251c:	08002533 	.word	0x08002533
	case (_100_KM_SIGN_FLAG):
		image =_100_KM_SIGN;
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <TFT_send_image+0x158>)
 8002522:	617b      	str	r3, [r7, #20]

		break;
 8002524:	e00b      	b.n	800253e <TFT_send_image+0x8e>
	case _120_KM_SIGN_FLAG:
		image =_120_KM_SIGN;
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <TFT_send_image+0x15c>)
 8002528:	617b      	str	r3, [r7, #20]

		break;
 800252a:	e008      	b.n	800253e <TFT_send_image+0x8e>
	case NO_WAITING_SIGN_FLAG:
		image =NO_WAITING_SIGN;
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <TFT_send_image+0x160>)
 800252e:	617b      	str	r3, [r7, #20]

		break;
 8002530:	e005      	b.n	800253e <TFT_send_image+0x8e>
	case _40_KM_SIGN_FLAG:
		image =_40_KM_SIGN;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <TFT_send_image+0x164>)
 8002534:	617b      	str	r3, [r7, #20]

		break;
 8002536:	e002      	b.n	800253e <TFT_send_image+0x8e>
	default:
		image =_NO_SIGN;
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <TFT_send_image+0x168>)
 800253a:	617b      	str	r3, [r7, #20]
		break;
 800253c:	bf00      	nop

	}
	TFT_send_command(TFT_Memory_Write_MODE);
 800253e:	202c      	movs	r0, #44	; 0x2c
 8002540:	f7ff ff72 	bl	8002428 <TFT_send_command>

	for(uint32_t i=0;i<(100*100);i++){
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e052      	b.n	80025f0 <TFT_send_image+0x140>
		//		G=(tr[i]>>5);
		//		G&=0x3F;
		//		TFT_send_data(tr[i]>>16);
		//		TFT_send_data(tr[i]>>8);
		//		TFT_send_data(tr[i]);
		uint8_t r = (image[i] & 0xF800) >> 11;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	12db      	asrs	r3, r3, #11
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	73fb      	strb	r3, [r7, #15]
		uint8_t g = (image[i] & 0x07E0) >> 5;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	115b      	asrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	73bb      	strb	r3, [r7, #14]
		uint8_t b = image[i] & 0x001F;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4413      	add	r3, r2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	737b      	strb	r3, [r7, #13]
		r = (r * 255) / 31;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	4613      	mov	r3, r2
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <TFT_send_image+0x16c>)
 8002594:	fb82 1203 	smull	r1, r2, r2, r3
 8002598:	441a      	add	r2, r3
 800259a:	1112      	asrs	r2, r2, #4
 800259c:	17db      	asrs	r3, r3, #31
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	73fb      	strb	r3, [r7, #15]
		g = (g * 255) / 63;
 80025a2:	7bba      	ldrb	r2, [r7, #14]
 80025a4:	4613      	mov	r3, r2
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <TFT_send_image+0x170>)
 80025ac:	fb82 1203 	smull	r1, r2, r2, r3
 80025b0:	441a      	add	r2, r3
 80025b2:	1152      	asrs	r2, r2, #5
 80025b4:	17db      	asrs	r3, r3, #31
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	73bb      	strb	r3, [r7, #14]
		b = (b * 255) / 31;
 80025ba:	7b7a      	ldrb	r2, [r7, #13]
 80025bc:	4613      	mov	r3, r2
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	4a16      	ldr	r2, [pc, #88]	; (800261c <TFT_send_image+0x16c>)
 80025c4:	fb82 1203 	smull	r1, r2, r2, r3
 80025c8:	441a      	add	r2, r3
 80025ca:	1112      	asrs	r2, r2, #4
 80025cc:	17db      	asrs	r3, r3, #31
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	737b      	strb	r3, [r7, #13]

		TFT_send_data(r);
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff49 	bl	800246c <TFT_send_data>
		TFT_send_data(g);
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff45 	bl	800246c <TFT_send_data>
		TFT_send_data(b);
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff41 	bl	800246c <TFT_send_data>
	for(uint32_t i=0;i<(100*100);i++){
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3301      	adds	r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d9a7      	bls.n	800254a <TFT_send_image+0x9a>
	}



	TFT_send_command(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff ff14 	bl	8002428 <TFT_send_command>





}
 8002600:	bf00      	nop
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	080050dc 	.word	0x080050dc
 800260c:	08013b3c 	.word	0x08013b3c
 8002610:	0800ed1c 	.word	0x0800ed1c
 8002614:	08009efc 	.word	0x08009efc
 8002618:	0801895c 	.word	0x0801895c
 800261c:	84210843 	.word	0x84210843
 8002620:	82082083 	.word	0x82082083

08002624 <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
	while(1);
 8002628:	e7fe      	b.n	8002628 <ADC_ERROR_HANDLER+0x4>
	...

0800262c <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 800262c:	b580      	push	{r7, lr}
 800262e:	b090      	sub	sp, #64	; 0x40
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8002636:	2300      	movs	r3, #0
 8002638:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800263a:	2300      	movs	r3, #0
 800263c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002640:	2300      	movs	r3, #0
 8002642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	f200 80d7 	bhi.w	80027fc <ADC_GPIO_CONFIG+0x1d0>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <ADC_GPIO_CONFIG+0x28>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002695 	.word	0x08002695
 8002658:	080026b3 	.word	0x080026b3
 800265c:	080026d1 	.word	0x080026d1
 8002660:	080026ef 	.word	0x080026ef
 8002664:	0800270d 	.word	0x0800270d
 8002668:	0800272b 	.word	0x0800272b
 800266c:	08002749 	.word	0x08002749
 8002670:	08002767 	.word	0x08002767
 8002674:	08002785 	.word	0x08002785
 8002678:	080027a3 	.word	0x080027a3
 800267c:	080027fd 	.word	0x080027fd
 8002680:	080027fd 	.word	0x080027fd
 8002684:	080027fd 	.word	0x080027fd
 8002688:	080027fd 	.word	0x080027fd
 800268c:	080027c1 	.word	0x080027c1
 8002690:	080027df 	.word	0x080027df
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8002694:	2300      	movs	r3, #0
 8002696:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002698:	2300      	movs	r3, #0
 800269a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80026a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026a8:	4619      	mov	r1, r3
 80026aa:	4858      	ldr	r0, [pc, #352]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 80026ac:	f000 fdd0 	bl	8003250 <MCAL_GPIO_init>
		break;
 80026b0:	e0a7      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 80026b2:	2301      	movs	r3, #1
 80026b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80026c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026c6:	4619      	mov	r1, r3
 80026c8:	4850      	ldr	r0, [pc, #320]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 80026ca:	f000 fdc1 	bl	8003250 <MCAL_GPIO_init>
		break;
 80026ce:	e098      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 80026d0:	2302      	movs	r3, #2
 80026d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80026e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026e4:	4619      	mov	r1, r3
 80026e6:	4849      	ldr	r0, [pc, #292]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 80026e8:	f000 fdb2 	bl	8003250 <MCAL_GPIO_init>
		break;
 80026ec:	e089      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 80026ee:	2303      	movs	r3, #3
 80026f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 80026fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002702:	4619      	mov	r1, r3
 8002704:	4841      	ldr	r0, [pc, #260]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 8002706:	f000 fda3 	bl	8003250 <MCAL_GPIO_init>
		break;
 800270a:	e07a      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 800270c:	2304      	movs	r3, #4
 800270e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002710:	2300      	movs	r3, #0
 8002712:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002716:	2300      	movs	r3, #0
 8002718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 800271c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002720:	4619      	mov	r1, r3
 8002722:	483a      	ldr	r0, [pc, #232]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 8002724:	f000 fd94 	bl	8003250 <MCAL_GPIO_init>
		break;
 8002728:	e06b      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 800272a:	2305      	movs	r3, #5
 800272c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800272e:	2300      	movs	r3, #0
 8002730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002734:	2300      	movs	r3, #0
 8002736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 800273a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800273e:	4619      	mov	r1, r3
 8002740:	4832      	ldr	r0, [pc, #200]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 8002742:	f000 fd85 	bl	8003250 <MCAL_GPIO_init>
		break;
 8002746:	e05c      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8002748:	2306      	movs	r3, #6
 800274a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800274c:	2300      	movs	r3, #0
 800274e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002752:	2300      	movs	r3, #0
 8002754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800275c:	4619      	mov	r1, r3
 800275e:	482b      	ldr	r0, [pc, #172]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 8002760:	f000 fd76 	bl	8003250 <MCAL_GPIO_init>
		break;
 8002764:	e04d      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8002766:	2307      	movs	r3, #7
 8002768:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800276a:	2300      	movs	r3, #0
 800276c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002770:	2300      	movs	r3, #0
 8002772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8002776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800277a:	4619      	mov	r1, r3
 800277c:	4823      	ldr	r0, [pc, #140]	; (800280c <ADC_GPIO_CONFIG+0x1e0>)
 800277e:	f000 fd67 	bl	8003250 <MCAL_GPIO_init>
		break;
 8002782:	e03e      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8002784:	2300      	movs	r3, #0
 8002786:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002788:	2300      	movs	r3, #0
 800278a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800278e:	2300      	movs	r3, #0
 8002790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8002794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002798:	4619      	mov	r1, r3
 800279a:	481d      	ldr	r0, [pc, #116]	; (8002810 <ADC_GPIO_CONFIG+0x1e4>)
 800279c:	f000 fd58 	bl	8003250 <MCAL_GPIO_init>
		break;
 80027a0:	e02f      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 80027a2:	2301      	movs	r3, #1
 80027a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 80027b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027b6:	4619      	mov	r1, r3
 80027b8:	4815      	ldr	r0, [pc, #84]	; (8002810 <ADC_GPIO_CONFIG+0x1e4>)
 80027ba:	f000 fd49 	bl	8003250 <MCAL_GPIO_init>
		break;
 80027be:	e020      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 80027c0:	2304      	movs	r3, #4
 80027c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 80027d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027d4:	4619      	mov	r1, r3
 80027d6:	480f      	ldr	r0, [pc, #60]	; (8002814 <ADC_GPIO_CONFIG+0x1e8>)
 80027d8:	f000 fd3a 	bl	8003250 <MCAL_GPIO_init>
		break;
 80027dc:	e011      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 80027de:	2305      	movs	r3, #5
 80027e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 80027ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f2:	4619      	mov	r1, r3
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <ADC_GPIO_CONFIG+0x1e8>)
 80027f6:	f000 fd2b 	bl	8003250 <MCAL_GPIO_init>
		break;
 80027fa:	e002      	b.n	8002802 <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 80027fc:	f7ff ff12 	bl	8002624 <ADC_ERROR_HANDLER>
		break;
 8002800:	bf00      	nop

	}



}
 8002802:	bf00      	nop
 8002804:	3740      	adds	r7, #64	; 0x40
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40010800 	.word	0x40010800
 8002810:	40010c00 	.word	0x40010c00
 8002814:	40011000 	.word	0x40011000

08002818 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b09      	cmp	r3, #9
 8002828:	d905      	bls.n	8002836 <ADC_init+0x1e>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b0d      	cmp	r3, #13
 8002830:	d801      	bhi.n	8002836 <ADC_init+0x1e>
		return ADC_error;
 8002832:	2301      	movs	r3, #1
 8002834:	e177      	b.n	8002b26 <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a9a      	ldr	r2, [pc, #616]	; (8002aa4 <ADC_init+0x28c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <ADC_init+0x290>)
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	ca07      	ldmia	r2, {r0, r1, r2}
 8002854:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8002858:	4b94      	ldr	r3, [pc, #592]	; (8002aac <ADC_init+0x294>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a93      	ldr	r2, [pc, #588]	; (8002aac <ADC_init+0x294>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	e013      	b.n	800288e <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4a8e      	ldr	r2, [pc, #568]	; (8002aa8 <ADC_init+0x290>)
 800286e:	460b      	mov	r3, r1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	440b      	add	r3, r1
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	33c0      	adds	r3, #192	; 0xc0
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	ca07      	ldmia	r2, {r0, r1, r2}
 800287e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8002882:	4b8a      	ldr	r3, [pc, #552]	; (8002aac <ADC_init+0x294>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4a89      	ldr	r2, [pc, #548]	; (8002aac <ADC_init+0x294>)
 8002888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288c:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff feca 	bl	800262c <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6893      	ldr	r3, [r2, #8]
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 80028a2:	200a      	movs	r0, #10
 80028a4:	f001 fada 	bl	8003e5c <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6893      	ldr	r3, [r2, #8]
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 80028b2:	f000 ff83 	bl	80037bc <MCAL_GET_PCLCK2>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a7d      	ldr	r2, [pc, #500]	; (8002ab0 <ADC_init+0x298>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	2b1c      	cmp	r3, #28
 80028c2:	d014      	beq.n	80028ee <ADC_init+0xd6>
 80028c4:	2b1c      	cmp	r3, #28
 80028c6:	d819      	bhi.n	80028fc <ADC_init+0xe4>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d002      	beq.n	80028d2 <ADC_init+0xba>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d007      	beq.n	80028e0 <ADC_init+0xc8>
 80028d0:	e014      	b.n	80028fc <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <ADC_init+0x294>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a75      	ldr	r2, [pc, #468]	; (8002aac <ADC_init+0x294>)
 80028d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028dc:	6053      	str	r3, [r2, #4]
		break;
 80028de:	e014      	b.n	800290a <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 80028e0:	4b72      	ldr	r3, [pc, #456]	; (8002aac <ADC_init+0x294>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a71      	ldr	r2, [pc, #452]	; (8002aac <ADC_init+0x294>)
 80028e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028ea:	6053      	str	r3, [r2, #4]
		break;
 80028ec:	e00d      	b.n	800290a <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 80028ee:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <ADC_init+0x294>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <ADC_init+0x294>)
 80028f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028f8:	6053      	str	r3, [r2, #4]
		break;
 80028fa:	e006      	b.n	800290a <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <ADC_init+0x294>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <ADC_init+0x294>)
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	6053      	str	r3, [r2, #4]
		break;
 8002908:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6893      	ldr	r3, [r2, #8]
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6893      	ldr	r3, [r2, #8]
 8002918:	f36f 23cb 	bfc	r3, #11, #1
 800291c:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	f200 80a8 	bhi.w	8002a78 <ADC_init+0x260>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <ADC_init+0x118>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002971 	.word	0x08002971
 8002934:	08002987 	.word	0x08002987
 8002938:	0800299d 	.word	0x0800299d
 800293c:	080029b3 	.word	0x080029b3
 8002940:	080029c9 	.word	0x080029c9
 8002944:	080029df 	.word	0x080029df
 8002948:	080029f5 	.word	0x080029f5
 800294c:	08002a0b 	.word	0x08002a0b
 8002950:	08002a21 	.word	0x08002a21
 8002954:	08002a37 	.word	0x08002a37
 8002958:	08002a79 	.word	0x08002a79
 800295c:	08002a79 	.word	0x08002a79
 8002960:	08002a79 	.word	0x08002a79
 8002964:	08002a79 	.word	0x08002a79
 8002968:	08002a4d 	.word	0x08002a4d
 800296c:	08002a63 	.word	0x08002a63
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6913      	ldr	r3, [r2, #16]
 800297e:	f361 0302 	bfi	r3, r1, #0, #3
 8002982:	6113      	str	r3, [r2, #16]
		break;
 8002984:	e07b      	b.n	8002a7e <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	b2d9      	uxtb	r1, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6913      	ldr	r3, [r2, #16]
 8002994:	f361 03c5 	bfi	r3, r1, #3, #3
 8002998:	6113      	str	r3, [r2, #16]

		break;
 800299a:	e070      	b.n	8002a7e <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	b2d9      	uxtb	r1, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6913      	ldr	r3, [r2, #16]
 80029aa:	f361 1388 	bfi	r3, r1, #6, #3
 80029ae:	6113      	str	r3, [r2, #16]

		break;
 80029b0:	e065      	b.n	8002a7e <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6913      	ldr	r3, [r2, #16]
 80029c0:	f361 234b 	bfi	r3, r1, #9, #3
 80029c4:	6113      	str	r3, [r2, #16]

		break;
 80029c6:	e05a      	b.n	8002a7e <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	b2d9      	uxtb	r1, r3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6913      	ldr	r3, [r2, #16]
 80029d6:	f361 330e 	bfi	r3, r1, #12, #3
 80029da:	6113      	str	r3, [r2, #16]

		break;
 80029dc:	e04f      	b.n	8002a7e <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6913      	ldr	r3, [r2, #16]
 80029ec:	f361 33d1 	bfi	r3, r1, #15, #3
 80029f0:	6113      	str	r3, [r2, #16]

		break;
 80029f2:	e044      	b.n	8002a7e <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b2d9      	uxtb	r1, r3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6913      	ldr	r3, [r2, #16]
 8002a02:	f361 4394 	bfi	r3, r1, #18, #3
 8002a06:	6113      	str	r3, [r2, #16]

		break;
 8002a08:	e039      	b.n	8002a7e <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	789b      	ldrb	r3, [r3, #2]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	b2d9      	uxtb	r1, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6913      	ldr	r3, [r2, #16]
 8002a18:	f361 5357 	bfi	r3, r1, #21, #3
 8002a1c:	6113      	str	r3, [r2, #16]

		break;
 8002a1e:	e02e      	b.n	8002a7e <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	789b      	ldrb	r3, [r3, #2]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	b2d9      	uxtb	r1, r3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6913      	ldr	r3, [r2, #16]
 8002a2e:	f361 631a 	bfi	r3, r1, #24, #3
 8002a32:	6113      	str	r3, [r2, #16]

		break;
 8002a34:	e023      	b.n	8002a7e <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	789b      	ldrb	r3, [r3, #2]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	b2d9      	uxtb	r1, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6913      	ldr	r3, [r2, #16]
 8002a44:	f361 63dd 	bfi	r3, r1, #27, #3
 8002a48:	6113      	str	r3, [r2, #16]

		break;
 8002a4a:	e018      	b.n	8002a7e <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	789b      	ldrb	r3, [r3, #2]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	b2d9      	uxtb	r1, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d3      	ldr	r3, [r2, #12]
 8002a5a:	f361 330e 	bfi	r3, r1, #12, #3
 8002a5e:	60d3      	str	r3, [r2, #12]

		break;
 8002a60:	e00d      	b.n	8002a7e <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	789b      	ldrb	r3, [r3, #2]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68d3      	ldr	r3, [r2, #12]
 8002a70:	f361 33d1 	bfi	r3, r1, #15, #3
 8002a74:	60d3      	str	r3, [r2, #12]
		break;
 8002a76:	e002      	b.n	8002a7e <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 8002a78:	f7ff fdd4 	bl	8002624 <ADC_ERROR_HANDLER>
		break;
 8002a7c:	bf00      	nop


	}

	switch(config->mode){
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <ADC_init+0x274>
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d006      	beq.n	8002a98 <ADC_init+0x280>
 8002a8a:	e013      	b.n	8002ab4 <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6893      	ldr	r3, [r2, #8]
 8002a90:	f36f 0341 	bfc	r3, #1, #1
 8002a94:	6093      	str	r3, [r2, #8]
		break;
 8002a96:	e010      	b.n	8002aba <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6893      	ldr	r3, [r2, #8]
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6093      	str	r3, [r2, #8]
		break;
 8002aa2:	e00a      	b.n	8002aba <ADC_init+0x2a2>
 8002aa4:	40012400 	.word	0x40012400
 8002aa8:	20002098 	.word	0x20002098
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8002ab4:	f7ff fdb6 	bl	8002624 <ADC_ERROR_HANDLER>
		break;
 8002ab8:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d022      	beq.n	8002b10 <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6853      	ldr	r3, [r2, #4]
 8002ace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ad2:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6853      	ldr	r3, [r2, #4]
 8002ae2:	f361 0304 	bfi	r3, r1, #0, #5
 8002ae6:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6853      	ldr	r3, [r2, #4]
 8002af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af8:	6053      	str	r3, [r2, #4]
 8002afa:	e004      	b.n	8002b06 <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6853      	ldr	r3, [r2, #4]
 8002b00:	f36f 1386 	bfc	r3, #6, #1
 8002b04:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0e:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6893      	ldr	r3, [r2, #8]
 8002b14:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8002b18:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6893      	ldr	r3, [r2, #8]
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <ADC_read+0xd8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8002b4a:	7afa      	ldrb	r2, [r7, #11]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <ADC_read+0xdc>)
 8002b56:	4413      	add	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e008      	b.n	8002b6e <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8002b5c:	7afa      	ldrb	r2, [r7, #11]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	33c0      	adds	r3, #192	; 0xc0
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <ADC_read+0xdc>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	b2d9      	uxtb	r1, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b8e:	f361 0304 	bfi	r3, r1, #0, #5
 8002b92:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10c      	bne.n	8002bb6 <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba4:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 8002ba6:	bf00      	nop
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f8      	beq.n	8002ba8 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	801a      	strh	r2, [r3, #0]
		data++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 8002bce:	e016      	b.n	8002bfe <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	74fb      	strb	r3, [r7, #19]
 8002bd4:	e00a      	b.n	8002bec <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	801a      	strh	r2, [r3, #0]
			data++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3302      	adds	r3, #2
 8002be4:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	3301      	adds	r3, #1
 8002bea:	74fb      	strb	r3, [r7, #19]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f3c3 5303 	ubfx	r3, r3, #20, #4
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d9eb      	bls.n	8002bd6 <ADC_read+0xa6>
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40012400 	.word	0x40012400
 8002c0c:	20002098 	.word	0x20002098

08002c10 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <ADC1_2_IRQHandler+0x54>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10f      	bne.n	8002c42 <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <ADC1_2_IRQHandler+0x54>)
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <ADC1_2_IRQHandler+0x58>)
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 8002c40:	e00e      	b.n	8002c60 <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <ADC1_2_IRQHandler+0x5c>)
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <ADC1_2_IRQHandler+0x58>)
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	33c8      	adds	r3, #200	; 0xc8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4798      	blx	r3
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40012400 	.word	0x40012400
 8002c68:	20002098 	.word	0x20002098
 8002c6c:	40012800 	.word	0x40012800

08002c70 <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	while(1);
 8002c74:	e7fe      	b.n	8002c74 <ERROR_HANDLER+0x4>
	...

08002c78 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <MCAL_CAN_SET_GPIO+0x30>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4808      	ldr	r0, [pc, #32]	; (8002cac <MCAL_CAN_SET_GPIO+0x34>)
 8002c8a:	f000 fae1 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <MCAL_CAN_SET_GPIO+0x38>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <MCAL_CAN_SET_GPIO+0x34>)
 8002c9a:	f000 fad9 	bl	8003250 <MCAL_GPIO_init>

}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	08004fa0 	.word	0x08004fa0
 8002cac:	40010800 	.word	0x40010800
 8002cb0:	08004fa4 	.word	0x08004fa4

08002cb4 <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <MCAL_CAN_init+0x21c>)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 8002cc6:	4b83      	ldr	r3, [pc, #524]	; (8002ed4 <MCAL_CAN_init+0x220>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a82      	ldr	r2, [pc, #520]	; (8002ed4 <MCAL_CAN_init+0x220>)
 8002ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 8002cd2:	f7ff ffd1 	bl	8002c78 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11f      	bne.n	8002d24 <MCAL_CAN_init+0x70>
 8002ce4:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d118      	bne.n	8002d24 <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8002cf2:	4a79      	ldr	r2, [pc, #484]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f36f 0341 	bfc	r3, #1, #1
 8002cfa:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 8002cfc:	4a76      	ldr	r2, [pc, #472]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 8002d06:	bf00      	nop
 8002d08:	4b73      	ldr	r3, [pc, #460]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d1f8      	bne.n	8002d08 <MCAL_CAN_init+0x54>
 8002d16:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f1      	bne.n	8002d08 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8002d2c:	4a6a      	ldr	r2, [pc, #424]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d2e:	6813      	ldr	r3, [r2, #0]
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e004      	b.n	8002d42 <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8002d38:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f36f 1386 	bfc	r3, #6, #1
 8002d40:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8002d4a:	4a63      	ldr	r2, [pc, #396]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e004      	b.n	8002d60 <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 8002d56:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	f36f 1304 	bfc	r3, #4, #1
 8002d5e:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8002d60:	4a5d      	ldr	r2, [pc, #372]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	f36f 0382 	bfc	r3, #2, #1
 8002d68:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 8002d72:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e004      	b.n	8002d88 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	f36f 03c3 	bfc	r3, #3, #1
 8002d86:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 8002d88:	f000 fd04 	bl	8003794 <MCAL_GET_PCLCK1>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a53      	ldr	r2, [pc, #332]	; (8002edc <MCAL_CAN_init+0x228>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <MCAL_CAN_init+0xe8>
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <MCAL_CAN_init+0x22c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d023      	beq.n	8002de2 <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 8002d9a:	e045      	b.n	8002e28 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d83e      	bhi.n	8002e22 <MCAL_CAN_init+0x16e>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <MCAL_CAN_init+0xf8>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dc7 	.word	0x08002dc7
 8002db4:	08002dd1 	.word	0x08002dd1
 8002db8:	08002dd9 	.word	0x08002dd9
			CAN1->BTR.ALL_Bits=0x00050000;
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002dbe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002dc2:	61da      	str	r2, [r3, #28]
			break;
 8002dc4:	e00c      	b.n	8002de0 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 8002dc6:	4b44      	ldr	r3, [pc, #272]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002dc8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002dcc:	61da      	str	r2, [r3, #28]
			break;
 8002dce:	e007      	b.n	8002de0 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002dd2:	4a44      	ldr	r2, [pc, #272]	; (8002ee4 <MCAL_CAN_init+0x230>)
 8002dd4:	61da      	str	r2, [r3, #28]
			break;
 8002dd6:	e003      	b.n	8002de0 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002dda:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <MCAL_CAN_init+0x234>)
 8002ddc:	61da      	str	r2, [r3, #28]
			break;
 8002dde:	bf00      	nop
		break;
 8002de0:	e01f      	b.n	8002e22 <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	78db      	ldrb	r3, [r3, #3]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d81d      	bhi.n	8002e26 <MCAL_CAN_init+0x172>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <MCAL_CAN_init+0x13c>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e09 	.word	0x08002e09
 8002df8:	08002e11 	.word	0x08002e11
 8002dfc:	08002e19 	.word	0x08002e19
				CAN1->BTR.ALL_Bits=0x00090001;
 8002e00:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <MCAL_CAN_init+0x238>)
 8002e04:	61da      	str	r2, [r3, #28]
				break;
 8002e06:	e00b      	b.n	8002e20 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e0a:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <MCAL_CAN_init+0x23c>)
 8002e0c:	61da      	str	r2, [r3, #28]
				break;
 8002e0e:	e007      	b.n	8002e20 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <MCAL_CAN_init+0x240>)
 8002e14:	61da      	str	r2, [r3, #28]
				break;
 8002e16:	e003      	b.n	8002e20 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8002e18:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <MCAL_CAN_init+0x244>)
 8002e1c:	61da      	str	r2, [r3, #28]
				break;
 8002e1e:	bf00      	nop
			break;
 8002e20:	e001      	b.n	8002e26 <MCAL_CAN_init+0x172>
		break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <MCAL_CAN_init+0x174>
			break;
 8002e26:	bf00      	nop

	}

	switch(CANx->MODE){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	791b      	ldrb	r3, [r3, #4]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d837      	bhi.n	8002ea0 <MCAL_CAN_init+0x1ec>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <MCAL_CAN_init+0x184>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e5f 	.word	0x08002e5f
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002e8b 	.word	0x08002e8b
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8002e48:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e4a:	69d3      	ldr	r3, [r2, #28]
 8002e4c:	f36f 73df 	bfc	r3, #31, #1
 8002e50:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e54:	69d3      	ldr	r3, [r2, #28]
 8002e56:	f36f 739e 	bfc	r3, #30, #1
 8002e5a:	61d3      	str	r3, [r2, #28]

		break;
 8002e5c:	e023      	b.n	8002ea6 <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e60:	69d3      	ldr	r3, [r2, #28]
 8002e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e6a:	69d3      	ldr	r3, [r2, #28]
 8002e6c:	f36f 739e 	bfc	r3, #30, #1
 8002e70:	61d3      	str	r3, [r2, #28]
		break;
 8002e72:	e018      	b.n	8002ea6 <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e76:	69d3      	ldr	r3, [r2, #28]
 8002e78:	f36f 73df 	bfc	r3, #31, #1
 8002e7c:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e80:	69d3      	ldr	r3, [r2, #28]
 8002e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e86:	61d3      	str	r3, [r2, #28]
		break;
 8002e88:	e00d      	b.n	8002ea6 <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e8c:	69d3      	ldr	r3, [r2, #28]
 8002e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e92:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002e96:	69d3      	ldr	r3, [r2, #28]
 8002e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e9c:	61d3      	str	r3, [r2, #28]
		break;
 8002e9e:	e002      	b.n	8002ea6 <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 8002ea0:	f7ff fee6 	bl	8002c70 <ERROR_HANDLER>
		break;
 8002ea4:	bf00      	nop

	}

	if(CANx->IE){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	795b      	ldrb	r3, [r3, #5]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d028      	beq.n	8002f00 <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002eb0:	6953      	ldr	r3, [r2, #20]
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <MCAL_CAN_init+0x224>)
 8002eba:	6953      	ldr	r3, [r2, #20]
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MCAL_CAN_init+0x248>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <MCAL_CAN_init+0x248>)
 8002ec8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e027      	b.n	8002f20 <MCAL_CAN_init+0x26c>
 8002ed0:	20002218 	.word	0x20002218
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40006400 	.word	0x40006400
 8002edc:	007a1200 	.word	0x007a1200
 8002ee0:	016e3600 	.word	0x016e3600
 8002ee4:	001c0001 	.word	0x001c0001
 8002ee8:	001c0004 	.word	0x001c0004
 8002eec:	00090001 	.word	0x00090001
 8002ef0:	001c0002 	.word	0x001c0002
 8002ef4:	001c0005 	.word	0x001c0005
 8002ef8:	001c000e 	.word	0x001c000e
 8002efc:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f02:	6953      	ldr	r3, [r2, #20]
 8002f04:	f36f 0341 	bfc	r3, #1, #1
 8002f08:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8002f0a:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f0c:	6953      	ldr	r3, [r2, #20]
 8002f0e:	f36f 1304 	bfc	r3, #4, #1
 8002f12:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <MCAL_CAN_init+0x2dc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <MCAL_CAN_init+0x2dc>)
 8002f1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002f1e:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f22:	6953      	ldr	r3, [r2, #20]
 8002f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f28:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f2c:	6953      	ldr	r3, [r2, #20]
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <MCAL_CAN_init+0x2e0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <MCAL_CAN_init+0x2e0>)
 8002f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f3e:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d118      	bne.n	8002f80 <MCAL_CAN_init+0x2cc>
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	f36f 0341 	bfc	r3, #1, #1
 8002f64:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f68:	6813      	ldr	r3, [r2, #0]
 8002f6a:	f36f 0300 	bfc	r3, #0, #1
 8002f6e:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8002f70:	bf00      	nop
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MCAL_CAN_init+0x2d8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d0f8      	beq.n	8002f72 <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40006400 	.word	0x40006400
 8002f90:	e000e180 	.word	0xe000e180
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <MCAL_CAN_RESET+0x24>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <MCAL_CAN_RESET+0x24>)
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <MCAL_CAN_RESET+0x24>)
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <MCAL_CAN_RESET+0x24>)
 8002fae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	6113      	str	r3, [r2, #16]

}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4798      	blx	r3
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20002218 	.word	0x20002218

08002fd4 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8002fd8:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <CAN_RX1_IRQHandler+0x10>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4798      	blx	r3
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20002218 	.word	0x20002218

08002fe8 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 8002fec:	f7ff ffd4 	bl	8002f98 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <CAN_SCE_IRQHandler+0x14>)
 8002ff2:	f7ff fe5f 	bl	8002cb4 <MCAL_CAN_init>
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20002218 	.word	0x20002218

08003000 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <EXTI0_IRQHandler+0x1c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <EXTI0_IRQHandler+0x20>)
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4a04      	ldr	r2, [pc, #16]	; (8003020 <EXTI0_IRQHandler+0x20>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6153      	str	r3, [r2, #20]
	}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20002224 	.word	0x20002224
 8003020:	40010400 	.word	0x40010400

08003024 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <EXTI1_IRQHandler+0x1c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <EXTI1_IRQHandler+0x20>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <EXTI1_IRQHandler+0x20>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6153      	str	r3, [r2, #20]

	}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20002224 	.word	0x20002224
 8003044:	40010400 	.word	0x40010400

08003048 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <EXTI2_IRQHandler+0x1c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <EXTI2_IRQHandler+0x20>)
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <EXTI2_IRQHandler+0x20>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6153      	str	r3, [r2, #20]

	}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20002224 	.word	0x20002224
 8003068:	40010400 	.word	0x40010400

0800306c <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <EXTI3_IRQHandler+0x1c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <EXTI3_IRQHandler+0x20>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <EXTI3_IRQHandler+0x20>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6153      	str	r3, [r2, #20]

	}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20002224 	.word	0x20002224
 800308c:	40010400 	.word	0x40010400

08003090 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <EXTI4_IRQHandler+0x1c>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <EXTI4_IRQHandler+0x20>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <EXTI4_IRQHandler+0x20>)
 80030a0:	f043 0310 	orr.w	r3, r3, #16
 80030a4:	6153      	str	r3, [r2, #20]

	}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20002224 	.word	0x20002224
 80030b0:	40010400 	.word	0x40010400

080030b4 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <EXTI9_5_IRQHandler+0x22>
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030ca:	f043 0320 	orr.w	r3, r3, #32
 80030ce:	6153      	str	r3, [r2, #20]
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <EXTI9_5_IRQHandler+0xa4>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <EXTI9_5_IRQHandler+0x40>
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	6153      	str	r3, [r2, #20]
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <EXTI9_5_IRQHandler+0xa4>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <EXTI9_5_IRQHandler+0x5e>
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	4a13      	ldr	r2, [pc, #76]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310a:	6153      	str	r3, [r2, #20]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <EXTI9_5_IRQHandler+0xa4>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <EXTI9_5_IRQHandler+0x7c>
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003128:	6153      	str	r3, [r2, #20]
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <EXTI9_5_IRQHandler+0xa4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <EXTI9_5_IRQHandler+0x9a>
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <EXTI9_5_IRQHandler+0xa0>)
 8003142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003146:	6153      	str	r3, [r2, #20]
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <EXTI9_5_IRQHandler+0xa4>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4798      	blx	r3
	}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40010400 	.word	0x40010400
 8003158:	20002224 	.word	0x20002224

0800315c <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <EXTI15_10_IRQHandler+0x22>
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003176:	6153      	str	r3, [r2, #20]
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <EXTI15_10_IRQHandler+0x40>
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003194:	6153      	str	r3, [r2, #20]
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <EXTI15_10_IRQHandler+0x5e>
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b2:	6153      	str	r3, [r2, #20]
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <EXTI15_10_IRQHandler+0x7c>
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4a13      	ldr	r2, [pc, #76]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d0:	6153      	str	r3, [r2, #20]
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <EXTI15_10_IRQHandler+0x9a>
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ee:	6153      	str	r3, [r2, #20]
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <EXTI15_10_IRQHandler+0xb8>
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4a04      	ldr	r2, [pc, #16]	; (8003218 <EXTI15_10_IRQHandler+0xbc>)
 8003208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320c:	6153      	str	r3, [r2, #20]
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <EXTI15_10_IRQHandler+0xc0>)
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	4798      	blx	r3

	}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40010400 	.word	0x40010400
 800321c:	20002224 	.word	0x20002224

08003220 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d803      	bhi.n	8003238 <Get_PIN_Positon+0x18>
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	b29b      	uxth	r3, r3
 8003236:	e004      	b.n	8003242 <Get_PIN_Positon+0x22>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	3b08      	subs	r3, #8
 800323c:	b29b      	uxth	r3, r3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	b29b      	uxth	r3, r3
 8003242:	81fb      	strh	r3, [r7, #14]
return positon;
 8003244:	89fb      	ldrh	r3, [r7, #14]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a6b      	ldr	r2, [pc, #428]	; (800340c <MCAL_GPIO_init+0x1bc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d106      	bne.n	8003270 <MCAL_GPIO_init+0x20>
 8003262:	4b6b      	ldr	r3, [pc, #428]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6193      	str	r3, [r2, #24]
 800326e:	e02a      	b.n	80032c6 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a68      	ldr	r2, [pc, #416]	; (8003414 <MCAL_GPIO_init+0x1c4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d106      	bne.n	8003286 <MCAL_GPIO_init+0x36>
 8003278:	4b65      	ldr	r3, [pc, #404]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a64      	ldr	r2, [pc, #400]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	e01f      	b.n	80032c6 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a63      	ldr	r2, [pc, #396]	; (8003418 <MCAL_GPIO_init+0x1c8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d106      	bne.n	800329c <MCAL_GPIO_init+0x4c>
 800328e:	4b60      	ldr	r3, [pc, #384]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4a5f      	ldr	r2, [pc, #380]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	6193      	str	r3, [r2, #24]
 800329a:	e014      	b.n	80032c6 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a5f      	ldr	r2, [pc, #380]	; (800341c <MCAL_GPIO_init+0x1cc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d106      	bne.n	80032b2 <MCAL_GPIO_init+0x62>
 80032a4:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a59      	ldr	r2, [pc, #356]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 80032aa:	f043 0320 	orr.w	r3, r3, #32
 80032ae:	6193      	str	r3, [r2, #24]
 80032b0:	e009      	b.n	80032c6 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <MCAL_GPIO_init+0x1d0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d105      	bne.n	80032c6 <MCAL_GPIO_init+0x76>
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4a54      	ldr	r2, [pc, #336]	; (8003410 <MCAL_GPIO_init+0x1c0>)
 80032c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c4:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d801      	bhi.n	80032d4 <MCAL_GPIO_init+0x84>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	e001      	b.n	80032d8 <MCAL_GPIO_init+0x88>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff9d 	bl	8003220 <Get_PIN_Positon>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	230f      	movs	r3, #15
 80032ec:	4093      	lsls	r3, r2
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	401a      	ands	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	789b      	ldrb	r3, [r3, #2]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <MCAL_GPIO_init+0xd2>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d009      	beq.n	8003322 <MCAL_GPIO_init+0xd2>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	789b      	ldrb	r3, [r3, #2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d004      	beq.n	8003322 <MCAL_GPIO_init+0xd2>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b03      	cmp	r3, #3
 8003320:	d156      	bne.n	80033d0 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	789b      	ldrb	r3, [r3, #2]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b03      	cmp	r3, #3
 800332a:	d11c      	bne.n	8003366 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff74 	bl	8003220 <Get_PIN_Positon>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	2308      	movs	r3, #8
 800333e:	fa03 f202 	lsl.w	r2, r3, r2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	2301      	movs	r3, #1
 8003356:	4093      	lsls	r3, r2
 8003358:	43da      	mvns	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	401a      	ands	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8003364:	e04d      	b.n	8003402 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	789b      	ldrb	r3, [r3, #2]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d11c      	bne.n	80033aa <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff52 	bl	8003220 <Get_PIN_Positon>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	2308      	movs	r3, #8
 8003382:	fa03 f202 	lsl.w	r2, r3, r2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	fa03 f202 	lsl.w	r2, r3, r2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80033a8:	e02b      	b.n	8003402 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	789b      	ldrb	r3, [r3, #2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	009c      	lsls	r4, r3, #2
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff31 	bl	8003220 <Get_PIN_Positon>
 80033be:	4603      	mov	r3, r0
 80033c0:	fa04 f203 	lsl.w	r2, r4, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 80033ce:	e018      	b.n	8003402 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	789b      	ldrb	r3, [r3, #2]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3b04      	subs	r3, #4
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	78d2      	ldrb	r2, [r2, #3]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	ea43 0402 	orr.w	r4, r3, r2
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff18 	bl	8003220 <Get_PIN_Positon>
 80033f0:	4603      	mov	r3, r0
 80033f2:	fa04 f203 	lsl.w	r2, r4, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

	}

}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	40010800 	.word	0x40010800
 8003410:	40021000 	.word	0x40021000
 8003414:	40010c00 	.word	0x40010c00
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	40011800 	.word	0x40011800

08003424 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8003434:	787b      	ldrb	r3, [r7, #1]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10b      	bne.n	8003454 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	2301      	movs	r3, #1
 8003444:	fa03 f202 	lsl.w	r2, r3, r2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60da      	str	r2, [r3, #12]

	}



}
 8003452:	e00a      	b.n	800346a <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	2301      	movs	r3, #1
 800345c:	4093      	lsls	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	401a      	ands	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60da      	str	r2, [r3, #12]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	b292      	uxth	r2, r2
 8003488:	40d3      	lsrs	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3

}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 80034a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	7813      	ldrb	r3, [r2, #0]
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 80034bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034c0:	6913      	ldr	r3, [r2, #16]
 80034c2:	f36f 0300 	bfc	r3, #0, #1
 80034c6:	6113      	str	r3, [r2, #16]
 80034c8:	e04e      	b.n	8003568 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 80034ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	7813      	ldrb	r3, [r2, #0]
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 80034e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e8:	6913      	ldr	r3, [r2, #16]
 80034ea:	f36f 0341 	bfc	r3, #1, #1
 80034ee:	6113      	str	r3, [r2, #16]
 80034f0:	e03a      	b.n	8003568 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 80034f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	7813      	ldrb	r3, [r2, #0]
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 800350c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003510:	6913      	ldr	r3, [r2, #16]
 8003512:	f36f 0382 	bfc	r3, #2, #1
 8003516:	6113      	str	r3, [r2, #16]
 8003518:	e026      	b.n	8003568 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 800351a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	7813      	ldrb	r3, [r2, #0]
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8003534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003538:	6913      	ldr	r3, [r2, #16]
 800353a:	f36f 03c3 	bfc	r3, #3, #1
 800353e:	6113      	str	r3, [r2, #16]
 8003540:	e012      	b.n	8003568 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8003542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	7813      	ldrb	r3, [r2, #0]
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 800355c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003560:	6913      	ldr	r3, [r2, #16]
 8003562:	f36f 1304 	bfc	r3, #4, #1
 8003566:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <TIM2_IRQHandler+0xdc>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3

}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20002260 	.word	0x20002260

0800357c <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <TIM3_IRQHandler+0xc8>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	7813      	ldrb	r3, [r2, #0]
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 800359a:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <TIM3_IRQHandler+0xc8>)
 800359c:	6913      	ldr	r3, [r2, #16]
 800359e:	f36f 0300 	bfc	r3, #0, #1
 80035a2:	6113      	str	r3, [r2, #16]
 80035a4:	e046      	b.n	8003634 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <TIM3_IRQHandler+0xc8>)
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	7813      	ldrb	r3, [r2, #0]
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 80035be:	4a21      	ldr	r2, [pc, #132]	; (8003644 <TIM3_IRQHandler+0xc8>)
 80035c0:	6913      	ldr	r3, [r2, #16]
 80035c2:	f36f 0341 	bfc	r3, #1, #1
 80035c6:	6113      	str	r3, [r2, #16]
 80035c8:	e034      	b.n	8003634 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <TIM3_IRQHandler+0xc8>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	7813      	ldrb	r3, [r2, #0]
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 80035e2:	4a18      	ldr	r2, [pc, #96]	; (8003644 <TIM3_IRQHandler+0xc8>)
 80035e4:	6913      	ldr	r3, [r2, #16]
 80035e6:	f36f 0382 	bfc	r3, #2, #1
 80035ea:	6113      	str	r3, [r2, #16]
 80035ec:	e022      	b.n	8003634 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <TIM3_IRQHandler+0xc8>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	7813      	ldrb	r3, [r2, #0]
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <TIM3_IRQHandler+0xc8>)
 8003608:	6913      	ldr	r3, [r2, #16]
 800360a:	f36f 03c3 	bfc	r3, #3, #1
 800360e:	6113      	str	r3, [r2, #16]
 8003610:	e010      	b.n	8003634 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <TIM3_IRQHandler+0xc8>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	7813      	ldrb	r3, [r2, #0]
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 800362a:	4a06      	ldr	r2, [pc, #24]	; (8003644 <TIM3_IRQHandler+0xc8>)
 800362c:	6913      	ldr	r3, [r2, #16]
 800362e:	f36f 1304 	bfc	r3, #4, #1
 8003632:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <TIM3_IRQHandler+0xcc>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3


}void TIM4_IRQHandler(){
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40000400 	.word	0x40000400
 8003648:	20002260 	.word	0x20002260

0800364c <TIM4_IRQHandler>:
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <TIM4_IRQHandler+0xd4>)
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	7813      	ldrb	r3, [r2, #0]
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <TIM4_IRQHandler+0xd4>)
 800366c:	6913      	ldr	r3, [r2, #16]
 800366e:	f36f 0300 	bfc	r3, #0, #1
 8003672:	6113      	str	r3, [r2, #16]
 8003674:	e04b      	b.n	800370e <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <TIM4_IRQHandler+0xd4>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	7813      	ldrb	r3, [r2, #0]
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <TIM4_IRQHandler+0xd4>)
 8003690:	6913      	ldr	r3, [r2, #16]
 8003692:	f36f 0341 	bfc	r3, #1, #1
 8003696:	6113      	str	r3, [r2, #16]
 8003698:	e039      	b.n	800370e <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <TIM4_IRQHandler+0xd4>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00f      	beq.n	80036c8 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	7813      	ldrb	r3, [r2, #0]
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <TIM4_IRQHandler+0xd4>)
 80036b4:	6913      	ldr	r3, [r2, #16]
 80036b6:	f36f 0382 	bfc	r3, #2, #1
 80036ba:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	7813      	ldrb	r3, [r2, #0]
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	7013      	strb	r3, [r2, #0]
 80036c6:	e022      	b.n	800370e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <TIM4_IRQHandler+0xd4>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	7813      	ldrb	r3, [r2, #0]
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <TIM4_IRQHandler+0xd4>)
 80036e2:	6913      	ldr	r3, [r2, #16]
 80036e4:	f36f 03c3 	bfc	r3, #3, #1
 80036e8:	6113      	str	r3, [r2, #16]
 80036ea:	e010      	b.n	800370e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <TIM4_IRQHandler+0xd4>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	7813      	ldrb	r3, [r2, #0]
 80036fe:	f043 0310 	orr.w	r3, r3, #16
 8003702:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <TIM4_IRQHandler+0xd4>)
 8003706:	6913      	ldr	r3, [r2, #16]
 8003708:	f36f 1304 	bfc	r3, #4, #1
 800370c:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <TIM4_IRQHandler+0xd8>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3


}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40000800 	.word	0x40000800
 8003724:	20002260 	.word	0x20002260

08003728 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <MCAL_GET_SYS_CLCK+0x34>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d00a      	beq.n	8003750 <MCAL_GET_SYS_CLCK+0x28>
 800373a:	2b02      	cmp	r3, #2
 800373c:	d80a      	bhi.n	8003754 <MCAL_GET_SYS_CLCK+0x2c>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <MCAL_GET_SYS_CLCK+0x20>
 8003742:	2b01      	cmp	r3, #1
 8003744:	d002      	beq.n	800374c <MCAL_GET_SYS_CLCK+0x24>
 8003746:	e005      	b.n	8003754 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <MCAL_GET_SYS_CLCK+0x38>)
 800374a:	e003      	b.n	8003754 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <MCAL_GET_SYS_CLCK+0x3c>)
 800374e:	e001      	b.n	8003754 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <MCAL_GET_SYS_CLCK+0x40>)
 8003752:	e7ff      	b.n	8003754 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40021000 	.word	0x40021000
 8003760:	007a1200 	.word	0x007a1200
 8003764:	00f42400 	.word	0x00f42400
 8003768:	01ab3f00 	.word	0x01ab3f00

0800376c <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8003770:	f7ff ffda 	bl	8003728 <MCAL_GET_SYS_CLCK>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <MCAL_GET_H_CLCK+0x20>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <MCAL_GET_H_CLCK+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	20000010 	.word	0x20000010

08003794 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8003798:	f7ff ffe8 	bl	800376c <MCAL_GET_H_CLCK>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <MCAL_GET_PCLCK1+0x20>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <MCAL_GET_PCLCK1+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3

}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000
 80037b8:	20000008 	.word	0x20000008

080037bc <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80037c0:	f7ff ffd4 	bl	800376c <MCAL_GET_H_CLCK>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <MCAL_GET_PCLCK2+0x20>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0adb      	lsrs	r3, r3, #11
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <MCAL_GET_PCLCK2+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3

}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	20000008 	.word	0x20000008

080037e4 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <MCAL_SPI_init+0x16c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10c      	bne.n	8003810 <MCAL_SPI_init+0x2c>
 80037f6:	4a57      	ldr	r2, [pc, #348]	; (8003954 <MCAL_SPI_init+0x170>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4614      	mov	r4, r2
 80037fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003802:	4b55      	ldr	r3, [pc, #340]	; (8003958 <MCAL_SPI_init+0x174>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	4a54      	ldr	r2, [pc, #336]	; (8003958 <MCAL_SPI_init+0x174>)
 8003808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800380c:	6193      	str	r3, [r2, #24]
 800380e:	e011      	b.n	8003834 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a52      	ldr	r2, [pc, #328]	; (800395c <MCAL_SPI_init+0x178>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <MCAL_SPI_init+0x50>
 8003818:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <MCAL_SPI_init+0x170>)
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	f103 0410 	add.w	r4, r3, #16
 8003820:	4613      	mov	r3, r2
 8003822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <MCAL_SPI_init+0x174>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4a4a      	ldr	r2, [pc, #296]	; (8003958 <MCAL_SPI_init+0x174>)
 800382e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003832:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	789b      	ldrb	r3, [r3, #2]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	8813      	ldrh	r3, [r2, #0]
 8003842:	f361 23cb 	bfi	r3, r1, #11, #1
 8003846:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	799b      	ldrb	r3, [r3, #6]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	b2d9      	uxtb	r1, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	8813      	ldrh	r3, [r2, #0]
 8003856:	f361 0341 	bfi	r3, r1, #1, #1
 800385a:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	79db      	ldrb	r3, [r3, #7]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	8813      	ldrh	r3, [r2, #0]
 800386a:	f361 0300 	bfi	r3, r1, #0, #1
 800386e:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	78db      	ldrb	r3, [r3, #3]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	b2d9      	uxtb	r1, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	8813      	ldrh	r3, [r2, #0]
 800387e:	f361 13c7 	bfi	r3, r1, #7, #1
 8003882:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <MCAL_SPI_init+0xb4>
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	8813      	ldrh	r3, [r2, #0]
 8003890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003894:	8013      	strh	r3, [r2, #0]
 8003896:	e01c      	b.n	80038d2 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10a      	bne.n	80038b6 <MCAL_SPI_init+0xd2>
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	8813      	ldrh	r3, [r2, #0]
 80038a4:	f36f 2349 	bfc	r3, #9, #1
 80038a8:	8013      	strh	r3, [r2, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	7913      	ldrb	r3, [r2, #4]
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	7113      	strb	r3, [r2, #4]
 80038b4:	e00d      	b.n	80038d2 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	791b      	ldrb	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d109      	bne.n	80038d2 <MCAL_SPI_init+0xee>
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	8813      	ldrh	r3, [r2, #0]
 80038c2:	f36f 2349 	bfc	r3, #9, #1
 80038c6:	8013      	strh	r3, [r2, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	7913      	ldrb	r3, [r2, #4]
 80038cc:	f36f 0382 	bfc	r3, #2, #1
 80038d0:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	b2d9      	uxtb	r1, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	8813      	ldrh	r3, [r2, #0]
 80038e0:	f361 0382 	bfi	r3, r1, #2, #1
 80038e4:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	795b      	ldrb	r3, [r3, #5]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	b2d9      	uxtb	r1, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	8813      	ldrh	r3, [r2, #0]
 80038f4:	f361 03c5 	bfi	r3, r1, #3, #3
 80038f8:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	7a1b      	ldrb	r3, [r3, #8]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d114      	bne.n	800392c <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <MCAL_SPI_init+0x16c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d106      	bne.n	8003918 <MCAL_SPI_init+0x134>
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <MCAL_SPI_init+0x17c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <MCAL_SPI_init+0x17c>)
 8003910:	f043 0308 	orr.w	r3, r3, #8
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e009      	b.n	800392c <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a10      	ldr	r2, [pc, #64]	; (800395c <MCAL_SPI_init+0x178>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d105      	bne.n	800392c <MCAL_SPI_init+0x148>
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <MCAL_SPI_init+0x17c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <MCAL_SPI_init+0x17c>)
 8003926:	f043 0310 	orr.w	r3, r3, #16
 800392a:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f853 	bl	80039d8 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	b2d9      	uxtb	r1, r3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	8813      	ldrh	r3, [r2, #0]
 8003940:	f361 1386 	bfi	r3, r1, #6, #1
 8003944:	8013      	strh	r3, [r2, #0]




}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	40013000 	.word	0x40013000
 8003954:	20002290 	.word	0x20002290
 8003958:	40021000 	.word	0x40021000
 800395c:	40003800 	.word	0x40003800
 8003960:	e000e104 	.word	0xe000e104

08003964 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <MCAL_SPI_SendData+0x64>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d102      	bne.n	8003982 <MCAL_SPI_SendData+0x1e>
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <MCAL_SPI_SendData+0x68>)
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e005      	b.n	800398e <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <MCAL_SPI_SendData+0x6c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <MCAL_SPI_SendData+0x2a>
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MCAL_SPI_SendData+0x70>)
 800398c:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	7a1b      	ldrb	r3, [r3, #8]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	7913      	ldrb	r3, [r2, #4]
 800399a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399e:	7113      	strb	r3, [r2, #4]
 80039a0:	e007      	b.n	80039b2 <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 80039a2:	bf00      	nop
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f8      	beq.n	80039a4 <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	b2db      	uxtb	r3, r3

}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40013000 	.word	0x40013000
 80039cc:	20002290 	.word	0x20002290
 80039d0:	40003800 	.word	0x40003800
 80039d4:	200022a0 	.word	0x200022a0

080039d8 <MCAL_SET_GPIO>:
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);


}

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b096      	sub	sp, #88	; 0x58
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a6c      	ldr	r2, [pc, #432]	; (8003b98 <MCAL_SET_GPIO+0x1c0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d169      	bne.n	8003ac0 <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 80039ec:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <MCAL_SET_GPIO+0x1c4>)
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 80039f0:	4b6b      	ldr	r3, [pc, #428]	; (8003ba0 <MCAL_SET_GPIO+0x1c8>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	; (8003ba0 <MCAL_SET_GPIO+0x1c8>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 80039fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fe:	791b      	ldrb	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d108      	bne.n	8003a16 <MCAL_SET_GPIO+0x3e>
 8003a04:	4b67      	ldr	r3, [pc, #412]	; (8003ba4 <MCAL_SET_GPIO+0x1cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	653b      	str	r3, [r7, #80]	; 0x50
 8003a0a:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <MCAL_SET_GPIO+0x1c0>)
 8003a0c:	8813      	ldrh	r3, [r2, #0]
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	8013      	strh	r3, [r2, #0]
 8003a14:	e00e      	b.n	8003a34 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	791b      	ldrb	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d103      	bne.n	8003a26 <MCAL_SET_GPIO+0x4e>
 8003a1e:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <MCAL_SET_GPIO+0x1d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	653b      	str	r3, [r7, #80]	; 0x50
 8003a24:	e006      	b.n	8003a34 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	791b      	ldrb	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d102      	bne.n	8003a34 <MCAL_SET_GPIO+0x5c>
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <MCAL_SET_GPIO+0x1d4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003a34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a38:	4619      	mov	r1, r3
 8003a3a:	485d      	ldr	r0, [pc, #372]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003a3c:	f7ff fc08 	bl	8003250 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d103      	bne.n	8003a50 <MCAL_SET_GPIO+0x78>
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <MCAL_SET_GPIO+0x1dc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a4e:	e006      	b.n	8003a5e <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <MCAL_SET_GPIO+0x86>
 8003a58:	4b57      	ldr	r3, [pc, #348]	; (8003bb8 <MCAL_SET_GPIO+0x1e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003a5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a62:	4619      	mov	r1, r3
 8003a64:	4852      	ldr	r0, [pc, #328]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003a66:	f7ff fbf3 	bl	8003250 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d103      	bne.n	8003a7a <MCAL_SET_GPIO+0xa2>
 8003a72:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <MCAL_SET_GPIO+0x1e4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	653b      	str	r3, [r7, #80]	; 0x50
 8003a78:	e006      	b.n	8003a88 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <MCAL_SET_GPIO+0xb0>
 8003a82:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <MCAL_SET_GPIO+0x1e8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4848      	ldr	r0, [pc, #288]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003a90:	f7ff fbde 	bl	8003250 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 8003a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d103      	bne.n	8003aa4 <MCAL_SET_GPIO+0xcc>
 8003a9c:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <MCAL_SET_GPIO+0x1ec>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa2:	e006      	b.n	8003ab2 <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <MCAL_SET_GPIO+0xda>
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <MCAL_SET_GPIO+0x1f0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003ab2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	483d      	ldr	r0, [pc, #244]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003aba:	f7ff fbc9 	bl	8003250 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 8003abe:	e067      	b.n	8003b90 <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <MCAL_SET_GPIO+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d163      	bne.n	8003b90 <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <MCAL_SET_GPIO+0x1f8>)
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <MCAL_SET_GPIO+0x1c8>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <MCAL_SET_GPIO+0x1c8>)
 8003ad2:	f043 0308 	orr.w	r3, r3, #8
 8003ad6:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <MCAL_SET_GPIO+0x110>
 8003ae0:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <MCAL_SET_GPIO+0x1fc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae6:	e00e      	b.n	8003b06 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d103      	bne.n	8003af8 <MCAL_SET_GPIO+0x120>
 8003af0:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <MCAL_SET_GPIO+0x1fc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
 8003af6:	e006      	b.n	8003b06 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afa:	791b      	ldrb	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d102      	bne.n	8003b06 <MCAL_SET_GPIO+0x12e>
 8003b00:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <MCAL_SET_GPIO+0x200>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4828      	ldr	r0, [pc, #160]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003b0e:	f7ff fb9f 	bl	8003250 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 8003b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d103      	bne.n	8003b22 <MCAL_SET_GPIO+0x14a>
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <MCAL_SET_GPIO+0x204>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b20:	e006      	b.n	8003b30 <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <MCAL_SET_GPIO+0x158>
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <MCAL_SET_GPIO+0x208>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b34:	4619      	mov	r1, r3
 8003b36:	481e      	ldr	r0, [pc, #120]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003b38:	f7ff fb8a 	bl	8003250 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d103      	bne.n	8003b4c <MCAL_SET_GPIO+0x174>
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <MCAL_SET_GPIO+0x20c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4a:	e006      	b.n	8003b5a <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <MCAL_SET_GPIO+0x182>
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <MCAL_SET_GPIO+0x210>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	653b      	str	r3, [r7, #80]	; 0x50
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003b5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4813      	ldr	r0, [pc, #76]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003b62:	f7ff fb75 	bl	8003250 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d103      	bne.n	8003b76 <MCAL_SET_GPIO+0x19e>
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <MCAL_SET_GPIO+0x214>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	653b      	str	r3, [r7, #80]	; 0x50
 8003b74:	e006      	b.n	8003b84 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <MCAL_SET_GPIO+0x1ac>
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <MCAL_SET_GPIO+0x218>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003b84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <MCAL_SET_GPIO+0x1d8>)
 8003b8c:	f7ff fb60 	bl	8003250 <MCAL_GPIO_init>
}
 8003b90:	bf00      	nop
 8003b92:	3758      	adds	r7, #88	; 0x58
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40013000 	.word	0x40013000
 8003b9c:	20002290 	.word	0x20002290
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08004fa8 	.word	0x08004fa8
 8003ba8:	08004fac 	.word	0x08004fac
 8003bac:	08004fb0 	.word	0x08004fb0
 8003bb0:	40010800 	.word	0x40010800
 8003bb4:	08004fb4 	.word	0x08004fb4
 8003bb8:	08004fb8 	.word	0x08004fb8
 8003bbc:	08004fbc 	.word	0x08004fbc
 8003bc0:	08004fc0 	.word	0x08004fc0
 8003bc4:	08004fc4 	.word	0x08004fc4
 8003bc8:	08004fc8 	.word	0x08004fc8
 8003bcc:	40003800 	.word	0x40003800
 8003bd0:	200022a0 	.word	0x200022a0
 8003bd4:	08004fcc 	.word	0x08004fcc
 8003bd8:	08004fd0 	.word	0x08004fd0
 8003bdc:	08004fd4 	.word	0x08004fd4
 8003be0:	08004fd8 	.word	0x08004fd8
 8003be4:	08004fdc 	.word	0x08004fdc
 8003be8:	08004fe0 	.word	0x08004fe0
 8003bec:	08004fe4 	.word	0x08004fe4
 8003bf0:	08004fe8 	.word	0x08004fe8

08003bf4 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	4905      	ldr	r1, [pc, #20]	; (8003c14 <SPI1_IRQHandler+0x20>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f80c 	bl	8003c1c <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <SPI1_IRQHandler+0x24>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	7938      	ldrb	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40013000 	.word	0x40013000
 8003c18:	20002290 	.word	0x20002290

08003c1c <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	7813      	ldrb	r3, [r2, #0]
 8003c38:	f36f 0300 	bfc	r3, #0, #1
 8003c3c:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	7813      	ldrb	r3, [r2, #0]
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	7913      	ldrb	r3, [r2, #4]
 8003c4c:	f36f 1386 	bfc	r3, #6, #1
 8003c50:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8003c52:	e015      	b.n	8003c80 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	7813      	ldrb	r3, [r2, #0]
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	7813      	ldrb	r3, [r2, #0]
 8003c70:	f36f 0341 	bfc	r3, #1, #1
 8003c74:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	7913      	ldrb	r3, [r2, #4]
 8003c7a:	f36f 13c7 	bfc	r3, #7, #1
 8003c7e:	7113      	strb	r3, [r2, #4]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <MCAL_SET_TIMx_GPIO+0x24>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4804      	ldr	r0, [pc, #16]	; (8003cb4 <MCAL_SET_TIMx_GPIO+0x28>)
 8003ca2:	f7ff fad5 	bl	8003250 <MCAL_GPIO_init>
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08004fec 	.word	0x08004fec
 8003cb4:	40010800 	.word	0x40010800

08003cb8 <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <TIMER_1_8_start+0x100>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <TIMER_1_8_start+0x104>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3a      	ldr	r2, [pc, #232]	; (8003dc0 <TIMER_1_8_start+0x108>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d105      	bne.n	8003ce8 <TIMER_1_8_start+0x30>
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <TIMER_1_8_start+0x10c>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <TIMER_1_8_start+0x10c>)
 8003ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ce6:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	885b      	ldrh	r3, [r3, #2]
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	889b      	ldrh	r3, [r3, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	7a5b      	ldrb	r3, [r3, #9]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d01c      	beq.n	8003d52 <TIMER_1_8_start+0x9a>
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	dc20      	bgt.n	8003d5e <TIMER_1_8_start+0xa6>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <TIMER_1_8_start+0x6e>
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d00b      	beq.n	8003d3c <TIMER_1_8_start+0x84>
 8003d24:	e01b      	b.n	8003d5e <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	f36f 1346 	bfc	r3, #5, #2
 8003d2e:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	f36f 1304 	bfc	r3, #4, #1
 8003d38:	6013      	str	r3, [r2, #0]
		break;
 8003d3a:	e013      	b.n	8003d64 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f36f 1346 	bfc	r3, #5, #2
 8003d44:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	f043 0310 	orr.w	r3, r3, #16
 8003d4e:	6013      	str	r3, [r2, #0]
		break;
 8003d50:	e008      	b.n	8003d64 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d5a:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 8003d5c:	e002      	b.n	8003d64 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 8003d5e:	f7fe ff87 	bl	8002c70 <ERROR_HANDLER>
		break;
 8003d62:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff91 	bl	8003c8c <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	7a1b      	ldrb	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68d3      	ldr	r3, [r2, #12]
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <TIMER_1_8_start+0x110>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <TIMER_1_8_start+0x110>)
 8003d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d90:	6013      	str	r3, [r2, #0]
	}else{
		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 8003d92:	e00c      	b.n	8003dae <TIMER_1_8_start+0xf6>
		while(!TIMx->SR.BIT_NAME.UIF);
 8003d94:	bf00      	nop
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f8      	beq.n	8003d96 <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6913      	ldr	r3, [r2, #16]
 8003da8:	f36f 0300 	bfc	r3, #0, #1
 8003dac:	6113      	str	r3, [r2, #16]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200022b0 	.word	0x200022b0
 8003dbc:	200022c0 	.word	0x200022c0
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <TIM1_UP_IRQHandler+0x1c>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <TIM1_UP_IRQHandler+0x20>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	6913      	ldr	r3, [r2, #16]
 8003ddc:	f36f 0300 	bfc	r3, #0, #1
 8003de0:	6113      	str	r3, [r2, #16]

}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200022b0 	.word	0x200022b0
 8003dec:	200022c0 	.word	0x200022c0

08003df0 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <TIM1_CC_IRQHandler+0x1c>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <TIM1_CC_IRQHandler+0x20>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	6913      	ldr	r3, [r2, #16]
 8003e00:	f36f 0341 	bfc	r3, #1, #1
 8003e04:	6113      	str	r3, [r2, #16]

}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200022b0 	.word	0x200022b0
 8003e10:	200022c0 	.word	0x200022c0

08003e14 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <TIM1_BRK_IRQHandler+0x1c>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <TIM1_BRK_IRQHandler+0x20>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	6913      	ldr	r3, [r2, #16]
 8003e24:	f36f 0300 	bfc	r3, #0, #1
 8003e28:	6113      	str	r3, [r2, #16]

}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200022b0 	.word	0x200022b0
 8003e34:	200022c0 	.word	0x200022c0

08003e38 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <TIM1_TRG_COM_IRQHandler+0x1c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <TIM1_TRG_COM_IRQHandler+0x20>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	6913      	ldr	r3, [r2, #16]
 8003e48:	f36f 0300 	bfc	r3, #0, #1
 8003e4c:	6113      	str	r3, [r2, #16]

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200022b0 	.word	0x200022b0
 8003e58:	200022c0 	.word	0x200022c0

08003e5c <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 8003e66:	f7ff fca9 	bl	80037bc <MCAL_GET_PCLCK2>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <_TIM1_delay_us+0x50>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0c9b      	lsrs	r3, r3, #18
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	813b      	strh	r3, [r7, #8]
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	817b      	strh	r3, [r7, #10]
 8003e84:	2300      	movs	r3, #0
 8003e86:	81bb      	strh	r3, [r7, #12]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	81fb      	strh	r3, [r7, #14]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	743b      	strb	r3, [r7, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	747b      	strb	r3, [r7, #17]
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 8003e98:	f107 0308 	add.w	r3, r7, #8
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <_TIM1_delay_us+0x54>)
 8003ea0:	f7ff ff0a 	bl	8003cb8 <TIMER_1_8_start>

}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	431bde83 	.word	0x431bde83
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e006      	b.n	8003ed2 <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 8003ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ec8:	f7ff ffc8 	bl	8003e5c <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d3f4      	bcc.n	8003ec4 <_TIM1_delay_ms+0x10>

}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a8d      	ldr	r2, [pc, #564]	; (8004128 <MCAL_USART_init+0x244>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10c      	bne.n	8003f10 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8003ef6:	4a8d      	ldr	r2, [pc, #564]	; (800412c <MCAL_USART_init+0x248>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4614      	mov	r4, r2
 8003efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	4a8a      	ldr	r2, [pc, #552]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6193      	str	r3, [r2, #24]
 8003f0e:	e024      	b.n	8003f5a <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a88      	ldr	r2, [pc, #544]	; (8004134 <MCAL_USART_init+0x250>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d10e      	bne.n	8003f36 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8003f18:	4b84      	ldr	r3, [pc, #528]	; (800412c <MCAL_USART_init+0x248>)
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	f103 0410 	add.w	r4, r3, #16
 8003f20:	4613      	mov	r3, r2
 8003f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8003f28:	4b81      	ldr	r3, [pc, #516]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4a80      	ldr	r2, [pc, #512]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	61d3      	str	r3, [r2, #28]
 8003f34:	e011      	b.n	8003f5a <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a7f      	ldr	r2, [pc, #508]	; (8004138 <MCAL_USART_init+0x254>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10d      	bne.n	8003f5a <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <MCAL_USART_init+0x248>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	f103 0420 	add.w	r4, r3, #32
 8003f46:	4613      	mov	r3, r2
 8003f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 8003f4e:	4b78      	ldr	r3, [pc, #480]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4a77      	ldr	r2, [pc, #476]	; (8004130 <MCAL_USART_init+0x24c>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	7912      	ldrb	r2, [r2, #4]
 8003f6e:	0312      	lsls	r2, r2, #12
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	79d2      	ldrb	r2, [r2, #7]
 8003f7e:	0312      	lsls	r2, r2, #12
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	7a5b      	ldrb	r3, [r3, #9]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f043 0208 	orr.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	7a1b      	ldrb	r3, [r3, #8]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d826      	bhi.n	8003ffc <MCAL_USART_init+0x118>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <MCAL_USART_init+0xd0>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fd3 	.word	0x08003fd3
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fef 	.word	0x08003fef
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	615a      	str	r2, [r3, #20]
		break;
 8003fd0:	e014      	b.n	8003ffc <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	615a      	str	r2, [r3, #20]
		break;
 8003fde:	e00d      	b.n	8003ffc <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	615a      	str	r2, [r3, #20]
		break;
 8003fec:	e006      	b.n	8003ffc <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	615a      	str	r2, [r3, #20]
		break;
 8003ffa:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	7952      	ldrb	r2, [r2, #5]
 8004004:	0252      	lsls	r2, r2, #9
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	799b      	ldrb	r3, [r3, #6]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d125      	bne.n	8004060 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a44      	ldr	r2, [pc, #272]	; (8004128 <MCAL_USART_init+0x244>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d106      	bne.n	800402a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <MCAL_USART_init+0x258>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a46      	ldr	r2, [pc, #280]	; (800413c <MCAL_USART_init+0x258>)
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e014      	b.n	8004054 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a41      	ldr	r2, [pc, #260]	; (8004134 <MCAL_USART_init+0x250>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d106      	bne.n	8004040 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8004032:	4b42      	ldr	r3, [pc, #264]	; (800413c <MCAL_USART_init+0x258>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a41      	ldr	r2, [pc, #260]	; (800413c <MCAL_USART_init+0x258>)
 8004038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e009      	b.n	8004054 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <MCAL_USART_init+0x254>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d105      	bne.n	8004054 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8004048:	4b3c      	ldr	r3, [pc, #240]	; (800413c <MCAL_USART_init+0x258>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3b      	ldr	r2, [pc, #236]	; (800413c <MCAL_USART_init+0x258>)
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a31      	ldr	r2, [pc, #196]	; (8004128 <MCAL_USART_init+0x244>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d12d      	bne.n	80040c4 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 8004068:	f7ff fba8 	bl	80037bc <MCAL_GET_PCLCK2>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	011c      	lsls	r4, r3, #4
 800407a:	f7ff fb9f 	bl	80037bc <MCAL_GET_PCLCK2>
 800407e:	4602      	mov	r2, r0
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009a      	lsls	r2, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fbb2 f5f3 	udiv	r5, r2, r3
 8004094:	f7ff fb92 	bl	80037bc <MCAL_GET_PCLCK2>
 8004098:	4602      	mov	r2, r0
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	2264      	movs	r2, #100	; 0x64
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	1aeb      	subs	r3, r5, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4a24      	ldr	r2, [pc, #144]	; (8004140 <MCAL_USART_init+0x25c>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	ea44 0203 	orr.w	r2, r4, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	e070      	b.n	80041a6 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <MCAL_USART_init+0x250>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d13b      	bne.n	8004144 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80040cc:	f7ff fb62 	bl	8003794 <MCAL_GET_PCLCK1>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	011c      	lsls	r4, r3, #4
 80040de:	f7ff fb59 	bl	8003794 <MCAL_GET_PCLCK1>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009a      	lsls	r2, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f8:	f7ff fb4c 	bl	8003794 <MCAL_GET_PCLCK1>
 80040fc:	4602      	mov	r2, r0
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	2264      	movs	r2, #100	; 0x64
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	1aeb      	subs	r3, r5, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <MCAL_USART_init+0x25c>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	ea44 0203 	orr.w	r2, r4, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	e03e      	b.n	80041a6 <MCAL_USART_init+0x2c2>
 8004128:	40013800 	.word	0x40013800
 800412c:	200022c4 	.word	0x200022c4
 8004130:	40021000 	.word	0x40021000
 8004134:	40004400 	.word	0x40004400
 8004138:	40004800 	.word	0x40004800
 800413c:	e000e104 	.word	0xe000e104
 8004140:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <MCAL_USART_init+0x2d0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d12c      	bne.n	80041a6 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800414c:	f7ff fb22 	bl	8003794 <MCAL_GET_PCLCK1>
 8004150:	4602      	mov	r2, r0
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	011c      	lsls	r4, r3, #4
 800415e:	f7ff fb19 	bl	8003794 <MCAL_GET_PCLCK1>
 8004162:	4602      	mov	r2, r0
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009a      	lsls	r2, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	fbb2 f5f3 	udiv	r5, r2, r3
 8004178:	f7ff fb0c 	bl	8003794 <MCAL_GET_PCLCK1>
 800417c:	4602      	mov	r2, r0
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	2264      	movs	r2, #100	; 0x64
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	1aeb      	subs	r3, r5, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <MCAL_USART_init+0x2d4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	ea44 0203 	orr.w	r2, r4, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f892 	bl	80042d0 <SET_GPIO>
	}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}
 80041b4:	40004800 	.word	0x40004800
 80041b8:	51eb851f 	.word	0x51eb851f

080041bc <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <MCAL_USART_SendData+0x68>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d102      	bne.n	80041da <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <MCAL_USART_SendData+0x6c>)
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e00c      	b.n	80041f4 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a13      	ldr	r2, [pc, #76]	; (800422c <MCAL_USART_SendData+0x70>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d102      	bne.n	80041e8 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <MCAL_USART_SendData+0x74>)
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e005      	b.n	80041f4 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <MCAL_USART_SendData+0x78>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MCAL_USART_SendData+0x7c>)
 80041f2:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 80041f4:	bf00      	nop
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f9      	beq.n	80041f6 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d103      	bne.n	8004212 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8004210:	e002      	b.n	8004218 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40013800 	.word	0x40013800
 8004228:	200022c4 	.word	0x200022c4
 800422c:	40004400 	.word	0x40004400
 8004230:	200022d4 	.word	0x200022d4
 8004234:	40004800 	.word	0x40004800
 8004238:	200022e4 	.word	0x200022e4

0800423c <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <MCAL_USART_ReciveData+0x7c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d102      	bne.n	8004256 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <MCAL_USART_ReciveData+0x80>)
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e00c      	b.n	8004270 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <MCAL_USART_ReciveData+0x84>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d102      	bne.n	8004264 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <MCAL_USART_ReciveData+0x88>)
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e005      	b.n	8004270 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <MCAL_USART_ReciveData+0x8c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 800426c:	4b17      	ldr	r3, [pc, #92]	; (80042cc <MCAL_USART_ReciveData+0x90>)
 800426e:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	799b      	ldrb	r3, [r3, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 8004278:	bf00      	nop
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f9      	beq.n	800427a <MCAL_USART_ReciveData+0x3e>
 8004286:	e002      	b.n	800428e <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	799b      	ldrb	r3, [r3, #6]
 800428c:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	795b      	ldrb	r3, [r3, #5]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	e006      	b.n	80042ae <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	b29b      	uxth	r3, r3

		}

}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40013800 	.word	0x40013800
 80042bc:	200022c4 	.word	0x200022c4
 80042c0:	40004400 	.word	0x40004400
 80042c4:	200022d4 	.word	0x200022d4
 80042c8:	40004800 	.word	0x40004800
 80042cc:	200022e4 	.word	0x200022e4

080042d0 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 80042d8:	4b2c      	ldr	r3, [pc, #176]	; (800438c <SET_GPIO+0xbc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <SET_GPIO+0xc0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d115      	bne.n	8004312 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <SET_GPIO+0xc4>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <SET_GPIO+0xc4>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80042f2:	f107 031c 	add.w	r3, r7, #28
 80042f6:	4619      	mov	r1, r3
 80042f8:	4827      	ldr	r0, [pc, #156]	; (8004398 <SET_GPIO+0xc8>)
 80042fa:	f7fe ffa9 	bl	8003250 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <SET_GPIO+0xcc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004304:	f107 031c 	add.w	r3, r7, #28
 8004308:	4619      	mov	r1, r3
 800430a:	4823      	ldr	r0, [pc, #140]	; (8004398 <SET_GPIO+0xc8>)
 800430c:	f7fe ffa0 	bl	8003250 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8004310:	e038      	b.n	8004384 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <SET_GPIO+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d118      	bne.n	800434c <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <SET_GPIO+0xc4>)
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <SET_GPIO+0xc4>)
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <SET_GPIO+0xd4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800432c:	f107 031c 	add.w	r3, r7, #28
 8004330:	4619      	mov	r1, r3
 8004332:	4819      	ldr	r0, [pc, #100]	; (8004398 <SET_GPIO+0xc8>)
 8004334:	f7fe ff8c 	bl	8003250 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <SET_GPIO+0xd8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800433e:	f107 031c 	add.w	r3, r7, #28
 8004342:	4619      	mov	r1, r3
 8004344:	4814      	ldr	r0, [pc, #80]	; (8004398 <SET_GPIO+0xc8>)
 8004346:	f7fe ff83 	bl	8003250 <MCAL_GPIO_init>
}
 800434a:	e01b      	b.n	8004384 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <SET_GPIO+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d117      	bne.n	8004384 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <SET_GPIO+0xc4>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <SET_GPIO+0xc4>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <SET_GPIO+0xe0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8004366:	f107 031c 	add.w	r3, r7, #28
 800436a:	4619      	mov	r1, r3
 800436c:	4811      	ldr	r0, [pc, #68]	; (80043b4 <SET_GPIO+0xe4>)
 800436e:	f7fe ff6f 	bl	8003250 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <SET_GPIO+0xe8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8004378:	f107 031c 	add.w	r3, r7, #28
 800437c:	4619      	mov	r1, r3
 800437e:	480d      	ldr	r0, [pc, #52]	; (80043b4 <SET_GPIO+0xe4>)
 8004380:	f7fe ff66 	bl	8003250 <MCAL_GPIO_init>
}
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	08004ff0 	.word	0x08004ff0
 8004390:	40013800 	.word	0x40013800
 8004394:	40021000 	.word	0x40021000
 8004398:	40010800 	.word	0x40010800
 800439c:	08004ff4 	.word	0x08004ff4
 80043a0:	40004400 	.word	0x40004400
 80043a4:	08004ff8 	.word	0x08004ff8
 80043a8:	08004ffc 	.word	0x08004ffc
 80043ac:	40004800 	.word	0x40004800
 80043b0:	08005000 	.word	0x08005000
 80043b4:	40010c00 	.word	0x40010c00
 80043b8:	08005004 	.word	0x08005004

080043bc <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <USART1_IRQHandler+0x10>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4798      	blx	r3
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200022c4 	.word	0x200022c4

080043d0 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <USART2_IRQHandler+0x10>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	4798      	blx	r3
}void USART3_IRQHandler(void){
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200022c4 	.word	0x200022c4

080043e4 <USART3_IRQHandler>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <USART3_IRQHandler+0x10>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4798      	blx	r3
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200022c4 	.word	0x200022c4

080043f8 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
	while(1);
 80043fc:	e7fe      	b.n	80043fc <Error_Handller+0x4>
	...

08004400 <Sys_Clk_init>:
}


void Sys_Clk_init(){
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
	// system speed 28Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <Sys_Clk_init+0x30>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <Sys_Clk_init+0x30>)
 800440a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800440e:	6053      	str	r3, [r2, #4]
	//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	//	RCC->CFGR |=(1 <<16); //PLL entry clock source
	//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <Sys_Clk_init+0x30>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a06      	ldr	r2, [pc, #24]	; (8004430 <Sys_Clk_init+0x30>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441a:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <Sys_Clk_init+0x30>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a03      	ldr	r2, [pc, #12]	; (8004430 <Sys_Clk_init+0x30>)
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6053      	str	r3, [r2, #4]

}
 8004428:	bf00      	nop
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	40021000 	.word	0x40021000

08004434 <DMS_Handller_TASK>:
/************DMS TASK*************/
/************DMS TASK*************/
/************DMS TASK*************/


void DMS_Handller_TASK(){
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
	while(1){
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <DMS_Handller_TASK+0x2c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2105      	movs	r1, #5
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc f964 	bl	800070c <xQueueSemaphoreTake>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d104      	bne.n	8004454 <DMS_Handller_TASK+0x20>
			// here the action would take
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_TAKE_ACTION);
 800444a:	2166      	movs	r1, #102	; 0x66
 800444c:	4805      	ldr	r0, [pc, #20]	; (8004464 <DMS_Handller_TASK+0x30>)
 800444e:	f7ff feb5 	bl	80041bc <MCAL_USART_SendData>
 8004452:	e7f1      	b.n	8004438 <DMS_Handller_TASK+0x4>
		}else{
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_Release_ACTION);
 8004454:	2155      	movs	r1, #85	; 0x55
 8004456:	4803      	ldr	r0, [pc, #12]	; (8004464 <DMS_Handller_TASK+0x30>)
 8004458:	f7ff feb0 	bl	80041bc <MCAL_USART_SendData>
		if(xSemaphoreTake(DMS_Semaphore,5) ==pdTRUE){
 800445c:	e7ec      	b.n	8004438 <DMS_Handller_TASK+0x4>
 800445e:	bf00      	nop
 8004460:	200022f4 	.word	0x200022f4
 8004464:	40013800 	.word	0x40013800

08004468 <DMS_read_TASK>:
		}

	}
}
void DMS_read_TASK(){
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
	while(1){
		if(DMS_read() ==0){
 800446c:	f7fd fd54 	bl	8001f18 <DMS_read>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1fa      	bne.n	800446c <DMS_read_TASK+0x4>
			xSemaphoreGive(DMS_Semaphore);
 8004476:	4b04      	ldr	r3, [pc, #16]	; (8004488 <DMS_read_TASK+0x20>)
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	2200      	movs	r2, #0
 800447e:	2100      	movs	r1, #0
 8004480:	f7fb fff8 	bl	8000474 <xQueueGenericSend>
		if(DMS_read() ==0){
 8004484:	e7f2      	b.n	800446c <DMS_read_TASK+0x4>
 8004486:	bf00      	nop
 8004488:	200022f4 	.word	0x200022f4

0800448c <ACC_ADC_CallBack>:




uint16_t ACC_THROTTEL_DATA=0x00;
void ACC_ADC_CallBack(){
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <ACC_ADC_CallBack+0x14>)
 8004492:	2100      	movs	r1, #0
 8004494:	4803      	ldr	r0, [pc, #12]	; (80044a4 <ACC_ADC_CallBack+0x18>)
 8004496:	f7fe fb4b 	bl	8002b30 <ADC_read>

}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20002322 	.word	0x20002322
 80044a4:	40012400 	.word	0x40012400

080044a8 <ACC_throtel_init>:

void ACC_throtel_init(){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 80044b8:	2300      	movs	r3, #0
 80044ba:	713b      	strb	r3, [r7, #4]
 80044bc:	2301      	movs	r3, #1
 80044be:	717b      	strb	r3, [r7, #5]
 80044c0:	2300      	movs	r3, #0
 80044c2:	71bb      	strb	r3, [r7, #6]
 80044c4:	2300      	movs	r3, #0
 80044c6:	71fb      	strb	r3, [r7, #7]
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <ACC_throtel_init+0x4c>)
 80044d0:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4808      	ldr	r0, [pc, #32]	; (80044f8 <ACC_throtel_init+0x50>)
 80044d8:	f7fe f99e 	bl	8002818 <ADC_init>
//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <ACC_throtel_init+0x54>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 80044e2:	463b      	mov	r3, r7
 80044e4:	4619      	mov	r1, r3
 80044e6:	4806      	ldr	r0, [pc, #24]	; (8004500 <ACC_throtel_init+0x58>)
 80044e8:	f7fe feb2 	bl	8003250 <MCAL_GPIO_init>

}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	0800448d 	.word	0x0800448d
 80044f8:	40012400 	.word	0x40012400
 80044fc:	08005008 	.word	0x08005008
 8004500:	40010c00 	.word	0x40010c00

08004504 <ACC_DAC_init>:
void ACC_DAC_init(){
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
	PIN_config PINx={ACC_DAC_0,OUTPUT_PP,SPEED_10};
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <ACC_DAC_init+0xa0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PINx);
 8004510:	f107 031c 	add.w	r3, r7, #28
 8004514:	4619      	mov	r1, r3
 8004516:	4824      	ldr	r0, [pc, #144]	; (80045a8 <ACC_DAC_init+0xa4>)
 8004518:	f7fe fe9a 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_1,OUTPUT_PP,SPEED_10};
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <ACC_DAC_init+0xa8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004522:	f107 031c 	add.w	r3, r7, #28
 8004526:	4619      	mov	r1, r3
 8004528:	4821      	ldr	r0, [pc, #132]	; (80045b0 <ACC_DAC_init+0xac>)
 800452a:	f7fe fe91 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_2,OUTPUT_PP,SPEED_10};
 800452e:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <ACC_DAC_init+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	4619      	mov	r1, r3
 800453a:	481d      	ldr	r0, [pc, #116]	; (80045b0 <ACC_DAC_init+0xac>)
 800453c:	f7fe fe88 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_3,OUTPUT_PP,SPEED_10};
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <ACC_DAC_init+0xb4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4619      	mov	r1, r3
 800454c:	4818      	ldr	r0, [pc, #96]	; (80045b0 <ACC_DAC_init+0xac>)
 800454e:	f7fe fe7f 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_4,OUTPUT_PP,SPEED_10};
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <ACC_DAC_init+0xb8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004558:	f107 031c 	add.w	r3, r7, #28
 800455c:	4619      	mov	r1, r3
 800455e:	4814      	ldr	r0, [pc, #80]	; (80045b0 <ACC_DAC_init+0xac>)
 8004560:	f7fe fe76 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_5,OUTPUT_PP,SPEED_10};
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <ACC_DAC_init+0xbc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4619      	mov	r1, r3
 8004570:	480f      	ldr	r0, [pc, #60]	; (80045b0 <ACC_DAC_init+0xac>)
 8004572:	f7fe fe6d 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_6,OUTPUT_PP,SPEED_10};
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <ACC_DAC_init+0xc0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 800457c:	f107 031c 	add.w	r3, r7, #28
 8004580:	4619      	mov	r1, r3
 8004582:	480b      	ldr	r0, [pc, #44]	; (80045b0 <ACC_DAC_init+0xac>)
 8004584:	f7fe fe64 	bl	8003250 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_7,OUTPUT_PP,SPEED_10};
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <ACC_DAC_init+0xc4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 800458e:	f107 031c 	add.w	r3, r7, #28
 8004592:	4619      	mov	r1, r3
 8004594:	4806      	ldr	r0, [pc, #24]	; (80045b0 <ACC_DAC_init+0xac>)
 8004596:	f7fe fe5b 	bl	8003250 <MCAL_GPIO_init>

}
 800459a:	bf00      	nop
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	0800500c 	.word	0x0800500c
 80045a8:	40010800 	.word	0x40010800
 80045ac:	08005010 	.word	0x08005010
 80045b0:	40010c00 	.word	0x40010c00
 80045b4:	08005014 	.word	0x08005014
 80045b8:	08005018 	.word	0x08005018
 80045bc:	0800501c 	.word	0x0800501c
 80045c0:	08005020 	.word	0x08005020
 80045c4:	08005024 	.word	0x08005024
 80045c8:	08005028 	.word	0x08005028

080045cc <ACC_FROM_DAC_TO_ADC>:
 * @retval -
 * Note-
 */


uint16_t ACC_FROM_DAC_TO_ADC(uint8_t PWM_VAL){
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC=(uint16_t)(((PWM_VAL*ACC_TROTTEL_Max_ADC_VAL_shifted)/(100))+ACC_TROTTEL_MIN_ADC_VAL);
 80045d6:	79fa      	ldrb	r2, [r7, #7]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	025a      	lsls	r2, r3, #9
 80045e0:	4413      	add	r3, r2
 80045e2:	4a08      	ldr	r2, [pc, #32]	; (8004604 <ACC_FROM_DAC_TO_ADC+0x38>)
 80045e4:	fb82 1203 	smull	r1, r2, r2, r3
 80045e8:	1152      	asrs	r2, r2, #5
 80045ea:	17db      	asrs	r3, r3, #31
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f203 431f 	addw	r3, r3, #1055	; 0x41f
 80045f4:	81fb      	strh	r3, [r7, #14]

	return ADC;
 80045f6:	89fb      	ldrh	r3, [r7, #14]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	51eb851f 	.word	0x51eb851f

08004608 <ACC_FROM_ADC_TO_DAC_DATA>:
uint16_t ACC_FROM_ADC_TO_DAC_DATA(uint16_t ADC_VAL){
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
	uint16_t PWM=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 8004618:	2264      	movs	r2, #100	; 0x64
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	4a06      	ldr	r2, [pc, #24]	; (8004638 <ACC_FROM_ADC_TO_DAC_DATA+0x30>)
 8004620:	fb82 1203 	smull	r1, r2, r2, r3
 8004624:	1212      	asrs	r2, r2, #8
 8004626:	17db      	asrs	r3, r3, #31
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	81fb      	strh	r3, [r7, #14]
	return PWM;
 800462c:	89fb      	ldrh	r3, [r7, #14]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	2a955ffb 	.word	0x2a955ffb

0800463c <ACC_FROM_ADC_TO_DAC>:
void ACC_FROM_ADC_TO_DAC(uint16_t ADC_VAL){
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
	uint16_t PWM_V=((ADC_VAL-1000)/6);
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800464c:	4a33      	ldr	r2, [pc, #204]	; (800471c <ACC_FROM_ADC_TO_DAC+0xe0>)
 800464e:	fb82 1203 	smull	r1, r2, r2, r3
 8004652:	17db      	asrs	r3, r3, #31
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	81fb      	strh	r3, [r7, #14]
	//	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	//	PWM_V=((PWM_V*35)/100);
	MCAL_write_PIN(GPIOA, ACC_DAC_0, ((PWM_V >>0) &1));
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	210f      	movs	r1, #15
 8004666:	482e      	ldr	r0, [pc, #184]	; (8004720 <ACC_FROM_ADC_TO_DAC+0xe4>)
 8004668:	f7fe fedc 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_1, ((PWM_V >>1) &1));
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	2103      	movs	r1, #3
 800467e:	4829      	ldr	r0, [pc, #164]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 8004680:	f7fe fed0 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_2, ((PWM_V >>2) &1));
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	b29b      	uxth	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	2104      	movs	r1, #4
 8004696:	4823      	ldr	r0, [pc, #140]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 8004698:	f7fe fec4 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_3, ((PWM_V >>3) &1));
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	08db      	lsrs	r3, r3, #3
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	2105      	movs	r1, #5
 80046ae:	481d      	ldr	r0, [pc, #116]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 80046b0:	f7fe feb8 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_4, ((PWM_V >>4) &1));
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	2106      	movs	r1, #6
 80046c6:	4817      	ldr	r0, [pc, #92]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 80046c8:	f7fe feac 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_5, ((PWM_V >>5) &1));
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	2107      	movs	r1, #7
 80046de:	4811      	ldr	r0, [pc, #68]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 80046e0:	f7fe fea0 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_6, ((PWM_V >>6) &1));
 80046e4:	89fb      	ldrh	r3, [r7, #14]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	2108      	movs	r1, #8
 80046f6:	480b      	ldr	r0, [pc, #44]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 80046f8:	f7fe fe94 	bl	8003424 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_7, ((PWM_V >>7) &1));
 80046fc:	89fb      	ldrh	r3, [r7, #14]
 80046fe:	09db      	lsrs	r3, r3, #7
 8004700:	b29b      	uxth	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	2109      	movs	r1, #9
 800470e:	4805      	ldr	r0, [pc, #20]	; (8004724 <ACC_FROM_ADC_TO_DAC+0xe8>)
 8004710:	f7fe fe88 	bl	8003424 <MCAL_write_PIN>

}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2aaaaaab 	.word	0x2aaaaaab
 8004720:	40010800 	.word	0x40010800
 8004724:	40010c00 	.word	0x40010c00

08004728 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <ACC_Handller_TASK+0xa0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2202      	movs	r2, #2
 8004732:	4926      	ldr	r1, [pc, #152]	; (80047cc <ACC_Handller_TASK+0xa4>)
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb ff47 	bl	80005c8 <xQueueReceive>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d1f5      	bne.n	800472c <ACC_Handller_TASK+0x4>
			if((ACC_AMP>=100) && (ACC_AMP<=65535) ){
 8004740:	4b22      	ldr	r3, [pc, #136]	; (80047cc <ACC_Handller_TASK+0xa4>)
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	2b63      	cmp	r3, #99	; 0x63
 8004746:	d936      	bls.n	80047b6 <ACC_Handller_TASK+0x8e>
				if(xQueueReceive(ACC__dis_Queue,&ACC_dis,2)==pdTRUE){
 8004748:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <ACC_Handller_TASK+0xa8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2202      	movs	r2, #2
 800474e:	4921      	ldr	r1, [pc, #132]	; (80047d4 <ACC_Handller_TASK+0xac>)
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb ff39 	bl	80005c8 <xQueueReceive>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d1e7      	bne.n	800472c <ACC_Handller_TASK+0x4>
					if(ACC_dis <= Distance_SET){
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <ACC_Handller_TASK+0xac>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	2b64      	cmp	r3, #100	; 0x64
 8004762:	d80a      	bhi.n	800477a <ACC_Handller_TASK+0x52>
						// here should send CAN fram to atmega to stop the motor
						ACC_ACTION=ACC_CAR_STOP;
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <ACC_Handller_TASK+0xb4>)
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	2202      	movs	r2, #2
 8004772:	4919      	ldr	r1, [pc, #100]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 8004774:	f7fb fe7e 	bl	8000474 <xQueueGenericSend>
 8004778:	e7d8      	b.n	800472c <ACC_Handller_TASK+0x4>
						}else{

						}
					}else if((ACC_dis > Distance_SET) &&(ACC_dis <MAX_Distance_SET)){
 800477a:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <ACC_Handller_TASK+0xac>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d90e      	bls.n	80047a0 <ACC_Handller_TASK+0x78>
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <ACC_Handller_TASK+0xac>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	2b63      	cmp	r3, #99	; 0x63
 8004788:	d80a      	bhi.n	80047a0 <ACC_Handller_TASK+0x78>
						ACC_ACTION=ACC_CAR_SLOW_DOWN;
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <ACC_Handller_TASK+0xb4>)
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	2202      	movs	r2, #2
 8004798:	490f      	ldr	r1, [pc, #60]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 800479a:	f7fb fe6b 	bl	8000474 <xQueueGenericSend>
 800479e:	e011      	b.n	80047c4 <ACC_Handller_TASK+0x9c>
						}else{

						}

					}else{
						ACC_ACTION=ACC_CAR_GO;
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
						if(xQueueSend(ACC__ACTION_Queue,&ACC_ACTION,2)==pdTRUE){
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <ACC_Handller_TASK+0xb4>)
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	2202      	movs	r2, #2
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <ACC_Handller_TASK+0xb0>)
 80047b0:	f7fb fe60 	bl	8000474 <xQueueGenericSend>
 80047b4:	e7ba      	b.n	800472c <ACC_Handller_TASK+0x4>
				}

			}
			// if the Signal strength indicator not strong dequeue its disance value
			else{
				xQueueReceive(ACC__dis_Queue,&ACC_dis,0);
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <ACC_Handller_TASK+0xa8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	4905      	ldr	r1, [pc, #20]	; (80047d4 <ACC_Handller_TASK+0xac>)
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fb ff02 	bl	80005c8 <xQueueReceive>
		if(xQueueReceive(ACC__AMP_Queue,&ACC_AMP,2)==pdTRUE){
 80047c4:	e7b2      	b.n	800472c <ACC_Handller_TASK+0x4>
 80047c6:	bf00      	nop
 80047c8:	20002300 	.word	0x20002300
 80047cc:	20002318 	.word	0x20002318
 80047d0:	200022fc 	.word	0x200022fc
 80047d4:	20002316 	.word	0x20002316
 80047d8:	20000025 	.word	0x20000025
 80047dc:	20002304 	.word	0x20002304

080047e0 <ACC_LUNA_READ_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_LUNA_READ_TASK(){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <ACC_LUNA_READ_TASK+0x24>)
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	2202      	movs	r2, #2
 80047ec:	4906      	ldr	r1, [pc, #24]	; (8004808 <ACC_LUNA_READ_TASK+0x28>)
 80047ee:	f7fb fe41 	bl	8000474 <xQueueGenericSend>
		}else{

		}
		if(xQueueSend(ACC__AMP_Queue,&LUNA_AMP,2)==pdTRUE){
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <ACC_LUNA_READ_TASK+0x2c>)
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	2202      	movs	r2, #2
 80047fa:	4905      	ldr	r1, [pc, #20]	; (8004810 <ACC_LUNA_READ_TASK+0x30>)
 80047fc:	f7fb fe3a 	bl	8000474 <xQueueGenericSend>
		if(xQueueSend(ACC__dis_Queue,&LUNA_dis,2)==pdTRUE){
 8004800:	e7f0      	b.n	80047e4 <ACC_LUNA_READ_TASK+0x4>
 8004802:	bf00      	nop
 8004804:	200022fc 	.word	0x200022fc
 8004808:	20002090 	.word	0x20002090
 800480c:	20002300 	.word	0x20002300
 8004810:	20002092 	.word	0x20002092

08004814 <ACC_throttel_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_throttel_Handller_TASK(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
	uint8_t ACC_action=0,ACC_state=0,ACC_counter=0;
 800481a:	2300      	movs	r3, #0
 800481c:	707b      	strb	r3, [r7, #1]
 800481e:	2300      	movs	r3, #0
 8004820:	703b      	strb	r3, [r7, #0]
 8004822:	2300      	movs	r3, #0
 8004824:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_to_send=0,ADC_SAVED=0;
 8004826:	2300      	movs	r3, #0
 8004828:	80bb      	strh	r3, [r7, #4]
 800482a:	2300      	movs	r3, #0
 800482c:	807b      	strh	r3, [r7, #2]
	while(1){
		xQueueReceive(ACC__ACTION_Queue,&ACC_action,2);
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <ACC_throttel_Handller_TASK+0x130>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1c79      	adds	r1, r7, #1
 8004834:	2202      	movs	r2, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fec6 	bl	80005c8 <xQueueReceive>
		xQueueReceive(ACC__STATE_Queue,&ACC_state,2);
 800483c:	4b42      	ldr	r3, [pc, #264]	; (8004948 <ACC_throttel_Handller_TASK+0x134>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4639      	mov	r1, r7
 8004842:	2202      	movs	r2, #2
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb febf 	bl	80005c8 <xQueueReceive>
		if(ACC_state==ACC_ON){
 800484a:	783b      	ldrb	r3, [r7, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d142      	bne.n	80048d6 <ACC_throttel_Handller_TASK+0xc2>
			if(ACC_counter ==0){
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <ACC_throttel_Handller_TASK+0x4e>
				ADC_SAVED=ACC_THROTTEL_DATA;
 8004856:	4b3d      	ldr	r3, [pc, #244]	; (800494c <ACC_throttel_Handller_TASK+0x138>)
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	807b      	strh	r3, [r7, #2]
				ACC_counter++;
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	3301      	adds	r3, #1
 8004860:	71fb      	strb	r3, [r7, #7]
			}
			if(ADC_SAVED<ACC_THROTTEL_DATA){
 8004862:	4b3a      	ldr	r3, [pc, #232]	; (800494c <ACC_throttel_Handller_TASK+0x138>)
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	429a      	cmp	r2, r3
 800486a:	d205      	bcs.n	8004878 <ACC_throttel_Handller_TASK+0x64>
				ACC_FROM_ADC_TO_DAC(ACC_THROTTEL_DATA);
 800486c:	4b37      	ldr	r3, [pc, #220]	; (800494c <ACC_throttel_Handller_TASK+0x138>)
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fee3 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 8004876:	e7da      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>

			}else{
				if(ACC_action ==ACC_CAR_STOP){
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d109      	bne.n	8004892 <ACC_throttel_Handller_TASK+0x7e>
					ADC_to_send=ACC_FROM_DAC_TO_ADC(0);
 800487e:	2000      	movs	r0, #0
 8004880:	f7ff fea4 	bl	80045cc <ACC_FROM_DAC_TO_ADC>
 8004884:	4603      	mov	r3, r0
 8004886:	80bb      	strh	r3, [r7, #4]
					ACC_FROM_ADC_TO_DAC(ADC_to_send);
 8004888:	88bb      	ldrh	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fed6 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 8004890:	e7cd      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>
				}else if(ACC_action ==ACC_CAR_SLOW_DOWN){
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d116      	bne.n	80048c6 <ACC_throttel_Handller_TASK+0xb2>
					//get the adc val and convert it to pwm and sub 20% from it then change the pwm duty
					ADC_to_send=ACC_FROM_ADC_TO_DAC_DATA(ADC_SAVED);
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff feb4 	bl	8004608 <ACC_FROM_ADC_TO_DAC_DATA>
 80048a0:	4603      	mov	r3, r0
 80048a2:	80bb      	strh	r3, [r7, #4]
					if(ADC_to_send>50)
 80048a4:	88bb      	ldrh	r3, [r7, #4]
 80048a6:	2b32      	cmp	r3, #50	; 0x32
 80048a8:	d901      	bls.n	80048ae <ACC_throttel_Handller_TASK+0x9a>
					ADC_to_send=50;
 80048aa:	2332      	movs	r3, #50	; 0x32
 80048ac:	80bb      	strh	r3, [r7, #4]
					ADC_to_send=ACC_FROM_DAC_TO_ADC(ADC_to_send);
 80048ae:	88bb      	ldrh	r3, [r7, #4]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fe8a 	bl	80045cc <ACC_FROM_DAC_TO_ADC>
 80048b8:	4603      	mov	r3, r0
 80048ba:	80bb      	strh	r3, [r7, #4]
					ACC_FROM_ADC_TO_DAC(ADC_to_send);
 80048bc:	88bb      	ldrh	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff febc 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 80048c4:	e7b3      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>
				}else if(ACC_action ==ACC_CAR_GO){
 80048c6:	787b      	ldrb	r3, [r7, #1]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1b0      	bne.n	800482e <ACC_throttel_Handller_TASK+0x1a>
					ACC_FROM_ADC_TO_DAC(ADC_SAVED);
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff feb4 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 80048d4:	e7ab      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>

				}
			}


		}else if(ACC_state==ACC_OFF){
 80048d6:	783b      	ldrb	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1a8      	bne.n	800482e <ACC_throttel_Handller_TASK+0x1a>
			ACC_counter=0;
 80048dc:	2300      	movs	r3, #0
 80048de:	71fb      	strb	r3, [r7, #7]
			if(ACC_action ==ACC_CAR_STOP){
 80048e0:	787b      	ldrb	r3, [r7, #1]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d109      	bne.n	80048fa <ACC_throttel_Handller_TASK+0xe6>
				ADC_to_send=ACC_FROM_DAC_TO_ADC(0);
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7ff fe70 	bl	80045cc <ACC_FROM_DAC_TO_ADC>
 80048ec:	4603      	mov	r3, r0
 80048ee:	80bb      	strh	r3, [r7, #4]
				ACC_FROM_ADC_TO_DAC(ADC_to_send);
 80048f0:	88bb      	ldrh	r3, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fea2 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 80048f8:	e799      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>
			}else if(ACC_action ==ACC_CAR_SLOW_DOWN){
 80048fa:	787b      	ldrb	r3, [r7, #1]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d117      	bne.n	8004930 <ACC_throttel_Handller_TASK+0x11c>
				//get the adc val and convert it to pwm and sub 20% from it then change the pwm duty
				ADC_to_send=ACC_FROM_ADC_TO_DAC_DATA(ACC_THROTTEL_DATA);
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <ACC_throttel_Handller_TASK+0x138>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fe7f 	bl	8004608 <ACC_FROM_ADC_TO_DAC_DATA>
 800490a:	4603      	mov	r3, r0
 800490c:	80bb      	strh	r3, [r7, #4]
				if(ADC_to_send>50)
 800490e:	88bb      	ldrh	r3, [r7, #4]
 8004910:	2b32      	cmp	r3, #50	; 0x32
 8004912:	d901      	bls.n	8004918 <ACC_throttel_Handller_TASK+0x104>
				ADC_to_send=50;
 8004914:	2332      	movs	r3, #50	; 0x32
 8004916:	80bb      	strh	r3, [r7, #4]
				ADC_to_send=ACC_FROM_DAC_TO_ADC(ADC_to_send);
 8004918:	88bb      	ldrh	r3, [r7, #4]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fe55 	bl	80045cc <ACC_FROM_DAC_TO_ADC>
 8004922:	4603      	mov	r3, r0
 8004924:	80bb      	strh	r3, [r7, #4]
				ACC_FROM_ADC_TO_DAC(ADC_to_send);
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fe87 	bl	800463c <ACC_FROM_ADC_TO_DAC>
 800492e:	e77e      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>
			}else if(ACC_action ==ACC_CAR_GO){
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f47f af7b 	bne.w	800482e <ACC_throttel_Handller_TASK+0x1a>
				ACC_FROM_ADC_TO_DAC(ACC_THROTTEL_DATA);
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <ACC_throttel_Handller_TASK+0x138>)
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fe7d 	bl	800463c <ACC_FROM_ADC_TO_DAC>
		xQueueReceive(ACC__ACTION_Queue,&ACC_action,2);
 8004942:	e774      	b.n	800482e <ACC_throttel_Handller_TASK+0x1a>
 8004944:	20002304 	.word	0x20002304
 8004948:	20002308 	.word	0x20002308
 800494c:	20002322 	.word	0x20002322

08004950 <ACC_STATE_READ_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_STATE_READ_TASK(){
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	while(1){

		ACC_ST=MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN);
 8004954:	2101      	movs	r1, #1
 8004956:	480a      	ldr	r0, [pc, #40]	; (8004980 <ACC_STATE_READ_TASK+0x30>)
 8004958:	f7fe fd8c 	bl	8003474 <MCAL_Read_PIN>
 800495c:	4603      	mov	r3, r0
 800495e:	b2da      	uxtb	r2, r3
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <ACC_STATE_READ_TASK+0x34>)
 8004962:	701a      	strb	r2, [r3, #0]
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <ACC_STATE_READ_TASK+0x38>)
 8004966:	2100      	movs	r1, #0
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <ACC_STATE_READ_TASK+0x3c>)
 800496a:	f7fe f8e1 	bl	8002b30 <ADC_read>
		if(xQueueSend(ACC__STATE_Queue,&ACC_ST,2)==pdTRUE){
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <ACC_STATE_READ_TASK+0x40>)
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	2202      	movs	r2, #2
 8004976:	4903      	ldr	r1, [pc, #12]	; (8004984 <ACC_STATE_READ_TASK+0x34>)
 8004978:	f7fb fd7c 	bl	8000474 <xQueueGenericSend>
		ACC_ST=MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN);
 800497c:	e7ea      	b.n	8004954 <ACC_STATE_READ_TASK+0x4>
 800497e:	bf00      	nop
 8004980:	40010c00 	.word	0x40010c00
 8004984:	20002315 	.word	0x20002315
 8004988:	20002322 	.word	0x20002322
 800498c:	40012400 	.word	0x40012400
 8004990:	20002308 	.word	0x20002308

08004994 <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueReceive(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_FINAL,5)==pdTRUE){
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <TSR_Handller_TASK+0x24>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2205      	movs	r2, #5
 800499e:	4907      	ldr	r1, [pc, #28]	; (80049bc <TSR_Handller_TASK+0x28>)
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fb fe11 	bl	80005c8 <xQueueReceive>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d1f5      	bne.n	8004998 <TSR_Handller_TASK+0x4>

			TFT_send_image(GR_TSR_FLAG_OLED_FINAL);
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <TSR_Handller_TASK+0x28>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fd fd7d 	bl	80024b0 <TFT_send_image>
		if(xQueueReceive(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_FINAL,5)==pdTRUE){
 80049b6:	e7ef      	b.n	8004998 <TSR_Handller_TASK+0x4>
 80049b8:	200022f8 	.word	0x200022f8
 80049bc:	2000230f 	.word	0x2000230f

080049c0 <TSR_Flag_Read_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Flag_Read_TASK(){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	while(1){
		if(xQueueSend(TSR__Flags_Queue,&GR_TSR_FLAG_OLED_send,1)==pdTRUE){
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <TSR_Flag_Read_TASK+0x14>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	2201      	movs	r2, #1
 80049cc:	4902      	ldr	r1, [pc, #8]	; (80049d8 <TSR_Flag_Read_TASK+0x18>)
 80049ce:	f7fb fd51 	bl	8000474 <xQueueGenericSend>
 80049d2:	e7f7      	b.n	80049c4 <TSR_Flag_Read_TASK+0x4>
 80049d4:	200022f8 	.word	0x200022f8
 80049d8:	2000230e 	.word	0x2000230e

080049dc <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
	  if(  USART1->SR &(1<<5)){
 80049e0:	4b6b      	ldr	r3, [pc, #428]	; (8004b90 <TSR_call_Back+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <TSR_call_Back+0x1e>
	    PC_Uart_Flag=  MCAL_USART_ReciveData(USART1);
 80049ec:	4868      	ldr	r0, [pc, #416]	; (8004b90 <TSR_call_Back+0x1b4>)
 80049ee:	f7ff fc25 	bl	800423c <MCAL_USART_ReciveData>
 80049f2:	4603      	mov	r3, r0
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <TSR_call_Back+0x1b8>)
 80049f8:	701a      	strb	r2, [r3, #0]
	  0x0008

	  0x0000 | 0x0008
	  0x0008
	   */
	  switch(PC_Uart_Flag){
 80049fa:	4b66      	ldr	r3, [pc, #408]	; (8004b94 <TSR_call_Back+0x1b8>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	3b23      	subs	r3, #35	; 0x23
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d833      	bhi.n	8004a6c <TSR_call_Back+0x90>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <TSR_call_Back+0x30>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a6d 	.word	0x08004a6d
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	08004a6d 	.word	0x08004a6d
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a4f 	.word	0x08004a4f
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a6d 	.word	0x08004a6d
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a57 	.word	0x08004a57
	  case '#':
	    TSR_START_Flag=1;
 8004a40:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <TSR_call_Back+0x1bc>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
	    TSR_END_Flag=0;
 8004a46:	4b55      	ldr	r3, [pc, #340]	; (8004b9c <TSR_call_Back+0x1c0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
	    break;
 8004a4c:	e00e      	b.n	8004a6c <TSR_call_Back+0x90>
	  case '*':
	    TSR_END_Flag=1;
 8004a4e:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <TSR_call_Back+0x1c0>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
	    break;
 8004a54:	e00a      	b.n	8004a6c <TSR_call_Back+0x90>
	  case '/':
	    FACE_START_Flag=1;
 8004a56:	4b52      	ldr	r3, [pc, #328]	; (8004ba0 <TSR_call_Back+0x1c4>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
	    FACE_END_Flag=0;
 8004a5c:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <TSR_call_Back+0x1c8>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
	    break;
 8004a62:	e003      	b.n	8004a6c <TSR_call_Back+0x90>
	  case '+':
	    FACE_END_Flag=1;
 8004a64:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <TSR_call_Back+0x1c8>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
	    break;
 8004a6a:	bf00      	nop
	  }
	  if (FACE_START_Flag){
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <TSR_call_Back+0x1c4>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d043      	beq.n	8004afc <TSR_call_Back+0x120>
	    if(PC_Counter ==0)
 8004a74:	4b4c      	ldr	r3, [pc, #304]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <TSR_call_Back+0xa6>
	      PC_Uart_Flag=0;
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <TSR_call_Back+0x1b8>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]

	    if(FACE_END_Flag ==0){
 8004a82:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <TSR_call_Back+0x1c8>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d112      	bne.n	8004ab0 <TSR_call_Back+0xd4>
	      GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 8004a8a:	4b48      	ldr	r3, [pc, #288]	; (8004bac <TSR_call_Back+0x1d0>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <TSR_call_Back+0x1b8>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b21b      	sxth	r3, r3
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	4b43      	ldr	r3, [pc, #268]	; (8004bac <TSR_call_Back+0x1d0>)
 8004aa0:	801a      	strh	r2, [r3, #0]
	      PC_Counter++;
 8004aa2:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e025      	b.n	8004afc <TSR_call_Back+0x120>
	       * 0x0000 | 0x2F =0x
	       *
	       * */

	    }else{
	      GR_FACE_FLAG_ &=0x0F0F;
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <TSR_call_Back+0x1d0>)
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <TSR_call_Back+0x1d0>)
 8004abe:	801a      	strh	r2, [r3, #0]
	      GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 8004ac0:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <TSR_call_Back+0x1d0>)
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	111b      	asrs	r3, r3, #4
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f023 030f 	bic.w	r3, r3, #15
 8004acc:	b25a      	sxtb	r2, r3
 8004ace:	4b37      	ldr	r3, [pc, #220]	; (8004bac <TSR_call_Back+0x1d0>)
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <TSR_call_Back+0x1d4>)
 8004ae2:	701a      	strb	r2, [r3, #0]
	      GR_FACE_FLAG_=0;
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <TSR_call_Back+0x1d0>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	801a      	strh	r2, [r3, #0]

	      ///////////////
	      FACE_START_Flag=0;
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <TSR_call_Back+0x1c4>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
	      FACE_END_Flag=0;
 8004af0:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <TSR_call_Back+0x1c8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
	      PC_Counter=0;
 8004af6:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
	    }
	  }
	  if(TSR_START_Flag){
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <TSR_call_Back+0x1bc>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d043      	beq.n	8004b8c <TSR_call_Back+0x1b0>
	    if(PC_Counter ==0)
 8004b04:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <TSR_call_Back+0x136>
	      PC_Uart_Flag=0;
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <TSR_call_Back+0x1b8>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]

	    if(TSR_END_Flag ==0){
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <TSR_call_Back+0x1c0>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d112      	bne.n	8004b40 <TSR_call_Back+0x164>
	      GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <TSR_call_Back+0x1b8>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b30:	801a      	strh	r2, [r3, #0]
	      PC_Counter++;
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004b3c:	701a      	strb	r2, [r3, #0]
	//    GR_TSR_FLAG_OLED=0;
	//
	//  }


}
 8004b3e:	e025      	b.n	8004b8c <TSR_call_Back+0x1b0>
	      GR_TSR_FLAG_OLED &=0x0F0F;
 8004b40:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b4e:	801a      	strh	r2, [r3, #0]
	      GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	111b      	asrs	r3, r3, #4
 8004b56:	b25b      	sxtb	r3, r3
 8004b58:	f023 030f 	bic.w	r3, r3, #15
 8004b5c:	b25a      	sxtb	r2, r3
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <TSR_call_Back+0x1dc>)
 8004b72:	701a      	strb	r2, [r3, #0]
	      GR_TSR_FLAG_OLED=0;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <TSR_call_Back+0x1d8>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	801a      	strh	r2, [r3, #0]
	      TSR_END_Flag=0;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <TSR_call_Back+0x1c0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
	      TSR_START_Flag=0;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <TSR_call_Back+0x1bc>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	      PC_Counter=0;
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <TSR_call_Back+0x1cc>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40013800 	.word	0x40013800
 8004b94:	20002311 	.word	0x20002311
 8004b98:	20000021 	.word	0x20000021
 8004b9c:	20000022 	.word	0x20000022
 8004ba0:	20000023 	.word	0x20000023
 8004ba4:	20000024 	.word	0x20000024
 8004ba8:	20002310 	.word	0x20002310
 8004bac:	20002312 	.word	0x20002312
 8004bb0:	20002314 	.word	0x20002314
 8004bb4:	2000230c 	.word	0x2000230c
 8004bb8:	2000230e 	.word	0x2000230e

08004bbc <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <TSR_init+0x24>)
 8004bc4:	463c      	mov	r4, r7
 8004bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4804      	ldr	r0, [pc, #16]	; (8004be4 <TSR_init+0x28>)
 8004bd2:	f7ff f987 	bl	8003ee4 <MCAL_USART_init>
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}
 8004bde:	bf00      	nop
 8004be0:	0800502c 	.word	0x0800502c
 8004be4:	40013800 	.word	0x40013800

08004be8 <FACE_ID_TASK>:
}
void CAR_ON_init(){
	EXTI_config_t CAR_BOTTON_SITTING={EXT13PC13,FALLING,ENABLE,CAR_ON_Handler};
	MCAL_EXTI_init(&CAR_BOTTON_SITTING);
}
void FACE_ID_TASK(){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	while(1){
		if((MCAL_Read_PIN(GPIOC, PIN_13)==1) ){
 8004bec:	210d      	movs	r1, #13
 8004bee:	4820      	ldr	r0, [pc, #128]	; (8004c70 <FACE_ID_TASK+0x88>)
 8004bf0:	f7fe fc40 	bl	8003474 <MCAL_Read_PIN>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d136      	bne.n	8004c68 <FACE_ID_TASK+0x80>

			//UART SEND
			if(CAR_login_counter <3){
 8004bfa:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d81e      	bhi.n	8004c40 <FACE_ID_TASK+0x58>
				if(CAR_login_counter==0){
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <FACE_ID_TASK+0x36>
					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 8004c0a:	21ee      	movs	r1, #238	; 0xee
 8004c0c:	481a      	ldr	r0, [pc, #104]	; (8004c78 <FACE_ID_TASK+0x90>)
 8004c0e:	f7ff fad5 	bl	80041bc <MCAL_USART_SendData>
					CAR_login_counter++;
 8004c12:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c1c:	701a      	strb	r2, [r3, #0]
				}
				if(GR_FACE_FLAG_ ==0x99){
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <FACE_ID_TASK+0x94>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	2b99      	cmp	r3, #153	; 0x99
 8004c24:	d10c      	bne.n	8004c40 <FACE_ID_TASK+0x58>
				MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 8004c26:	21ee      	movs	r1, #238	; 0xee
 8004c28:	4813      	ldr	r0, [pc, #76]	; (8004c78 <FACE_ID_TASK+0x90>)
 8004c2a:	f7ff fac7 	bl	80041bc <MCAL_USART_SendData>
				GR_FACE_FLAG_=0;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <FACE_ID_TASK+0x94>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	801a      	strh	r2, [r3, #0]
				CAR_login_counter++;
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c3e:	701a      	strb	r2, [r3, #0]
				}
			}

			if(GR_FACE_FLAG_ !=0x99 && GR_FACE_FLAG_ !=0x00){
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <FACE_ID_TASK+0x94>)
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b99      	cmp	r3, #153	; 0x99
 8004c46:	d0d1      	beq.n	8004bec <FACE_ID_TASK+0x4>
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <FACE_ID_TASK+0x94>)
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0cd      	beq.n	8004bec <FACE_ID_TASK+0x4>
				CAR_ON_counter=1;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <FACE_ID_TASK+0x98>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(FACE_ID_TASK_Handle);
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <FACE_ID_TASK+0x9c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc f883 	bl	8000d6c <vTaskSuspend>
 8004c66:	e7c1      	b.n	8004bec <FACE_ID_TASK+0x4>

			}
		}else{
			CAR_login_counter=0;
 8004c68:	4b02      	ldr	r3, [pc, #8]	; (8004c74 <FACE_ID_TASK+0x8c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
		if((MCAL_Read_PIN(GPIOC, PIN_13)==1) ){
 8004c6e:	e7bd      	b.n	8004bec <FACE_ID_TASK+0x4>
 8004c70:	40011000 	.word	0x40011000
 8004c74:	20002321 	.word	0x20002321
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	20002312 	.word	0x20002312
 8004c80:	20002320 	.word	0x20002320
 8004c84:	2000231c 	.word	0x2000231c

08004c88 <HW_init>:





void HW_init(){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 8004c8c:	f7ff fbb8 	bl	8004400 <Sys_Clk_init>
	////////////*********TFT_init***************//////////////////
	TFT_init(RGB_5_6_5);
 8004c90:	2055      	movs	r0, #85	; 0x55
 8004c92:	f7fd fb5b 	bl	800234c <TFT_init>
	////////////*********TSR init***************//////////////////
	TSR_init();
 8004c96:	f7ff ff91 	bl	8004bbc <TSR_init>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f7fd fa2b 	bl	80020f8 <LUNA_INIT>
	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 8004ca2:	f7ff fc01 	bl	80044a8 <ACC_throtel_init>
	////////////*********DAC init***************//////////////////
	ACC_DAC_init();
 8004ca6:	f7ff fc2d 	bl	8004504 <ACC_DAC_init>





}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <main>:
int main(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af02      	add	r7, sp, #8
	HW_init();
 8004cb6:	f7ff ffe7 	bl	8004c88 <HW_init>
	///////////////////////////
	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cc8:	495d      	ldr	r1, [pc, #372]	; (8004e40 <main+0x190>)
 8004cca:	485e      	ldr	r0, [pc, #376]	; (8004e44 <main+0x194>)
 8004ccc:	f7fb ff0d 	bl	8000aea <xTaskCreate>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <main+0x2a>
		Error_Handller();
 8004cd6:	f7ff fb8f 	bl	80043f8 <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	2302      	movs	r3, #2
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce8:	4957      	ldr	r1, [pc, #348]	; (8004e48 <main+0x198>)
 8004cea:	4858      	ldr	r0, [pc, #352]	; (8004e4c <main+0x19c>)
 8004cec:	f7fb fefd 	bl	8000aea <xTaskCreate>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d001      	beq.n	8004cfa <main+0x4a>
		Error_Handller();
 8004cf6:	f7ff fb7f 	bl	80043f8 <Error_Handller>
	}

	if(xTaskCreate(ACC_LUNA_READ_TASK,"LUNA_READ",256,NULL,2,NULL)!=pdPASS ){
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	2302      	movs	r3, #2
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d08:	4951      	ldr	r1, [pc, #324]	; (8004e50 <main+0x1a0>)
 8004d0a:	4852      	ldr	r0, [pc, #328]	; (8004e54 <main+0x1a4>)
 8004d0c:	f7fb feed 	bl	8000aea <xTaskCreate>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d001      	beq.n	8004d1a <main+0x6a>
		Error_Handller();
 8004d16:	f7ff fb6f 	bl	80043f8 <Error_Handller>
	}
	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,NULL)!=pdPASS ){
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	2302      	movs	r3, #2
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d28:	494b      	ldr	r1, [pc, #300]	; (8004e58 <main+0x1a8>)
 8004d2a:	484c      	ldr	r0, [pc, #304]	; (8004e5c <main+0x1ac>)
 8004d2c:	f7fb fedd 	bl	8000aea <xTaskCreate>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <main+0x8a>
		Error_Handller();
 8004d36:	f7ff fb5f 	bl	80043f8 <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(TSR_Flag_Read_TASK,"Read_From_UART1",256,NULL,2,NULL)!=pdPASS ){
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	2302      	movs	r3, #2
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d48:	4945      	ldr	r1, [pc, #276]	; (8004e60 <main+0x1b0>)
 8004d4a:	4846      	ldr	r0, [pc, #280]	; (8004e64 <main+0x1b4>)
 8004d4c:	f7fb fecd 	bl	8000aea <xTaskCreate>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <main+0xaa>
		Error_Handller();
 8004d56:	f7ff fb4f 	bl	80043f8 <Error_Handller>
	}
	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	2302      	movs	r3, #2
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d68:	493f      	ldr	r1, [pc, #252]	; (8004e68 <main+0x1b8>)
 8004d6a:	4840      	ldr	r0, [pc, #256]	; (8004e6c <main+0x1bc>)
 8004d6c:	f7fb febd 	bl	8000aea <xTaskCreate>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d001      	beq.n	8004d7a <main+0xca>
		Error_Handller();
 8004d76:	f7ff fb3f 	bl	80043f8 <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(DMS_Handller_TASK,"DMS_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	2302      	movs	r3, #2
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d88:	4939      	ldr	r1, [pc, #228]	; (8004e70 <main+0x1c0>)
 8004d8a:	483a      	ldr	r0, [pc, #232]	; (8004e74 <main+0x1c4>)
 8004d8c:	f7fb fead 	bl	8000aea <xTaskCreate>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d001      	beq.n	8004d9a <main+0xea>
		Error_Handller();
 8004d96:	f7ff fb2f 	bl	80043f8 <Error_Handller>
	}

	if(xTaskCreate(DMS_read_TASK,"DMS_read_TASK",256,NULL,2,NULL)!=pdPASS ){
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	2302      	movs	r3, #2
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004da8:	4933      	ldr	r1, [pc, #204]	; (8004e78 <main+0x1c8>)
 8004daa:	4834      	ldr	r0, [pc, #208]	; (8004e7c <main+0x1cc>)
 8004dac:	f7fb fe9d 	bl	8000aea <xTaskCreate>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <main+0x10a>
		Error_Handller();
 8004db6:	f7ff fb1f 	bl	80043f8 <Error_Handller>
	}
	///////////////////////
	if(xTaskCreate(FACE_ID_TASK,"FACE_ID_TASK",256,NULL,5,&FACE_ID_TASK_Handle)!=pdPASS ){
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <main+0x1d0>)
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dc8:	492e      	ldr	r1, [pc, #184]	; (8004e84 <main+0x1d4>)
 8004dca:	482f      	ldr	r0, [pc, #188]	; (8004e88 <main+0x1d8>)
 8004dcc:	f7fb fe8d 	bl	8000aea <xTaskCreate>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <main+0x12a>
		Error_Handller();
 8004dd6:	f7ff fb0f 	bl	80043f8 <Error_Handller>
	}



	DMS_Semaphore = xSemaphoreCreateBinary();
 8004dda:	2203      	movs	r2, #3
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2001      	movs	r0, #1
 8004de0:	f7fb faea 	bl	80003b8 <xQueueGenericCreate>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <main+0x1dc>)
 8004de8:	6013      	str	r3, [r2, #0]
	TSR__Flags_Queue=xQueueCreate(10,sizeof(char));
 8004dea:	2200      	movs	r2, #0
 8004dec:	2101      	movs	r1, #1
 8004dee:	200a      	movs	r0, #10
 8004df0:	f7fb fae2 	bl	80003b8 <xQueueGenericCreate>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <main+0x1e0>)
 8004df8:	6013      	str	r3, [r2, #0]
	ACC__dis_Queue=xQueueCreate(10,sizeof(short));
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	200a      	movs	r0, #10
 8004e00:	f7fb fada 	bl	80003b8 <xQueueGenericCreate>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <main+0x1e4>)
 8004e08:	6013      	str	r3, [r2, #0]
	ACC__AMP_Queue=xQueueCreate(10,sizeof(short));
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	200a      	movs	r0, #10
 8004e10:	f7fb fad2 	bl	80003b8 <xQueueGenericCreate>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <main+0x1e8>)
 8004e18:	6013      	str	r3, [r2, #0]
	ACC__ACTION_Queue=xQueueCreate(10,sizeof(char));
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	200a      	movs	r0, #10
 8004e20:	f7fb faca 	bl	80003b8 <xQueueGenericCreate>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <main+0x1ec>)
 8004e28:	6013      	str	r3, [r2, #0]
	ACC__STATE_Queue=xQueueCreate(10,sizeof(char));
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	200a      	movs	r0, #10
 8004e30:	f7fb fac2 	bl	80003b8 <xQueueGenericCreate>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <main+0x1f0>)
 8004e38:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8004e3a:	f7fc f825 	bl	8000e88 <vTaskStartScheduler>

	for(;;);
 8004e3e:	e7fe      	b.n	8004e3e <main+0x18e>
 8004e40:	0800503c 	.word	0x0800503c
 8004e44:	08004815 	.word	0x08004815
 8004e48:	08005058 	.word	0x08005058
 8004e4c:	08004729 	.word	0x08004729
 8004e50:	0800506c 	.word	0x0800506c
 8004e54:	080047e1 	.word	0x080047e1
 8004e58:	08005078 	.word	0x08005078
 8004e5c:	08004951 	.word	0x08004951
 8004e60:	08005084 	.word	0x08005084
 8004e64:	080049c1 	.word	0x080049c1
 8004e68:	08005094 	.word	0x08005094
 8004e6c:	08004995 	.word	0x08004995
 8004e70:	080050a8 	.word	0x080050a8
 8004e74:	08004435 	.word	0x08004435
 8004e78:	080050bc 	.word	0x080050bc
 8004e7c:	08004469 	.word	0x08004469
 8004e80:	2000231c 	.word	0x2000231c
 8004e84:	080050cc 	.word	0x080050cc
 8004e88:	08004be9 	.word	0x08004be9
 8004e8c:	200022f4 	.word	0x200022f4
 8004e90:	200022f8 	.word	0x200022f8
 8004e94:	200022fc 	.word	0x200022fc
 8004e98:	20002300 	.word	0x20002300
 8004e9c:	20002304 	.word	0x20002304
 8004ea0:	20002308 	.word	0x20002308

08004ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ea4:	480d      	ldr	r0, [pc, #52]	; (8004edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ea6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ea8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eac:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004eae:	490d      	ldr	r1, [pc, #52]	; (8004ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004eb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ee8 <LoopForever+0xe>)
  movs r3, #0
 8004eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb4:	e002      	b.n	8004ebc <LoopCopyDataInit>

08004eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eba:	3304      	adds	r3, #4

08004ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ec0:	d3f9      	bcc.n	8004eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ec4:	4c0a      	ldr	r4, [pc, #40]	; (8004ef0 <LoopForever+0x16>)
  movs r3, #0
 8004ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec8:	e001      	b.n	8004ece <LoopFillZerobss>

08004eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ecc:	3204      	adds	r2, #4

08004ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ed0:	d3fb      	bcc.n	8004eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ed2:	f000 f819 	bl	8004f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ed6:	f7ff feeb 	bl	8004cb0 <main>

08004eda <LoopForever>:

LoopForever:
  b LoopForever
 8004eda:	e7fe      	b.n	8004eda <LoopForever>
  ldr   r0, =_estack
 8004edc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8004ee8:	0801d784 	.word	0x0801d784
  ldr r2, =_sbss
 8004eec:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8004ef0:	20002324 	.word	0x20002324

08004ef4 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ef4:	e7fe      	b.n	8004ef4 <ADC3_IRQHandler>

08004ef6 <memset>:
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4402      	add	r2, r0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d100      	bne.n	8004f00 <memset+0xa>
 8004efe:	4770      	bx	lr
 8004f00:	f803 1b01 	strb.w	r1, [r3], #1
 8004f04:	e7f9      	b.n	8004efa <memset+0x4>
	...

08004f08 <__libc_init_array>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	4d0c      	ldr	r5, [pc, #48]	; (8004f40 <__libc_init_array+0x38>)
 8004f0e:	4c0d      	ldr	r4, [pc, #52]	; (8004f44 <__libc_init_array+0x3c>)
 8004f10:	1b64      	subs	r4, r4, r5
 8004f12:	10a4      	asrs	r4, r4, #2
 8004f14:	42a6      	cmp	r6, r4
 8004f16:	d109      	bne.n	8004f2c <__libc_init_array+0x24>
 8004f18:	f000 f828 	bl	8004f6c <_init>
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	4d0a      	ldr	r5, [pc, #40]	; (8004f48 <__libc_init_array+0x40>)
 8004f20:	4c0a      	ldr	r4, [pc, #40]	; (8004f4c <__libc_init_array+0x44>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	42a6      	cmp	r6, r4
 8004f28:	d105      	bne.n	8004f36 <__libc_init_array+0x2e>
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f30:	4798      	blx	r3
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7ee      	b.n	8004f14 <__libc_init_array+0xc>
 8004f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3a:	4798      	blx	r3
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	e7f2      	b.n	8004f26 <__libc_init_array+0x1e>
 8004f40:	0801d77c 	.word	0x0801d77c
 8004f44:	0801d77c 	.word	0x0801d77c
 8004f48:	0801d77c 	.word	0x0801d77c
 8004f4c:	0801d780 	.word	0x0801d780

08004f50 <memcpy>:
 8004f50:	440a      	add	r2, r1
 8004f52:	4291      	cmp	r1, r2
 8004f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f58:	d100      	bne.n	8004f5c <memcpy+0xc>
 8004f5a:	4770      	bx	lr
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f62:	4291      	cmp	r1, r2
 8004f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f68:	d1f9      	bne.n	8004f5e <memcpy+0xe>
 8004f6a:	bd10      	pop	{r4, pc}

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
