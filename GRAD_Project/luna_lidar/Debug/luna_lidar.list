
luna_lidar.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a70  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c04  08001c04  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c04  08001c04  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c04  08001c04  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c04  08001c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000014  08001c20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001c20  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b8c  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fe2  00000000  00000000  00026c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000013c8  00000000  00000000  00027bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000330  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000298  00000000  00000000  000292e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000915  00000000  00000000  00029580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004603  00000000  00000000  00029e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006dfa  00000000  00000000  0002e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a60  00000000  00000000  00035294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b88 	.word	0x08001b88

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08001b88 	.word	0x08001b88

08000170 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	static uint8_t x=0;
	if(x==0){
 8000174:	4b5d      	ldr	r3, [pc, #372]	; (80002ec <LUNA_CallBack+0x17c>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d10d      	bne.n	8000198 <LUNA_CallBack+0x28>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 800017c:	485c      	ldr	r0, [pc, #368]	; (80002f0 <LUNA_CallBack+0x180>)
 800017e:	f001 fb8d 	bl	800189c <MCAL_USART_ReciveData>
 8000182:	4603      	mov	r3, r0
 8000184:	2b59      	cmp	r3, #89	; 0x59
 8000186:	f040 80ae 	bne.w	80002e6 <LUNA_CallBack+0x176>
			x++;
 800018a:	4b58      	ldr	r3, [pc, #352]	; (80002ec <LUNA_CallBack+0x17c>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	3301      	adds	r3, #1
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b56      	ldr	r3, [pc, #344]	; (80002ec <LUNA_CallBack+0x17c>)
 8000194:	701a      	strb	r2, [r3, #0]
	}else if(x==8){
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
		x=0;
	}

}
 8000196:	e0a6      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==1){
 8000198:	4b54      	ldr	r3, [pc, #336]	; (80002ec <LUNA_CallBack+0x17c>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d10d      	bne.n	80001bc <LUNA_CallBack+0x4c>
		if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 80001a0:	4853      	ldr	r0, [pc, #332]	; (80002f0 <LUNA_CallBack+0x180>)
 80001a2:	f001 fb7b 	bl	800189c <MCAL_USART_ReciveData>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b59      	cmp	r3, #89	; 0x59
 80001aa:	f040 809c 	bne.w	80002e6 <LUNA_CallBack+0x176>
		x++;
 80001ae:	4b4f      	ldr	r3, [pc, #316]	; (80002ec <LUNA_CallBack+0x17c>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	3301      	adds	r3, #1
 80001b4:	b2da      	uxtb	r2, r3
 80001b6:	4b4d      	ldr	r3, [pc, #308]	; (80002ec <LUNA_CallBack+0x17c>)
 80001b8:	701a      	strb	r2, [r3, #0]
}
 80001ba:	e094      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==2){
 80001bc:	4b4b      	ldr	r3, [pc, #300]	; (80002ec <LUNA_CallBack+0x17c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	d10d      	bne.n	80001e0 <LUNA_CallBack+0x70>
		x++;
 80001c4:	4b49      	ldr	r3, [pc, #292]	; (80002ec <LUNA_CallBack+0x17c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	4b47      	ldr	r3, [pc, #284]	; (80002ec <LUNA_CallBack+0x17c>)
 80001ce:	701a      	strb	r2, [r3, #0]
		LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80001d0:	4847      	ldr	r0, [pc, #284]	; (80002f0 <LUNA_CallBack+0x180>)
 80001d2:	f001 fb63 	bl	800189c <MCAL_USART_ReciveData>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b46      	ldr	r3, [pc, #280]	; (80002f4 <LUNA_CallBack+0x184>)
 80001dc:	801a      	strh	r2, [r3, #0]
}
 80001de:	e082      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==3){
 80001e0:	4b42      	ldr	r3, [pc, #264]	; (80002ec <LUNA_CallBack+0x17c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d114      	bne.n	8000212 <LUNA_CallBack+0xa2>
		x++;
 80001e8:	4b40      	ldr	r3, [pc, #256]	; (80002ec <LUNA_CallBack+0x17c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3301      	adds	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b3e      	ldr	r3, [pc, #248]	; (80002ec <LUNA_CallBack+0x17c>)
 80001f2:	701a      	strb	r2, [r3, #0]
		LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80001f4:	483e      	ldr	r0, [pc, #248]	; (80002f0 <LUNA_CallBack+0x180>)
 80001f6:	f001 fb51 	bl	800189c <MCAL_USART_ReciveData>
 80001fa:	4603      	mov	r3, r0
 80001fc:	021b      	lsls	r3, r3, #8
 80001fe:	b21a      	sxth	r2, r3
 8000200:	4b3c      	ldr	r3, [pc, #240]	; (80002f4 <LUNA_CallBack+0x184>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21b      	sxth	r3, r3
 800020a:	b29a      	uxth	r2, r3
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <LUNA_CallBack+0x184>)
 800020e:	801a      	strh	r2, [r3, #0]
}
 8000210:	e069      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==4){
 8000212:	4b36      	ldr	r3, [pc, #216]	; (80002ec <LUNA_CallBack+0x17c>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b04      	cmp	r3, #4
 8000218:	d110      	bne.n	800023c <LUNA_CallBack+0xcc>
		x++;
 800021a:	4b34      	ldr	r3, [pc, #208]	; (80002ec <LUNA_CallBack+0x17c>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b32      	ldr	r3, [pc, #200]	; (80002ec <LUNA_CallBack+0x17c>)
 8000224:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=0;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LUNA_CallBack+0x188>)
 8000228:	2200      	movs	r2, #0
 800022a:	801a      	strh	r2, [r3, #0]
		LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 800022c:	4830      	ldr	r0, [pc, #192]	; (80002f0 <LUNA_CallBack+0x180>)
 800022e:	f001 fb35 	bl	800189c <MCAL_USART_ReciveData>
 8000232:	4603      	mov	r3, r0
 8000234:	461a      	mov	r2, r3
 8000236:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LUNA_CallBack+0x188>)
 8000238:	801a      	strh	r2, [r3, #0]
}
 800023a:	e054      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==5){
 800023c:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <LUNA_CallBack+0x17c>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b05      	cmp	r3, #5
 8000242:	d114      	bne.n	800026e <LUNA_CallBack+0xfe>
		x++;
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <LUNA_CallBack+0x17c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b27      	ldr	r3, [pc, #156]	; (80002ec <LUNA_CallBack+0x17c>)
 800024e:	701a      	strb	r2, [r3, #0]
		LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8000250:	4827      	ldr	r0, [pc, #156]	; (80002f0 <LUNA_CallBack+0x180>)
 8000252:	f001 fb23 	bl	800189c <MCAL_USART_ReciveData>
 8000256:	4603      	mov	r3, r0
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21a      	sxth	r2, r3
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <LUNA_CallBack+0x188>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b21b      	sxth	r3, r3
 8000262:	4313      	orrs	r3, r2
 8000264:	b21b      	sxth	r3, r3
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LUNA_CallBack+0x188>)
 800026a:	801a      	strh	r2, [r3, #0]
}
 800026c:	e03b      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==6){
 800026e:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <LUNA_CallBack+0x17c>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b06      	cmp	r3, #6
 8000274:	d110      	bne.n	8000298 <LUNA_CallBack+0x128>
		x++;
 8000276:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <LUNA_CallBack+0x17c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	3301      	adds	r3, #1
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <LUNA_CallBack+0x17c>)
 8000280:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=0;
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <LUNA_CallBack+0x18c>)
 8000284:	2200      	movs	r2, #0
 8000286:	801a      	strh	r2, [r3, #0]
		LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8000288:	4819      	ldr	r0, [pc, #100]	; (80002f0 <LUNA_CallBack+0x180>)
 800028a:	f001 fb07 	bl	800189c <MCAL_USART_ReciveData>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <LUNA_CallBack+0x18c>)
 8000294:	801a      	strh	r2, [r3, #0]
}
 8000296:	e026      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==7){
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <LUNA_CallBack+0x17c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b07      	cmp	r3, #7
 800029e:	d114      	bne.n	80002ca <LUNA_CallBack+0x15a>
		x++;
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <LUNA_CallBack+0x17c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <LUNA_CallBack+0x17c>)
 80002aa:	701a      	strb	r2, [r3, #0]
		LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <LUNA_CallBack+0x180>)
 80002ae:	f001 faf5 	bl	800189c <MCAL_USART_ReciveData>
 80002b2:	4603      	mov	r3, r0
 80002b4:	021b      	lsls	r3, r3, #8
 80002b6:	b21a      	sxth	r2, r3
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <LUNA_CallBack+0x18c>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b21b      	sxth	r3, r3
 80002be:	4313      	orrs	r3, r2
 80002c0:	b21b      	sxth	r3, r3
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <LUNA_CallBack+0x18c>)
 80002c6:	801a      	strh	r2, [r3, #0]
}
 80002c8:	e00d      	b.n	80002e6 <LUNA_CallBack+0x176>
	}else if(x==8){
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <LUNA_CallBack+0x17c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b08      	cmp	r3, #8
 80002d0:	d109      	bne.n	80002e6 <LUNA_CallBack+0x176>
		LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80002d2:	4807      	ldr	r0, [pc, #28]	; (80002f0 <LUNA_CallBack+0x180>)
 80002d4:	f001 fae2 	bl	800189c <MCAL_USART_ReciveData>
 80002d8:	4603      	mov	r3, r0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <LUNA_CallBack+0x190>)
 80002de:	701a      	strb	r2, [r3, #0]
		x=0;
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <LUNA_CallBack+0x17c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000037 	.word	0x20000037
 80002f0:	40013800 	.word	0x40013800
 80002f4:	20000030 	.word	0x20000030
 80002f8:	20000032 	.word	0x20000032
 80002fc:	20000034 	.word	0x20000034
 8000300:	20000036 	.word	0x20000036

08000304 <LUNA_INIT>:

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8000314:	4b8e      	ldr	r3, [pc, #568]	; (8000550 <LUNA_INIT+0x24c>)
 8000316:	f107 0408 	add.w	r4, r7, #8
 800031a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8000320:	f107 0308 	add.w	r3, r7, #8
 8000324:	4619      	mov	r1, r3
 8000326:	488b      	ldr	r0, [pc, #556]	; (8000554 <LUNA_INIT+0x250>)
 8000328:	f001 f90c 	bl	8001544 <MCAL_USART_init>
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800032c:	215a      	movs	r1, #90	; 0x5a
 800032e:	4889      	ldr	r0, [pc, #548]	; (8000554 <LUNA_INIT+0x250>)
 8000330:	f001 fa74 	bl	800181c <MCAL_USART_SendData>
 8000334:	2108      	movs	r1, #8
 8000336:	4887      	ldr	r0, [pc, #540]	; (8000554 <LUNA_INIT+0x250>)
 8000338:	f001 fa70 	bl	800181c <MCAL_USART_SendData>
 800033c:	2106      	movs	r1, #6
 800033e:	4885      	ldr	r0, [pc, #532]	; (8000554 <LUNA_INIT+0x250>)
 8000340:	f001 fa6c 	bl	800181c <MCAL_USART_SendData>
 8000344:	2100      	movs	r1, #0
 8000346:	4883      	ldr	r0, [pc, #524]	; (8000554 <LUNA_INIT+0x250>)
 8000348:	f001 fa68 	bl	800181c <MCAL_USART_SendData>
 800034c:	21c2      	movs	r1, #194	; 0xc2
 800034e:	4881      	ldr	r0, [pc, #516]	; (8000554 <LUNA_INIT+0x250>)
 8000350:	f001 fa64 	bl	800181c <MCAL_USART_SendData>
 8000354:	2101      	movs	r1, #1
 8000356:	487f      	ldr	r0, [pc, #508]	; (8000554 <LUNA_INIT+0x250>)
 8000358:	f001 fa60 	bl	800181c <MCAL_USART_SendData>
 800035c:	2100      	movs	r1, #0
 800035e:	487d      	ldr	r0, [pc, #500]	; (8000554 <LUNA_INIT+0x250>)
 8000360:	f001 fa5c 	bl	800181c <MCAL_USART_SendData>
 8000364:	2100      	movs	r1, #0
 8000366:	487b      	ldr	r0, [pc, #492]	; (8000554 <LUNA_INIT+0x250>)
 8000368:	f001 fa58 	bl	800181c <MCAL_USART_SendData>
	switch (mode){
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	2b02      	cmp	r3, #2
 8000370:	d048      	beq.n	8000404 <LUNA_INIT+0x100>
 8000372:	2b02      	cmp	r3, #2
 8000374:	dc57      	bgt.n	8000426 <LUNA_INIT+0x122>
 8000376:	2b00      	cmp	r3, #0
 8000378:	d002      	beq.n	8000380 <LUNA_INIT+0x7c>
 800037a:	2b01      	cmp	r3, #1
 800037c:	d019      	beq.n	80003b2 <LUNA_INIT+0xae>
 800037e:	e052      	b.n	8000426 <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8000380:	215a      	movs	r1, #90	; 0x5a
 8000382:	4874      	ldr	r0, [pc, #464]	; (8000554 <LUNA_INIT+0x250>)
 8000384:	f001 fa4a 	bl	800181c <MCAL_USART_SendData>
 8000388:	2106      	movs	r1, #6
 800038a:	4872      	ldr	r0, [pc, #456]	; (8000554 <LUNA_INIT+0x250>)
 800038c:	f001 fa46 	bl	800181c <MCAL_USART_SendData>
 8000390:	2103      	movs	r1, #3
 8000392:	4870      	ldr	r0, [pc, #448]	; (8000554 <LUNA_INIT+0x250>)
 8000394:	f001 fa42 	bl	800181c <MCAL_USART_SendData>
 8000398:	2164      	movs	r1, #100	; 0x64
 800039a:	486e      	ldr	r0, [pc, #440]	; (8000554 <LUNA_INIT+0x250>)
 800039c:	f001 fa3e 	bl	800181c <MCAL_USART_SendData>
 80003a0:	2100      	movs	r1, #0
 80003a2:	486c      	ldr	r0, [pc, #432]	; (8000554 <LUNA_INIT+0x250>)
 80003a4:	f001 fa3a 	bl	800181c <MCAL_USART_SendData>
 80003a8:	2100      	movs	r1, #0
 80003aa:	486a      	ldr	r0, [pc, #424]	; (8000554 <LUNA_INIT+0x250>)
 80003ac:	f001 fa36 	bl	800181c <MCAL_USART_SendData>
		break;
 80003b0:	e039      	b.n	8000426 <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80003b2:	215a      	movs	r1, #90	; 0x5a
 80003b4:	4867      	ldr	r0, [pc, #412]	; (8000554 <LUNA_INIT+0x250>)
 80003b6:	f001 fa31 	bl	800181c <MCAL_USART_SendData>
 80003ba:	2106      	movs	r1, #6
 80003bc:	4865      	ldr	r0, [pc, #404]	; (8000554 <LUNA_INIT+0x250>)
 80003be:	f001 fa2d 	bl	800181c <MCAL_USART_SendData>
 80003c2:	2103      	movs	r1, #3
 80003c4:	4863      	ldr	r0, [pc, #396]	; (8000554 <LUNA_INIT+0x250>)
 80003c6:	f001 fa29 	bl	800181c <MCAL_USART_SendData>
 80003ca:	2100      	movs	r1, #0
 80003cc:	4861      	ldr	r0, [pc, #388]	; (8000554 <LUNA_INIT+0x250>)
 80003ce:	f001 fa25 	bl	800181c <MCAL_USART_SendData>
 80003d2:	2100      	movs	r1, #0
 80003d4:	485f      	ldr	r0, [pc, #380]	; (8000554 <LUNA_INIT+0x250>)
 80003d6:	f001 fa21 	bl	800181c <MCAL_USART_SendData>
 80003da:	2100      	movs	r1, #0
 80003dc:	485d      	ldr	r0, [pc, #372]	; (8000554 <LUNA_INIT+0x250>)
 80003de:	f001 fa1d 	bl	800181c <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80003e2:	215a      	movs	r1, #90	; 0x5a
 80003e4:	485b      	ldr	r0, [pc, #364]	; (8000554 <LUNA_INIT+0x250>)
 80003e6:	f001 fa19 	bl	800181c <MCAL_USART_SendData>
 80003ea:	2104      	movs	r1, #4
 80003ec:	4859      	ldr	r0, [pc, #356]	; (8000554 <LUNA_INIT+0x250>)
 80003ee:	f001 fa15 	bl	800181c <MCAL_USART_SendData>
 80003f2:	2104      	movs	r1, #4
 80003f4:	4857      	ldr	r0, [pc, #348]	; (8000554 <LUNA_INIT+0x250>)
 80003f6:	f001 fa11 	bl	800181c <MCAL_USART_SendData>
 80003fa:	2100      	movs	r1, #0
 80003fc:	4855      	ldr	r0, [pc, #340]	; (8000554 <LUNA_INIT+0x250>)
 80003fe:	f001 fa0d 	bl	800181c <MCAL_USART_SendData>
		break;
 8000402:	e010      	b.n	8000426 <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8000404:	215a      	movs	r1, #90	; 0x5a
 8000406:	4853      	ldr	r0, [pc, #332]	; (8000554 <LUNA_INIT+0x250>)
 8000408:	f001 fa08 	bl	800181c <MCAL_USART_SendData>
 800040c:	2104      	movs	r1, #4
 800040e:	4851      	ldr	r0, [pc, #324]	; (8000554 <LUNA_INIT+0x250>)
 8000410:	f001 fa04 	bl	800181c <MCAL_USART_SendData>
 8000414:	213b      	movs	r1, #59	; 0x3b
 8000416:	484f      	ldr	r0, [pc, #316]	; (8000554 <LUNA_INIT+0x250>)
 8000418:	f001 fa00 	bl	800181c <MCAL_USART_SendData>
 800041c:	2100      	movs	r1, #0
 800041e:	484d      	ldr	r0, [pc, #308]	; (8000554 <LUNA_INIT+0x250>)
 8000420:	f001 f9fc 	bl	800181c <MCAL_USART_SendData>
		break;
 8000424:	bf00      	nop
	}
	switch (format)
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	2b05      	cmp	r3, #5
 800042a:	f200 808d 	bhi.w	8000548 <LUNA_INIT+0x244>
 800042e:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <LUNA_INIT+0x130>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	0800044d 	.word	0x0800044d
 8000438:	08000477 	.word	0x08000477
 800043c:	080004a1 	.word	0x080004a1
 8000440:	080004cb 	.word	0x080004cb
 8000444:	080004f5 	.word	0x080004f5
 8000448:	0800051f 	.word	0x0800051f
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800044c:	215a      	movs	r1, #90	; 0x5a
 800044e:	4841      	ldr	r0, [pc, #260]	; (8000554 <LUNA_INIT+0x250>)
 8000450:	f001 f9e4 	bl	800181c <MCAL_USART_SendData>
 8000454:	2105      	movs	r1, #5
 8000456:	483f      	ldr	r0, [pc, #252]	; (8000554 <LUNA_INIT+0x250>)
 8000458:	f001 f9e0 	bl	800181c <MCAL_USART_SendData>
 800045c:	2105      	movs	r1, #5
 800045e:	483d      	ldr	r0, [pc, #244]	; (8000554 <LUNA_INIT+0x250>)
 8000460:	f001 f9dc 	bl	800181c <MCAL_USART_SendData>
 8000464:	2101      	movs	r1, #1
 8000466:	483b      	ldr	r0, [pc, #236]	; (8000554 <LUNA_INIT+0x250>)
 8000468:	f001 f9d8 	bl	800181c <MCAL_USART_SendData>
 800046c:	2100      	movs	r1, #0
 800046e:	4839      	ldr	r0, [pc, #228]	; (8000554 <LUNA_INIT+0x250>)
 8000470:	f001 f9d4 	bl	800181c <MCAL_USART_SendData>
		break;
 8000474:	e068      	b.n	8000548 <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8000476:	215a      	movs	r1, #90	; 0x5a
 8000478:	4836      	ldr	r0, [pc, #216]	; (8000554 <LUNA_INIT+0x250>)
 800047a:	f001 f9cf 	bl	800181c <MCAL_USART_SendData>
 800047e:	2105      	movs	r1, #5
 8000480:	4834      	ldr	r0, [pc, #208]	; (8000554 <LUNA_INIT+0x250>)
 8000482:	f001 f9cb 	bl	800181c <MCAL_USART_SendData>
 8000486:	2105      	movs	r1, #5
 8000488:	4832      	ldr	r0, [pc, #200]	; (8000554 <LUNA_INIT+0x250>)
 800048a:	f001 f9c7 	bl	800181c <MCAL_USART_SendData>
 800048e:	2102      	movs	r1, #2
 8000490:	4830      	ldr	r0, [pc, #192]	; (8000554 <LUNA_INIT+0x250>)
 8000492:	f001 f9c3 	bl	800181c <MCAL_USART_SendData>
 8000496:	2100      	movs	r1, #0
 8000498:	482e      	ldr	r0, [pc, #184]	; (8000554 <LUNA_INIT+0x250>)
 800049a:	f001 f9bf 	bl	800181c <MCAL_USART_SendData>
		break;
 800049e:	e053      	b.n	8000548 <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80004a0:	215a      	movs	r1, #90	; 0x5a
 80004a2:	482c      	ldr	r0, [pc, #176]	; (8000554 <LUNA_INIT+0x250>)
 80004a4:	f001 f9ba 	bl	800181c <MCAL_USART_SendData>
 80004a8:	2105      	movs	r1, #5
 80004aa:	482a      	ldr	r0, [pc, #168]	; (8000554 <LUNA_INIT+0x250>)
 80004ac:	f001 f9b6 	bl	800181c <MCAL_USART_SendData>
 80004b0:	2105      	movs	r1, #5
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <LUNA_INIT+0x250>)
 80004b4:	f001 f9b2 	bl	800181c <MCAL_USART_SendData>
 80004b8:	2106      	movs	r1, #6
 80004ba:	4826      	ldr	r0, [pc, #152]	; (8000554 <LUNA_INIT+0x250>)
 80004bc:	f001 f9ae 	bl	800181c <MCAL_USART_SendData>
 80004c0:	2100      	movs	r1, #0
 80004c2:	4824      	ldr	r0, [pc, #144]	; (8000554 <LUNA_INIT+0x250>)
 80004c4:	f001 f9aa 	bl	800181c <MCAL_USART_SendData>
		break;
 80004c8:	e03e      	b.n	8000548 <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80004ca:	215a      	movs	r1, #90	; 0x5a
 80004cc:	4821      	ldr	r0, [pc, #132]	; (8000554 <LUNA_INIT+0x250>)
 80004ce:	f001 f9a5 	bl	800181c <MCAL_USART_SendData>
 80004d2:	2105      	movs	r1, #5
 80004d4:	481f      	ldr	r0, [pc, #124]	; (8000554 <LUNA_INIT+0x250>)
 80004d6:	f001 f9a1 	bl	800181c <MCAL_USART_SendData>
 80004da:	2105      	movs	r1, #5
 80004dc:	481d      	ldr	r0, [pc, #116]	; (8000554 <LUNA_INIT+0x250>)
 80004de:	f001 f99d 	bl	800181c <MCAL_USART_SendData>
 80004e2:	2107      	movs	r1, #7
 80004e4:	481b      	ldr	r0, [pc, #108]	; (8000554 <LUNA_INIT+0x250>)
 80004e6:	f001 f999 	bl	800181c <MCAL_USART_SendData>
 80004ea:	2100      	movs	r1, #0
 80004ec:	4819      	ldr	r0, [pc, #100]	; (8000554 <LUNA_INIT+0x250>)
 80004ee:	f001 f995 	bl	800181c <MCAL_USART_SendData>
		break;
 80004f2:	e029      	b.n	8000548 <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80004f4:	215a      	movs	r1, #90	; 0x5a
 80004f6:	4817      	ldr	r0, [pc, #92]	; (8000554 <LUNA_INIT+0x250>)
 80004f8:	f001 f990 	bl	800181c <MCAL_USART_SendData>
 80004fc:	2105      	movs	r1, #5
 80004fe:	4815      	ldr	r0, [pc, #84]	; (8000554 <LUNA_INIT+0x250>)
 8000500:	f001 f98c 	bl	800181c <MCAL_USART_SendData>
 8000504:	2105      	movs	r1, #5
 8000506:	4813      	ldr	r0, [pc, #76]	; (8000554 <LUNA_INIT+0x250>)
 8000508:	f001 f988 	bl	800181c <MCAL_USART_SendData>
 800050c:	2108      	movs	r1, #8
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <LUNA_INIT+0x250>)
 8000510:	f001 f984 	bl	800181c <MCAL_USART_SendData>
 8000514:	2100      	movs	r1, #0
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <LUNA_INIT+0x250>)
 8000518:	f001 f980 	bl	800181c <MCAL_USART_SendData>
		break;
 800051c:	e014      	b.n	8000548 <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800051e:	215a      	movs	r1, #90	; 0x5a
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LUNA_INIT+0x250>)
 8000522:	f001 f97b 	bl	800181c <MCAL_USART_SendData>
 8000526:	2105      	movs	r1, #5
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <LUNA_INIT+0x250>)
 800052a:	f001 f977 	bl	800181c <MCAL_USART_SendData>
 800052e:	2105      	movs	r1, #5
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <LUNA_INIT+0x250>)
 8000532:	f001 f973 	bl	800181c <MCAL_USART_SendData>
 8000536:	2109      	movs	r1, #9
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <LUNA_INIT+0x250>)
 800053a:	f001 f96f 	bl	800181c <MCAL_USART_SendData>
 800053e:	2100      	movs	r1, #0
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <LUNA_INIT+0x250>)
 8000542:	f001 f96b 	bl	800181c <MCAL_USART_SendData>
		break;
 8000546:	bf00      	nop
	}
}
 8000548:	bf00      	nop
 800054a:	371c      	adds	r7, #28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	08001ba0 	.word	0x08001ba0
 8000554:	40013800 	.word	0x40013800

08000558 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <EXTI0_IRQHandler+0x1c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI0_IRQHandler+0x20>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI0_IRQHandler+0x20>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6153      	str	r3, [r2, #20]
	}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000038 	.word	0x20000038
 8000578:	40010400 	.word	0x40010400

0800057c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <EXTI1_IRQHandler+0x1c>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <EXTI1_IRQHandler+0x20>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <EXTI1_IRQHandler+0x20>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6153      	str	r3, [r2, #20]

	}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000038 	.word	0x20000038
 800059c:	40010400 	.word	0x40010400

080005a0 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <EXTI2_IRQHandler+0x1c>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <EXTI2_IRQHandler+0x20>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <EXTI2_IRQHandler+0x20>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6153      	str	r3, [r2, #20]

	}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000038 	.word	0x20000038
 80005c0:	40010400 	.word	0x40010400

080005c4 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI3_IRQHandler+0x1c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EXTI3_IRQHandler+0x20>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <EXTI3_IRQHandler+0x20>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6153      	str	r3, [r2, #20]

	}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000038 	.word	0x20000038
 80005e4:	40010400 	.word	0x40010400

080005e8 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI4_IRQHandler+0x1c>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI4_IRQHandler+0x20>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <EXTI4_IRQHandler+0x20>)
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	6153      	str	r3, [r2, #20]

	}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000038 	.word	0x20000038
 8000608:	40010400 	.word	0x40010400

0800060c <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI9_5_IRQHandler+0x22>
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a22      	ldr	r2, [pc, #136]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <EXTI9_5_IRQHandler+0xa4>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <EXTI9_5_IRQHandler+0x40>
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <EXTI9_5_IRQHandler+0xa4>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <EXTI9_5_IRQHandler+0x5e>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800065e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <EXTI9_5_IRQHandler+0xa4>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <EXTI9_5_IRQHandler+0x7c>
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <EXTI9_5_IRQHandler+0xa4>)
 8000684:	6a1b      	ldr	r3, [r3, #32]
 8000686:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000690:	2b00      	cmp	r3, #0
 8000692:	d008      	beq.n	80006a6 <EXTI9_5_IRQHandler+0x9a>
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI9_5_IRQHandler+0xa0>)
 800069a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <EXTI9_5_IRQHandler+0xa4>)
 80006a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a4:	4798      	blx	r3
	}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010400 	.word	0x40010400
 80006b0:	20000038 	.word	0x20000038

080006b4 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80006b8:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <EXTI15_10_IRQHandler+0x22>
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a29      	ldr	r2, [pc, #164]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d4:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <EXTI15_10_IRQHandler+0x40>
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <EXTI15_10_IRQHandler+0x5e>
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800070a:	6153      	str	r3, [r2, #20]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <EXTI15_10_IRQHandler+0x7c>
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 800072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <EXTI15_10_IRQHandler+0x9a>
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6153      	str	r3, [r2, #20]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 800074a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d008      	beq.n	800076c <EXTI15_10_IRQHandler+0xb8>
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <EXTI15_10_IRQHandler+0xbc>)
 8000760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <EXTI15_10_IRQHandler+0xc0>)
 8000768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076a:	4798      	blx	r3

	}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010400 	.word	0x40010400
 8000774:	20000038 	.word	0x20000038

08000778 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d803      	bhi.n	8000790 <Get_PIN_Positon+0x18>
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	b29b      	uxth	r3, r3
 800078e:	e004      	b.n	800079a <Get_PIN_Positon+0x22>
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	3b08      	subs	r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	81fb      	strh	r3, [r7, #14]
return positon;
 800079c:	89fb      	ldrh	r3, [r7, #14]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a6b      	ldr	r2, [pc, #428]	; (8000964 <MCAL_GPIO_init+0x1bc>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d106      	bne.n	80007c8 <MCAL_GPIO_init+0x20>
 80007ba:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a6a      	ldr	r2, [pc, #424]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	e02a      	b.n	800081e <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a68      	ldr	r2, [pc, #416]	; (800096c <MCAL_GPIO_init+0x1c4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d106      	bne.n	80007de <MCAL_GPIO_init+0x36>
 80007d0:	4b65      	ldr	r3, [pc, #404]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a64      	ldr	r2, [pc, #400]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	e01f      	b.n	800081e <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a63      	ldr	r2, [pc, #396]	; (8000970 <MCAL_GPIO_init+0x1c8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d106      	bne.n	80007f4 <MCAL_GPIO_init+0x4c>
 80007e6:	4b60      	ldr	r3, [pc, #384]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a5f      	ldr	r2, [pc, #380]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	e014      	b.n	800081e <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a5f      	ldr	r2, [pc, #380]	; (8000974 <MCAL_GPIO_init+0x1cc>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d106      	bne.n	800080a <MCAL_GPIO_init+0x62>
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a59      	ldr	r2, [pc, #356]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 8000802:	f043 0320 	orr.w	r3, r3, #32
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	e009      	b.n	800081e <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a5a      	ldr	r2, [pc, #360]	; (8000978 <MCAL_GPIO_init+0x1d0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d105      	bne.n	800081e <MCAL_GPIO_init+0x76>
 8000812:	4b55      	ldr	r3, [pc, #340]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a54      	ldr	r2, [pc, #336]	; (8000968 <MCAL_GPIO_init+0x1c0>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	2b07      	cmp	r3, #7
 8000826:	d801      	bhi.n	800082c <MCAL_GPIO_init+0x84>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	e001      	b.n	8000830 <MCAL_GPIO_init+0x88>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b29b      	uxth	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff9d 	bl	8000778 <Get_PIN_Positon>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	230f      	movs	r3, #15
 8000844:	4093      	lsls	r3, r2
 8000846:	43da      	mvns	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	401a      	ands	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00e      	beq.n	800087a <MCAL_GPIO_init+0xd2>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d009      	beq.n	800087a <MCAL_GPIO_init+0xd2>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b02      	cmp	r3, #2
 800086e:	d004      	beq.n	800087a <MCAL_GPIO_init+0xd2>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b03      	cmp	r3, #3
 8000878:	d156      	bne.n	8000928 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b03      	cmp	r3, #3
 8000882:	d11c      	bne.n	80008be <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff74 	bl	8000778 <Get_PIN_Positon>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	2308      	movs	r3, #8
 8000896:	fa03 f202 	lsl.w	r2, r3, r2
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	431a      	orrs	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	2301      	movs	r3, #1
 80008ae:	4093      	lsls	r3, r2
 80008b0:	43da      	mvns	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	401a      	ands	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80008bc:	e04d      	b.n	800095a <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	789b      	ldrb	r3, [r3, #2]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d11c      	bne.n	8000902 <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff52 	bl	8000778 <Get_PIN_Positon>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	2308      	movs	r3, #8
 80008da:	fa03 f202 	lsl.w	r2, r3, r2
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	431a      	orrs	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	2301      	movs	r3, #1
 80008f2:	fa03 f202 	lsl.w	r2, r3, r2
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8000900:	e02b      	b.n	800095a <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	009c      	lsls	r4, r3, #2
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff31 	bl	8000778 <Get_PIN_Positon>
 8000916:	4603      	mov	r3, r0
 8000918:	fa04 f203 	lsl.w	r2, r4, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	431a      	orrs	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8000926:	e018      	b.n	800095a <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	3b04      	subs	r3, #4
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	78d2      	ldrb	r2, [r2, #3]
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	ea43 0402 	orr.w	r4, r3, r2
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff18 	bl	8000778 <Get_PIN_Positon>
 8000948:	4603      	mov	r3, r0
 800094a:	fa04 f203 	lsl.w	r2, r4, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	431a      	orrs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	601a      	str	r2, [r3, #0]

	}

}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	40010800 	.word	0x40010800
 8000968:	40021000 	.word	0x40021000
 800096c:	40010c00 	.word	0x40010c00
 8000970:	40011000 	.word	0x40011000
 8000974:	40011400 	.word	0x40011400
 8000978:	40011800 	.word	0x40011800

0800097c <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	while(1);
 8000980:	e7fe      	b.n	8000980 <GP_ERROR_HANDLER+0x4>
	...

08000984 <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	; 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
 8000990:	4613      	mov	r3, r2
 8000992:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800099a:	f040 8089 	bne.w	8000ab0 <MCAL_SET_GP_TIMx_GPIO+0x12c>
		switch (MODE) {
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d043      	beq.n	8000a2c <MCAL_SET_GP_TIMx_GPIO+0xa8>
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f300 81bb 	bgt.w	8000d20 <MCAL_SET_GP_TIMx_GPIO+0x39c>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 81ba 	beq.w	8000d24 <MCAL_SET_GP_TIMx_GPIO+0x3a0>
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d000      	beq.n	80009b6 <MCAL_SET_GP_TIMx_GPIO+0x32>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 80009b4:	e1b4      	b.n	8000d20 <MCAL_SET_GP_TIMx_GPIO+0x39c>
			switch(CHx){
 80009b6:	78bb      	ldrb	r3, [r7, #2]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d832      	bhi.n	8000a24 <MCAL_SET_GP_TIMx_GPIO+0xa0>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <MCAL_SET_GP_TIMx_GPIO+0x40>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009e9 	.word	0x080009e9
 80009cc:	080009fd 	.word	0x080009fd
 80009d0:	08000a11 	.word	0x08000a11
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 80009d4:	4bb0      	ldr	r3, [pc, #704]	; (8000c98 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 80009da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009de:	4619      	mov	r1, r3
 80009e0:	48ae      	ldr	r0, [pc, #696]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80009e2:	f7ff fee1 	bl	80007a8 <MCAL_GPIO_init>
				break;
 80009e6:	e020      	b.n	8000a2a <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 80009e8:	4bad      	ldr	r3, [pc, #692]	; (8000ca0 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 80009ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f2:	4619      	mov	r1, r3
 80009f4:	48a9      	ldr	r0, [pc, #676]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80009f6:	f7ff fed7 	bl	80007a8 <MCAL_GPIO_init>
				break;
 80009fa:	e016      	b.n	8000a2a <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 80009fc:	4ba9      	ldr	r3, [pc, #676]	; (8000ca4 <MCAL_SET_GP_TIMx_GPIO+0x320>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000a02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a06:	4619      	mov	r1, r3
 8000a08:	48a4      	ldr	r0, [pc, #656]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000a0a:	f7ff fecd 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000a0e:	e00c      	b.n	8000a2a <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8000a10:	4ba5      	ldr	r3, [pc, #660]	; (8000ca8 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000a16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	489f      	ldr	r0, [pc, #636]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000a1e:	f7ff fec3 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000a22:	e002      	b.n	8000a2a <MCAL_SET_GP_TIMx_GPIO+0xa6>
				ERROR_HANDLER();
 8000a24:	f000 fd43 	bl	80014ae <ERROR_HANDLER>
			break;
 8000a28:	e185      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000a2a:	e184      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8000a2c:	78bb      	ldrb	r3, [r7, #2]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d839      	bhi.n	8000aa8 <MCAL_SET_GP_TIMx_GPIO+0x124>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <MCAL_SET_GP_TIMx_GPIO+0xb8>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a4d 	.word	0x08000a4d
 8000a40:	08000a6d 	.word	0x08000a6d
 8000a44:	08000a81 	.word	0x08000a81
 8000a48:	08000a95 	.word	0x08000a95
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000a52:	2301      	movs	r3, #1
 8000a54:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOA, &pin);
 8000a5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a62:	4619      	mov	r1, r3
 8000a64:	488d      	ldr	r0, [pc, #564]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000a66:	f7ff fe9f 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000a6a:	e020      	b.n	8000aae <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8000a6c:	4b8f      	ldr	r3, [pc, #572]	; (8000cac <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000a72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4888      	ldr	r0, [pc, #544]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000a7a:	f7ff fe95 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000a7e:	e016      	b.n	8000aae <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000a86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4883      	ldr	r0, [pc, #524]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000a8e:	f7ff fe8b 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000a92:	e00c      	b.n	8000aae <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 8000a94:	4b87      	ldr	r3, [pc, #540]	; (8000cb4 <MCAL_SET_GP_TIMx_GPIO+0x330>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000a9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	487e      	ldr	r0, [pc, #504]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000aa2:	f7ff fe81 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000aa6:	e002      	b.n	8000aae <MCAL_SET_GP_TIMx_GPIO+0x12a>
					ERROR_HANDLER();
 8000aa8:	f000 fd01 	bl	80014ae <ERROR_HANDLER>
				break;
 8000aac:	e143      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000aae:	e142      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}

	}else if(TIMx ==TIM3){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a81      	ldr	r2, [pc, #516]	; (8000cb8 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8089 	bne.w	8000bcc <MCAL_SET_GP_TIMx_GPIO+0x248>
		switch (MODE) {
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d043      	beq.n	8000b48 <MCAL_SET_GP_TIMx_GPIO+0x1c4>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	f300 8131 	bgt.w	8000d28 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8130 	beq.w	8000d2c <MCAL_SET_GP_TIMx_GPIO+0x3a8>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d000      	beq.n	8000ad2 <MCAL_SET_GP_TIMx_GPIO+0x14e>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8000ad0:	e12a      	b.n	8000d28 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
			switch(CHx){
 8000ad2:	78bb      	ldrb	r3, [r7, #2]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d832      	bhi.n	8000b40 <MCAL_SET_GP_TIMx_GPIO+0x1bc>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <MCAL_SET_GP_TIMx_GPIO+0x15c>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af1 	.word	0x08000af1
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b19 	.word	0x08000b19
 8000aec:	08000b2d 	.word	0x08000b2d
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000af0:	4b72      	ldr	r3, [pc, #456]	; (8000cbc <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000afe:	f7ff fe53 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000b02:	e020      	b.n	8000b46 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8000b04:	4b6e      	ldr	r3, [pc, #440]	; (8000cc0 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8000b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4862      	ldr	r0, [pc, #392]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000b12:	f7ff fe49 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000b16:	e016      	b.n	8000b46 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8000b18:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000b1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b22:	4619      	mov	r1, r3
 8000b24:	4867      	ldr	r0, [pc, #412]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000b26:	f7ff fe3f 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000b2a:	e00c      	b.n	8000b46 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8000b2c:	4b5c      	ldr	r3, [pc, #368]	; (8000ca0 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000b32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4862      	ldr	r0, [pc, #392]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000b3a:	f7ff fe35 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000b3e:	e002      	b.n	8000b46 <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				ERROR_HANDLER();
 8000b40:	f000 fcb5 	bl	80014ae <ERROR_HANDLER>
			break;
 8000b44:	e0f7      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000b46:	e0f6      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8000b48:	78bb      	ldrb	r3, [r7, #2]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d839      	bhi.n	8000bc4 <MCAL_SET_GP_TIMx_GPIO+0x240>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <MCAL_SET_GP_TIMx_GPIO+0x1d4>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000b7d 	.word	0x08000b7d
 8000b60:	08000b91 	.word	0x08000b91
 8000b64:	08000bb1 	.word	0x08000bb1
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8000b68:	4b57      	ldr	r3, [pc, #348]	; (8000cc8 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000b6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b72:	4619      	mov	r1, r3
 8000b74:	4849      	ldr	r0, [pc, #292]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000b76:	f7ff fe17 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000b7a:	e026      	b.n	8000bca <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8000b7c:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <MCAL_SET_GP_TIMx_GPIO+0x348>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8000b82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4844      	ldr	r0, [pc, #272]	; (8000c9c <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8000b8a:	f7ff fe0d 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000b8e:	e01c      	b.n	8000bca <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOB, &pin);
 8000ba2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4846      	ldr	r0, [pc, #280]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000baa:	f7ff fdfd 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000bae:	e00c      	b.n	8000bca <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000bb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4841      	ldr	r0, [pc, #260]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000bbe:	f7ff fdf3 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000bc2:	e002      	b.n	8000bca <MCAL_SET_GP_TIMx_GPIO+0x246>
					ERROR_HANDLER();
 8000bc4:	f000 fc73 	bl	80014ae <ERROR_HANDLER>
				break;
 8000bc8:	e0b5      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000bca:	e0b4      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}



	}else if(TIMx ==TIM4){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a40      	ldr	r2, [pc, #256]	; (8000cd0 <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	f040 80b0 	bne.w	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		switch (MODE) {
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d043      	beq.n	8000c64 <MCAL_SET_GP_TIMx_GPIO+0x2e0>
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	f300 80a7 	bgt.w	8000d30 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80a6 	beq.w	8000d34 <MCAL_SET_GP_TIMx_GPIO+0x3b0>
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d000      	beq.n	8000bee <MCAL_SET_GP_TIMx_GPIO+0x26a>
				default:
					ERROR_HANDLER();
				}
				break;
				default:
					break;
 8000bec:	e0a0      	b.n	8000d30 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
			switch(CHx){
 8000bee:	78bb      	ldrb	r3, [r7, #2]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d832      	bhi.n	8000c5c <MCAL_SET_GP_TIMx_GPIO+0x2d8>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <MCAL_SET_GP_TIMx_GPIO+0x278>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c35 	.word	0x08000c35
 8000c08:	08000c49 	.word	0x08000c49
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c16:	4619      	mov	r1, r3
 8000c18:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000c1a:	f7ff fdc5 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000c1e:	e020      	b.n	8000c62 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000c26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000c2e:	f7ff fdbb 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000c32:	e016      	b.n	8000c62 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MCAL_SET_GP_TIMx_GPIO+0x350>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000c3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000c42:	f7ff fdb1 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000c46:	e00c      	b.n	8000c62 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MCAL_SET_GP_TIMx_GPIO+0x354>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8000c4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c52:	4619      	mov	r1, r3
 8000c54:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000c56:	f7ff fda7 	bl	80007a8 <MCAL_GPIO_init>
				break;
 8000c5a:	e002      	b.n	8000c62 <MCAL_SET_GP_TIMx_GPIO+0x2de>
				ERROR_HANDLER();
 8000c5c:	f000 fc27 	bl	80014ae <ERROR_HANDLER>
			break;
 8000c60:	e069      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000c62:	e068      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8000c64:	78bb      	ldrb	r3, [r7, #2]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d855      	bhi.n	8000d18 <MCAL_SET_GP_TIMx_GPIO+0x394>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <MCAL_SET_GP_TIMx_GPIO+0x2f0>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000cdd 	.word	0x08000cdd
 8000c7c:	08000cf1 	.word	0x08000cf1
 8000c80:	08000d05 	.word	0x08000d05
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000c8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8000c92:	f7ff fd89 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000c96:	e042      	b.n	8000d1e <MCAL_SET_GP_TIMx_GPIO+0x39a>
 8000c98:	08001bb0 	.word	0x08001bb0
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	08001bb4 	.word	0x08001bb4
 8000ca4:	08001bb8 	.word	0x08001bb8
 8000ca8:	08001bbc 	.word	0x08001bbc
 8000cac:	08001bc0 	.word	0x08001bc0
 8000cb0:	08001bc4 	.word	0x08001bc4
 8000cb4:	08001bc8 	.word	0x08001bc8
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	08001bcc 	.word	0x08001bcc
 8000cc0:	08001bd0 	.word	0x08001bd0
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	08001bd4 	.word	0x08001bd4
 8000ccc:	08001bd8 	.word	0x08001bd8
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	08001bdc 	.word	0x08001bdc
 8000cd8:	08001be0 	.word	0x08001be0
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MCAL_SET_GP_TIMx_GPIO+0x3bc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000ce2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4816      	ldr	r0, [pc, #88]	; (8000d44 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8000cea:	f7ff fd5d 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000cee:	e016      	b.n	8000d1e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MCAL_SET_GP_TIMx_GPIO+0x3c4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000cf6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8000cfe:	f7ff fd53 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000d02:	e00c      	b.n	8000d1e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MCAL_SET_GP_TIMx_GPIO+0x3c8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8000d0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8000d12:	f7ff fd49 	bl	80007a8 <MCAL_GPIO_init>
					break;
 8000d16:	e002      	b.n	8000d1e <MCAL_SET_GP_TIMx_GPIO+0x39a>
					ERROR_HANDLER();
 8000d18:	f000 fbc9 	bl	80014ae <ERROR_HANDLER>
				break;
 8000d1c:	e00b      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8000d1e:	e00a      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000d20:	bf00      	nop
 8000d22:	e008      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8000d24:	bf00      	nop
 8000d26:	e006      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000d28:	bf00      	nop
 8000d2a:	e004      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8000d34:	bf00      	nop
		//////////



	}
}
 8000d36:	bf00      	nop
 8000d38:	3770      	adds	r7, #112	; 0x70
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	08001bd8 	.word	0x08001bd8
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	08001be4 	.word	0x08001be4
 8000d4c:	08001be8 	.word	0x08001be8

08000d50 <GP_TIMx_start>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_TIMx_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_NORMAL_config* NORMAL_SITTING){
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==NORMAL){
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	7a5b      	ldrb	r3, [r3, #9]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f040 80c0 	bne.w	8000ee6 <GP_TIMx_start+0x196>
		GP_TIMx_Deint(TIMx);
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f8d0 	bl	8000f0c <GP_TIMx_Deint>

		g_GP_TIMX=TIMx;
 8000d6c:	4a61      	ldr	r2, [pc, #388]	; (8000ef4 <GP_TIMx_start+0x1a4>)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6013      	str	r3, [r2, #0]
		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d10c      	bne.n	8000d94 <GP_TIMx_start+0x44>
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	61d3      	str	r3, [r2, #28]
 8000d86:	4a5d      	ldr	r2, [pc, #372]	; (8000efc <GP_TIMx_start+0x1ac>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d92:	e024      	b.n	8000dde <GP_TIMx_start+0x8e>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4a5a      	ldr	r2, [pc, #360]	; (8000f00 <GP_TIMx_start+0x1b0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d10e      	bne.n	8000dba <GP_TIMx_start+0x6a>
 8000d9c:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	4a55      	ldr	r2, [pc, #340]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	61d3      	str	r3, [r2, #28]
 8000da8:	4b54      	ldr	r3, [pc, #336]	; (8000efc <GP_TIMx_start+0x1ac>)
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f103 0410 	add.w	r4, r3, #16
 8000db0:	4613      	mov	r3, r2
 8000db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000db8:	e011      	b.n	8000dde <GP_TIMx_start+0x8e>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <GP_TIMx_start+0x1b4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <GP_TIMx_start+0x8e>
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <GP_TIMx_start+0x1a8>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <GP_TIMx_start+0x1ac>)
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	f103 0420 	add.w	r4, r3, #32
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	885b      	ldrh	r3, [r3, #2]
 8000dec:	461a      	mov	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30

		if(Sitting->TIME_RCR)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	889b      	ldrh	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <GP_TIMx_start+0xbe>
			TIMx->CR1.BIT_NAME.ARPE=1;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6013      	str	r3, [r2, #0]

		//1.Select the mode CMS[1:0]
		switch(NORMAL_SITTING->NORMAL_MODE){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d01c      	beq.n	8000e50 <GP_TIMx_start+0x100>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	dc20      	bgt.n	8000e5c <GP_TIMx_start+0x10c>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <GP_TIMx_start+0xd4>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d00b      	beq.n	8000e3a <GP_TIMx_start+0xea>
 8000e22:	e01b      	b.n	8000e5c <GP_TIMx_start+0x10c>
		case Up:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	6813      	ldr	r3, [r2, #0]
 8000e28:	f36f 1346 	bfc	r3, #5, #2
 8000e2c:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	f36f 1304 	bfc	r3, #4, #1
 8000e36:	6013      	str	r3, [r2, #0]
			break;
 8000e38:	e013      	b.n	8000e62 <GP_TIMx_start+0x112>
		case DOWN:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	f36f 1346 	bfc	r3, #5, #2
 8000e42:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6013      	str	r3, [r2, #0]
			break;
 8000e4e:	e008      	b.n	8000e62 <GP_TIMx_start+0x112>
		case Up_Down:
			TIMx->CR1.BIT_NAME.CMS=0b11;
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e58:	6013      	str	r3, [r2, #0]
			/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
			break;
 8000e5a:	e002      	b.n	8000e62 <GP_TIMx_start+0x112>
		default:
			GP_ERROR_HANDLER();
 8000e5c:	f7ff fd8e 	bl	800097c <GP_ERROR_HANDLER>
			break;
 8000e60:	bf00      	nop
		}
		MCAL_SET_GP_TIMx_GPIO(TIMx,NORMAL,0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fd8c 	bl	8000984 <MCAL_SET_GP_TIMx_GPIO>
		TIMx->CR1.BIT_NAME.CEN=1;
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	7a1b      	ldrb	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d125      	bne.n	8000eca <GP_TIMx_start+0x17a>
			TIMx->DIER.BIT_NAME.UIE=1;
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	68d3      	ldr	r3, [r2, #12]
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	60d3      	str	r3, [r2, #12]
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e8e:	d106      	bne.n	8000e9e <GP_TIMx_start+0x14e>
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	6013      	str	r3, [r2, #0]
			TIMx->SR.BIT_NAME.UIF=0;
		}
	}else{
		GP_ERROR_HANDLER();
	}
}
 8000e9c:	e025      	b.n	8000eea <GP_TIMx_start+0x19a>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <GP_TIMx_start+0x1b0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <GP_TIMx_start+0x164>
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	e01a      	b.n	8000eea <GP_TIMx_start+0x19a>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <GP_TIMx_start+0x1b4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d116      	bne.n	8000eea <GP_TIMx_start+0x19a>
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <GP_TIMx_start+0x1b8>)
 8000ec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	e00f      	b.n	8000eea <GP_TIMx_start+0x19a>
			while(!TIMx->SR.BIT_NAME.UIF);
 8000eca:	bf00      	nop
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <GP_TIMx_start+0x17c>
			TIMx->SR.BIT_NAME.UIF=0;
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	6913      	ldr	r3, [r2, #16]
 8000ede:	f36f 0300 	bfc	r3, #0, #1
 8000ee2:	6113      	str	r3, [r2, #16]
}
 8000ee4:	e001      	b.n	8000eea <GP_TIMx_start+0x19a>
		GP_ERROR_HANDLER();
 8000ee6:	f7ff fd49 	bl	800097c <GP_ERROR_HANDLER>
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000a4 	.word	0x200000a4
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	20000074 	.word	0x20000074
 8000f00:	40000400 	.word	0x40000400
 8000f04:	40000800 	.word	0x40000800
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <GP_TIMx_Deint>:

void GP_TIMX_Clear(GP_TIMx_REG* TIMx){

	TIMx->CNT=0;
}
void GP_TIMx_Deint(GP_TIMx_REG* TIMx){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if(TIMx== TIM2)			{RCC->APB1ENR|=(1<<0);			}
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1a:	d106      	bne.n	8000f2a <GP_TIMx_Deint+0x1e>
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	4a3a      	ldr	r2, [pc, #232]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	61d3      	str	r3, [r2, #28]
 8000f28:	e014      	b.n	8000f54 <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM3)	{RCC->APB1ENR|=(1<<1);			}
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a38      	ldr	r2, [pc, #224]	; (8001010 <GP_TIMx_Deint+0x104>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <GP_TIMx_Deint+0x34>
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a35      	ldr	r2, [pc, #212]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	e009      	b.n	8000f54 <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM4)	{RCC->APB1ENR|=(1<<2);		}
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <GP_TIMx_Deint+0x108>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d105      	bne.n	8000f54 <GP_TIMx_Deint+0x48>
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <GP_TIMx_Deint+0x100>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	61d3      	str	r3, [r2, #28]

	TIMx->CR1.ALL_BITS=0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
	TIMx->ARR=0;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER.ALL_BITS=0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
	TIMx->CCMR1.ALL_BITS=0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
	TIMx->CCMR2.ALL_BITS=0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
	TIMx->CCR1=0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2=0;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3=0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4=0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CNT=0;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR2.ALL_BITS=0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
	TIMx->PSC=0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa2:	d10c      	bne.n	8000fbe <GP_TIMx_Deint+0xb2>
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <GP_TIMx_Deint+0x100>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6113      	str	r3, [r2, #16]
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	6113      	str	r3, [r2, #16]
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}
 8000fbc:	e020      	b.n	8001000 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <GP_TIMx_Deint+0x104>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10c      	bne.n	8000fe0 <GP_TIMx_Deint+0xd4>
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6113      	str	r3, [r2, #16]
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fd8:	f023 0302 	bic.w	r3, r3, #2
 8000fdc:	6113      	str	r3, [r2, #16]
}
 8000fde:	e00f      	b.n	8001000 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <GP_TIMx_Deint+0x108>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d10b      	bne.n	8001000 <GP_TIMx_Deint+0xf4>
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <GP_TIMx_Deint+0x100>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6113      	str	r3, [r2, #16]
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <GP_TIMx_Deint+0x100>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <GP_TIMx_Deint+0x100>)
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	6113      	str	r3, [r2, #16]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	40000400 	.word	0x40000400
 8001014:	40000800 	.word	0x40000800

08001018 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 800101e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	7813      	ldrb	r3, [r2, #0]
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8001038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103c:	6913      	ldr	r3, [r2, #16]
 800103e:	f36f 0300 	bfc	r3, #0, #1
 8001042:	6113      	str	r3, [r2, #16]
 8001044:	e04e      	b.n	80010e4 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8001046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	7813      	ldrb	r3, [r2, #0]
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8001060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001064:	6913      	ldr	r3, [r2, #16]
 8001066:	f36f 0341 	bfc	r3, #1, #1
 800106a:	6113      	str	r3, [r2, #16]
 800106c:	e03a      	b.n	80010e4 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 800106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7813      	ldrb	r3, [r2, #0]
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8001088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108c:	6913      	ldr	r3, [r2, #16]
 800108e:	f36f 0382 	bfc	r3, #2, #1
 8001092:	6113      	str	r3, [r2, #16]
 8001094:	e026      	b.n	80010e4 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8001096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	7813      	ldrb	r3, [r2, #0]
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 80010b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b4:	6913      	ldr	r3, [r2, #16]
 80010b6:	f36f 03c3 	bfc	r3, #3, #1
 80010ba:	6113      	str	r3, [r2, #16]
 80010bc:	e012      	b.n	80010e4 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 80010d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010dc:	6913      	ldr	r3, [r2, #16]
 80010de:	f36f 1304 	bfc	r3, #4, #1
 80010e2:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <TIM2_IRQHandler+0xdc>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	4798      	blx	r3

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000074 	.word	0x20000074

080010f8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	7813      	ldrb	r3, [r2, #0]
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001118:	6913      	ldr	r3, [r2, #16]
 800111a:	f36f 0300 	bfc	r3, #0, #1
 800111e:	6113      	str	r3, [r2, #16]
 8001120:	e046      	b.n	80011b0 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	7813      	ldrb	r3, [r2, #0]
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 800113c:	6913      	ldr	r3, [r2, #16]
 800113e:	f36f 0341 	bfc	r3, #1, #1
 8001142:	6113      	str	r3, [r2, #16]
 8001144:	e034      	b.n	80011b0 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	7813      	ldrb	r3, [r2, #0]
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001160:	6913      	ldr	r3, [r2, #16]
 8001162:	f36f 0382 	bfc	r3, #2, #1
 8001166:	6113      	str	r3, [r2, #16]
 8001168:	e022      	b.n	80011b0 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00a      	beq.n	800118e <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	7813      	ldrb	r3, [r2, #0]
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001184:	6913      	ldr	r3, [r2, #16]
 8001186:	f36f 03c3 	bfc	r3, #3, #1
 800118a:	6113      	str	r3, [r2, #16]
 800118c:	e010      	b.n	80011b0 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	7813      	ldrb	r3, [r2, #0]
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <TIM3_IRQHandler+0xc8>)
 80011a8:	6913      	ldr	r3, [r2, #16]
 80011aa:	f36f 1304 	bfc	r3, #4, #1
 80011ae:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <TIM3_IRQHandler+0xcc>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4798      	blx	r3


}void TIM4_IRQHandler(){
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40000400 	.word	0x40000400
 80011c4:	20000074 	.word	0x20000074

080011c8 <TIM4_IRQHandler>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <TIM4_IRQHandler+0xd4>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00a      	beq.n	80011f2 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	7813      	ldrb	r3, [r2, #0]
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 80011e6:	4a2d      	ldr	r2, [pc, #180]	; (800129c <TIM4_IRQHandler+0xd4>)
 80011e8:	6913      	ldr	r3, [r2, #16]
 80011ea:	f36f 0300 	bfc	r3, #0, #1
 80011ee:	6113      	str	r3, [r2, #16]
 80011f0:	e04b      	b.n	800128a <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <TIM4_IRQHandler+0xd4>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	7813      	ldrb	r3, [r2, #0]
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 800120a:	4a24      	ldr	r2, [pc, #144]	; (800129c <TIM4_IRQHandler+0xd4>)
 800120c:	6913      	ldr	r3, [r2, #16]
 800120e:	f36f 0341 	bfc	r3, #1, #1
 8001212:	6113      	str	r3, [r2, #16]
 8001214:	e039      	b.n	800128a <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <TIM4_IRQHandler+0xd4>)
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00f      	beq.n	8001244 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	7813      	ldrb	r3, [r2, #0]
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <TIM4_IRQHandler+0xd4>)
 8001230:	6913      	ldr	r3, [r2, #16]
 8001232:	f36f 0382 	bfc	r3, #2, #1
 8001236:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	7813      	ldrb	r3, [r2, #0]
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	7013      	strb	r3, [r2, #0]
 8001242:	e022      	b.n	800128a <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <TIM4_IRQHandler+0xd4>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00a      	beq.n	8001268 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	7813      	ldrb	r3, [r2, #0]
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <TIM4_IRQHandler+0xd4>)
 800125e:	6913      	ldr	r3, [r2, #16]
 8001260:	f36f 03c3 	bfc	r3, #3, #1
 8001264:	6113      	str	r3, [r2, #16]
 8001266:	e010      	b.n	800128a <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <TIM4_IRQHandler+0xd4>)
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	7813      	ldrb	r3, [r2, #0]
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <TIM4_IRQHandler+0xd4>)
 8001282:	6913      	ldr	r3, [r2, #16]
 8001284:	f36f 1304 	bfc	r3, #4, #1
 8001288:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <TIM4_IRQHandler+0xd8>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4798      	blx	r3


}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40000800 	.word	0x40000800
 80012a0:	20000074 	.word	0x20000074

080012a4 <_delay_us>:


void _delay_us(GP_TIMx_REG* TIMx ,uint16_t delay){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
	uint16_t PRE_scal=(F_CPU/1000000UL);
 80012b0:	2308      	movs	r3, #8
 80012b2:	83fb      	strh	r3, [r7, #30]
	if(PRE_scal!=1) PRE_scal--; //The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
 80012b4:	8bfb      	ldrh	r3, [r7, #30]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d002      	beq.n	80012c0 <_delay_us+0x1c>
 80012ba:	8bfb      	ldrh	r3, [r7, #30]
 80012bc:	3b01      	subs	r3, #1
 80012be:	83fb      	strh	r3, [r7, #30]
	GP_TIMERx_config l_t_delay={PRE_scal,delay,0,0,INT_DIS,NORMAL,NULL};
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	81bb      	strh	r3, [r7, #12]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	81fb      	strh	r3, [r7, #14]
 80012c8:	2300      	movs	r3, #0
 80012ca:	823b      	strh	r3, [r7, #16]
 80012cc:	2300      	movs	r3, #0
 80012ce:	827b      	strh	r3, [r7, #18]
 80012d0:	2301      	movs	r3, #1
 80012d2:	753b      	strb	r3, [r7, #20]
 80012d4:	2300      	movs	r3, #0
 80012d6:	757b      	strb	r3, [r7, #21]
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
	GP_TIMERx_NORMAL_config NORMAL_SIT={Up};
 80012dc:	2300      	movs	r3, #0
 80012de:	723b      	strb	r3, [r7, #8]
	GP_TIMx_start(TIMx,&l_t_delay,&NORMAL_SIT);
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd30 	bl	8000d50 <GP_TIMx_start>

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_delay_ms>:


void _delay_ms(GP_TIMx_REG* TIMx ,uint16_t delay){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e007      	b.n	800131a <_delay_ms+0x22>
		_delay_us(TIMx,1000);
 800130a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffc8 	bl	80012a4 <_delay_us>
	for(uint32_t i=0;i<delay;i++)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3f3      	bcc.n	800130a <_delay_ms+0x12>
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_delay_s>:
void _delay_s(GP_TIMx_REG* TIMx ,uint16_t delay){
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
	for(uint32_t i=0;i<delay;i++)
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e007      	b.n	800134e <_delay_s+0x22>
		_delay_ms(TIMx,1000);
 800133e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffd8 	bl	80012f8 <_delay_ms>
	for(uint32_t i=0;i<delay;i++)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3f3      	bcc.n	800133e <_delay_s+0x12>
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MCAL_GET_SYS_CLCK+0x34>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d00a      	beq.n	8001388 <MCAL_GET_SYS_CLCK+0x28>
 8001372:	2b02      	cmp	r3, #2
 8001374:	d80a      	bhi.n	800138c <MCAL_GET_SYS_CLCK+0x2c>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <MCAL_GET_SYS_CLCK+0x20>
 800137a:	2b01      	cmp	r3, #1
 800137c:	d002      	beq.n	8001384 <MCAL_GET_SYS_CLCK+0x24>
 800137e:	e005      	b.n	800138c <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <MCAL_GET_SYS_CLCK+0x38>)
 8001382:	e003      	b.n	800138c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <MCAL_GET_SYS_CLCK+0x3c>)
 8001386:	e001      	b.n	800138c <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <MCAL_GET_SYS_CLCK+0x3c>)
 800138a:	e7ff      	b.n	800138c <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	007a1200 	.word	0x007a1200
 800139c:	00f42400 	.word	0x00f42400

080013a0 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 80013a4:	f7ff ffdc 	bl	8001360 <MCAL_GET_SYS_CLCK>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <MCAL_GET_H_CLCK+0x20>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4903      	ldr	r1, [pc, #12]	; (80013c4 <MCAL_GET_H_CLCK+0x24>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000000 	.word	0x20000000

080013c8 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 80013cc:	f7ff ffe8 	bl	80013a0 <MCAL_GET_H_CLCK>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <MCAL_GET_PCLCK1+0x20>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <MCAL_GET_PCLCK1+0x24>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3

}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	20000000 	.word	0x20000000

080013f0 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 80013f4:	f7ff ffd4 	bl	80013a0 <MCAL_GET_H_CLCK>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <MCAL_GET_PCLCK2+0x20>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0adb      	lsrs	r3, r3, #11
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4903      	ldr	r1, [pc, #12]	; (8001414 <MCAL_GET_PCLCK2+0x24>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3

}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	20000000 	.word	0x20000000

08001418 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4905      	ldr	r1, [pc, #20]	; (8001438 <SPI1_IRQHandler+0x20>)
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f80c 	bl	8001440 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SPI1_IRQHandler+0x24>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	7938      	ldrb	r0, [r7, #4]
 800142e:	4798      	blx	r3
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40013000 	.word	0x40013000
 800143c:	200000a8 	.word	0x200000a8

08001440 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00f      	beq.n	8001478 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	7813      	ldrb	r3, [r2, #0]
 800145c:	f36f 0300 	bfc	r3, #0, #1
 8001460:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	7813      	ldrb	r3, [r2, #0]
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	7913      	ldrb	r3, [r2, #4]
 8001470:	f36f 1386 	bfc	r3, #6, #1
 8001474:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8001476:	e015      	b.n	80014a4 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00e      	beq.n	80014a4 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	7813      	ldrb	r3, [r2, #0]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	7813      	ldrb	r3, [r2, #0]
 8001494:	f36f 0341 	bfc	r3, #1, #1
 8001498:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	7913      	ldrb	r3, [r2, #4]
 800149e:	f36f 13c7 	bfc	r3, #7, #1
 80014a2:	7113      	strb	r3, [r2, #4]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <ERROR_HANDLER>:


#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;
void ERROR_HANDLER(){
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
	while(1);
 80014b2:	e7fe      	b.n	80014b2 <ERROR_HANDLER+0x4>

080014b4 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <TIM1_UP_IRQHandler+0x1c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <TIM1_UP_IRQHandler+0x20>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	6913      	ldr	r3, [r2, #16]
 80014c4:	f36f 0300 	bfc	r3, #0, #1
 80014c8:	6113      	str	r3, [r2, #16]

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000c8 	.word	0x200000c8
 80014d4:	200000d8 	.word	0x200000d8

080014d8 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <TIM1_CC_IRQHandler+0x1c>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <TIM1_CC_IRQHandler+0x20>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	6913      	ldr	r3, [r2, #16]
 80014e8:	f36f 0341 	bfc	r3, #1, #1
 80014ec:	6113      	str	r3, [r2, #16]

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000c8 	.word	0x200000c8
 80014f8:	200000d8 	.word	0x200000d8

080014fc <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <TIM1_BRK_IRQHandler+0x1c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <TIM1_BRK_IRQHandler+0x20>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	6913      	ldr	r3, [r2, #16]
 800150c:	f36f 0300 	bfc	r3, #0, #1
 8001510:	6113      	str	r3, [r2, #16]

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000c8 	.word	0x200000c8
 800151c:	200000d8 	.word	0x200000d8

08001520 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <TIM1_TRG_COM_IRQHandler+0x1c>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <TIM1_TRG_COM_IRQHandler+0x20>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	6913      	ldr	r3, [r2, #16]
 8001530:	f36f 0300 	bfc	r3, #0, #1
 8001534:	6113      	str	r3, [r2, #16]

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000c8 	.word	0x200000c8
 8001540:	200000d8 	.word	0x200000d8

08001544 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <MCAL_USART_init+0x244>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10c      	bne.n	8001570 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8001556:	4a8d      	ldr	r2, [pc, #564]	; (800178c <MCAL_USART_init+0x248>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4614      	mov	r4, r2
 800155c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8001562:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <MCAL_USART_init+0x24c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <MCAL_USART_init+0x24c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	e024      	b.n	80015ba <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a88      	ldr	r2, [pc, #544]	; (8001794 <MCAL_USART_init+0x250>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d10e      	bne.n	8001596 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8001578:	4b84      	ldr	r3, [pc, #528]	; (800178c <MCAL_USART_init+0x248>)
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	f103 0410 	add.w	r4, r3, #16
 8001580:	4613      	mov	r3, r2
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <MCAL_USART_init+0x24c>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a80      	ldr	r2, [pc, #512]	; (8001790 <MCAL_USART_init+0x24c>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	61d3      	str	r3, [r2, #28]
 8001594:	e011      	b.n	80015ba <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a7f      	ldr	r2, [pc, #508]	; (8001798 <MCAL_USART_init+0x254>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10d      	bne.n	80015ba <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 800159e:	4b7b      	ldr	r3, [pc, #492]	; (800178c <MCAL_USART_init+0x248>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	f103 0420 	add.w	r4, r3, #32
 80015a6:	4613      	mov	r3, r2
 80015a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <MCAL_USART_init+0x24c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a77      	ldr	r2, [pc, #476]	; (8001790 <MCAL_USART_init+0x24c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	7912      	ldrb	r2, [r2, #4]
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	79d2      	ldrb	r2, [r2, #7]
 80015de:	0312      	lsls	r2, r2, #12
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	7a5b      	ldrb	r3, [r3, #9]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10b      	bne.n	8001606 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f043 0208 	orr.w	r2, r3, #8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f043 0204 	orr.w	r2, r3, #4
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	7a1b      	ldrb	r3, [r3, #8]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d826      	bhi.n	800165c <MCAL_USART_init+0x118>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <MCAL_USART_init+0xd0>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001625 	.word	0x08001625
 8001618:	08001633 	.word	0x08001633
 800161c:	08001641 	.word	0x08001641
 8001620:	0800164f 	.word	0x0800164f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
		break;
 8001630:	e014      	b.n	800165c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	615a      	str	r2, [r3, #20]
		break;
 800163e:	e00d      	b.n	800165c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	615a      	str	r2, [r3, #20]
		break;
 800164c:	e006      	b.n	800165c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	615a      	str	r2, [r3, #20]
		break;
 800165a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	7952      	ldrb	r2, [r2, #5]
 8001664:	0252      	lsls	r2, r2, #9
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	799b      	ldrb	r3, [r3, #6]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d125      	bne.n	80016c0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a44      	ldr	r2, [pc, #272]	; (8001788 <MCAL_USART_init+0x244>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d106      	bne.n	800168a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <MCAL_USART_init+0x258>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <MCAL_USART_init+0x258>)
 8001682:	f043 0320 	orr.w	r3, r3, #32
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e014      	b.n	80016b4 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <MCAL_USART_init+0x250>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d106      	bne.n	80016a0 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <MCAL_USART_init+0x258>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a41      	ldr	r2, [pc, #260]	; (800179c <MCAL_USART_init+0x258>)
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e009      	b.n	80016b4 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <MCAL_USART_init+0x254>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d105      	bne.n	80016b4 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <MCAL_USART_init+0x258>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a3b      	ldr	r2, [pc, #236]	; (800179c <MCAL_USART_init+0x258>)
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f043 0220 	orr.w	r2, r3, #32
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <MCAL_USART_init+0x244>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d12d      	bne.n	8001724 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80016c8:	f7ff fe92 	bl	80013f0 <MCAL_GET_PCLCK2>
 80016cc:	4602      	mov	r2, r0
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	011c      	lsls	r4, r3, #4
 80016da:	f7ff fe89 	bl	80013f0 <MCAL_GET_PCLCK2>
 80016de:	4602      	mov	r2, r0
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009a      	lsls	r2, r3, #2
 80016e8:	441a      	add	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80016f4:	f7ff fe7c 	bl	80013f0 <MCAL_GET_PCLCK2>
 80016f8:	4602      	mov	r2, r0
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	2264      	movs	r2, #100	; 0x64
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	1aeb      	subs	r3, r5, r3
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <MCAL_USART_init+0x25c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	ea44 0203 	orr.w	r2, r4, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	e070      	b.n	8001806 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <MCAL_USART_init+0x250>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d13b      	bne.n	80017a4 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800172c:	f7ff fe4c 	bl	80013c8 <MCAL_GET_PCLCK1>
 8001730:	4602      	mov	r2, r0
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	fbb2 f3f3 	udiv	r3, r2, r3
 800173c:	011c      	lsls	r4, r3, #4
 800173e:	f7ff fe43 	bl	80013c8 <MCAL_GET_PCLCK1>
 8001742:	4602      	mov	r2, r0
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	441a      	add	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fbb2 f5f3 	udiv	r5, r2, r3
 8001758:	f7ff fe36 	bl	80013c8 <MCAL_GET_PCLCK1>
 800175c:	4602      	mov	r2, r0
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	2264      	movs	r2, #100	; 0x64
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	1aeb      	subs	r3, r5, r3
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <MCAL_USART_init+0x25c>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	ea44 0203 	orr.w	r2, r4, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	e03e      	b.n	8001806 <MCAL_USART_init+0x2c2>
 8001788:	40013800 	.word	0x40013800
 800178c:	200000dc 	.word	0x200000dc
 8001790:	40021000 	.word	0x40021000
 8001794:	40004400 	.word	0x40004400
 8001798:	40004800 	.word	0x40004800
 800179c:	e000e104 	.word	0xe000e104
 80017a0:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <MCAL_USART_init+0x2d0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d12c      	bne.n	8001806 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80017ac:	f7ff fe0c 	bl	80013c8 <MCAL_GET_PCLCK1>
 80017b0:	4602      	mov	r2, r0
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	011c      	lsls	r4, r3, #4
 80017be:	f7ff fe03 	bl	80013c8 <MCAL_GET_PCLCK1>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009a      	lsls	r2, r3, #2
 80017cc:	441a      	add	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80017d8:	f7ff fdf6 	bl	80013c8 <MCAL_GET_PCLCK1>
 80017dc:	4602      	mov	r2, r0
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	2264      	movs	r2, #100	; 0x64
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	1aeb      	subs	r3, r5, r3
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <MCAL_USART_init+0x2d4>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	ea44 0203 	orr.w	r2, r4, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f892 	bl	8001930 <SET_GPIO>
	}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bdb0      	pop	{r4, r5, r7, pc}
 8001814:	40004800 	.word	0x40004800
 8001818:	51eb851f 	.word	0x51eb851f

0800181c <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <MCAL_USART_SendData+0x68>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d102      	bne.n	800183a <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MCAL_USART_SendData+0x6c>)
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e00c      	b.n	8001854 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <MCAL_USART_SendData+0x70>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d102      	bne.n	8001848 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MCAL_USART_SendData+0x74>)
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e005      	b.n	8001854 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MCAL_USART_SendData+0x78>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MCAL_USART_SendData+0x7c>)
 8001852:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8001854:	bf00      	nop
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f9      	beq.n	8001856 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d103      	bne.n	8001872 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8001870:	e002      	b.n	8001878 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40013800 	.word	0x40013800
 8001888:	200000dc 	.word	0x200000dc
 800188c:	40004400 	.word	0x40004400
 8001890:	200000ec 	.word	0x200000ec
 8001894:	40004800 	.word	0x40004800
 8001898:	200000fc 	.word	0x200000fc

0800189c <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <MCAL_USART_ReciveData+0x7c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d102      	bne.n	80018b6 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MCAL_USART_ReciveData+0x80>)
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e00c      	b.n	80018d0 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <MCAL_USART_ReciveData+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d102      	bne.n	80018c4 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MCAL_USART_ReciveData+0x88>)
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e005      	b.n	80018d0 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <MCAL_USART_ReciveData+0x8c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MCAL_USART_ReciveData+0x90>)
 80018ce:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 80018d8:	bf00      	nop
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f9      	beq.n	80018da <MCAL_USART_ReciveData+0x3e>
 80018e6:	e002      	b.n	80018ee <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	799b      	ldrb	r3, [r3, #6]
 80018ec:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	795b      	ldrb	r3, [r3, #5]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d104      	bne.n	8001900 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	e006      	b.n	800190e <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190c:	b29b      	uxth	r3, r3

		}

}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40013800 	.word	0x40013800
 800191c:	200000dc 	.word	0x200000dc
 8001920:	40004400 	.word	0x40004400
 8001924:	200000ec 	.word	0x200000ec
 8001928:	40004800 	.word	0x40004800
 800192c:	200000fc 	.word	0x200000fc

08001930 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <SET_GPIO+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <SET_GPIO+0xc0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d115      	bne.n	8001972 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <SET_GPIO+0xc4>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <SET_GPIO+0xc4>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4827      	ldr	r0, [pc, #156]	; (80019f8 <SET_GPIO+0xc8>)
 800195a:	f7fe ff25 	bl	80007a8 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <SET_GPIO+0xcc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <SET_GPIO+0xc8>)
 800196c:	f7fe ff1c 	bl	80007a8 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8001970:	e038      	b.n	80019e4 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <SET_GPIO+0xd0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d118      	bne.n	80019ac <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <SET_GPIO+0xc4>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <SET_GPIO+0xc4>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <SET_GPIO+0xd4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <SET_GPIO+0xc8>)
 8001994:	f7fe ff08 	bl	80007a8 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <SET_GPIO+0xd8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <SET_GPIO+0xc8>)
 80019a6:	f7fe feff 	bl	80007a8 <MCAL_GPIO_init>
}
 80019aa:	e01b      	b.n	80019e4 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <SET_GPIO+0xdc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d117      	bne.n	80019e4 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <SET_GPIO+0xc4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <SET_GPIO+0xc4>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <SET_GPIO+0xe0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4811      	ldr	r0, [pc, #68]	; (8001a14 <SET_GPIO+0xe4>)
 80019ce:	f7fe feeb 	bl	80007a8 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <SET_GPIO+0xe8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <SET_GPIO+0xe4>)
 80019e0:	f7fe fee2 	bl	80007a8 <MCAL_GPIO_init>
}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08001bec 	.word	0x08001bec
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	08001bf0 	.word	0x08001bf0
 8001a00:	40004400 	.word	0x40004400
 8001a04:	08001bf4 	.word	0x08001bf4
 8001a08:	08001bf8 	.word	0x08001bf8
 8001a0c:	40004800 	.word	0x40004800
 8001a10:	08001bfc 	.word	0x08001bfc
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	08001c00 	.word	0x08001c00

08001a1c <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <USART1_IRQHandler+0x10>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4798      	blx	r3
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200000dc 	.word	0x200000dc

08001a30 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <USART2_IRQHandler+0x10>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000dc 	.word	0x200000dc

08001a44 <USART3_IRQHandler>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <USART3_IRQHandler+0x10>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	4798      	blx	r3
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200000dc 	.word	0x200000dc

08001a58 <main>:
extern uint16_t LUNA_dis;
extern uint16_t LUNA_AMP;
extern uint16_t LUNA_TEMP;
extern uint8_t LUNA_CheckSum;
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7fe fc50 	bl	8000304 <LUNA_INIT>
    /* Loop forever */
	for(;;){
		MCAL_USART_SendData(LUNA_UART_INSTANT, (uint8_t)LUNA_dis);
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <main+0x80>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481b      	ldr	r0, [pc, #108]	; (8001adc <main+0x84>)
 8001a6e:	f7ff fed5 	bl	800181c <MCAL_USART_SendData>
		MCAL_USART_SendData(LUNA_UART_INSTANT, (LUNA_dis>>8));
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <main+0x80>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4817      	ldr	r0, [pc, #92]	; (8001adc <main+0x84>)
 8001a7e:	f7ff fecd 	bl	800181c <MCAL_USART_SendData>

		MCAL_USART_SendData(LUNA_UART_INSTANT, (uint8_t)LUNA_AMP);
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <main+0x88>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <main+0x84>)
 8001a8c:	f7ff fec6 	bl	800181c <MCAL_USART_SendData>
		MCAL_USART_SendData(LUNA_UART_INSTANT, (LUNA_AMP>>8));
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <main+0x88>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4810      	ldr	r0, [pc, #64]	; (8001adc <main+0x84>)
 8001a9c:	f7ff febe 	bl	800181c <MCAL_USART_SendData>

		MCAL_USART_SendData(LUNA_UART_INSTANT, (uint8_t)LUNA_TEMP);
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <main+0x8c>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <main+0x84>)
 8001aaa:	f7ff feb7 	bl	800181c <MCAL_USART_SendData>
		MCAL_USART_SendData(LUNA_UART_INSTANT, (LUNA_TEMP>>8));
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <main+0x8c>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <main+0x84>)
 8001aba:	f7ff feaf 	bl	800181c <MCAL_USART_SendData>


		MCAL_USART_SendData(LUNA_UART_INSTANT, LUNA_CheckSum);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <main+0x90>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <main+0x84>)
 8001ac6:	f7ff fea9 	bl	800181c <MCAL_USART_SendData>

		_delay_s(TIM2, 1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ad0:	f7ff fc2c 	bl	800132c <_delay_s>
	for(;;){
 8001ad4:	e7c6      	b.n	8001a64 <main+0xc>
 8001ad6:	bf00      	nop
 8001ad8:	20000030 	.word	0x20000030
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	20000032 	.word	0x20000032
 8001ae4:	20000034 	.word	0x20000034
 8001ae8:	20000036 	.word	0x20000036

08001aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b1a:	f000 f811 	bl	8001b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1e:	f7ff ff9b 	bl	8001a58 <main>

08001b22 <LoopForever>:

LoopForever:
  b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   r0, =_estack
 8001b24:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b30:	08001c0c 	.word	0x08001c0c
  ldr r2, =_sbss
 8001b34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b38:	2000010c 	.word	0x2000010c

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>
	...

08001b40 <__libc_init_array>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	2600      	movs	r6, #0
 8001b44:	4d0c      	ldr	r5, [pc, #48]	; (8001b78 <__libc_init_array+0x38>)
 8001b46:	4c0d      	ldr	r4, [pc, #52]	; (8001b7c <__libc_init_array+0x3c>)
 8001b48:	1b64      	subs	r4, r4, r5
 8001b4a:	10a4      	asrs	r4, r4, #2
 8001b4c:	42a6      	cmp	r6, r4
 8001b4e:	d109      	bne.n	8001b64 <__libc_init_array+0x24>
 8001b50:	f000 f81a 	bl	8001b88 <_init>
 8001b54:	2600      	movs	r6, #0
 8001b56:	4d0a      	ldr	r5, [pc, #40]	; (8001b80 <__libc_init_array+0x40>)
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <__libc_init_array+0x44>)
 8001b5a:	1b64      	subs	r4, r4, r5
 8001b5c:	10a4      	asrs	r4, r4, #2
 8001b5e:	42a6      	cmp	r6, r4
 8001b60:	d105      	bne.n	8001b6e <__libc_init_array+0x2e>
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
 8001b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b68:	4798      	blx	r3
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	e7ee      	b.n	8001b4c <__libc_init_array+0xc>
 8001b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b72:	4798      	blx	r3
 8001b74:	3601      	adds	r6, #1
 8001b76:	e7f2      	b.n	8001b5e <__libc_init_array+0x1e>
 8001b78:	08001c04 	.word	0x08001c04
 8001b7c:	08001c04 	.word	0x08001c04
 8001b80:	08001c04 	.word	0x08001c04
 8001b84:	08001c08 	.word	0x08001c08

08001b88 <_init>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr

08001b94 <_fini>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr
